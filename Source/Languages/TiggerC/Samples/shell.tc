//#define APPLE_I
#define EXPERIMENTAL
#define ZEROPAGEGLOBALS
#include "../system"
#include "../file"

func ls() {
    // Simulate listing files
    puts("file1.txt\nfile2.txt\ndir1\n"); // TODO
}

func mkDir(char[] name) {
    if (0 != mkdir(name))
    {
        puts(" ??");
    }
}

func cd(char[] name) {
    if (0 != chdir(name))
    {
        puts(" ??");
    }
}

func cat(char[] name, bool writeMode) {
    byte[10240] buffer;
    word i;
    int  result;
    byte[] fh;
    char c;
    byte b;
    
    if (writeMode) {
        // Simulate writing to a file
        while (true) {
            c = getc();
            b = c as byte;
#ifdef APPLE_I
            b = b & 0x7F;
            c = b as char;
#endif            
            if (b == 0x1A) { break; } // <ctrl><Z>
            buffer[i++] = b;
            putc(c);
        }
        fh = fopen(name, "w");
        if (fh == null)
        {
            result = -1;
        }
        else
        {
            buffer[i-1] = 0;
            if (0 == fwrite(buffer, 1, i, fh))
            {
                result = -1;
            }
        }
    } else {
        fh = fopen(name, "r");
        if (fh == null)
        {
            result = -1;
        }
        else
        {
            i = fread(buffer, 1, 10240-1, fh);
            if (i != 0)
            {
                buffer[i] = 0;
                puts(buffer as char[]);
            }
        }
    }
    if (result != -1)
    {
        fclose(fh);    
    }
    else
    {
        puts(" ??");
    }
}

func main() {
    char[100] cmd;      // Buffer for command input
    char[50]  filename; // Buffer for filename
    char[256]  cwd;
    word index;
    char c;
    byte b;
    puts("\n\n");
    
    chdir("/"); // initialize

    while (true) {
        index = 0;
        // newline
        getcwd(cwd, 256);
        putc('\n');
        puts(cwd);
        puts(" $ ");
        while (true) {
            c = getc();
            b = c as byte;
#ifdef APPLE_I
            b = b & 0x7F;
            c = b as char;
            c = tolower(c);
#endif
            if (b == 0x0A) { 
                cmd[index] = '\0';  // Null-terminate the command
                break; 
            } else if (b == 0x1A) {
                // <ctrl><Z>
                puts("\nExited\n");
                return;
            } else if (b == 0x08) {
                // backspace
                index--;
                putc(c);
                putc(' ');
                putc(c);
            } 
            else
            {
                cmd[index++] = c;
                putc(c);
            }
        }

        if (strcmp(cmd, "ls") == 0) {
            ls();
            continue;
        } else if (strncmp(cmd, "mkdir ", 6) == 0) {
            strcpy(filename, cmd + 6);
            mkDir(filename);
            continue;
        } else if (strncmp(cmd, "cd ", 3) == 0) { // TODO "cd .." to root?
            strcpy(filename, cmd + 3);
            cd(filename);
            continue;
        } else if (strncmp(cmd, "cat ", 4) == 0) {
            char[] space = strchr(cmd, ' ');
            if (space != null) {
                strcpy(filename, space + 1);
                if (strchr(filename, '>') != null) {
                    cat(filename + 2, true);
                    continue;
                } else {
                    cat(filename, false);
                    continue;
                }
            }
        } else if (strlen(cmd) == 0)
        {
            continue; // empty command
        }
        puts(" ??");
    }
}

