#define APPLE_I // rather than the default ACIA_6850 for E6502
#define EXPERIMENTAL
#include "../system.tc"

// Helper function to print test results
func printSwitchResult(const char[] operation, byte value, const char[] result, const char[] expected) {
    writeString(operation);
    writeString(": Value: ");
    writeWord(value as word);
    writeString(", Result: ");
    writeString(result);
    writeString(", Expected: ");
    writeString(expected);
    if (strcmp(result, expected) == 0) {
        writeString(" - PASS\n");
    } else {
        writeString(" - FAIL\n");
    }
}

func main() {
    byte b;
    bool boolVal;
    char c;
    char[50] result;

    // Test case for byte switch
    b = 1;
    switch (b) {
        case 0: {
            strcpy(result, "Byte case 0");
        }
        case 1: {
            strcpy(result, "Byte case 1");
        }
        default: {
            strcpy(result, "Byte default");
        }
    }
    printSwitchResult("Byte switch", b, result, "Byte case 1");

    // Test case for byte switch (default case)
    b = 2;
    switch (b) {
        case 0: {
            strcpy(result, "Byte case 0");
        }
        case 1: {
            strcpy(result, "Byte case 1");
        }
        default: {
            strcpy(result, "Byte default");
        }
    }
    printSwitchResult("Byte switch", b, result, "Byte default");

    // Test case for bool switch
    boolVal = true;
    switch (boolVal) {
        case false: {
            strcpy(result, "Bool case false");
        }
        case true: {
            strcpy(result, "Bool case true");
        }
        default: {
            strcpy(result, "Bool default");
        }
    }
    printSwitchResult("Bool switch", boolVal as byte, result, "Bool case true");

    // Test case for bool switch (false case)
    boolVal = false;
    switch (boolVal) {
        case false: {
            strcpy(result, "Bool case false");
        }
        case true: {
            strcpy(result, "Bool case true");
        }
        default: {
            strcpy(result, "Bool default");
        }
    }
    printSwitchResult("Bool switch", boolVal as byte, result, "Bool case false");

    // Test case for char switch
    c = 'A';
    switch (c) {
        case 'A': {
            strcpy(result, "Char case A");
        }
        case 'B': {
            strcpy(result, "Char case B");
        }
        default: {
            strcpy(result, "Char default");
        }
    }
    printSwitchResult("Char switch", c as byte, result, "Char case A");

    // Test case for char switch (default case)
    c = 'C';
    switch (c) {
        case 'A': {
            strcpy(result, "Char case A");
        }
        case 'B': {
            strcpy(result, "Char case B");
        }
        default: {
            strcpy(result, "Char default");
        }
    }
    printSwitchResult("Char switch", c as byte, result, "Char default");
}

