#define EXPERIMENTAL
#define ZEROPAGEGLOBALS
#include "../system.tc"
#include "../file.tc"

// Dumps the contents of the ChainLists block.
func dumpChainLists() {
    byte[PageSize] buffer;
    writeString("ChainLists Block:\n");
    readBlock(ChainBlock, buffer);
    printHex(buffer, PageSize);
}

// Dumps the contents of the root directory block.
func dumpRootDirectory() {
    byte[PageSize] buffer;
    writeString("Root Directory Block:\n");
    readBlock(RootDirStartBlock, buffer);
    printHex(buffer, PageSize);
}

// Dumps the contents of a specified directory block.
func dumpDirectoryBlock(byte block) {
    byte[PageSize] buffer;
    writeString("Directory Block (");
    writeHex(block);
    writeString("):\n");
    readBlock(block, buffer);
    printHex(buffer, PageSize);
}

// Creates a file and dumps relevant information.
func createAndVerifyFile(const char[] filename) {
    byte[] fileHandle = fopen(filename, "w");
    if (fileHandle != null) {
        writeString("Created file '");
        writeString(filename);
        writeString("'.\n");
    } else {
        writeString("Failed to create file '");
        writeString(filename);
        writeString("'.\n");
    }
    if (fileHandle != null) {
        if (fclose(fileHandle) == 0) {
            writeString("Closed file '");
            writeString(filename);
            writeString("'.\n");
        } else {
            writeString("Failed to close file '");
            writeString(filename);
            writeString("'.\n");
        }
    }
    dumpRootDirectory();
    dumpChainLists();
}

// Opens a file and dumps relevant information.
func openAndVerifyFile(const char[] filename) {
    byte[] fileHandle = fopen(filename, "r");
    if (fileHandle != null) {
        writeString("Opened file '");
        writeString(filename);
        writeString("'.\n");
    } else {
        writeString("Failed to open file '");
        writeString(filename);
        writeString("'.\n");
    }
    if (fileHandle != null) {
        if (fclose(fileHandle) == 0) {
            writeString("Closed file '");
            writeString(filename);
            writeString("'.\n");
        } else {
            writeString("Failed to close file '");
            writeString(filename);
            writeString("'.\n");
        }
    }
    dumpRootDirectory();
    dumpChainLists();
}

func main() {
    writeString("\nScanning:\n");
    if (i2cScan(SerialEEPROMAddress)) {
        writeString("EEPROM Found\n");
    } else {
        writeString("EEPROM Not Found\n");
        return;
    }
    chdir("/");
    
    if (format() != 0) {
        writeString("Format failed.\n");
        return;
    }
    writeString("Format succeeded.\n");
    
    // FAT, ChainLists, and Root Directory blocks
    dumpChainLists();
    dumpRootDirectory();
    
    // Create and verify files
    createAndVerifyFile("/file1");
    createAndVerifyFile("/file2");
    
    // Open and verify files
    openAndVerifyFile("/file1");
    openAndVerifyFile("/file2");
}

