#define EXPERIMENTAL
#define ZEROPAGEGLOBALS
#include "../system.tc"
#include "../file.tc"

// Dumps the contents of the FAT blocks.
func dumpFAT() {
    byte[PageSize] buffer;
    writeString("FAT Blocks:\n");
    for (byte i = FATStartBlock; i < FATStartBlock + FATBlocks; i++) {
        readBlock(i, buffer);
        printHex(buffer, PageSize);
    }
}

// Dumps the contents of the root directory block.
func dumpRootDirectory() {
    byte[PageSize] buffer;
    writeString("Root Directory Block:\n");
    readBlock(RootDirStartBlock, buffer);
    printHex(buffer, PageSize);
}

func main() {
    writeString("\nScanning:\n");
    if (i2cScan(SerialEEPROMAddress)) {
        writeString("EEPROM Found\n");
    } else {
        writeString("EEPROM Not Found\n");
        return;
    }
    
    if (format() != 0) {
        writeString("Format failed.\n");
        return;
    }
    writeString("Format succeeded.\n");
    
    // Dump FAT and Root Directory blocks
    dumpFAT();
    dumpRootDirectory();
    
    byte[] rootDir = opendir("/");
    if (rootDir == null) {
        writeString("Failed to open root directory.\n");
        return;
    }
    writeString("Opened root directory.\n");
    
    // Create a new directory
    if (mkdir("newdir") == 0) {
        writeString("Created directory 'newdir'.\n");
    } else {
        writeString("Failed to create directory 'newdir'.\n");
    }

    // Dump Root Directory blocks again
    dumpRootDirectory();
    
    byte[] entry;
    while ((entry = readdir(rootDir)) != null) {
        writeString("Entry: ");
        writeString((entry + FilenameOffset) as char[]);
        writeString("\n");
    }
    writeString("No more entries in root directory.\n");
    
    if (closedir(rootDir) != 0) {
        writeString("Failed to close root directory.\n");
        return;
    }
    writeString("Closed root directory.\n");
}

