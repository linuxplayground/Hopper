// Tigger C File API Prototypes
#include "system.tc"
#include "string.tc"
#include "i2c.tc"
/*
File System Structure:
-----------------------
1. ChainLists:
   - Contains chains of blocks for files and directories that span multiple blocks.
   - Located at page 0.
2. Root Directory:
   - The starting point of the file system, storing the root directory entries.
   - Located at page 1.
Descriptor Record Structure (within Directory Pages):
-----------------------------------------------------
- Filename:           Offset 0, 12 bytes (null-terminated if shorter)
- File Type:          Offset 12, 1 byte (high nibble: type, low nibble: name length)
                      - 0x00: File
                      - 0x10: Directory
- Start Block:        Offset 13, 1 byte (block number where the file/directory starts, 1 if empty or end of chain)
- File Size:          Offset 14, 2 bytes (size of the file in bytes)
File Handle Structure (byte array):
-----------------------------------
   [0] - Directory block number (byte)
   [1] - File descriptor index (0 to 15) (byte)
   [2] - Current position LSB in file (byte)
   [3] - Current position MSB in file (byte)
   Total: 4 bytes
Directory Handle Structure (byte array):
----------------------------------------
   [0] - Directory descriptor index (byte)
   [1] - Current position in directory (byte)
   Total: 2 bytes
Directory Entry Structure (byte array):
---------------------------------------
   [0] - Entry type (0 for file, 1 for directory) (byte)
   [1-12] - Entry name (up to 12 bytes, null-terminated if shorter)
   Total: 13 bytes
*/
const word PageSize   = 256;
const word TotalPages = 256;
const byte ChainBlock = 0;
const byte RootDirStartBlock = 1;
const byte FileTypeDirectory = 0x10;
const byte FileTypeFile = 0x00;
const byte FilenameOffset = 0;
const byte FileTypeOffset = 12;
const byte StartBlockOffset = 13;
const byte FileSizeOffset = 14;
const byte DescriptorSize = 16;
const byte DescriptorsPerBlock = PageSize / DescriptorSize;
byte[DescriptorSize] _dirEntry; // global used by readdir
char[256]            _currentDirectory;
// prototypes
func int closedir(byte[] dirHandle);
func byte[] opendir(const char[] dirname);
// ### private helper functions:
// Reads a block from EEPROM.
// blockNum: The block number to read.
// buffer: The buffer to store the read data.
func _readBlock(word blockNum, byte[] buffer) {
    readPage(blockNum * PageSize, buffer);
}
// Writes a block to EEPROM.
// blockNum: The block number to write.
// buffer: The buffer containing the data to write.
func _writeBlock(word blockNum, const byte[] buffer) {
    writePage(blockNum * PageSize, buffer);
}
// Finds a free page in the ChainList.
// Returns the index of the free page or 0 if no free page is found.
func byte _findFreePage(byte[] chainBlock) {
    word i;
    for (i = 2; i < TotalPages; i++) {
        if (chainBlock[i] == 0) {
            return i as byte;
        }
    }
    return 0; // No free page found
}
// Validates a path for correct length and valid characters.
// Returns true if the path is valid, false otherwise.
func bool _isValidPath(const char[] path) {
    word i;
    word len = strlen(path);
    if (len == 0 || len > 255) {
        return false; // Invalid length
    }
    for (i = 0; i < len; i++) {
        if (!(isalnum(path[i]) || path[i] == '.' || path[i] == '/')) {
            return false; // Invalid character
        }
    }
    return true;
}

func _resolveRelativePath(char[] dest, const char[] path) {
    // Handle the root path separately
    if (strcmp(path, "/") == 0) {
        strcpy(dest, "/");
        return;
    }
    char[] token;
    char[] temp = malloc(256) as char[];
    strcpy(temp, path);
    token = strtok(temp, "/");
    while (token != null) {
        if (strcmp(token, ".") == 0) {
            // Skip
        } else {
            if (strcmp(token, "..") == 0) {
                // Remove last directory in dest
                char[] lastSlash = strrchr(dest, '/');
                if (lastSlash != null && lastSlash != dest) {
                    lastSlash[0] = '\0';
                } else {
                    // Avoid removing the root slash
                    dest[1] = '\0';
                }
            } else {
                if (strlen(dest) > 1) {
                    strcat(dest, "/");
                }
                strcat(dest, token);
            }
        }
        token = strtok(null, "/");
    }
    free(temp);
}
func _getFullPath(char[] dest, const char[] path) {
    if (_currentDirectory[0] == '\0') {
        strcpy(_currentDirectory, "/"); // initialize before first use
    }
    if (path[0] == '/') {
        // Absolute path
        strcpy(dest, path);
    } else {
        // Relative path
        strcpy(dest, _currentDirectory);
        if (dest[strlen(dest) - 1] != '/') {
            strcat(dest, "/");
        }
        strcat(dest, path);
    }
    // Resolve relative components like '.' and '..'
    char[] resolvedPath = malloc(256) as char[];
    _resolveRelativePath(resolvedPath, dest);
    strcpy(dest, resolvedPath);
    free(resolvedPath);
    // Ensure the path starts with a root '/'
    if (dest[0] != '/') {
        char[] temp = malloc(256) as char[];
        strcpy(temp, dest);
        strcpy(dest, "/");
        strcat(dest, temp);
        free(temp);
    }
}

// Compacts a directory by moving entries from later blocks to empty slots in earlier blocks.
func _compactDirectory(byte startBlock, byte currentBlock) {
    byte[PageSize] dirBlock;
    byte[PageSize] chainBlock;
    byte[PageSize] nextDirBlock;
    byte parentNextBlock;
    word i;
    word j;
    bool blockMoved;
    bool isEmpty;
    byte prevBlock;
    
    //writeChar('<');
    
    _readBlock(ChainBlock, chainBlock);
    while (true) {
        blockMoved = false;
        _readBlock(currentBlock, dirBlock);
        for (i = 0; i < PageSize; i += DescriptorSize) {
            if (dirBlock[i + FilenameOffset] == 0) { // Find empty slot
                // Look for entries in later blocks
                parentNextBlock = chainBlock[currentBlock];
                while (parentNextBlock != 1) {
                    _readBlock(parentNextBlock, nextDirBlock);
                    for (j = 0; j < PageSize; j += DescriptorSize) {
                        if (nextDirBlock[j + FilenameOffset] != 0) { // Find used slot
                            // Move the entry to the empty slot
                            memcpy(dirBlock + i, nextDirBlock + j, DescriptorSize);
                            memset(nextDirBlock + j, 0, DescriptorSize);
                            _writeBlock(currentBlock, dirBlock);
                            _writeBlock(parentNextBlock, nextDirBlock);
                            blockMoved = true;
                            // Debug output for moving an entry
                            break;
                        }
                    }
                    if (j < PageSize) {
                        break;
                    }
                    parentNextBlock = chainBlock[parentNextBlock];
                }
            }
        }
        
        // Check if the current block is completely empty
        isEmpty = true;
        for (i = 0; i < PageSize; i += DescriptorSize) {
            if (dirBlock[i + FilenameOffset] != 0) {
                isEmpty = false;
                break;
            }
        }
        
        // If the current block is empty and not the first block, remove it from the chain
        if (isEmpty && (currentBlock != startBlock)) {
            prevBlock = startBlock;
            while (chainBlock[prevBlock] != currentBlock) {
                prevBlock = chainBlock[prevBlock];
                if (prevBlock == 1 || prevBlock == 0) {
                    break;
                }
            }
            chainBlock[prevBlock] = chainBlock[currentBlock];
            chainBlock[currentBlock] = 0;
            _writeBlock(ChainBlock, chainBlock);
            //writeChar('-');
            break;
        }
        if (!blockMoved) {
            break;
        }
        
        currentBlock = chainBlock[currentBlock];
        if (currentBlock == 1) { break; }
    }
    //writeChar('>');
}

// Splits the full path into parent directory and file name.
func _splitPath(const char[] fullPath, char[] parentDir, char[] fileName) {
    strcpy(parentDir, fullPath);
    char[] lastSlash = strrchr(parentDir, '/');
    if (lastSlash != null && lastSlash != parentDir) {
        lastSlash[0] = '\0'; // Terminate parent directory string
        strcpy(fileName, lastSlash + 1);
    } else {
        strcpy(parentDir, "/"); // It's a root-level directory
        strcpy(fileName, fullPath + 1);
    }
}


func bool _compareDirEntry(byte[] dirEntry, char[] name, byte entryType) {
    bool found = false;
    word length = strlen(name);
    for (;;) {
        if (dirEntry[StartBlockOffset] == 0) {
            break; // empty dirEntry
        }
        if ((dirEntry[FileTypeOffset] & 0xF0) != entryType) {
            break; // not the correct type of record
        }
        if (length != (dirEntry[FileTypeOffset] & 0x0F)) {
            break; // not the correct length
        }
        if (strnicmp((dirEntry + FilenameOffset) as char[], name, length) == 0) {
            found = true; // name match
        }
        break;
    }
    return found;
}



// ### end of private helper functions
// Formats the drive, initializing the file system.
// Returns 0 on success, or -1 on error.
func int format() {
    // Initialize global block chain page (no chains yet, 0 and 1 reserved)
    byte[PageSize] blockChainPage;
    blockChainPage[0] = 1;
    blockChainPage[1] = 1;
    writePage(ChainBlock * PageSize, blockChainPage);
    // Initialize the root directory (empty initially)
    byte[PageSize] rootDir;
    writePage(RootDirStartBlock * PageSize, rootDir);
    return 0; // Success
}
// Sets the file position indicator for the file.
// fileHandle: The handle of the file.
// offset: Number of bytes to offset from whence.
// whence: Position from where offset is applied (0: beginning, 1: current position, 2: end of file).
// Returns 0 on success, or -1 on error.
func int fseek(byte[] fileHandle, int offset, byte whence);
// Returns the current file position indicator for the file.
// fileHandle: The handle of the file.
// Returns the current file position as a word, or 0 on error.
func word ftell(byte[] fileHandle);
// Renames a file or directory.
// oldname: Current name of the file or directory.
// newname: New name of the file or directory.
// Returns 0 on success, or -1 on error.
func int rename(const char[] oldname, const char[] newname);
func byte[] readdir(byte[] dirHandle) {
    if (dirHandle[1] == PageSize - DescriptorSize) {
        // Previous entry was the last one in that page
        // Follow the chain to the next page for this directory
        byte[PageSize] chainBlock;
        _readBlock(ChainBlock, chainBlock);
        
        dirHandle[0] = chainBlock[dirHandle[0]];
        if (dirHandle[0] == 1) // that was the last page in the chain
        {
            return null;  
        }
        dirHandle[1] = 0;
    }
    
    // Read the block where the current directory entry is
    byte[PageSize] dirBlock;
    _readBlock(dirHandle[0], dirBlock);
    
    // Copy the directory entry
    memcpy(_dirEntry, dirBlock + dirHandle[1], DescriptorSize);
    if (_dirEntry[StartBlockOffset] == 0)
    {
        // empty slot
        return null;
    }
        
    // Update the directory handle position for the next iteration
    dirHandle[1] += DescriptorSize;
    return _dirEntry;
}
// Closes an open directory.
// dirHandle: The handle of the directory to close.
// Returns 0 on success, or -1 on error.
func int closedir(byte[] dirHandle) {
    if (null != dirHandle)
    {
        free(dirHandle);
    }
    return 0;
}
func int mkdir(const char[] dirname) {
    byte[PageSize] dirBlock;
    byte[DescriptorSize] descriptor;
    byte[PageSize] chainBlock;
    byte[PageSize] newDirBlock;
    byte newBlock;
    char[256] fullPath;
    word i;
    
    _getFullPath(fullPath, dirname);
    
    if (!_isValidPath(fullPath)) {
        return -1; // Invalid path
    }
    
    _readBlock(ChainBlock, chainBlock);
    // Find a free block for the new directory
    newBlock = _findFreePage(chainBlock);
    if (newBlock == 0) {
        return -1; // Disk full (no available pages)
    }
    // Create a local copy of dirname to modify
    char[] localDirname = strdup(fullPath);
    // Initialize the directory descriptor
    memset(descriptor, 0, DescriptorSize);
    char[] lastSlash = strrchr(localDirname, '/');
    if (lastSlash != null) {
        strcpy((descriptor + FilenameOffset) as char[], lastSlash + 1);
        lastSlash[0] = '\0'; // Terminate parent directory string
    } else {
        strcpy((descriptor + FilenameOffset) as char[], localDirname);
    }
    descriptor[FileTypeOffset] = (FileTypeDirectory | (strlen((descriptor + FilenameOffset) as char[]) & 0x0F)) as byte;
    descriptor[StartBlockOffset] = newBlock;
    // Determine the parent directory block
    char[] parentDir = ((lastSlash != null) && (strlen(localDirname) > 0)) ? localDirname : "/";
    
    // Read the parent directory block to find an empty slot
    byte[] parentDirHandle = opendir(parentDir);
    if (parentDirHandle == null) {
        free(localDirname);
        return -1; // Failed to open parent directory
    }
    _readBlock(parentDirHandle[0], dirBlock);
    byte currentBlock = parentDirHandle[0];
    closedir(parentDirHandle);
    
    while (true) {
        for (i = 0; i < PageSize; i += DescriptorSize) {
            if (dirBlock[i + FilenameOffset] == 0) {
                memcpy(dirBlock + i, descriptor, DescriptorSize);
                _writeBlock(currentBlock, dirBlock);
                // Create new empty block for the directory and update ChainBlock
                memset(newDirBlock, 0, PageSize);
                _writeBlock(newBlock, newDirBlock);
                chainBlock[newBlock] = 1; // Mark as end of chain
                _writeBlock(ChainBlock, chainBlock);
                free(localDirname);
                return 0; // Success
            }
        }
        // If no empty slot found in the current block, follow the chain
        if (chainBlock[currentBlock] == 1) {
            // No more blocks in the chain, add a new block
            byte newDirBlockInChain = _findFreePage(chainBlock);
            if (newDirBlockInChain == 0) {
                free(localDirname);
                return -1; // Disk full (no available pages)
            }
            chainBlock[currentBlock] = newDirBlockInChain;
            chainBlock[newDirBlockInChain] = 1; // Mark as end of chain
            _writeBlock(ChainBlock, chainBlock);
            // Initialize the new directory block
            memset(newDirBlock, 0, PageSize);
            _writeBlock(newDirBlockInChain, newDirBlock);
            currentBlock = newDirBlockInChain;
            _readBlock(currentBlock, dirBlock);
        } else {
            // Move to the next block in the chain
            currentBlock = chainBlock[currentBlock];
            _readBlock(currentBlock, dirBlock);
        }
    }
    free(localDirname);
    return -1; // No empty slot found
}

func byte[] opendir(const char[] dirname) {
    byte[] dirHandle = malloc(2);
    byte[PageSize] dirBlock;
    byte[PageSize] chainBlock;
    char[256] fullPath;
    char[] pathCopy;
    char[] token;
    byte currentBlock;
    bool found;
    word i;
    
    _getFullPath(fullPath, dirname);
    if (!_isValidPath(fullPath)) {
        free(dirHandle);
        return null; // Invalid path
    }
    
    _readBlock(ChainBlock, chainBlock);
    
    if (strcmp(fullPath, "/") == 0) {
        dirHandle[0] = RootDirStartBlock;  // Root directory descriptor index
        dirHandle[1] = 0;  // Current position in directory
        return dirHandle;
    }
    
    // Split the path into components
    pathCopy = strdup(fullPath);
    token = strtok(pathCopy, "/");
    currentBlock = RootDirStartBlock;
    
    while (token != null) {
        found = false;
        _readBlock(currentBlock, dirBlock);
        while (true) {
            for (i = 0; i < PageSize; i += DescriptorSize) {
                memcpy(_dirEntry, dirBlock + i, DescriptorSize);
                if (_compareDirEntry(_dirEntry, token, FileTypeDirectory)) {
                    currentBlock = dirBlock[i + StartBlockOffset];
                    found = true;
                    break;
                }
            }
            if (found || chainBlock[currentBlock] == 1) {
                break;
            }
            currentBlock = chainBlock[currentBlock];
            _readBlock(currentBlock, dirBlock);
        }
        
        if (!found) {
            free(dirHandle);
            free(pathCopy);
            return null; // Directory not found
        }
        token = strtok(null, "/");
    }
    
    dirHandle[0] = currentBlock;
    dirHandle[1] = 0;
    free(pathCopy);
    return dirHandle;
}

func int chdir(const char[] path) {
    if (!_isValidPath(path)) {
        return -1; // Invalid path
    }
    byte[] dirHandle = opendir(path);
    if (dirHandle == null) {
        return -1; // Directory not found
    }
    closedir(dirHandle);
    strcpy(_currentDirectory, path);
    return 0; // Success
}
// Closes an open file or directory.
// fileHandle: The handle of the file or directory to close.
// Returns 0 on success, or -1 on error.
func int fclose(byte[] fileHandle) {
    if (fileHandle != null) {
        free(fileHandle);
        return 0; // Success
    }
    return -1; // Invalid handle
}
   
func word fread(byte[] buffer, word size, word count, byte[] fileHandle) {
    byte[PageSize] fileBlock;
    byte[PageSize] chainBlock;
    byte currentBlock = fileHandle[0];
    word position = (fileHandle[1] << 8) | fileHandle[2];
    word bytesToRead = size * count;
    word bytesRead = 0;
    
    _readBlock(ChainBlock, chainBlock);
    
    while (bytesToRead > 0) {
        word offset = position % PageSize;
        word toRead = (bytesToRead < (PageSize - offset)) ? bytesToRead : (PageSize - offset);
        
        _readBlock(currentBlock, fileBlock);
        memcpy(buffer + bytesRead, fileBlock + offset, toRead);
        
        bytesToRead -= toRead;
        bytesRead += toRead;
        position += toRead;
        
        if (position % PageSize == 0) {
            if (chainBlock[currentBlock] == 1) {
                break; // End of file
            } else {
                currentBlock = chainBlock[currentBlock];
            }
        }
    }
    
    fileHandle[0] = currentBlock;
    fileHandle[1] = ((position >> 8) & 0xFF) as byte;
    fileHandle[2] = (position & 0xFF) as byte;
    return bytesRead / size;
}



// Opens a file or directory.
// filename: Name of the file or directory to open.
// mode: Mode in which to open the file (e.g., "r" for read, "w" for write, etc.).
// Returns a file handle if successful, or null if an error occurs.
func byte[] fopen(const char[] filename, const char[] mode) {
    byte[PageSize] dirBlock;
    byte[PageSize] newDirBlock;
    byte[PageSize] chainBlock;
    byte[DescriptorSize] descriptor;
    char[256] fullPath;
    byte currentBlock;
    word i;
    char[] parentDir;
    char[] lastSlash;
    char[] fileName;
    byte[] parentDirHandle;
    byte[] fileHandle;
    byte fileBlock;
    byte nextBlock;
    byte newDirBlockInChain;
    
    for (;;) {
        _getFullPath(fullPath, filename);
        if (!_isValidPath(fullPath)) {
            break; // Invalid path
        }
        if ((strcmp(mode, "w") != 0) && (strcmp(mode, "r") != 0)) {
            break; // Invalid mode
        }
        _readBlock(ChainBlock, chainBlock);
        parentDir = strdup(fullPath);
        lastSlash = strrchr(parentDir, '/');
        if ((lastSlash != null) && (lastSlash != parentDir)) {
            lastSlash[0] = '\0'; // Terminate parent directory string
            fileName = lastSlash + 1;
        } else {
            fileName = (lastSlash == null) ? fullPath : (fullPath + 1); // no slash or / is first character
            strcpy(parentDir, "/"); // It's a root-level directory (no / or first character)
        }
        parentDirHandle = opendir(parentDir);
        if (parentDirHandle == null) {
            break; // directory not found
        }
        // Locate the file descriptor
        while (true) {
            _readBlock(parentDirHandle[0], dirBlock);
            for (i = 0; i < PageSize; i += DescriptorSize) {
                if (_compareDirEntry(dirBlock + i, fileName, FileTypeFile)) {
                     // If mode is "w", truncate the file
                    if (strcmp(mode, "w") == 0) {
                        // Free the blocks used by the file if it already exists
                        fileBlock = dirBlock[i + StartBlockOffset];
                        while (fileBlock != 1) {
                            nextBlock = chainBlock[fileBlock];
                            chainBlock[fileBlock] = 0;
                            fileBlock = nextBlock;
                        }
                        // Reset the descriptor
                        dirBlock[i + StartBlockOffset] = 1; // end of chain
                        dirBlock[i + FileSizeOffset] = 0; // file size to 0
                        dirBlock[i + FileSizeOffset + 1] = 0; // file size to 0
                        _writeBlock(parentDirHandle[0], dirBlock);
                        _writeBlock(ChainBlock, chainBlock);
                    }
                    fileHandle = malloc(4);
                    fileHandle[1] = (i / DescriptorSize) as byte; // File descriptor index
                    fileHandle[0] = parentDirHandle[0]; // Directory block number
                    //fileHandle[2] = 0; // Current position LSB in file (Tigger C : automatic zero initialization)
                    //fileHandle[3] = 0; // Current position MSB in file (Tigger C : automatic zero initialization)
                    closedir(parentDirHandle);
                    break; // Success
                }
            } // for
            if (fileHandle != null) {
                break; // Success
            }
            // Follow the chain if no descriptor found in current block
            if (chainBlock[parentDirHandle[0]] == 1) {
                break; // No more blocks in the chain
            }
            parentDirHandle[0] = chainBlock[parentDirHandle[0]];
        } // while
        closedir(parentDirHandle);
        if (fileHandle != null) {
            break; // Success
        }
        // If the file doesn't exist and mode is "w", create a new file
        if (strcmp(mode, "w") == 0) {
            // Initialize the file descriptor
            memset(descriptor, 0, DescriptorSize);
            strcpy((descriptor + FilenameOffset) as char[], fileName);
            descriptor[FileTypeOffset] = (FileTypeFile | (strlen((descriptor + FilenameOffset) as char[]) & 0x0F)) as byte;
            descriptor[StartBlockOffset] = 1; // end of chain
            descriptor[FileSizeOffset] = 0;   // Empty file LSB
            descriptor[FileSizeOffset + 1] = 0; // Empty file MSB
            // Read the parent directory block to find an empty slot
            parentDirHandle = opendir(parentDir);
            if (parentDirHandle == null) {
                break; // Failed to open parent directory
            }
            _readBlock(parentDirHandle[0], dirBlock);
            currentBlock = parentDirHandle[0];
            closedir(parentDirHandle);
            while (true) {
                for (i = 0; i < PageSize; i += DescriptorSize) {
                    if (dirBlock[i + FilenameOffset] == 0) {
                        memcpy(dirBlock + i, descriptor, DescriptorSize);
                        _writeBlock(currentBlock, dirBlock);
                        fileHandle = malloc(4);
                        fileHandle[0] = currentBlock; // Directory block number
                        fileHandle[1] = (i / DescriptorSize) as byte; // File descriptor index
                        //fileHandle[2] = 0; // Current position LSB in file (Tigger C : automatic zero initialization)
                        //fileHandle[3] = 0; // Current position MSB in file (Tigger C : automatic zero initialization)
                        break; // Success
                    }
                } // for
                if (fileHandle != null) {
                    break; // Success
                }
                // If no empty slot found in the current block, follow the chain
                if (chainBlock[currentBlock] == 1) {
                    // No more blocks in the chain, add a new block
                    newDirBlockInChain = _findFreePage(chainBlock);
                    if (newDirBlockInChain == 0) {
                        break; // Disk full (no available pages)
                    }
                    chainBlock[currentBlock] = newDirBlockInChain;
                    chainBlock[newDirBlockInChain] = 1; // Mark as end of chain
                    _writeBlock(ChainBlock, chainBlock);
                    // Initialize the new directory block
                    //memset(newDirBlock, 0, PageSize);  // (Tigger C : automatic zero initialization)
                    _writeBlock(newDirBlockInChain, newDirBlock);
                    currentBlock = newDirBlockInChain;
                    _readBlock(currentBlock, dirBlock);
                } else {
                    // Move to the next block in the chain
                    currentBlock = chainBlock[currentBlock];
                    _readBlock(currentBlock, dirBlock);
                }
            } // while
        } // if "w"
        break;
    } // for (;;)
    free(parentDir);
    return fileHandle; // Return file handle or null if not found/created
}


func int remove(const char[] filename) {
    byte[PageSize] dirBlock;
    byte[PageSize] chainBlock;
    byte[DescriptorSize] descriptor;
    char[256] fullPath;
    char[256] parentDir;
    char[256] fileName;
    byte[] dirHandle;
    byte currentBlock;
    word i;
    byte fileBlock;
    byte nextBlock;
    int result = -1; // Default to failure
    
    for (;;) {
        _getFullPath(fullPath, filename);
        
        if (!_isValidPath(fullPath)) {
            break; // Invalid path
        }
        
        _splitPath(fullPath, parentDir, fileName);
        dirHandle = opendir(parentDir);
        if (dirHandle == null) {
            break; // Failed to open parent directory
        }
        
        // Locate the file descriptor
        while (true) {
            _readBlock(dirHandle[0], dirBlock);
            for (i = 0; i < PageSize; i += DescriptorSize) {
                memcpy(descriptor, dirBlock + i, DescriptorSize);
                if (_compareDirEntry(descriptor, fileName, FileTypeFile)) {
                    fileBlock = descriptor[StartBlockOffset];
                    // Clear the file descriptor
                    memset(descriptor, 0, DescriptorSize); // Clearing the descriptor array itself
                    memset(dirBlock + i, 0, DescriptorSize); // Clearing the block position
                    // Verify the descriptor was actually cleared
                    _writeBlock(dirHandle[0], dirBlock);
                    // Free the blocks used by the file
                    _readBlock(ChainBlock, chainBlock);
                    while (fileBlock != 1 && fileBlock != 0) {
                        nextBlock = chainBlock[fileBlock];
                        chainBlock[fileBlock] = 0;
                        fileBlock = nextBlock;
                    }
                    _writeBlock(ChainBlock, chainBlock);
                    result = 0; // Success
                    // Call to compact the directory
                    _compactDirectory(dirHandle[0], dirHandle[0]);
                    break; // Exit the loop
                }
            }
            if (result == 0 || chainBlock[dirHandle[0]] == 1) {
                break; // Exit the loop if success or no more blocks in the chain
            }
            dirHandle[0] = chainBlock[dirHandle[0]];
        }
        closedir(dirHandle);
        break; // Exit the main for loop
    }
    return result; // Return the result
}

func int rmdir(const char[] dirname) {
    byte[PageSize] dirBlock;
    byte[PageSize] chainBlock;
    byte[DescriptorSize] descriptor;
    char[256] fullPath;
    char[256] parentDir;
    char[256] dirName;
    byte[] dirHandle;
    byte currentBlock;
    word i;
    int result = -1; // Default to failure
    
    for (;;) {
        _getFullPath(fullPath, dirname);
        
        if (!_isValidPath(fullPath)) {
            break; // Invalid path
        }
        
        // Open the directory to ensure it exists
        dirHandle = opendir(fullPath);
        if (dirHandle == null) {
            break; // Directory not found
        }
        
        // Check if the directory is empty
        _readBlock(dirHandle[0], dirBlock);
        for (i = 0; i < PageSize; i += DescriptorSize) {
            if (dirBlock[i + FilenameOffset] != 0) {
                closedir(dirHandle);
                break; // Directory not empty
            }
        }
        if (i < PageSize) {
            break; // Directory not empty
        }
        currentBlock = dirHandle[0];
        closedir(dirHandle);
        
        // Free the blocks used by the directory
        _readBlock(ChainBlock, chainBlock);
        while (currentBlock != 1) {
            byte nextBlock = chainBlock[currentBlock];
            chainBlock[currentBlock] = 0;
            currentBlock = nextBlock;
        }
        _writeBlock(ChainBlock, chainBlock);
        
        // Find and clear the directory descriptor in the parent directory
        _splitPath(fullPath, parentDir, dirName);
        dirHandle = opendir(parentDir);
        if (dirHandle == null) {
            break; // Failed to open parent directory
        }
        
        _readBlock(dirHandle[0], dirBlock);
        while (true) {
            for (i = 0; i < PageSize; i += DescriptorSize) {
                memcpy(descriptor, dirBlock + i, DescriptorSize);
                if (_compareDirEntry(descriptor, dirName, FileTypeDirectory)) {
                    memset(dirBlock + i, 0, DescriptorSize); // Clear the descriptor
                    _writeBlock(dirHandle[0], dirBlock);
                    
                    _compactDirectory(dirHandle[0], dirHandle[0]); // Compact the directory
                    
                    result = 0; // Success
                    break; // Exit the loop
                }
            }
            if (result == 0 || chainBlock[dirHandle[0]] == 1) {
                break; // Exit the loop if success or no more blocks in the chain
            }
            dirHandle[0] = chainBlock[dirHandle[0]];
            _readBlock(dirHandle[0], dirBlock);
        }
        
        closedir(dirHandle);
        break; // Exit the main for loop
    }
    return result; // Return the result
}


func word fwrite(const byte[] buffer, word size, word count, byte[] fileHandle) {
    byte[PageSize] fileBlock;
    byte[PageSize] chainBlock;
    byte[PageSize] dirBlock;
    word bytesToWrite = size * count;
    word bytesWritten = 0;
    word position = (fileHandle[2] << 8) | fileHandle[3];
    byte currentBlock = fileHandle[0];
    byte startBlock = currentBlock;  // Save the start block to update the directory entry
    _readBlock(ChainBlock, chainBlock);

    while (bytesToWrite > 0) {
        word offset = position % PageSize;
        word toWrite = (bytesToWrite < (PageSize - offset)) ? bytesToWrite : (PageSize - offset);
        _readBlock(currentBlock, fileBlock);
        
        // Debug prints
        writeString("Writing ");
        writeWord(toWrite);
        writeString(" bytes to block ");
        writeHex(currentBlock);
        writeString(" at offset ");
        writeWord(offset);
        writeChar('\n');

        memcpy(fileBlock + offset, buffer + bytesWritten, toWrite);
        _writeBlock(currentBlock, fileBlock);
        position += toWrite;
        bytesWritten += toWrite;
        bytesToWrite -= toWrite;
        if (bytesToWrite > 0) {
            if (chainBlock[currentBlock] == 1) {
                // Allocate a new block
                byte newBlock = _findFreePage(chainBlock);
                if (newBlock == 0) {
                    return bytesWritten / size; // Disk full, return number of elements written
                }
                chainBlock[currentBlock] = newBlock;
                chainBlock[newBlock] = 1; // Mark as end of chain
                _writeBlock(ChainBlock, chainBlock);
                currentBlock = newBlock;
            } else {
                currentBlock = chainBlock[currentBlock];
            }
        }
    }

    fileHandle[2] = ((position >> 8) & 0xFF) as byte;
    fileHandle[3] = (position & 0xFF) as byte;

    // Update the file size in the directory entry
    byte dirBlockIndex = fileHandle[1];
    _readBlock(startBlock, dirBlock);
    word fileSize = (dirBlock[dirBlockIndex * DescriptorSize + FileSizeOffset] << 8) |
                    dirBlock[dirBlockIndex * DescriptorSize + FileSizeOffset + 1];
    fileSize = position; // Update file size to the new position
    dirBlock[dirBlockIndex * DescriptorSize + FileSizeOffset] = ((fileSize >> 8) & 0xFF) as byte;
    dirBlock[dirBlockIndex * DescriptorSize + FileSizeOffset + 1] = (fileSize & 0xFF) as byte;
    _writeBlock(startBlock, dirBlock);

    return bytesWritten / size;
}

