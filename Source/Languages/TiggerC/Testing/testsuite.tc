#define APPLE_I

#include "../system.tc"
#include "../string.tc"
#include "../time.tc"

// Function to print test result
func printResult(const char[] testName, bool result) {
    puts(testName);
    if (result) {
        puts(": PASS\n");
    } else {
        puts(": FAIL\n");
    }
}

func main() {
    // Variables test
    byte a = 0x10;
    word b = 0x1234;
    int d = -1234;
    char c = 'A';
    bool flag = true;

    printResult("Variable Initialization", (a == 0x10) && (b == 0x1234) && (d == -1234) && (c == 'A') && flag);

    // Array test
    byte[10] arr;
    for (byte i = 0; i < 10; i++) {
        arr[i] = i;
    }
    bool arrTest = true;
    for (byte j = 0; j < 10; j++) {
        if (arr[j] != j) {
            arrTest = false;
            break;
        }
    }
    printResult("Array Test", arrTest);

    // Pointer and memory management test
    byte[] ptr = malloc(10);
    for (byte k = 0; k < 10; k++) {
        ptr[k] = k;
    }
    bool ptrTest = true;
    for (byte l = 0; l < 10; l++) {
        if (ptr[l] != l) {
            ptrTest = false;
            break;
        }
    }
    free(ptr);
    printResult("Pointer and Memory Management Test", ptrTest);

    // String functions test
    const char[] hello = "Hello";
    const char[] world = "World";
    char[11] combined;
    strcpy(combined, hello);
    strcat(combined, " ");
    strcat(combined, world);

    bool strTest = strcmp(combined, "Hello World") == 0;
    printResult("String Functions Test", strTest);

    // Control structures test
    byte sum = 0;
    for (byte m = 0; m < 10; m++) {
        sum += m;
    }
    printResult("For Loop Test", sum == 45);

    byte count = 10;
    while (count > 0) {
        count--;
    }
    printResult("While Loop Test", count == 0);

    count = 10;
    if (count == 10) {
        count = 0;
    }
    printResult("If Statement Test", count == 0);

    // Switch statement test
    byte value = 2;
    byte result = 0;
    switch (value) {
        case 1: {
            result = 1;
        }
        case 2: {
            result = 2;
        }
        default: {
            result = 3;
        }
    }
    printResult("Switch Statement Test", result == 2);

    // Type casting test
    word wide_value = 0x1234;
    byte narrow_value = wide_value as byte;
    printResult("Type Casting Test", narrow_value == 0x34);

    // System functions test
    byte pin = 1; // Example pin number
    pinMode(pin, OUTPUT);
    pinSet(pin, true);
    bool pinState = pinRead(pin);
    printResult("GPIO Test", pinState);

    // EEPROM functions test
    word eeprom_address = 0x100;
    byte[16] write;
    byte[16] read;

    // Initialize data to write
    for (byte n = 0; n < 16; n++) {
        write[n] = n;
    }

    /*
    // Write a page to EEPROM
    writePage(eeprom_address, write);

    // Read a page from EEPROM
    readPage(eeprom_address, read);

    // Verify the read data
    bool eepromTest = true;
    for (byte i = 0; i < 16; i++) {
        if (read[i] != write[i]) {
            eepromTest = false;
            break;
        }
    }
    printResult("EEPROM Test", eepromTest);

    // I2C functions test (Assuming a device at address 0x50)
    byte i2c_address = 0x50;
    I2CWrite(i2c_address, 0xAB);
    byte i2cData = I2CRead(i2c_address);
    printResult("I2C Test", i2cData == 0xAB);
   */

    // Timer functions test
    byte[] start = millis();
    delay(1000); // Delay for 1 second
    word elapsed = elapsedMillis(start);
    free(start);
    printResult("Timer Functions Test", elapsed >= 1000);
}

