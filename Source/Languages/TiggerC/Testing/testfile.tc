#define EXPERIMENTAL
#define ZEROPAGEGLOBALS
#include "../system.tc"
#include "../file.tc"

func test_file_api() {
    // Buffer for read/write operations
    byte[PageSize] buffer;
    memset(buffer, 'A' as byte, PageSize); // Fill buffer with 'A's for testing
    byte[PageSize] readBuffer;

    // Test variables
    byte[] fileHandle;
    byte[] dirHandle;
    int result;
    word count;
    word i;

    // Format the file system
    result = format();
    if (result != 0) {
        puts("Format failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Create a new directory
    result = mkdir("/testdir");
    if (result != 0) {
        puts("mkdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Change directory
    result = chdir("/testdir");
    if (result != 0) {
        puts("chdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open a file for writing
    fileHandle = fopen("testfile", "w");
    if (fileHandle == null) {
        puts("fopen for write failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Write to the file
    count = fwrite(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fwrite failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Write to the file to exceed one page
    count = fwrite(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fwrite second page failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the file
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open the file for reading
    fileHandle = fopen("testfile", "r");
    if (fileHandle == null) {
        puts("fopen for read failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Read from the file
    count = fread(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fread failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Check the contents
    for (i = 0; i < PageSize; i++) {
        if (buffer[i] != ('A' as byte)) {
            puts("Read data mismatch!");
            return;
        }
    }
    putc('.'); // Progress indicator

    // Read the second page from the file
    count = fread(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fread second page failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Check the contents of the second page
    for (i = 0; i < PageSize; i++) {
        if (buffer[i] != ('A' as byte)) {
            puts("Read data mismatch on second page!");
            return;
        }
    }
    putc('.'); // Progress indicator

    // Use fseek to move to the middle of the file
    result = fseek(fileHandle, PageSize as int, SEEK_SET);
    if (result != 0) {
        puts("fseek to middle failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Use ftell to get the current position
    word position = ftell(fileHandle);
    if (position != PageSize) {
        puts("ftell after seek failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Read from the middle of the file
    count = fread(readBuffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fread from middle failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Check the contents from the middle of the file
    for (i = 0; i < PageSize; i++) {
        if (readBuffer[i] != ('A' as byte)) {
            puts("Read data mismatch from middle!");
            return;
        }
    }
    putc('.'); // Progress indicator

    // Use fseek to move to the beginning of the file
    result = fseek(fileHandle, 0, SEEK_SET);
    if (result != 0) {
        puts("fseek failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Use ftell to get the current position
    position = ftell(fileHandle);
    if (position != 0) {
        puts("ftell failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the file
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose after read failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open the file for writing to test truncation
    fileHandle = fopen("testfile", "w");
    if (fileHandle == null) {
        puts("fopen for write to truncate failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the file
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose after truncate failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open the file for reading to verify truncation
    fileHandle = fopen("testfile", "r");
    if (fileHandle == null) {
        puts("fopen for read after truncate failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Read from the file
    count = fread(buffer, 1, PageSize, fileHandle);
    if (count != 0) {
        puts("fread after truncate failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the file
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose after read failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Remove the file
    result = remove("testfile");
    if (result != 0) {
        puts("remove failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Create a subdirectory
    result = mkdir("/testdir/subdir");
    if (result != 0) {
        puts("mkdir subdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Change directory to the subdirectory
    result = chdir("/testdir/subdir");
    if (result != 0) {
        puts("chdir subdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open a file for writing in the subdirectory
    fileHandle = fopen("subfile", "w");
    if (fileHandle == null) {
        puts("fopen subfile for write failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Write to the file in the subdirectory
    count = fwrite(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fwrite subfile failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the file in the subdirectory
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose subfile failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open the file for reading in the subdirectory
    fileHandle = fopen("subfile", "r");
    if (fileHandle == null) {
        puts("fopen subfile for read failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Read from the file in the subdirectory
    count = fread(buffer, 1, PageSize, fileHandle);
    if (count != PageSize) {
        puts("fread subfile failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Check the contents of the file in the subdirectory
    for (i = 0; i < PageSize; i++) {
        if (buffer[i] != ('A' as byte)) {
            puts("Read data mismatch in subfile!");
            return;
        }
    }
    putc('.'); // Progress indicator

    // Close the file in the subdirectory
    result = fclose(fileHandle);
    if (result != 0) {
        puts("fclose subfile after read failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Remove the file in the subdirectory
    result = remove("subfile");
    if (result != 0) {
        puts("remove subfile failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Change directory back to the parent directory
    result = chdir("/testdir");
    if (result != 0) {
        puts("chdir to parent dir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Remove the subdirectory
    result = rmdir("/testdir/subdir");
    if (result != 0) {
        puts("rmdir subdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Open the directory
    dirHandle = opendir("/testdir");
    if (dirHandle == null) {
        puts("opendir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Read the directory
    byte[] dirEntry;
    while ((dirEntry = readdir(dirHandle)) != null) {
        puts("Unexpected directory entry found!");
        return;
    }
    putc('.'); // Progress indicator

    // Close the directory
    result = closedir(dirHandle);
    if (result != 0) {
        puts("closedir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // Remove the directory
    result = rmdir("/testdir");
    if (result != 0) {
        puts("rmdir failed!");
        return;
    }
    putc('.'); // Progress indicator

    // All tests passed
    puts("All file API tests passed!");
}

func main() {
    test_file_api();
}

