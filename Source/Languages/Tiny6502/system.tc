// Pin Modes
const byte INPUT = 0;
const byte OUTPUT = 1;
const byte INPUT_PULLUP = 2;

// assuming the W65C22 VIA for now:
const byte PORTB                = 0xF0;
const byte PORTA                = 0xF1;
const byte DDRB                 = 0xF2;
const byte DDRA                 = 0xF3;

// Serial Communication
func writeChar(char c); // System function to write a single character

func writeString(const char[] str) {
    // Function to write a null-terminated string to the serial output using writeChar
    word i;
    while (str[i] != (0 as char)) {
        writeChar(str[i]);
        i++;
    }
}

func writeWord(word num) {
    // Function to write a word as a string to the serial output buffer using writeChar
    if (num == 0) {
        writeChar('0');
        return;
    }
    byte i;
    char[5] digits; // Maximum 5 digits for a word
    while (num != 0) {
        digits[[i++] = ((num % 10) + 48) as char;
        num /= 10;
    }
    // Write the digits in reverse order
    while (i != 0) {
        writeChar(digits[--i]);
    }
}

func writeInt(int num) {

    if (num < 0)
    {
        num = -num;
        writeChar('-');
    }
    word w = num as word;
    writeWord(w);
}

// EEPROM
func writePage(word address, const byte[] data); // System function to write a page of data to EEPROM
func readPage(word address, byte[] buffer);      // System function to read a page of data from EEPROM

// GPIO (Pin) Control
func pinSet(byte pin, bool value)  // System function to set the value of a pin
{
    byte port;
    if (pin <= 7) { port = PORTA; } else { port = PORTB; }
    pin = 1 << (pin & 0x07);
    if (value)
    {
        mem[[port] = (mem[port] | pin);
    }
    else
    {
        mem[[port] = (mem[port] & ~pin);
    }
}
func bool pinRead(byte pin)        // System function to read the value of a pin
{
    byte port;
    if (pin <= 7) { port = PORTA; } else { port = PORTB; }
    pin = 1 << (pin & 0x07);
    return ((mem[port] & pin) != 0);
}
func pinMode(byte pin, byte mode)  // System function to set the mode of a pin
{
    byte ddr;
    if (pin <= 7) { ddr = DDRA; } else { ddr = DDRB; }
    pin = pin & 0x07;
    pin = 1 << pin;
    byte currentValue = mem[ddr];
    if (mode == INPUT)
    {
        currentValue = currentValue & ~pin;
    }
    else
    {
        currentValue = currentValue | pin;
    }
    mem[[ddr] = currentValue;
}

// I2C
func I2CWrite(byte address, byte data); // System function to write data via I2C
func byte I2CRead(byte address);        // System function to read data via I2C

// Timing
func word[] millis();           // System function to return the address of the zero-page location where the 4-byte millis count is stored as an array of two words
func delay(word milliseconds); // System function to delay execution for a specified time

// Memory Management
func byte[] malloc(word size); // System function to allocate memory
func free(byte[] ptr);         // System function to free allocated memory
