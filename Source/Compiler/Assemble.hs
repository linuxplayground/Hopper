program Assemble
{
    #define JSON_EXPRESS // .code and .json are generated by us so assume .json files have no errors
    #define SHORT_CALLS  // use CALLB to save space
    
    uses "/Source/System/System"
    uses "/Source/System/Diagnostics"
    uses "/Source/System/Screen"
    uses "/Source/System/Keyboard"
    
    uses "Tokens/Token"
    uses "Tokens/Scanner"
    uses "Tokens/Parser"
    
    uses "Symbols"
    uses "Types"
    uses "Constant"
    
    uses "Directives"
    
    uses "CodeGen/Block"
    uses "CodeGen/AsmStream"
    
    bool IsDebugger { get { return false; } }
    bool NoPackedInstructions { get { return false; } }
    
    bool isExperimental;
    bool IsExperimental { get { return isExperimental; } }
    
    uint iCurrentOverload;
    
    badArguments()
    {
        PrintLn("Invalid arguments for ASSEMBLE:");
        PrintLn("  ASSEMBLE <object json>");
        PrintLn("    -g <c> <r> : called from GUI, not console");
        PrintLn("    -a <arch>  : target CPU: M6502|W65C02|Z80");
        PrintLn("    -x         : use experimental features");
    }
    
    <byte> initializeGlobals()
    {
        <string,variant> top = Block.Top();
        < <string> > globals = top["globals"];
        
        
        // globals
        //   <string> gNames;
        //   <string,uint> gIndex;
        //   <uint, string> gTypes;
        // code location of initialization code:
        //   <uint, long> gStartPos;
        //   <uint, uint> gStartLine;
        //   <uint, string> gSourcePath;
        
        AsmStream.New();
        
        uint gCount = Symbols.GetGlobalCount();
        for (uint gIndex = 0; gIndex < gCount; gIndex++)
        {
            <string> global;                     
            string variableType = Symbols.GetGlobalType(gIndex);
            string identifier   = Symbols.GetGlobalName(gIndex);
            global.Append(variableType);
            global.Append(identifier);
            globals.Append(global);
            
        }
        top["globals"] = globals;
        Block.ReplaceTop(top);
        
        <byte> code = AsmStream.CurrentStream;
        return code;
        
    }
    
    bool assembleBlockScope()
    {
        bool success = false;
        loop
        {
            Block.PushBlock(false); // for block locals
            assembleBlock();
            Block.PopBlock();
            AsmStream.InsertDebugInfo(true);
            success = !Parser.HadError;
            break;
        }
        return success;
    }
    bool assembleIfStatement()
    {
        bool success = false;
        bool wasElse = false;
        <uint> jumpEnds;
        loop
        {
            AsmStream.InsertDebugInfo(false); // could be a 2nd 'else if'
            
            Parser.Advance(); // if
            
            Parser.Consume(HopperToken.LParen);
            if (Parser.HadError)
            {
                break;
            }
            
            <string,string> currentToken = Parser.CurrentToken;
            string conditionString = currentToken["lexeme"];
            HopperToken tokenType = Token.GetType(currentToken);
            if (tokenType != HopperToken.Condition)
            {
                Parser.Error("condition expected");
                break;
            }  
            Parser.Advance();
            
            Parser.Consume(HopperToken.RParen);
            if (Parser.HadError)
            {
                break;
            }
            
            // if false jump past
            uint jumpPast = AsmStream.NextAddress;
            switch (conditionString)
            {
                case "Z":
                {
                    AsmStream.AddInstructionJNZ();
                }
                case "NZ":
                {
                    AsmStream.AddInstructionJZ();
                }
                default:
                {
                    Die(0x0A);
                }
            }
            
            Block.PushBlock(false); // not a loop context
            assembleBlock();
            Block.PopBlock();
            if (Parser.HadError)
            {
                break;
            }
            
            AsmStream.InsertDebugInfo(true);
            
            // jump end (past a potential "else" block)
            uint jumpEnd = AsmStream.NextAddress;
            jumpEnds.Append(jumpEnd);
            AsmStream.AddInstructionJ();
// past:    
            uint pastAddress = AsmStream.NextAddress;
            AsmStream.PatchJump(jumpPast, pastAddress);        
                        
            if (Parser.CheckKeyword("else"))
            {
                wasElse = true; // there was at least one else clause
                Advance(); // else
                if (Parser.CheckKeyword("if"))
                {
                    continue; // else if
                }   
                // final else block
                Block.PushBlock(false); // not a loop context
                assembleBlock();
                Block.PopBlock();
            }
// end:     
            if (wasElse)
            {       
                foreach (var jump in jumpEnds)
                {
                    AsmStream.PatchJump(jump, AsmStream.NextAddress);
                }
            }
            else
            {
                // simple if with no "else" clause/s
                AsmStream.PopTail(3);
                AsmStream.PatchJump(jumpPast, pastAddress-3);
            }
            success = true;                    
            break;
        }
        return success;
    }
    bool assembleWhile()
    {
        Die(0x0A);
        return false;
    }
    bool assembleLoop()
    {
        bool success = false;
        loop
        {
            Parser.Advance(); // loop

            Block.PushBlock(true); // loop context
            uint continueAddress = AsmStream.NextAddress;
            
            Block.PushBlock(false); // for block locals
            assembleBlock();
            Block.PopBlock();
            AsmStream.InsertDebugInfo(true);
            
            AsmStream.AddInstructionJ(continueAddress);
            
            uint breakAddress = AsmStream.NextAddress;
            Block.PopBlock(continueAddress, breakAddress);
            if (Parser.HadError)
            {
                break;
            }
            success = true;                    
            break;
        }
        return success;    
    }
    bool assembleReturn()
    {
        Die(0x0A);
        return false;
    }
    bool assembleBreak()
    {
        bool success = true;
        
        Parser.Advance(); // break;
        
        // - pop all locals till inner loop
        uint bytesToPop = Block.GetBytesToPop(true, false);
        if (bytesToPop > 0)
        {
            Die(0x0B);            
        }
               
        // - jump to current inner loop 'exit'
        uint breakJump = AsmStream.NextAddress;
        AsmStream.AddInstructionJ();
        if (!Block.AddBreakPatch(breakJump))
        {
            Parser.ErrorAtCurrent("'break' must be inside loop block");
            success = false;
        }
        
        return success;
    }
    bool assembleContinue()
    {
        bool success = true;
        
        Parser.Advance(); // continue;
        
        // - pop all locals till inner loop
        uint bytesToPop = Block.GetBytesToPop(true, true);
        if (bytesToPop > 0)
        {
            Die(0x0B);
        }
        // - jump to current inner loop 'next'
        uint continueJump = AsmStream.NextAddress;
        AsmStream.AddInstructionJ();
        if (!Block.AddContinuePatch(continueJump))
        {
            Parser.ErrorAtCurrent("'continue' must be inside loop block");
            success = false;
        }
        
        return success;
    }
    
    bool assembleMethodCall(string methodName)
    {
        bool success = false;
        loop
        {
            Parser.Consume(HopperToken.LParen);
            if (Parser.HadError)
            {
                break;
            }
            Parser.Consume(HopperToken.RParen);
            if (Parser.HadError)
            {
                break;
            }
            string returnType;
            < <string > > arguments;
            if (!methodName.Contains('.'))
            {
                methodName = Types.QualifyMethodName(methodName);
            }
            uint iOverload = Types.FindVisibleOverload(methodName, arguments, ref returnType);
            if (Parser.HadError)
            {
                break;
            }
            
            Symbols.OverloadToCompile(iOverload); // CompileMethodCall(methodName): Setters, function calls, actual method calls
            Symbols.AddFunctionCall(iOverload);   // CompileMethodCall(methodName)
            
            AsmStream.AddInstructionCALL(iOverload);
            success = true;
            break;
        } // loop
        return success;
    }
    bool assembleInstructionZ80()
    {
        // Z80 instruction forms
        //
        // instr
        // instr R
        // instr RR
        // instr R, nn
        // instr R, nnnn
        // instr R, R
        // instr RR, RR
        // instr (RR)
        // instr R, (RR)
        // instr (RR), R
        // instr (nnnn), R
        // instr dd
        // instr C, dd
        // instr C
        // instr C, nnnn
        // instr nnnn
        
        Die(0x0A);
        return false;
    }
    bool assembleInstruction6502()
    {
        // Z80 instruction forms
        //
        // Implied:
        //     RTS
        // Accumulator:
        //     INC A
        // Immediate:
        //     LDA #nn
        // Absolute:
        //     LDA nnnn
        // X-Indexed Absolute:
        //     LDA nnnn,X
        // Y-Indexed Absolute:
        //     LDA nnnn,Y
        // Absolute Indirect:
        //     JMP (nnnn)
        // Absolute X-Indexed Indirect:
        //     JMP (nnnn,X)
        // Zero Page:
        //     LDA nn   (same as LDA 00nn)
        // X-Indexed Zero Page:
        //     LDA nn,X (same as LDA 00nn, X) 
        // Y-Indexed Zero Page:
        //     LDX nn,Y (same as LDA 00nn, Y) 
        // Zero Page Indirect:
        //     LDA (nn)
        // X-Indexed Zero Page Indirect:
        //     LDA (nn,X)
        // Zero Page Indirect Y-Indexed:
        //     LDA (nn),Y
        // Relative:
        //     BEQ dd
        
        bool success = false;
        loop
        {
            <string,string> currentToken = Parser.CurrentToken;
            HopperToken tokenType;
            string instructionName = currentToken["lexeme"];
            Parser.Advance();
            
            currentToken = Parser.CurrentToken;
            tokenType = Token.GetType(currentToken);
            
            AddressingModes addressingModes = OpCodes.GetAddressingModes(instructionName);
            
            if (addressingModes == AddressingModes.Implied)
            {
                OpCodes.EmitInstruction(instructionName);
                success = true;
                break;
            }
            if (addressingModes == AddressingModes.Relative)
            {
                int offset;
                // -128 .. 127
                if ((tokenType == HopperToken.Integer) && Int.TryParse(currentToken["lexeme"], ref offset))
                {
                    Parser.Advance(); // <offset>
                    OpCodes.EmitInstruction(instructionName, offset);
                    success = true;
                    break;
                }
                else
                {
                    Parser.ErrorAtCurrent("integer offset (-128..127) expected");
                }
                break;
            }
            if ((addressingModes & AddressingModes.Accumulator) == AddressingModes.Accumulator)
            {
                if ((tokenType == HopperToken.Register) && (currentToken["lexeme"] == "A"))
                {
                    Parser.Advance(); // 'A'
                    OpCodes.EmitInstruction(instructionName);
                    success = true;
                    break;
                }
            }
            bool expectImmediate;
            if ((addressingModes & AddressingModes.Immediate) == AddressingModes.Immediate)
            {
                if (tokenType == HopperToken.Hash)
                {
                    Parser.Advance(); // '#'
                    currentToken = Parser.CurrentToken;
                    tokenType = Token.GetType(currentToken);
                    expectImmediate = true;
                }
                if ((tokenType == HopperToken.Identifier) || (tokenType == HopperToken.DottedIdentifier))
                {
                    if ((currentToken["lexeme"]).StartsWith('#'))
                    {
                        currentToken["lexeme"] = (currentToken["lexeme"]).Substring(1);
                        expectImmediate = true;
                    }
                }
            }
            bool expectIndirect;
            if ((addressingModes & (AddressingModes.AbsoluteIndirect
                                   |AddressingModes.AbsoluteIndirectX
                                   |AddressingModes.ZeroPageIndirect
                                   |AddressingModes.XIndexedZeroPage
                                   |AddressingModes.YIndexedZeroPage)) == AddressingModes.None)
            {
                if (tokenType == HopperToken.LParen)
                {
                    Parser.Advance(); // '('
                    currentToken = Parser.CurrentToken;
                    tokenType = Token.GetType(currentToken);
                    expectIndirect = true;
                }
            }
                        
            bool hasImmediate;
            uint immediateValue;
            DumpCurrent();
            switch (tokenType)
            {
                case HopperToken.Char:
                {
                    // immediate value
                    string value = currentToken["lexeme"];
                    if (value.Length == 1)
                    {
                        immediateValue = byte(value[0]);
                        hasImmediate = true;
                        Parser.Advance();
                    }
                }
                case HopperToken.Integer:
                {
                    // immediate value
                    hasImmediate = UInt.TryParse(currentToken["lexeme"], ref immediateValue);
                    Parser.Advance();
                }
                case HopperToken.Identifier:
                case HopperToken.DottedIdentifier:
                {
                    string qualifiedName;
                    string identifierTypeString = Types.GetTypeString(currentToken["lexeme"], false, ref qualifiedName);
                    if (Parser.HadError)
                    {
                        break;
                    }
                    if (identifierTypeString.Length != 0)
                    {
                        
                        if (Symbols.GlobalMemberExists(qualifiedName))
                        {
                            switch (identifierTypeString)
                            {
                                case "byte":
                                case "uint":
                                {
                                    immediateValue = Symbols.GetGlobalByteAddress(qualifiedName);
                                    hasImmediate = true;
                                    Parser.Advance();
                                    //PrintLn(qualifiedName + " global address is 0x" + immediateValue.ToHexString(4));
                                }
                                default:
                                {
                                    PrintLn("identifierTypeString=" + identifierTypeString);
                                    Die(0x0A);
                                }
                            }
                        }
                    }
                    else
                    {
                        string constantIdentifier = Types.QualifyConstantIdentifier(currentToken["lexeme"]);
                        if (Symbols.ConstantExists(constantIdentifier))
                        {
                            if (!IsVisibleConstant(constantIdentifier))
                            {
                                Parser.ErrorAtCurrent("'" + constantIdentifier + "' is private");
                                break;
                            }
                            string value = Symbols.GetConstantValue(constantIdentifier);
                            string constantType = Symbols.GetConstantType(constantIdentifier);
                            switch (constantType)
                            {
                                case "char":
                                {
                                    if (value.Length == 1)
                                    {
                                        immediateValue = byte(value[0]);
                                        hasImmediate = true;
                                        Parser.Advance();
                                    }
                                }
                                case "byte":
                                case "uint":
                                {
                                    hasImmediate = UInt.TryParse(value, ref immediateValue);
                                    Parser.Advance();
                                }
                                default:
                                {
                                    PrintLn("constantType=" + constantType);
                                    Die(0x0A);
                                }
                            }
                        }
                    }
                    if (!hasImmediate)
                    {
                        Parser.ErrorAtCurrent("immediate value expected");
                    }
                }
            }
            if (expectImmediate)
            {
                if (!hasImmediate || (immediateValue > 255))
                {
                    Parser.ErrorAtCurrent("immediate byte value expected");
                }
                else
                {
                    OpCodes.EmitInstruction(instructionName, byte(immediateValue));
                    success = true;
                }
                break;
            }
            if (!hasImmediate)
            {
                Parser.ErrorAtCurrent("immediate operand expected");
                break;
            }
            
            char registerName;
            bool rparenConsumed;
            if ((addressingModes & (AddressingModes.AbsoluteIndirectX
                                   |AddressingModes.XIndexedZeroPage
                                   |AddressingModes.YIndexedZeroPage
                                   |AddressingModes.ZeroPageX
                                   |AddressingModes.ZeroPageY
                                   |AddressingModes.AbsoluteX
                                   |AddressingModes.AbsoluteY)) == AddressingModes.None)
            {
                if (tokenType == HopperToken.RParen)
                {
                    if ((addressingModes & (AddressingModes.YIndexedZeroPage)) == AddressingModes.YIndexedZeroPage)
                    {
                        Parser.Advance(); // ')'
                        currentToken = Parser.CurrentToken;
                        tokenType = Token.GetType(currentToken);
                        rparenConsumed = true;
                    }
                }
                if (tokenType == HopperToken.Comma)
                {
                    Parser.Advance(); // ','
                    currentToken = Parser.CurrentToken;
                    tokenType = Token.GetType(currentToken);
                    if ((tokenType != HopperToken.Register) || ((currentToken["lexeme"] != "X") && (currentToken["lexeme"] != "Y")))
                    {
                        Parser.ErrorAtCurrent("index register expected");
                        break;
                    }
                    string registerString = currentToken["lexeme"];
                    registerName = registerString[0];
                    Parser.Advance(); // X|Y
                    currentToken = Parser.CurrentToken;
                    tokenType = Token.GetType(currentToken);
                }
            }
            if (immediateValue <= 255)
            {
                byte operand = byte(immediateValue);
                if (expectIndirect)
                {
                    switch (registerName)
                    {
                        case 'X':
                        {
                            if ((addressingModes & (AddressingModes.XIndexedZeroPage)) != AddressingModes.XIndexedZeroPage)
                            {
                                Die(0x0B);
                            }
                            // XIndexedZeroPage=0x1000,  // (nn,X)
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.XIndexedZeroPage);
                        }
                        case 'Y':
                        {
                            if ((addressingModes & (AddressingModes.YIndexedZeroPage)) != AddressingModes.YIndexedZeroPage)
                            {
                                Die(0x0B);
                            }
                            // YIndexedZeroPage=0x2000,  // (nn), Y
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.YIndexedZeroPage);
                        }
                        default:
                        {
                            if ((addressingModes & (AddressingModes.ZeroPageIndirect)) != AddressingModes.ZeroPageIndirect)
                            {
                                Die(0x0B);
                            }
                            // ZeroPageIndirect=0x0800,  // (nn)
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.ZeroPageIndirect);
                        }
                    }
                }
                else
                {
                    switch (registerName)
                    {
                        case 'X':
                        {
                            if ((addressingModes & (AddressingModes.ZeroPageX)) != AddressingModes.ZeroPageX)
                            {
                                Die(0x0B);
                            }
                            // ZeroPageX=0x0200,         // nn,X
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.ZeroPageX);
                        }
                        case 'Y':
                        {
                            if ((addressingModes & (AddressingModes.ZeroPageY)) != AddressingModes.ZeroPageY)
                            {
                                Die(0x0B);
                            }
                            // ZeroPageY=0x0400,         // nn,Y
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.ZeroPageY);
                        }
                        default:
                        {
                            if ((addressingModes & (AddressingModes.ZeroPage)) != AddressingModes.ZeroPage)
                            {
                                Die(0x0B);
                            }
                            // ZeroPage=0x0100,          // nn
                            OpCodes.EmitInstructionZeroPage(instructionName, byte(immediateValue), AddressingModes.ZeroPage);
                        }
                    }
                }
            }
            else
            {
                uint operand = immediateValue;
                if (expectIndirect)
                {
                    if (registerName == 'X')
                    {
                        if ((addressingModes & (AddressingModes.AbsoluteIndirectX)) != AddressingModes.AbsoluteIndirectX)
                        {
                            Die(0x0B);
                        }
                        // AbsoluteIndirectX=0x0080, // (nnnn,X)
                        OpCodes.EmitInstructionAbsolute(instructionName, immediateValue, AddressingModes.AbsoluteIndirectX);
                    }
                    else
                    {
                        if ((addressingModes & (AddressingModes.AbsoluteIndirect)) != AddressingModes.AbsoluteIndirect)
                        {
                            Die(0x0B);
                        }
                        // AbsoluteIndirect=0x0040,  // (nnnn)
                        OpCodes.EmitInstructionAbsolute(instructionName, immediateValue, AddressingModes.AbsoluteIndirect);
                    }
                }
                else
                {
                    switch (registerName)
                    {
                        case 'X':
                        {
                            if ((addressingModes & (AddressingModes.AbsoluteX)) != AddressingModes.AbsoluteX)
                            {
                                Die(0x0B);
                            }
                            // AbsoluteX=0x0020,         // nnnn,X
                            OpCodes.EmitInstructionAbsolute(instructionName, immediateValue, AddressingModes.AbsoluteX);
                        }
                        case 'Y':
                        {
                            if ((addressingModes & (AddressingModes.AbsoluteY)) != AddressingModes.AbsoluteY)
                            {
                                Die(0x0B);
                            }
                            // AbsoluteY=0x0010,         // nnnn,Y
                            OpCodes.EmitInstructionAbsolute(instructionName, immediateValue, AddressingModes.AbsoluteY);
                        }
                        default:
                        {
                            if ((addressingModes & (AddressingModes.Absolute)) != AddressingModes.Absolute)
                            {
                                Die(0x0B);
                            }
                            // Absolute=0x0008,          // nnnn
                            OpCodes.EmitInstructionAbsolute(instructionName, immediateValue, AddressingModes.Absolute);
                        }
                    }
                }
            }
            
            success = true;
            if (expectIndirect && !rparenConsumed)
            {
                Parser.Consume(HopperToken.SemiColon);
                if (Parser.HadError)
                {
                    success = false;
                }
            }
            break;
        }
        return success;
    }
    
    bool assembleStatement(bool noSemiColon, bool debugInfoInsert)
    {
        bool success = false;
        <string,string> currentToken = Parser.CurrentToken;
        string tokenString = currentToken["lexeme"];
        HopperToken tokenType = Token.GetType(currentToken);
        if (debugInfoInsert)
        {
            AsmStream.InsertDebugInfo(false);
        }
        
        switch (tokenType)
        {
            case HopperToken.Keyword:
            {
                if (tokenString == "if")
                {
                    success = assembleIfStatement();
                    noSemiColon = true;
                }
                else if (tokenString == "return")
                {
                    success = assembleReturn();
                }
                else if (tokenString == "break")
                {
                    success = assembleBreak();
                }
                else if (tokenString == "continue")
                {
                    success = assembleContinue();
                }
                else if (tokenString == "while")
                {
                    success = assembleWhile();
                    noSemiColon = true;
                }
                else if (tokenString == "loop")
                {
                    success = assembleLoop();
                    noSemiColon = true;
                }
                else
                {
                    // simple type
                    Parser.ErrorAtCurrent("no local declarations in assembly");
                }
            }
            case HopperToken.Instruction:
            {
                if (Architecture == CPUArchitecture.Z80A)
                {
                    success = assembleInstructionZ80();
                }
                else
                {    
                    success = assembleInstruction6502();
                }
                noSemiColon = true;
            }
            default:
            {
                if (   (tokenType == HopperToken.Identifier) 
                    || (tokenType == HopperToken.DottedIdentifier)
                    || (tokenType == HopperToken.Discarder)
                   )
                {
                    bool isDotted    = (tokenType == HopperToken.DottedIdentifier);
                    HopperToken nextTokenType = Parser.PeekTokenType();
                    if (Types.IsEnum(tokenString) || Types.IsFlags(tokenString))
                    {
                        Parser.ErrorAtCurrent("no local declarations in assembly");
                    }
                    else if (nextTokenType == HopperToken.Identifier)
                    {
                        Parser.ErrorAtCurrent("no local declarations in assembly");
                    }
                    else
                    {
                        Advance();
                        <string,string> idToken   = Parser.PreviousToken;
                        tokenString = idToken["lexeme"];
                        tokenType = Token.GetType(Parser.CurrentToken);
                        if (tokenType == HopperToken.LParen)
                        {
                            // method call
                            success = assembleMethodCall(tokenString);
                        }
                        else
                        {
                            if (!Parser.HadError)
                            {
                                Parser.ErrorAtCurrent("'(' expected");
                            }
                        }
                    }
                }
                else
                {
                    // failed
                }
            }
        } // switch (tokenType)
        if (success && !noSemiColon)
        {
            Parser.Consume(HopperToken.SemiColon);
            if (Parser.HadError)
            {
                success = false;
            }
        }
        return success;
    }
    
    assembleBlock()
    {
        loop
        {
            if (!Parser.Check(HopperToken.LBrace))
            {
                Parser.ErrorAtCurrent('{');
                break;
            }
            
            Parser.Advance(); // {
            loop
            {
                // next statement ..
                if (Parser.HadError)
                {
                    break;
                }
                if (Parser.Check(HopperToken.Directive))
                {
                    // preprocessor directives (#ifdef, #ifndef, #else, #endif")
                    Directives.Directive();
                }
                else
                {
                    // not directive
                    bool allDefined = Directives.IsAllDefined();
                    if (!allDefined)
                    {
                        loop
                        {
                            if (Parser.Check(HopperToken.Directive))
                            {
                                break;
                            }
                            if (Parser.Check(HopperToken.EOF))
                            {
                                break;
                            }
                            Parser.Advance(); // gobble gobble
                        }
                    }
                    else if (Parser.Check(HopperToken.RBrace))
                    {
                        Advance(); // }
                        break; // end of method
                    }
                    else
                    {      
                        <string,string> currentToken = Parser.CurrentToken;
                        HopperToken tokenType = Token.GetType(currentToken);
                        if (   (tokenType == HopperToken.Keyword)           // simple type, "if", "while", ...
                            || (tokenType == HopperToken.Identifier)        // assignment, procedure call
                            || (tokenType == HopperToken.Discarder)         // assignment   
                            || (tokenType == HopperToken.DottedIdentifier) 
                            || (tokenType == HopperToken.Instruction)
                            )
                        {
                            if (!assembleStatement(false, true))
                            {
                                if (!Parser.HadError)
                                {
                                    Parser.ErrorAtCurrent("bad statement?");
                                }
                                break;
                            }
                        }
                        else if (tokenType == HopperToken.LBrace)
                        {
                            AsmStream.InsertDebugInfo(false);
                            if (!assembleBlockScope())
                            {
                                if (!Parser.HadError)
                                {
                                    Parser.ErrorAtCurrent("bad 'block' statement?");
                                }
                                break;
                            }
                        }
                        else
                        {
                            Parser.ErrorAt(currentToken, "keyword or identifier expected");
                            break;
                        }
                    }
                }   
            } // loop
            break;
        } // loop
    }
    
    
    bool assemble()
    {
        <byte> globalCode = initializeGlobals();
        
        bool success = false;
        bool isMain = true;
        loop
        {
            if (HadError)
            {
                break;
            }
            
            // compile fIndex
            <string, string> startToken = Symbols.GetOverloadStart(iCurrentOverload);
            Scanner.Reset(startToken);
            Parser.Reset();
            Directives.New();
            AsmStream.New();
            
            if (globalCode.Count != 0)
            {
                AsmStream.AppendCode(globalCode);
                globalCode.Clear();
            }
            
            Types.SetCurrentMethod(iCurrentOverload);
                                                                                                                                                                    
            Parser.Advance(); // load first token
            
            <string,string> braceToken = Parser.CurrentToken; // for CodeGen location
            
            AsmStream.AddInstructionENTER();
            
            if (!isMain) // already pushed with globals
            {
                Block.PushBlock(false); // new block context
            }
            
            <string,variant> blockContext = Block.Top();
            < < string > > arguments = Symbols.GetOverloadArguments(iCurrentOverload);
            if (arguments.Count != 0)
            {
                Die(0x0B); // no return types in Assembly : preprocess should catch this
            }
            blockContext["arguments"] = arguments;
            blockContext["iOverload"] = iCurrentOverload.ToString();
            string returnType = Symbols.GetOverloadReturnType(iCurrentOverload);
            if (returnType != "void")
            {                    
                Die(0x0B); // no return types in Assembly : preprocess should catch this
            }
            Block.ReplaceTop(blockContext);
                     
            assembleBlock();
            
            if (Parser.HadError)
            {
                break;
            }
            Parser.ProgressTick(".");
            
            // check that #ifdef nesting is zero
            if (Directives.IsStillOpen)
            {
                Parser.ErrorAtCurrent("'#endif' expected before end of method");
                break;
            }
            
            <string,string> previousToken = Parser.PreviousToken;
            HopperToken tokenType = Token.GetType(previousToken);
            if (tokenType != HopperToken.RBrace)
            {
                DumpCurrent();
                DumpPrevious();
                Parser.Error("'}' expected in assemble()!!");
                Die(0x0B);
            }
            
            AsmStream.InsertDebugInfo(true);
            

            uint bytesToPop = Block.GetLocalsToPop(true, isMain);
            AsmStream.AddInstructionRET(bytesToPop);
            
            if (!isMain)
            {
                Block.PopBlock();
            }
            else
            {
                Block.Export(0);
                
                // pop "main" locals and arguments but keep globals
                <string,variant> mainContext = Block.Top();
                < <string> > empty;
                mainContext["locals"] = empty;
                mainContext["arguments"] = empty;
                Block.ReplaceTop(mainContext);
            }
            
            <byte> asmStream = AsmStream.CurrentStream;
            <string,string> debugInfo = AsmStream.DebugInfo;
            Symbols.SetCodeStream(iCurrentOverload, asmStream, debugInfo);
            AsmStream.ClearDebugInfo();
            
            Symbols.OverloadWasCompiled(iCurrentOverload);         
            if (!Symbols.OverloadNextToCompile(ref iCurrentOverload))
            {
                success = true; // all done
                break;
            }
            isMain = false;
            
        } // loop 
        return success;               
    }
    
    Hopper()
    {
        bool success = false;
        loop
        {
            <string> rawArgs = System.Arguments;
            <string> args;
            bool checkedBuild = true;
            bool touchesTree = false;
          
            for (uint iArg = 0; iArg < rawArgs.Count; iArg++)
            {
                string arg = rawArgs[iArg];
                if ((arg.Length == 2) && (arg[0] == '-'))
                {
                    arg = arg.ToLower();
                    switch (arg)
                    {
                        case "-g":
                        {
                            uint col;
                            uint row;
                            iArg++;
                            if (UInt.TryParse(rawArgs[iArg], ref col))
                            {
                            }
                            iArg++;
                            if (UInt.TryParse(rawArgs[iArg], ref row))
                            {
                            }
                            Parser.SetInteractive(byte(col), byte(row));
                        }
                        case "-a":
                        {
                            iArg++;
                            switch (rawArgs[iArg])
                            {
                                case "M6502":  { Architecture = CPUArchitecture.M6502;  }
                                case "W65C02": { Architecture = CPUArchitecture.W65C02; }
                                case "Z80A":   { Architecture = CPUArchitecture.Z80A;   }
                            } 
                        }
                        case "-x":
                        {
                            isExperimental = true;   
                        }
                        default:
                        {
                            args.Clear();
                            break;
                        }
                    }
                }
                else
                {
                    args.Append(arg);
                }
            }
          
            if ((args.Count != 1) || (Architecture == CPUArchitecture.None))
            {
                badArguments();
                break;
            }
            
            string jsonPath = args[0];
            string ext = ".json";
            if (!File.Exists(ref jsonPath, ref ext, "/Debug/Obj/"))
            {
                badArguments();
            }
            
            long startTime = Millis;
            loop
            {
                Symbols.New();
                if (!Symbols.Import(jsonPath))
                {
                    break;
                }
                isExperimental       = isExperimental || DefineExists("EXPERIMENTAL");
                
                uint mIndex;
                if (!Symbols.GetFunctionIndex("Hopper", ref mIndex))
                {
                    Parser.Error("where is 'Hopper'?");
                    break;
                }
                <uint> mOverloads = Symbols.GetFunctionOverloads(mIndex);
                if (mOverloads.Count != 1)
                {
                    Parser.Error("'Hopper' has overloads?");
                    break;
                }
                
                Scanner.New();
                Token.InitializeAssembler(Architecture);
                
                iCurrentOverload = mOverloads[0];
                Symbols.AddFunctionCall(iCurrentOverload); // yup, main is called at least once

                Block.PushBlock(false); // new block context
                if (!assemble())
                {
                    break;
                }
                Block.PopBlock();
                
                string extension = Path.GetExtension(jsonPath);
                string codePath = jsonPath.Replace(extension, ".code");
                if (!Symbols.ExportCode(codePath))
                {
                    break;
                }
                
                if (!IsInteractive())
                {
                    PrintLn();
                    Print("Success.", Colour.ProgressText, Colour.ProgressFace);
                    long elapsedTime = Millis - startTime;
                    float seconds = elapsedTime / 1000.0;
                    PrintLn("  " + seconds.ToString() + "s", Colour.ProgressHighlight, Colour.ProgressFace);
                }
                else
                {
                    Parser.ProgressDone();
                }
                success = true;
                break;
            } // main loop
            break;
        } // argument loop
        if (!success)
        {
            Diagnostics.SetError(0x0E);
        }
    }
}
