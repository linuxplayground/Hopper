unit Z80LibraryGenerated
{
    EmitMemoryAvailable()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // uint available;                memory.hs:29
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // if (0 == current)              memory.hs:33
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(65));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));              // break;                         memory.hs:35
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.JR_e, int(-75));                   // }                              memory.hs:39
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return available;              memory.hs:40
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryMaximum()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // uint available;                memory.hs:45
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 == current)              memory.hs:50
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(87));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // break;                         memory.hs:52
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        Emit      (OpCode.PUSH_DE);                          // if (size > available)          memory.hs:55
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x0157);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(12));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // available = size;              memory.hs:57
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.JR_e, int(-97));                   // }                              memory.hs:60
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // if (available > 0)             memory.hs:61
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(26));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));               // available--; available--;      memory.hs:63
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return available;              memory.hs:65
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryAllocate()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        EmitByte  (OpCode.LD_B_n, 0x0B);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.DJNZ_e, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // uint address;                  memory.hs:70
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x000C);                 // Die(0x0C);                     memory.hs:86
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // current = ReadWord(cFreeList); memory.hs:89
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitOffset(OpCode.INC_iIY_d, int(4));                // size++; size++; // +2 space for the size field
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.INC_iIY_d, int(4));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if (size < 6)                  memory.hs:91
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.CALL_nn, 0x0134);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0006);                 // size = 6; // minimum size for participation in free list
        EmitOffset(OpCode.LD_iIY_d_E, int(4));
        EmitOffset(OpCode.LD_iIY_d_D, int(5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // if (0 == current)              memory.hs:97
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress185B = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // break;                         memory.hs:99
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // currentNext = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-16));
        EmitOffset(OpCode.LD_iIY_d_H, int(-15));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // currentPrev = ReadWord(current + 4);
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-18));
        EmitOffset(OpCode.LD_iIY_d_H, int(-17));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));             // if ((currentSize >= size) &&   memory.hs:105
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x017E);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(65));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_BC_nn, 0x0000);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(27));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-6));
        EmitOffset(OpCode.LD_B_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x0134);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(48));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // best = current;                memory.hs:110
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));             // bestSize = currentSize;        memory.hs:111
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // bestNext = currentNext;        memory.hs:112
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(-18));             // bestPrev = currentPrev;        memory.hs:113
        EmitOffset(OpCode.LD_D_iIY_d, int(-17));
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // if (bestSize == size)          memory.hs:115
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(15));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // break; // can't get better than that
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        uint jumpAddress1963 = CurrentAddress - 272;
        EmitWord  (OpCode.JP_nn, jumpAddress1963);           // }                              memory.hs:120
        PatchByte(jumpAddress185B+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress185B+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // address = best + 2;            memory.hs:121
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // if (bestSize >= size + 6)      memory.hs:122
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x017E);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1991 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // WriteWord(best, size);         memory.hs:126
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // newHole = best + size;         memory.hs:129
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-20));
        EmitOffset(OpCode.LD_iIY_d_H, int(-19));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // newHoleSize = bestSize - size; memory.hs:130
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-22));
        EmitOffset(OpCode.LD_iIY_d_H, int(-21));
        EmitOffset(OpCode.LD_E_iIY_d, int(-20));             // WriteWord(newHole, newHoleSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-19));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == bestPrev)             memory.hs:133
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(124));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, newHole); memory.hs:135
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+2,  bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+4,  0); // start of list now
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:138
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1A56 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        uint jumpAddress1A77 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:142
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+2,  bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+4,  bestPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(bestPrev+2, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:149
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1ADC = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress1A56+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1A56+1, byte(CurrentAddress >> 8));
        PatchByte(jumpAddress1A77+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1A77+1, byte(CurrentAddress >> 8));
        uint jumpAddress1AFD = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:154
        PatchByte(jumpAddress1991+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1991+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // else if (bestSize >= size)     memory.hs:155
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x017E);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1B15 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // WriteWord(best, bestSize);     memory.hs:162
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == bestPrev)             memory.hs:164
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(69));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, bestNext);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:168
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(118));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(ReadWord(cFreeList)+4, 0); // start of list now so no previous
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(82));                    // }                              memory.hs:172
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(bestPrev+2, bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:176
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(42));
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, bestPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(10));                    // }                              memory.hs:181
        PatchByte(jumpAddress1B15+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1B15+1, byte(CurrentAddress >> 8));
        EmitWord  (OpCode.LD_DE_nn, 0x000C);                 // Die(0x0C);                     memory.hs:184
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        PatchByte(jumpAddress1ADC+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1ADC+1, byte(CurrentAddress >> 8));
        PatchByte(jumpAddress1AFD+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1AFD+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // break;                         memory.hs:187
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryFree()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        EmitByte  (OpCode.LD_B_n, 0x0E);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.DJNZ_e, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // uint blockAddress;             memory.hs:193
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x000B);                 // Die(0x0B);                     memory.hs:212
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // break;                         memory.hs:213
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        Emit      (OpCode.PUSH_DE);                          // size  = ReadWord(blockAddress);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // current  = ReadWord(cFreeList);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 == current)              memory.hs:221
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(63));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // break;                         memory.hs:223
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x0157);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(40));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // break;                         memory.hs:228
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitOffset(OpCode.JR_e, int(-73));                   // }                              memory.hs:232
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));              // currentPrev = previous;        memory.hs:233
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // currentSize = 0;               memory.hs:234
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // currentNext = 0;               memory.hs:235
        EmitOffset(OpCode.LD_iIY_d_E, int(-14));
        EmitOffset(OpCode.LD_iIY_d_D, int(-13));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 != current)              memory.hs:236
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(48));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // currentSize = ReadWord(current);
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // currentNext = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // freeSlot = address-2;          memory.hs:243
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-16));
        EmitOffset(OpCode.LD_iIY_d_D, int(-15));
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == currentPrev)          memory.hs:244
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1D05 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+4, 0);      memory.hs:248
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current+ 4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // gapFront = ReadWord(cFreeList) - (freeSlot+size);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-18));
        EmitOffset(OpCode.LD_iIY_d_H, int(-17));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapFront)             memory.hs:251
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1D8A = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // nextSize = ReadWord(ReadWord(cFreeList));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-20));
        EmitOffset(OpCode.LD_iIY_d_H, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // nextNext = ReadWord(ReadWord(cFreeList)+2);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-22));
        EmitOffset(OpCode.LD_iIY_d_H, int(-21));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteWord(freeSlot, size+nextSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-20));
        EmitOffset(OpCode.LD_D_iIY_d, int(-19));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, nextNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));             // if (0 != nextNext)             memory.hs:258
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(30));
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));             // WriteWord(nextNext+4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress1D8A+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1D8A+1, byte(CurrentAddress >> 8));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, freeSlot);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
        PatchByte(jumpAddress1D05+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1D05+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // }                              memory.hs:264
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1E64 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +2, 0);   memory.hs:271
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // prevSize = ReadWord(currentPrev);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-24));
        EmitOffset(OpCode.LD_iIY_d_H, int(-23));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // gapBack = freeSlot - (currentPrev+prevSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-26));
        EmitOffset(OpCode.LD_iIY_d_H, int(-25));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapBack)              memory.hs:274
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(62));
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // WriteWord(currentPrev, prevSize+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, 0); // nothing beyond freeSlot, tail of freeList
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);                           // }                              memory.hs:280
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
        PatchByte(jumpAddress1E64+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1E64+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current    +4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // prevSize = ReadWord(currentPrev);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-24));
        EmitOffset(OpCode.LD_iIY_d_H, int(-23));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // gapBack = freeSlot - (currentPrev+prevSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-26));
        EmitOffset(OpCode.LD_iIY_d_H, int(-25));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapBack)              memory.hs:290
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1FFB = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // WriteWord(currentPrev, prevSize+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current+4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // freeSlot = currentPrev;        memory.hs:296
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        EmitOffset(OpCode.LD_iIY_d_E, int(-16));
        EmitOffset(OpCode.LD_iIY_d_D, int(-15));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // size = prevSize+size;          memory.hs:297
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(-24));
        EmitOffset(OpCode.LD_H_iIY_d, int(-23));
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        PatchByte(jumpAddress1FFB+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1FFB+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // gapNext = current - (freeSlot+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-28));
        EmitOffset(OpCode.LD_iIY_d_H, int(-27));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapNext)              memory.hs:300
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(122));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteWord(freeSlot, size+currentSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, currentNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));             // if (0 != currentNext)          memory.hs:305
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(47));
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));             // WriteWord(currentNext+4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
        Emit      (OpCode.POP_DE);                           // break;                         memory.hs:311
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCCreate()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.INC_iIY_d, int(4));                // uint this;                     gc.hs:13
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.INC_iIY_d, int(4));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // this = Memory.Allocate(size+2);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryAllocate"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // WriteByte(this+iType,      byte(objectType));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // WriteByte(this+iReference, 0); // it will get its first reference when pushed to the stack via R0/HL
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_HL_nn, 0x0001);                 // for (i= iReference+1; i < size; i++)
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x0134);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(37));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));              // WriteByte(this+i, 0);          gc.hs:21
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-4));               // }                              gc.hs:22
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-3));
        EmitOffset(OpCode.JR_e, int(-60));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return this;                   gc.hs:23
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCRelease()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // byte count = ReadByte(this+iReference);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));               // count--;                       gc.hs:28
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // if (count == 0)                gc.hs:29
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(15));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // Memory.Free(this);             gc.hs:31
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryFree"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // }                              gc.hs:32
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCClone()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // uint i;                        gc.hs:40
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint copy = Memory.Allocate(size);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryAllocate"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i = 0; i < size; i++)     gc.hs:43
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, 0x0134);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(52));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // WriteByte(copy+i, ReadByte(source+i));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-2));               // }                              gc.hs:46
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-1));
        EmitOffset(OpCode.JR_e, int(-75));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteByte(copy+iReference, 1); gc.hs:47
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0001);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // return copy;                   gc.hs:48
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringNew()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // uint this = GC.Create(Type.String, 14); // default size is 16 (less block size)
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000E);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        Emit      (OpCode.POP_DE);                           // return this;                   string.hs:31
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringNewFromConstant()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // uint a = 0;                    string.hs:35
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x000A);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_HL_nn, 0x0000);                 // return 0;                      string.hs:37
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringGetLength()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // return ReadWord(this+siLength);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayGetCount()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // return ReadWord(this+aiCount); array.hs:28
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayNew()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // uint this;                     array.hs:33
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if ((elementType ==Type.UInt) || (elementType ==Type.Int))
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0004);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(32));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0002);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(20));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // size = size << 2;              array.hs:37
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_BC_nn, 0x0002);
        EmitWord  (OpCode.CALL_nn, 0x01A1);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.JR_e, int(50));                    // }                              array.hs:38
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // else if (elementType == Type.Bool)
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(22));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // size = (size + 7) >> 3;        array.hs:41
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0007);
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_BC_nn, 0x0003);
        EmitWord  (OpCode.CALL_nn, 0x01AA);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0012);                 // }                              array.hs:42
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0003);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);                 // WriteWord(this+aiType, byte(elementType));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // WriteWord(this+aiCount, count);
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return this;                   array.hs:46
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayNewFromConstant()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // uint a = 0;                    array.hs:50
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x000A);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_HL_nn, 0x0000);                 // return 0;                      array.hs:52
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
}
