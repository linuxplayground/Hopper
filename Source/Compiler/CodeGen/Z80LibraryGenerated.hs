unit Z80LibraryGenerated
{
    EmitStringNew()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // uint this = GC.Create(Type.String, 12); // default size is 16 less header size (blocksize, ref and type)
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000C);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        Emit      (OpCode.POP_DE);                           // return this;                   string.hs:18
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringNewFromConstant0()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        EmitByte  (OpCode.LD_B_n, 0x06);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.DJNZ_e, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // uint this;                     string.hs:22
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        Emit      (OpCode.PUSH_DE);                          // if ((size & 0x000F) != 0)      string.hs:29
        EmitWord  (OpCode.LD_DE_nn, 0x000F);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(20));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // size = (size + 15) & 0xFFF0;       // round up to nearest 16 byte boundary
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_A_L);
        EmitByte  (OpCode.AND_A_n, 0xF0);
        Emit      (OpCode.LD_L_A);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // this = GC.Create(Type.String, size-4); // -4 (header added by Create and Allocate)
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);                 // destination = this + siChars;  string.hs:34
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0008);                 // constantLocation = ReadWord(ConstantStart) + 2;
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        Emit      (OpCode.PUSH_DE);                          // source      = constantLocation + location;
        EmitOffset(OpCode.LD_E_iIY_d, int(6));
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-8));
        EmitOffset(OpCode.LD_iIY_d_H, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length; i++)     string.hs:37
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-10));              // destination++;                 string.hs:40
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-9));
        EmitOffset(OpCode.INC_iIY_d, int(-8));               // source++;                      string.hs:41
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-7));
        EmitOffset(OpCode.INC_iIY_d, int(-6));               // }                              string.hs:42
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-5));
        EmitOffset(OpCode.JR_e, int(-79));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // WriteWord(this + siLength, length);
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return this;                   string.hs:44
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringNewFromConstant1()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // byte lch = byte(chch & 0xFF);  string.hs:48
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        EmitByte  (OpCode.LD_D_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // byte mch = byte(chch >> 8);    string.hs:49
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.LD_E_D);
        EmitByte  (OpCode.LD_D_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint this;                     string.hs:50
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // this = GC.Create(Type.String, 12); // 16-4 (header added by Create and Allocate)
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x000C);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);                 // WriteByte(this + siChars, lch);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // if (mch != 0)                  string.hs:53
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(29));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteByte(this + siChars + 1, mch);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint length = 2;               string.hs:57
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // if (mch == 0)                  string.hs:58
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);                 // length = 1;                    string.hs:60
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(this + siLength, length);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // return this;                   string.hs:63
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringGetLength()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // return ReadWord(this+siLength);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringGetChar()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // uint value;                    string.hs:71
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // if (index >= length)           string.hs:73
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);                 // Die(0x05); // string index out of range
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // value = ReadByte(this + siChars + index);
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        Emit      (OpCode.POP_DE);                           // return value;                  string.hs:78
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringBuildChar()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);                          // uint capacity = ReadWord(str-2) - 6; // -6 for blocksize, ref, type, length
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint length = ReadWord(str+siLength);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint strExpanded;              string.hs:85
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);                          // uint i;                        string.hs:86
        Emit      (OpCode.PUSH_DE);                          // uint source;                   string.hs:87
        Emit      (OpCode.PUSH_DE);                          // uint destination;              string.hs:88
        Emit      (OpCode.PUSH_DE);                          // byte references;               string.hs:89
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // if (length >= capacity)        string.hs:90
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress0521 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        Emit      (OpCode.PUSH_IY);                          // references  = ReadByte(str + 1);                     // GC reference count
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // strExpanded = GC.Create(Type.String, capacity + 18); // capacity + 6 + 16 - 4 (-4 for header added by Create and Allocate)
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0012);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        Emit      (OpCode.PUSH_IY);                          // source      = str + siChars;   string.hs:95
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // destination = strExpanded + siChars;
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length; i++)     string.hs:97
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-12));              // destination++;                 string.hs:100
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-11));
        EmitOffset(OpCode.INC_iIY_d, int(-10));              // source++;                      string.hs:101
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-9));
        EmitOffset(OpCode.INC_iIY_d, int(-8));               // }                              string.hs:102
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-7));
        EmitOffset(OpCode.JR_e, int(-79));
        Emit      (OpCode.PUSH_IY);                          // GC.Release(str);               string.hs:103
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCRelease"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // str = strExpanded;             string.hs:104
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIX_d_E, int(0));
        EmitOffset(OpCode.LD_iIX_d_D, int(1));
        Emit      (OpCode.PUSH_IY);                          // WriteByte(str + 1, references);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress0521+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress0521+1, byte(CurrentAddress >> 8));
        Emit      (OpCode.PUSH_IY);                          // WriteByte(str + siChars + length, byte(append));
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_IY);                          // WriteWord(str + siLength,          length+1);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringBuildString()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);                          // uint capacity = ReadWord(str-2) - 6; // -6 for blocksize, ref, type, length
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint length   = ReadWord(str+siLength);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint length2  = ReadWord(append+siLength);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint strExpanded;              string.hs:115
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);                          // uint size;                     string.hs:116
        Emit      (OpCode.PUSH_DE);                          // uint i;                        string.hs:117
        Emit      (OpCode.PUSH_DE);                          // uint source;                   string.hs:118
        Emit      (OpCode.PUSH_DE);                          // uint destination;              string.hs:119
        Emit      (OpCode.PUSH_DE);                          // byte references;               string.hs:120
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // if (length+length2 >= capacity)
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress0788 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        Emit      (OpCode.PUSH_IY);                          // references  = ReadByte(str + 1);              // GC reference count
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-18));
        EmitOffset(OpCode.LD_iIY_d_H, int(-17));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // size = length + length2 + 6;                  // +6 for blocksize, ref, type, length
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        Emit      (OpCode.PUSH_DE);                          // if ((size & 0x000F) != 0)      string.hs:126
        EmitWord  (OpCode.LD_DE_nn, 0x000F);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(20));
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // size = (size + 15) & 0xFFF0;              // round up to nearest 16 byte boundary
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_A_L);
        EmitByte  (OpCode.AND_A_n, 0xF0);
        Emit      (OpCode.LD_L_A);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // strExpanded = GC.Create(Type.String, size-4); // -4 (header added by Create and Allocate)
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-8));
        EmitOffset(OpCode.LD_iIY_d_H, int(-7));
        Emit      (OpCode.PUSH_IY);                          // source      = str + siChars;   string.hs:131
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // destination = strExpanded + siChars;
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-16));
        EmitOffset(OpCode.LD_iIY_d_H, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length; i++)     string.hs:133
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-16));              // destination++;                 string.hs:136
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-15));
        EmitOffset(OpCode.INC_iIY_d, int(-14));              // source++;                      string.hs:137
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-13));
        EmitOffset(OpCode.INC_iIY_d, int(-12));              // }                              string.hs:138
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-11));
        EmitOffset(OpCode.JR_e, int(-79));
        Emit      (OpCode.PUSH_IY);                          // GC.Release(str);               string.hs:139
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCRelease"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));              // str = strExpanded;             string.hs:140
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIX_d_E, int(0));
        EmitOffset(OpCode.LD_iIX_d_D, int(1));
        Emit      (OpCode.PUSH_IY);                          // WriteByte(str + 1, references);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-18));
        EmitOffset(OpCode.LD_H_iIY_d, int(-17));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress0788+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress0788+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // source      = append + siChars;
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        Emit      (OpCode.PUSH_IY);                          // destination = str + siChars + length;
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-16));
        EmitOffset(OpCode.LD_iIY_d_H, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length2; i++)    string.hs:145
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-6));
        EmitOffset(OpCode.LD_B_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-16));              // destination++;                 string.hs:148
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-15));
        EmitOffset(OpCode.INC_iIY_d, int(-14));              // source++;                      string.hs:149
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-13));
        EmitOffset(OpCode.INC_iIY_d, int(-12));              // }                              string.hs:150
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-11));
        EmitOffset(OpCode.JR_e, int(-79));
        Emit      (OpCode.PUSH_IY);                          // WriteWord(str + siLength, length+length2);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringBuildFront()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);                          // uint capacity = ReadWord(str-2) - 6; // -6 for blocksize, ref, type, length
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint length = ReadWord(str+siLength);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint strExpanded;              string.hs:157
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);                          // uint i;                        string.hs:158
        Emit      (OpCode.PUSH_DE);                          // uint source;                   string.hs:159
        Emit      (OpCode.PUSH_DE);                          // uint destination;              string.hs:160
        Emit      (OpCode.PUSH_DE);                          // byte references;               string.hs:161
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // if (length >= capacity)        string.hs:162
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress0A73 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        Emit      (OpCode.PUSH_IY);                          // references  = ReadByte(str + 1);                     // GC reference count
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitWord  (OpCode.LD_DE_nn, 0x000F);                 // strExpanded = GC.Create(Type.String, capacity + 18); // capacity + 6 + 16 - 4 (-4 for header added by Create and Allocate)
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0012);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        Emit      (OpCode.PUSH_IY);                          // source      = str + siChars;   string.hs:167
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // destination = strExpanded + siChars;
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length; i++)     string.hs:169
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-12));              // destination++;                 string.hs:172
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-11));
        EmitOffset(OpCode.INC_iIY_d, int(-10));              // source++;                      string.hs:173
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-9));
        EmitOffset(OpCode.INC_iIY_d, int(-8));               // }                              string.hs:174
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-7));
        EmitOffset(OpCode.JR_e, int(-79));
        Emit      (OpCode.PUSH_IY);                          // GC.Release(str);               string.hs:175
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCRelease"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // str = strExpanded;             string.hs:176
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_IY);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIX_d_E, int(0));
        EmitOffset(OpCode.LD_iIX_d_D, int(1));
        Emit      (OpCode.PUSH_IY);                          // WriteByte(str + 1, references);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress0A73+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress0A73+1, byte(CurrentAddress >> 8));
        Emit      (OpCode.PUSH_IY);                          // source      = str + siChars + length - 1; // last character
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);                 // destination = source + 1;      string.hs:180
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i=0; i < length; i++)     string.hs:181
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(66));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.DEC_iIY_d, int(-12));              // destination--;                 string.hs:184
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-12));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-11));
        EmitOffset(OpCode.DEC_iIY_d, int(-10));              // source--;                      string.hs:185
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-10));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-9));
        EmitOffset(OpCode.INC_iIY_d, int(-8));               // }                              string.hs:186
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-7));
        EmitOffset(OpCode.JR_e, int(-89));
        Emit      (OpCode.PUSH_IY);                          // WriteByte(str + siChars,  byte(append));
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_IY);                          // WriteWord(str + siLength, length+1);
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitStringBuildClear()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        Emit      (OpCode.PUSH_IY);                          // WriteWord(str + siLength, 0);  string.hs:192
        Emit      (OpCode.POP_IX);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_IX_DE);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_IX);
        EmitOffset(OpCode.LD_E_iIX_d, int(0));
        EmitOffset(OpCode.LD_D_iIX_d, int(1));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryAvailable()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // uint available;                memory.hs:14
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // if (0 == current)              memory.hs:18
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(65));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));              // break;                         memory.hs:20
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.JR_e, int(-75));                   // }                              memory.hs:24
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return available;              memory.hs:25
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryMaximum()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // uint available;                memory.hs:30
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 == current)              memory.hs:35
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(87));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // break;                         memory.hs:37
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        Emit      (OpCode.PUSH_DE);                          // if (size > available)          memory.hs:40
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(12));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // available = size;              memory.hs:42
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.JR_e, int(-97));                   // }                              memory.hs:45
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // if (available > 0)             memory.hs:46
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(26));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));               // available--; available--;      memory.hs:48
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return available;              memory.hs:50
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryAllocate()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        EmitByte  (OpCode.LD_B_n, 0x0B);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.DJNZ_e, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // uint address;                  memory.hs:55
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x000C);                 // Die(0x0C);                     memory.hs:71
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // current = ReadWord(cFreeList); memory.hs:74
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitOffset(OpCode.INC_iIY_d, int(4));                // size += 2; // +2 space for the size field
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.INC_iIY_d, int(4));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if (size < 6)                  memory.hs:76
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0006);                 // size = 6; // minimum size for participation in free list
        EmitOffset(OpCode.LD_iIY_d_E, int(4));
        EmitOffset(OpCode.LD_iIY_d_D, int(5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // if (0 == current)              memory.hs:82
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress0E8D = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // break;                         memory.hs:84
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // currentNext = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-16));
        EmitOffset(OpCode.LD_iIY_d_H, int(-15));
        EmitOffset(OpCode.LD_L_iIY_d, int(-12));             // currentPrev = ReadWord(current + 4);
        EmitOffset(OpCode.LD_H_iIY_d, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-18));
        EmitOffset(OpCode.LD_iIY_d_H, int(-17));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));             // if ((currentSize >= size) &&   memory.hs:90
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(65));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_BC_nn, 0x0000);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(27));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-6));
        EmitOffset(OpCode.LD_B_iIY_d, int(-5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(48));
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));             // best = current;                memory.hs:95
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        EmitOffset(OpCode.LD_iIY_d_E, int(-4));
        EmitOffset(OpCode.LD_iIY_d_D, int(-3));
        EmitOffset(OpCode.LD_E_iIY_d, int(-14));             // bestSize = currentSize;        memory.hs:96
        EmitOffset(OpCode.LD_D_iIY_d, int(-13));
        EmitOffset(OpCode.LD_iIY_d_E, int(-6));
        EmitOffset(OpCode.LD_iIY_d_D, int(-5));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // bestNext = currentNext;        memory.hs:97
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(-18));             // bestPrev = currentPrev;        memory.hs:98
        EmitOffset(OpCode.LD_D_iIY_d, int(-17));
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // if (bestSize == size)          memory.hs:100
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(15));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // break; // can't get better than that
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        uint jumpAddress0F95 = CurrentAddress - 272;
        EmitWord  (OpCode.JP_nn, jumpAddress0F95);           // }                              memory.hs:105
        PatchByte(jumpAddress0E8D+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress0E8D+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // address = best + 2;            memory.hs:106
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // if (bestSize >= size + 6)      memory.hs:107
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0006);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress0FC3 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // WriteWord(best, size);         memory.hs:111
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // newHole = best + size;         memory.hs:114
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-20));
        EmitOffset(OpCode.LD_iIY_d_H, int(-19));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // newHoleSize = bestSize - size; memory.hs:115
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-22));
        EmitOffset(OpCode.LD_iIY_d_H, int(-21));
        EmitOffset(OpCode.LD_E_iIY_d, int(-20));             // WriteWord(newHole, newHoleSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-19));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == bestPrev)             memory.hs:118
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(124));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, newHole); memory.hs:120
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+2,  bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+4,  0); // start of list now
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:123
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1088 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        uint jumpAddress10A9 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:127
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+2,  bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));             // WriteWord(newHole+4,  bestPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(bestPrev+2, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:134
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress110E = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, newHole);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-20));
        EmitOffset(OpCode.LD_H_iIY_d, int(-19));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress1088+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1088+1, byte(CurrentAddress >> 8));
        PatchByte(jumpAddress10A9+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress10A9+1, byte(CurrentAddress >> 8));
        uint jumpAddress112F = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:139
        PatchByte(jumpAddress0FC3+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress0FC3+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // else if (bestSize >= size)     memory.hs:140
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1147 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // WriteWord(best, bestSize);     memory.hs:147
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == bestPrev)             memory.hs:149
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(69));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, bestNext);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:153
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(118));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(ReadWord(cFreeList)+4, 0); // start of list now so no previous
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(82));                    // }                              memory.hs:157
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(bestPrev+2, bestNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // if (0 != bestNext)             memory.hs:161
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(42));
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // WriteWord(bestNext+4, bestPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(10));                    // }                              memory.hs:166
        PatchByte(jumpAddress1147+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1147+1, byte(CurrentAddress >> 8));
        EmitWord  (OpCode.LD_DE_nn, 0x000C);                 // Die(0x0C);                     memory.hs:169
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        PatchByte(jumpAddress110E+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress110E+1, byte(CurrentAddress >> 8));
        PatchByte(jumpAddress112F+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress112F+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // break;                         memory.hs:172
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitMemoryFree()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        EmitByte  (OpCode.LD_B_n, 0x0E);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.DJNZ_e, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // uint blockAddress;             memory.hs:178
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x000B);                 // Die(0x0B);                     memory.hs:197
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // blockAddress = address - 2;    memory.hs:200
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        Emit      (OpCode.PUSH_DE);                          // size  = ReadWord(blockAddress);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // current  = ReadWord(cFreeList);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 == current)              memory.hs:206
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(63));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // break;                         memory.hs:208
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(40));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // break;                         memory.hs:213
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        EmitOffset(OpCode.LD_iIY_d_E, int(-8));
        EmitOffset(OpCode.LD_iIY_d_D, int(-7));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // current = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitOffset(OpCode.JR_e, int(-73));                   // }                              memory.hs:217
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));              // currentPrev = previous;        memory.hs:218
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // currentSize = 0;               memory.hs:219
        EmitOffset(OpCode.LD_iIY_d_E, int(-12));
        EmitOffset(OpCode.LD_iIY_d_D, int(-11));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // currentNext = 0;               memory.hs:220
        EmitOffset(OpCode.LD_iIY_d_E, int(-14));
        EmitOffset(OpCode.LD_iIY_d_D, int(-13));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // if (0 != current)              memory.hs:221
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(48));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // currentSize = ReadWord(current);
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-12));
        EmitOffset(OpCode.LD_iIY_d_H, int(-11));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // currentNext = ReadWord(current + 2);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-14));
        EmitOffset(OpCode.LD_iIY_d_H, int(-13));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // freeSlot = address-2;          memory.hs:228
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-16));
        EmitOffset(OpCode.LD_iIY_d_D, int(-15));
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // if (0 == currentPrev)          memory.hs:229
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1337 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+4, 0);      memory.hs:233
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current+ 4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // gapFront = ReadWord(cFreeList) - (freeSlot+size);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-18));
        EmitOffset(OpCode.LD_iIY_d_H, int(-17));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapFront)             memory.hs:236
        Emit      (OpCode.OR_A_H);
        uint jumpAddress13BC = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // nextSize = ReadWord(ReadWord(cFreeList));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-20));
        EmitOffset(OpCode.LD_iIY_d_H, int(-19));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // nextNext = ReadWord(ReadWord(cFreeList)+2);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-22));
        EmitOffset(OpCode.LD_iIY_d_H, int(-21));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteWord(freeSlot, size+nextSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-20));
        EmitOffset(OpCode.LD_D_iIY_d, int(-19));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, nextNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));             // if (0 != nextNext)             memory.hs:243
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(30));
        EmitOffset(OpCode.LD_L_iIY_d, int(-22));             // WriteWord(nextNext+4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-21));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress13BC+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress13BC+1, byte(CurrentAddress >> 8));
        EmitWord  (OpCode.LD_DE_nn, 0xFF09);                 // WriteWord(cFreeList, freeSlot);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        uint jumpAddress147D = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:249
        PatchByte(jumpAddress1337+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1337+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // else if (0 == current)         memory.hs:250
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1488 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +2, 0);   memory.hs:256
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // prevSize = ReadWord(currentPrev);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-24));
        EmitOffset(OpCode.LD_iIY_d_H, int(-23));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // gapBack = freeSlot - (currentPrev+prevSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-26));
        EmitOffset(OpCode.LD_iIY_d_H, int(-25));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapBack)              memory.hs:259
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(62));
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // WriteWord(currentPrev, prevSize+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, 0); // nothing beyond freeSlot, tail of freeList
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        uint jumpAddress155C = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              memory.hs:265
        PatchByte(jumpAddress1488+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1488+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot   +2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current    +4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // prevSize = ReadWord(currentPrev);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-24));
        EmitOffset(OpCode.LD_iIY_d_H, int(-23));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // gapBack = freeSlot - (currentPrev+prevSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-26));
        EmitOffset(OpCode.LD_iIY_d_H, int(-25));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapBack)              memory.hs:275
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1611 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_NZ_nn, 0xAA55);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // WriteWord(currentPrev, prevSize+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-24));
        EmitOffset(OpCode.LD_D_iIY_d, int(-23));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));             // WriteWord(currentPrev+2, current);
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteWord(current+4, currentPrev);
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-10));
        EmitOffset(OpCode.LD_H_iIY_d, int(-9));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));             // freeSlot = currentPrev;        memory.hs:281
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        EmitOffset(OpCode.LD_iIY_d_E, int(-16));
        EmitOffset(OpCode.LD_iIY_d_D, int(-15));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // size = prevSize+size;          memory.hs:282
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(-24));
        EmitOffset(OpCode.LD_H_iIY_d, int(-23));
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        PatchByte(jumpAddress1611+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1611+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // gapNext = current - (freeSlot+size);
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-28));
        EmitOffset(OpCode.LD_iIY_d_H, int(-27));
        Emit      (OpCode.LD_A_L);                           // if (0 == gapNext)              memory.hs:285
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(105));
        EmitOffset(OpCode.LD_E_iIY_d, int(-16));             // WriteWord(freeSlot, size+currentSize);
        EmitOffset(OpCode.LD_D_iIY_d, int(-15));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-12));
        EmitOffset(OpCode.LD_D_iIY_d, int(-11));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));             // WriteWord(freeSlot+2, currentNext);
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));             // if (0 != currentNext)          memory.hs:290
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(30));
        EmitOffset(OpCode.LD_L_iIY_d, int(-14));             // WriteWord(currentNext+4, freeSlot);
        EmitOffset(OpCode.LD_H_iIY_d, int(-13));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-16));
        EmitOffset(OpCode.LD_H_iIY_d, int(-15));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress147D+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress147D+1, byte(CurrentAddress >> 8));
        PatchByte(jumpAddress155C+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress155C+1, byte(CurrentAddress >> 8));
        Emit      (OpCode.POP_DE);                           // break;                         memory.hs:296
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCCreate()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.INC_iIY_d, int(4));                // uint this;                     gc.hs:13
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.INC_iIY_d, int(4));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(5));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // this = Memory.Allocate(size);  gc.hs:16
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryAllocate"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // WriteByte(this+iType,      byte(objectType));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // WriteByte(this+iReference, 0); // it will get its first reference when pushed to the stack via R0/HL
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_HL_nn, 0x0001);                 // for (i = iReference+1; i < size; i++)
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(4));
        EmitOffset(OpCode.LD_B_iIY_d, int(5));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(37));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));              // WriteByte(this+i, 0);          gc.hs:23
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0000);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-4));               // }                              gc.hs:24
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-3));
        EmitOffset(OpCode.JR_e, int(-60));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return this;                   gc.hs:25
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCRelease()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // byte count = ReadByte(this+iReference);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.DEC_iIY_d, int(-2));               // count--;                       gc.hs:30
        EmitByte  (OpCode.LD_A_n, 0xFF);
        EmitOffset(OpCode.CP_A_iIY_d, int(-2));
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.DEC_iIY_d, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // if (count == 0)                gc.hs:31
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(13));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // Memory.Free(this);             gc.hs:33
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryFree"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(25));                    // }                              gc.hs:34
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // WriteByte(this+iReference, count);
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);                           // }                              gc.hs:39
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitGCClone()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // uint i;                        gc.hs:42
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.AND_A);
        Emit      (OpCode.SBC_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint copy = Memory.Allocate(size);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("MemoryAllocate"));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // for (i = 0; i < size; i++)     gc.hs:45
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(52));
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));              // WriteByte(copy+i, ReadByte(source+i));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-2));
        EmitOffset(OpCode.LD_D_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-2));               // }                              gc.hs:48
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-1));
        EmitOffset(OpCode.JR_e, int(-75));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // WriteByte(copy+iReference, 1); gc.hs:49
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.LD_HL_nn, 0x0001);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // return copy;                   gc.hs:50
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayGetCount()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // return ReadWord(this+aiCount); array.hs:21
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayNew()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // uint size = count;             array.hs:25
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if ((elementType == Type.UInt) || (elementType == Type.Int))
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0004);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(32));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0002);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(20));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // size = size << 1;              array.hs:28
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_BC_nn, 0x0001);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHL"));
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.JR_e, int(77));                    // }                              array.hs:29
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // else if (elementType == Type.Bool)
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(49));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // size = (size >> 3);            array.hs:32
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_BC_nn, 0x0003);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHR"));
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // if ((count & 0x0007) != 0)     array.hs:33
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0007);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(8));
        EmitOffset(OpCode.INC_iIY_d, int(-2));               // size++;                        array.hs:35
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // }                              array.hs:37
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0012);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0003);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GCCreate"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);                 // WriteWord(this+aiCount, count);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // WriteByte(this+aiType, byte(elementType));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));              // return this;                   array.hs:41
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayNewFromConstant()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if ((elementType != Type.Byte) && (elementType != Type.Char))
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0003);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x00);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(32));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0001);
        EmitWord  (OpCode.LD_DE_nn, 0x0001);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x00);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x000A);                 // Die(0x0A);                     array.hs:47
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint this = Array.New(length, elementType);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(6));
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.CALL_nn, GetAddress("ArrayNew"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint destination = this + aiElements;
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint constantLocation = ReadWord(ConstantStart) + 2;
        Emit      (OpCode.PUSH_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0008);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint source      = constantLocation + location;
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-6));
        EmitOffset(OpCode.LD_D_iIY_d, int(-5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(8));
        EmitOffset(OpCode.LD_D_iIY_d, int(9));
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-8));
        EmitOffset(OpCode.LD_iIY_d_H, int(-7));
        EmitWord  (OpCode.LD_DE_nn, 0x0000);                 // uint i;                        array.hs:53
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_iIY_d_E, int(-10));             // for (i=0; i < length; i++)     array.hs:54
        EmitOffset(OpCode.LD_iIY_d_D, int(-9));
        EmitOffset(OpCode.LD_E_iIY_d, int(-10));
        EmitOffset(OpCode.LD_D_iIY_d, int(-9));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(6));
        EmitOffset(OpCode.LD_B_iIY_d, int(7));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("LT"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(56));
        EmitOffset(OpCode.LD_E_iIY_d, int(-4));              // WriteByte(destination, ReadByte(source));
        EmitOffset(OpCode.LD_D_iIY_d, int(-3));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(-8));
        EmitOffset(OpCode.LD_D_iIY_d, int(-7));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.INC_iIY_d, int(-4));               // destination++;                 array.hs:57
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-3));
        EmitOffset(OpCode.INC_iIY_d, int(-8));               // source++;                      array.hs:58
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-7));
        EmitOffset(OpCode.INC_iIY_d, int(-10));              // }                              array.hs:59
        EmitOffset(OpCode.JR_NZ_e, int(3));
        EmitOffset(OpCode.INC_iIY_d, int(-9));
        EmitOffset(OpCode.JR_e, int(-79));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return this;                   array.hs:60
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArrayGetItem()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // uint value;                    array.hs:64
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-10));
        EmitOffset(OpCode.LD_iIY_d_H, int(-9));
        EmitOffset(OpCode.LD_E_iIY_d, int(4));               // if (index >= count)            array.hs:69
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-10));
        EmitOffset(OpCode.LD_B_iIY_d, int(-9));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);                 // Die(0x02); // array index out of range
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // etype = Type(ReadByte(this+aiType));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-8));
        EmitOffset(OpCode.LD_iIY_d_H, int(-7));
        EmitWord  (OpCode.LD_BC_nn, 0x0004);                 // if ((etype == Type.UInt) || (etype == Type.Int))
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(32));
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_BC_nn, 0x0002);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(44));
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // value = ReadWord(this + aiElements + (index << 1));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0001);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHL"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        uint jumpAddress1C20 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              array.hs:77
        EmitOffset(OpCode.LD_L_iIY_d, int(-8));              // else if (etype == Type.Bool)   array.hs:78
        EmitOffset(OpCode.LD_H_iIY_d, int(-7));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(99));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // bit = (index & 0x07); // 0..7  array.hs:80
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        EmitByte  (OpCode.AND_A_n, 0x07);
        Emit      (OpCode.LD_L_A);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);                 // mask = (0b00000001 << bit);    array.hs:81
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHL"));
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // value = ReadByte(this + aiElements + (index >> 3)) & mask;
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        EmitWord  (OpCode.LD_BC_nn, 0x0003);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHR"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_C_iIY_d, int(-6));
        EmitOffset(OpCode.LD_B_iIY_d, int(-5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        Emit      (OpCode.LD_A_L);                           // if (value != 0)                array.hs:83
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(37));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);                 // value = 1;                     array.hs:85
        EmitOffset(OpCode.LD_iIY_d_E, int(-2));
        EmitOffset(OpCode.LD_iIY_d_D, int(-1));
        EmitOffset(OpCode.JR_e, int(26));                    // }                              array.hs:87
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // value = ReadByte(this + aiElements + index);
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        PatchByte(jumpAddress1C20+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1C20+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(-2));              // return value;                  array.hs:92
        EmitOffset(OpCode.LD_H_iIY_d, int(-1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
    EmitArraySetItem()
    {
        Emit      (OpCode.PUSH_IY);
        EmitWord  (OpCode.LD_inn_SP, 0xFF00);
        EmitWord  (OpCode.LD_IY_inn, 0xFF00);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_L_iIY_d, int(8));               // uint bit;                      array.hs:96
        EmitOffset(OpCode.LD_H_iIY_d, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitOffset(OpCode.LD_H_iIX_d, int(1));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(-8));
        EmitOffset(OpCode.LD_iIY_d_H, int(-7));
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // if (index >= count)            array.hs:100
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-8));
        EmitOffset(OpCode.LD_B_iIY_d, int(-7));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("GE"));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(10));
        EmitWord  (OpCode.LD_DE_nn, 0x0002);                 // Die(0x02); // array index out of range
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_HL);
        Emit      (OpCode.LD_A_L);
        EmitWord  (OpCode.LD_inn_A, 0xFF02);
        Emit      (OpCode.HALT);
        EmitOffset(OpCode.LD_L_iIY_d, int(8));               // etype = Type(ReadByte(this+aiType));
        EmitOffset(OpCode.LD_H_iIY_d, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0004);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.LD_L_iHL);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-6));
        EmitOffset(OpCode.LD_iIY_d_H, int(-5));
        EmitWord  (OpCode.LD_BC_nn, 0x0004);                 // if ((etype == Type.UInt) || (etype == Type.Int))
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(32));
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_BC_nn, 0x0002);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_Z_e, int(48));
        EmitOffset(OpCode.LD_L_iIY_d, int(8));               // WriteWord(this + aiElements + (index << 1), value);
        EmitOffset(OpCode.LD_H_iIY_d, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_BC_nn, 0x0001);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHL"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(4));
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        EmitOffset(OpCode.LD_iIX_d_H, int(1));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        uint jumpAddress1D92 = CurrentAddress + 1;
        EmitWord  (OpCode.JP_nn, 0xAA55);                    // }                              array.hs:108
        EmitOffset(OpCode.LD_L_iIY_d, int(-6));              // else if (etype == Type.Bool)   array.hs:109
        EmitOffset(OpCode.LD_H_iIY_d, int(-5));
        EmitWord  (OpCode.LD_BC_nn, 0x0006);
        EmitWord  (OpCode.LD_DE_nn, 0x0000);
        Emit      (OpCode.LD_A_B);
        Emit      (OpCode.CP_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(6));
        Emit      (OpCode.LD_A_C);
        Emit      (OpCode.CP_A_L);
        EmitOffset(OpCode.JR_NZ_e, int(2));
        EmitByte  (OpCode.LD_E_n, 0x01);
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        uint jumpAddress1DAF = CurrentAddress + 1;
        EmitWord  (OpCode.JP_Z_nn, 0xAA55);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));               // bit = (index & 0x07); // 0..7  array.hs:111
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        Emit      (OpCode.LD_A_L);
        EmitByte  (OpCode.AND_A_n, 0x07);
        Emit      (OpCode.LD_L_A);
        EmitByte  (OpCode.LD_H_n, 0x00);
        EmitOffset(OpCode.LD_iIY_d_L, int(-2));
        EmitOffset(OpCode.LD_iIY_d_H, int(-1));
        EmitOffset(OpCode.LD_L_iIY_d, int(8));               // index = this + aiElements + (index >> 3);
        EmitOffset(OpCode.LD_H_iIY_d, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(6));
        EmitOffset(OpCode.LD_H_iIY_d, int(7));
        EmitWord  (OpCode.LD_BC_nn, 0x0003);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHR"));
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_iIY_d_L, int(6));
        EmitOffset(OpCode.LD_iIY_d_H, int(7));
        EmitWord  (OpCode.LD_DE_nn, 0x0001);                 // mask = (0b00000001 << bit);    array.hs:113
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-2));
        EmitOffset(OpCode.LD_B_iIY_d, int(-1));
        Emit      (OpCode.POP_HL);
        EmitWord  (OpCode.CALL_nn, GetAddress("BITSHL"));
        EmitOffset(OpCode.LD_iIY_d_L, int(-4));
        EmitOffset(OpCode.LD_iIY_d_H, int(-3));
        EmitOffset(OpCode.LD_L_iIY_d, int(4));               // if (value == 0)                array.hs:114
        EmitOffset(OpCode.LD_H_iIY_d, int(5));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_H);
        EmitOffset(OpCode.JR_NZ_e, int(45));
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // value = ReadByte(index) & ~mask;
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_L_iIY_d, int(-4));
        EmitOffset(OpCode.LD_H_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.CPL);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.CPL);
        Emit      (OpCode.LD_H_A);
        Emit      (OpCode.PUSH_HL);
        Emit      (OpCode.POP_BC);
        Emit      (OpCode.POP_HL);
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.AND_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.AND_A_B);
        Emit      (OpCode.LD_H_A);
        EmitOffset(OpCode.LD_iIY_d_L, int(4));
        EmitOffset(OpCode.LD_iIY_d_H, int(5));
        EmitOffset(OpCode.JR_e, int(33));                    // }                              array.hs:117
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // value = ReadByte(index) | mask;
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        Emit      (OpCode.EX_iSP_IX);
        EmitOffset(OpCode.LD_L_iIX_d, int(0));
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.LD_C_iIY_d, int(-4));
        EmitOffset(OpCode.LD_B_iIY_d, int(-3));
        Emit      (OpCode.LD_A_L);
        Emit      (OpCode.OR_A_C);
        Emit      (OpCode.LD_L_A);
        Emit      (OpCode.LD_A_H);
        Emit      (OpCode.OR_A_B);
        Emit      (OpCode.LD_H_A);
        EmitOffset(OpCode.LD_iIY_d_L, int(4));
        EmitOffset(OpCode.LD_iIY_d_H, int(5));
        EmitOffset(OpCode.LD_E_iIY_d, int(6));               // WriteByte(index, byte(value & 0xFF));
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.PUSH_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.LD_L_E);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        EmitOffset(OpCode.JR_e, int(35));                    // }                              array.hs:123
        PatchByte(jumpAddress1DAF+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1DAF+1, byte(CurrentAddress >> 8));
        EmitOffset(OpCode.LD_L_iIY_d, int(8));               // WriteByte(this + aiElements + index, byte(value & 0xFF));
        EmitOffset(OpCode.LD_H_iIY_d, int(9));
        EmitWord  (OpCode.LD_DE_nn, 0x0005);
        Emit      (OpCode.ADD_HL_DE);
        EmitOffset(OpCode.LD_E_iIY_d, int(6));
        EmitOffset(OpCode.LD_D_iIY_d, int(7));
        Emit      (OpCode.ADD_HL_DE);
        Emit      (OpCode.PUSH_HL);
        EmitOffset(OpCode.LD_E_iIY_d, int(4));
        EmitOffset(OpCode.LD_D_iIY_d, int(5));
        Emit      (OpCode.LD_L_E);
        EmitByte  (OpCode.LD_H_n, 0x00);
        Emit      (OpCode.POP_IX);
        Emit      (OpCode.PUSH_IX);
        EmitOffset(OpCode.LD_iIX_d_L, int(0));
        Emit      (OpCode.POP_DE);
        PatchByte(jumpAddress1D92+0, byte(CurrentAddress & 0xFF));
        PatchByte(jumpAddress1D92+1, byte(CurrentAddress >> 8));
        Emit      (OpCode.POP_DE);                           // }                              array.hs:128
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_DE);
        Emit      (OpCode.POP_IY);
        Emit      (OpCode.RET);
    }
}
