program DASM
{
    #define JSON_EXPRESS // .code and .json are generated by us so assume .json files have no errors
    #define ASSEMBLER
    
    //#define EXPERIMENTAL
    
    uses "/Source/System/System"
    uses "/Source/System/Screen"
    
    uses "JSON/JSON"
    uses "JSON/Code"
    
    uses "CodeGen/Instructions"
    uses "CODEGEN/AsmZ80"
    
    uses "Tokens/Token"
    uses "Tokens/Scanner"
    uses "Tokens/SysCalls"
    uses "Tokens/LibCalls"
    uses "Tokens/Parser"
    
    bool extendedCodeSegment;
    
    uint codeSize = 0;
    uint instructionCount = 0;
    
    string pathLoaded;
    <string> sourceLines;
    string getSourceLine(string path, string lnum)
    {
        if (pathLoaded != path)
        {
            file sourceFile = File.Open(path);
            if (sourceFile.IsValid())
            {
                sourceLines.Clear();
                pathLoaded = path;
                loop
                {
                    string ln = sourceFile.ReadLine();
                    if (ln.Length == 0)
                    {
                        if (!sourceFile.IsValid())
                        {
                            break;
                        }
                    }
                    sourceLines.Append(ln);
                }
            }
        }
        string sourceLine;
        uint iline;
        if (UInt.TryParse(lnum, ref iline))
        {
            if (iline > 0)
            {
                iline--;
            }
            if (sourceLines.Count > iline)
            {
                sourceLine = sourceLines[iline];
            }
        }
        return sourceLine;
    }
    
    <byte> readIHex(file hexFile, ref uint org)
    {
        bool first = true;
        <byte> code;
        loop
        {
            string ln = hexFile.ReadLine();
            if (!hexFile.IsValid()) { break; }
            string len = ln.Substring(1,2);
            uint length;
            _ = UInt.TryParse("0x" + len, ref length);
            if (length == 0) { continue; }
            if (first)
            {
                string orgString = ln.Substring(3,4);
                _ = UInt.TryParse("0x" + orgString, ref org);
            }
            ln = ln.Substring(9);
            while (length > 0)
            {
                string br = ln.Substring(0, 2);
                ln = ln.Substring(2);
                uint b;
                _ = UInt.TryParse("0x" + br, ref b);
                code.Append(byte(b));
                length--;
            }
            first = false;
        }
        return code;
    }
    
    BadArguments()
    {
        PrintLn("Invalid arguments for Z80DASM:");
        PrintLn("  Z80DASM <hexe file>");
        PrintLn("    -g <c> <r> : called from GUI, not console");
        PrintLn("    -b         : 'bare' - no hex, just assembly (for Chat GPT)");
    }
    
    {
        bool success = false;
        bool bare;
        loop
        {
            <string> rawArgs = System.Arguments;
            <string> args;
            for (uint iArg = 0; iArg < rawArgs.Count; iArg++)
            {
                string arg = rawArgs[iArg];
                if ((arg.Length == 2) && (arg[0] == '-'))
                {
                    arg = arg.ToLower();
                    switch (arg)
                    {
                        case "-g":
                        {
                            uint col;
                            uint row;
                            iArg++;
                            if (UInt.TryParse(rawArgs[iArg], ref col))
                            {
                            }
                            iArg++;
                            if (UInt.TryParse(rawArgs[iArg], ref row))
                            {
                            }
                            Parser.SetInteractive(byte(col), byte(row));
                        }
                        case "-b":
                        {
                            bare = true;
                        }
                        default:
                        {
                            args.Clear();
                            break;
                        }
                    }
                }
                else
                {
                    args.Append(arg);
                }
            }
          
            if (args.Count != 1)
            {
                BadArguments();
                break;
            }
            string ext = ".hex";
            string codePath = args[0];
            if (!File.Exists(ref codePath, ref ext, "/Bin/"))
            {
                BadArguments();
            }
            bool lastwasNOP = false;
            long startTime = Millis;
            loop
            {
                string extension = Path.GetExtension(codePath);
                string hasmPath  = codePath.Replace(extension, ".lst");
                hasmPath = Path.GetFileName(hasmPath);
                hasmPath = Path.Combine("/Debug/", hasmPath);
                File.Delete(hasmPath);

                file hasmFile = File.Create(hasmPath);
                if (!hasmFile.IsValid())
                {
                    PrintLn("Failed to create '" + hasmPath + "'");
                    break;
                }
                
                SysCalls.New();
                string symbolsPath  = codePath.Replace(extension, ".zcode");
                symbolsPath = Path.GetFileName(symbolsPath);
                symbolsPath = Path.Combine("/Debug/Obj", symbolsPath);
                
                if (File.Exists(symbolsPath))
                {
                    if (!ParseCode(symbolsPath, false, true))
                    {
                        break;
                    }
                }
                uint org;
                
                uint address = 0;
                file hexFile = File.Open(codePath);
                <byte> code = readIHex(hexFile, ref org);
                
                uint resetVector = code[4] + (code[5] << 8);
                
                <uint, uint> methodSizes = Code.GetMethodSizes();
                uint indexMax = 0;
                foreach (var sz in methodSizes)
                {
                    if (sz.key > indexMax)
                    {
                        indexMax = sz.key;
                    }
                }
                uint entryAddress;
                <string,string> debugInfo;
                <uint,uint> methodFirstAddresses; // <address,index>
                for (uint index = 0; index <= indexMax; index++)
                {
                    <string,variant> methodSymbols = Code.GetMethodSymbols(index);
                    if (methodSymbols.Count != 0)
                    {
                        debugInfo = methodSymbols["debug"];
                        foreach (var kv in debugInfo)
                        {
                            uint codeAddress;
                            if (UInt.TryParse(kv.key, ref codeAddress))
                            {
                                methodFirstAddresses[codeAddress] = index;
                                if (index == 0)
                                {
                                    entryAddress = codeAddress;
                                }
                                //PrintLn(index.ToString() + ": 0x" + codeAddress.ToHexString(4));
                                break;
                            }
                        }
                    }
                }
                //PrintLn("resetVector: 0x" + resetVector.ToHexString(4));
                
                uint doffset = 0;
                string src;
                string srcName;
                 
                uint index;
                byte lastA;
                byte lastB;
                byte lastC;
                uint lastBC;
                OpCode prevInstruction;
                loop
                {
                    if (index == code.Count) { break; }
                    
                    byte opCodeLength = GetOpCodeLength(code[index]);
                    address = index;
                    
                    OpCode instruction;
                    OperandType operandType;
                    byte operandLength;
                    byte tableSize;
                    bool signed;
                    
                    //if (index + opCodeLength > code.Count) { hasmFile.Flush(); break; }
                    
                    if (opCodeLength == 1)
                    {
                         instruction = OpCode(code[index]);
                         index++;
                    }
                    else if (opCodeLength == 2)
                    {
                         instruction = OpCode((code[index] << 8) + code[index+1]);
                         index += 2;
                    }
                    string name = GetOpCodeInfo(instruction, ref operandType, ref operandLength, ref signed, false);
                    uint operand = 0;
                    if (name.Length == 0) { Print(" BadOp: 0x" + address.ToHexString(4)); continue; }
                    
                    //if (index + operandLength > code.Count) { hasmFile.Flush(); break; }
                    
                    if (operandLength == 1)
                    {
                         operand = code[index];
                         index++;
                    }
                    else if (operandLength == 2)
                    {
                         operand = code[index] + (code[index+1] << 8);
                         index += 2;
                    }
                    codeSize += (opCodeLength + operandLength);
                    instructionCount++;
                    
                    if (instruction == OpCode.JP_HL)
                    {
                        tableSize = code[index];
                        index += 1;
                        codeSize += 1;
                    }
                    
                    if (instruction == OpCode.LD_A_n)
                    {
                        lastA = byte(operand & 0xFF);
                    }
                    if (instruction == OpCode.LD_B_n)
                    {
                        lastB = byte(operand & 0xFF);
                        lastBC = (lastBC & 0x00FF) | (lastB << 8);
                    }
                    if (instruction == OpCode.LD_C_n)
                    {
                        lastC = byte(operand & 0xFF);
                        lastBC = (lastBC & 0xFF00) | lastC;
                    }
                    if (instruction == OpCode.LD_BC_nn)
                    {
                        lastBC = operand;
                    }
                    
                    bool bRETFAST;
                    uint switchAddress = address;
                    if (resetVector == switchAddress)
                    {
                        switchAddress = entryAddress;
                    }
                    else if (prevInstruction == OpCode.RET)
                    {
                        for (uint search = address; search < address+20; search++) // delta is currently 10
                        {
                            if (methodFirstAddresses.Contains(search))
                            {
                                if (    ((search - address) == 10) // 'ENTER'   preamble
                                     || ((search - address) == 18) // 'ENTERB'  preamble (optimized only)
                                     || ((search - address) == 0)  // 'RETFAST' preamble (optimized only)
                                   )
                                {
                                    switchAddress = search; 
                                    bRETFAST = (search == address);
                                    //PrintLn("    " + address.ToHexString(4) + " " + search.ToHexString(4) + " " + (search - address).ToString() + " !");
                                    break;
                                }
                            }
                        }
                    }
                    
                    prevInstruction = instruction;
                    if (methodFirstAddresses.Contains(switchAddress))
                    {
                        //PrintLn(switchAddress.ToHexString(4));
                        if ((switchAddress != address) || (resetVector == address) || bRETFAST)
                        {
                            //PrintLn("        " + address.ToHexString(4) + " switch");
                            uint methodIndex = methodFirstAddresses[switchAddress];
                            <string,variant> methodSymbols = Code.GetMethodSymbols(methodIndex);
                            if (methodSymbols.Count != 0)
                            {
                                src = methodSymbols["source"];
                                srcName = Path.GetFileName(src);
                                string ln = methodSymbols["line"];
                                string nm = methodSymbols["name"];
                                debugInfo = methodSymbols["debug"];
                                doffset = address;
                                hasmFile.Append("" + char(0x0A)); 
                                hasmFile.Append("// " + src + ":" + ln + char(0x0A));  
                                
                                string mname = "// ####  " + nm + "()  ####";
                                mname = mname.Pad(' ', 80);
                                mname = mname + "0x" + methodIndex.ToHexString(4) + char(0x0A);
                                hasmFile.Append(mname);  
                                hasmFile.Append("" + char(0x0A)); 
                                Parser.ProgressTick(".");
                            }
                        }
                    }
                    string comment;
                    string addressKey = "0x" + address.ToHexString(4);
                    if (debugInfo.Contains(addressKey))
                    {
                        string debugLine = debugInfo[addressKey];
                        string sourceLine = getSourceLine(src, debugLine);
                        if (sourceLine.Length != 0)
                        {
                            comment = "// " + sourceLine.Trim();
                            if (comment.Length < 34)
                            {
                                comment = comment.Pad(' ', 34);
                                comment = comment + srcName + ":" + debugLine;
                            }
                        }
                        else
                        {
                            comment = "// " + src + ":" + debugLine;  
                        }
                    }
                    
                    string disassembly = AsmZ80.Disassemble(address, instruction, operand, bare);
                    if (tableSize != 0)
                    {
                        disassembly = disassembly.Replace("JP HL", "JP HL              // " + tableSize.ToString() + " table entries follow:");
                    }
                    if (bare)
                    {
                        disassembly = disassembly.Substring(29);
                        if (disassembly == "NOP")
                        {
                            if (!lastwasNOP)
                            {
                                hasmFile.Append("" +char(0x0A));
                                lastwasNOP = true;
                            }
                        }
                        else
                        {
                            hasmFile.Append(disassembly + char(0x0A));
                            lastwasNOP = false;
                        }
                    }
                    else
                    {                  
                        hasmFile.Append(disassembly.Pad(' ', 48) + comment + char(0x0A));
                    }
                    if (tableSize > 0)
                    {
                        uint count = 0;
                        loop
                        {
                            if (tableSize == 0) { break; }
                            uint entry = code[index] + (code[index+1] << 8);
                            if (count % 8 == 0)
                            {
                                if (count != 0)
                                {
                                    hasmFile.Append("" + char(0x0A));
                                }
                                hasmFile.Append("                               ");
                            }
                            hasmFile.Append("0x" + entry.ToHexString(4) + " ");
                            index += 2;
                            codeSize += 2;
                            tableSize--;
                            count++;
                        }    
                        hasmFile.Append("" + char(0x0A));
                    }
                    //hasmFile.Flush(); // TODO REMOVE
                } // loop
                              
                Parser.ProgressTick(".");
                hasmFile.Flush();
                if (!Parser.IsInteractive())
                {
                    PrintLn();
                    Print("Success, " + codeSize.ToString() + " bytes of code, ", Colour.ProgressText, Colour.ProgressFace);
                    long elapsedTime = Millis - startTime;
                    float seconds = elapsedTime / 1000.0;
                    PrintLn("  " + seconds.ToString() +"s", Colour.ProgressHighlight, Colour.ProgressFace);
                    PrintLn("  " + instructionCount.ToString() + " instructions disassembled. ", Colour.ProgressText, Colour.ProgressFace);
                }
                else
                {
                    Parser.ProgressDone();
                }
                success = true;
                break;
            }
            break;
        }
        if (!success)
        {
            Diagnostics.SetError(0x0E);
        }
    }
}
