program E6502
{
    #define JSON_EXPRESS // .code and .json are generated by us so assume .json files have no errors
    
    #define PROFILING
    uses "Emulator/Emulator"
    uses "Emulator/Display"
    uses "Emulator/Shared"
    
    uses "/Source/Compiler/JSON/JSON"
    uses "/Source/Compiler/JSON/Code"
    
    uses "/Source/Editor/Highlighter"
    
    uses "/Source/Compiler/CODEGEN/Asm6502"
    uses "Chips/6502"
    
    <byte> readIHex(file hexFile, ref uint loadAddress)
    {
        <byte> code;
        bool first = true;
        loop
        {
            string ln = hexFile.ReadLine();
            if (!hexFile.IsValid()) { break; }
            string len = ln.Substring(1,2);
            uint length;
            _ = UInt.TryParse("0x" + len, ref length);
            if (length == 0) { continue; }
            if (first)
            {
                string location = ln.Substring(3,4);
                _ = UInt.TryParse("0x" + location, ref loadAddress);
            }
            ln = ln.Substring(9);
            while (length > 0)
            {
                string br = ln.Substring(0, 2);
                ln = ln.Substring(2);
                uint b;
                _ = UInt.TryParse("0x" + br, ref b);
                code.Append(byte(b));
                length--;
            }
            first = false;
        }
        return code;
    }
    PrintPad(string ln, uint padding)
    {
        while (padding > 0)
        {
            String.BuildFront(ref ln, ' ');
            padding--;
        }
        PrintLn(ln);
    }
    Help()
    {
        PrintLn();
        PrintPad("Commands:", 2);
        PrintPad("?        - this", 4);
        PrintPad("Q        - exit, also <alt><F4>", 4);
        PrintLn();
        PrintPad("D        - debug program, also <F5>", 4);
        PrintPad("X        - execute program, also <ctrl><F5>", 4);
        PrintPad("W        - warm restart of loaded 6502 program (RESET)", 4);
        PrintPad("N        - trigger non-maskable interrupt (NMI)", 4);
        PrintPad("O        - step over, also <F10>", 4);
        PrintPad("I        - step into, also <F11>", 4);
        PrintPad("B X      - clear all breakpoints", 4);
        PrintPad("B x xxxx - set breakpoint 1..F", 4);
        PrintLn();
        PrintPad("C        - show stack", 4);
        PrintPad("R        - show registers", 4);
        PrintPad("S        - show source listing at PC", 4);
        PrintPad("M <page> - dump a 256 byte page of memory", 4);
    }
    
    BadArguments()
    {
        PrintLn("Invalid arguments for E6502:");
        if (Terminal6850 && EmulateAppleI)
        {
            PrintLn("  -t and -1 are mutually exclusive options");
        }
        PrintLn("  E6502 <.asm filepath>");
        PrintLn("    -1         : emulate Apple I DSP and KBD");
        PrintLn("    -t         : emulate 6850 in terminal mode (not COM0)");
        PrintLn("    -og        : traditional syntax to keep the OG's happy");
    }
    
    Hopper()
    {
        string filePath;
        bool showHelp = Emulator.Arguments(ref filePath);
        loop
        {
            if (!showHelp)
            {
                showHelp = Emulator.FullPath(ref filePath);
            }
            string ihexPath;
            string symbolsPath;
            if (!showHelp && (filePath.Length != 0))
            {
                showHelp = Emulator.ExpandPaths(filePath, ref ihexPath, ref symbolsPath);
            }
            
            if (showHelp)
            {
                BadArguments();
                if ((ihexPath.Length != 0) && !File.Exists(ihexPath))
                {
                    PrintLn("    '" + ihexPath + "' not found");
                }
                if ((symbolsPath.Length != 0) && !File.Exists(symbolsPath))
                {
                    PrintLn("    '" + symbolsPath + "' not found");
                }
                break;
            }
                       
            // load the ihex and symbols
            if (!ParseCode(symbolsPath, false, true))
            {
                PrintLn("Failed to load '" + symbolsPath + "'");
                break;
            }
            
            string mapPath = filePath.Replace(".asm", ".map");
            if (File.Exists(mapPath))
            {
                LoadTCMap(mapPath);
            }
            
            Display.Initialize();
                        
            // Load the ROM
            uint orgROM;
            file hexFile = File.Open(ihexPath);
            <byte> code = readIHex(hexFile, ref orgROM);
            if (code.Count == 0)
            {
                PrintLn("Failed to load '" + ihexPath + "'");
                break;
            }
            
            // Initialize the vectors    
            uint length = code.Count;
            CPU.NMI   = code[length-6] + (code[length-5] << 8);
            CPU.Entry = code[length-4] + (code[length-3] << 8);
            CPU.IRQ   = code[length-2] + (code[length-1] << 8);
            uint vectorUse = 6;
            for (uint i = 0; i < length-vectorUse; i++)
            {
                SetMemory(orgROM+i, code[i]);
            }
            
            Emulator.DoReset();
            CommandLoop();
            break;
        } // loop
        Emulator.Close();
    }
}
