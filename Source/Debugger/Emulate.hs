program Emulate
{
    #define JSON_EXPRESS // .code and .json are generated by us so assume .json files have no errors
        
    uses "/Source/System/System"
    uses "/Source/System/Screen"
    uses "/Source/System/Keyboard"
    
    uses "/Source/Compiler/JSON/JSON"
    uses "/Source/Compiler/JSON/Code"
    
    uses "/Source/Editor/Highlighter"
    
    uses "/Source/Compiler/CODEGEN/OpCodes"
    uses "/Source/Compiler/CODEGEN/AsmStream"
    
    uses "Chips/6502"
    uses "Chips/Z80"
    uses "Chips/ACIA"
    
    uint orgROM;
    uint[16] breakpoints;
    
    <uint,uint> methodSizes;     // <index, length>
    <uint,uint> methodAddresses; // <address,index>
    
    bool Is6502 { get { return ((Architecture & CPUArchitecture.M6502) != CPUArchitecture.None); } }
    
    file logFile;
        
    bool BreakCheck()
    {
        if (Keyboard.IsAvailable)
        {
            Key key = Keyboard.ReadKey();
            if (key == Key.ControlC)
            {
                PrintLn("<ctrl><C>");
                return true;
            }
        }
        return false;
    }
    Run()
    {
        // run ignoring breakpoints
        loop
        {
            if (BreakCheck()) { break; }
            uint pc = GetPC();
            if (pc == InvalidAddress) { break; }
            StepInto();
        }
    }
    Debug()
    {
        // run until breakpoint
        bool first = true;
        loop
        {
            if (BreakCheck()) { break; }
            uint pc = GetPC();
            if (pc == InvalidAddress) { break; }
            if (!first && IsBreakPoint(pc))
            {
                ClearIfZeroBreakPoint(pc);
                break;
            }
            StepInto();
            first = false;
        }
    }
    StepOver()
    {
        uint pc = GetPC();
        if (pc == InvalidAddress) { return; }
        byte instruction = Emulate.GetMemory(pc);
        if (instruction == OpCodes.GetJSRInstruction())
        {
            byte length = AsmStream.GetInstructionLength(instruction);
            SetBreakPoint(0, pc+length);
            Debug();
        }
        else
        {
            StepInto();
        }
    }
    StepInto()
    {
        bool requestIRQ = ACIA.ServiceSerial();
        if (Is6502)
        {
            if (requestIRQ)
            {
                W65C02.RaiseIRQ();
            }
            updateLogBefore();
            W65C02.Execute();
            updateLogAfter();
        }
        else
        {
            Z80.Execute();
        }
    }
    ClearIfZeroBreakPoint(uint address)
    {
        if (breakpoints[0] == address)
        {
            breakpoints[0] = InvalidAddress;
        }
    }
    ClearBreakPoints()
    {
        for (uint i = 0; i < breakpoints.Count; i++)
        {
            breakpoints[i] = InvalidAddress;
        }
    }
    SetBreakPoint(uint breakpoint, uint address)
    {
        breakpoints[breakpoint] = address;  
    }
    bool IsBreakPoint(uint address)
    {
        for (uint i = 0; i < breakpoints.Count; i++)
        {
            if (breakpoints[i] == address) { return true; }
        }
        return false;
    }
    
    ShowDisassembly(uint address, uint instructions)
    {
        PrintLn();
        //<uint,uint> methodSizes;     // <index, length>
        //<uint,uint> methodAddresses; // <address,index>
        uint methodIndex;
        uint methodStart;
        uint methodLength;
        bool found;
        foreach (var kv in methodAddresses)
        {
            methodStart = kv.key + orgROM;
            //PrintLn(methodStart.ToHexString(4));
            if (address >= methodStart)
            {
                methodIndex = kv.value;
                methodLength = methodSizes[methodIndex];
                if (address < methodStart + methodLength)
                {
                    found = true;
                    break;
                }
            }
        }
        if (found)
        {
            <string,variant> methodSymbols = Code.GetMethodSymbols(methodIndex);
            <string,string> debugInfo;
            string src;
            string srcName;
            if (methodSymbols.Count != 0)
            {
                src = methodSymbols["source"];
                srcName = Path.GetFileName(src);
                string ln = methodSymbols["line"];
                string nm = methodSymbols["name"];
                debugInfo = methodSymbols["debug"];
            }

            //PrintLn(methodIndex.ToString() + " " +
            //        methodStart.ToHexString(4) + " " + 
            //       (methodStart + methodLength-1).ToHexString(4) + " " +
            //       (debugInfo.Count).ToString() +
            //        " : " + address.ToHexString(4));
             
            loop
            {
                if (instructions == 0) { break; }
                if (address > methodStart + methodLength-1) { break; }
                byte instruction = Emulate.GetMemory(address);
                byte length      = AsmStream.GetInstructionLength(instruction);
                
                uint operand;
                string operandString;
                if (length == 2)
                {
                    operand = Emulate.GetMemory(address+1);
                }
                else if (length == 3)
                {
                    operand = Emulate.GetMemory(address+1) + (Emulate.GetMemory(address+2) << 8); 
                }
                
                string debugAddress = (address - methodStart).ToString();
                //PrintLn("debugAddress=" + debugAddress);
                string comment;
                if (debugInfo.Contains(debugAddress))
                {
                    string debugLine = debugInfo[debugAddress];
                    string sourceLine = getSourceLine(src, debugLine);
                    if (sourceLine.Length != 0)
                    {
                        comment = "// " + sourceLine.Trim();
                        if (comment.Length < 34)
                        {
                            comment = comment.Pad(' ', 34);
                            comment = comment + srcName + ":" + debugLine;
                        }
                    }
                    else
                    {
                        comment = "// " + src + ":" + debugLine;  
                    }
                }
                
                string disassembly = AsmStream.Disassemble(address, instruction, operand);
                PrintLn(disassembly.Pad(' ', 48) + comment);
                
                address += length;
                instructions--;
            }
        }
    }

    ShowCurrentInstruction(uint instructions)
    {
        ShowDisassembly(GetPC(), instructions);
    }
       
       
    uint GetPC()
    {
        if (Is6502)
        {
            return W65C02.PC;
        }
        else
        {
            return Z80.PC;
        }
    }
    DoReset()
    {
        logFile = File.Create("/Debug/Emulate.log");
        
        ACIA.Initialize();
        
        if (Is6502)
        {
            W65C02.Reset();
        }
        else
        {
            Z80.Reset();
        }
    }
    
    byte GetMemory(uint address)
    {
        return Is6502 ? W65C02.GetMemory(address) : Z80.GetMemory(address);
    }
    
    MemoryDump(string hexpage)
    {
        uint page;
        _ = UInt.TryParse("0x" + hexpage, ref page);
        
        page = page << 8;
        for (uint i = 0; i < 256; i++)
        {
            uint address = page + i;
            if (i % 16 == 0)
            {
                PrintLn();
                Print((address).ToHexString(4));
            }
            if (i % 8 == 0)
            {
                Print(" ");
            }
            Print(" " + (Emulate.GetMemory(address)).ToHexString(2));
        }
        PrintLn();
    }
    ShowZeroPage()
    {
        MemoryDump("00");
    }
    ShowCallStack()
    {
        PrintLn();
        if (Is6502)
        {
            W65C02.ShowStack();
        }
        else
        {
            Z80.ShowStack();
        }
    }
    updateLogBefore()
    {
        /*
        string logLine = W65C02.GetRegisterNames();
        logFile.Append(logLine + char(0x0D));
        logLine = W65C02.GetRegisters();
        logFile.Append(logLine + char(0x0D) + char(0x0D));
        logFile.Flush();
        */
    }
    updateLogAfter()
    {
        /*
        string serialData;
        byte serialWrite = W65C02.GetMemory(0xD3);
        byte serialRead  = W65C02.GetMemory(0xD4);
        
        while (serialRead != serialWrite)
        {
            byte data = W65C02.GetMemory(0x300 + serialRead);
            serialData += data.ToHexString(2) + " ";
            if (serialRead == 0xFF)
            {
                serialRead = 0;
            }
            else
            {
                serialRead++;
            }
        }
        
        string logLine = W65C02.GetRegisterNames();
        logFile.Append(logLine + char(0x0D));
        logLine = W65C02.GetRegisters() + " " + serialRead.ToHexString(2) + " " + serialWrite.ToHexString(2) + "   " + serialData;
        logFile.Append(logLine + char(0x0D));
        logFile.Flush();
        */
    }
    
    ShowRegisters()
    {
        PrintLn();
        string names;
        string registers;
        if (Is6502)
        {
            names = W65C02.GetRegisterNames();
            registers = W65C02.GetRegisters();
        }
        else
        {
            names = Z80.GetRegisterNames();
            registers = Z80.GetRegisters();
        }
        PrintLn(names);
        PrintLn(registers);
    }
    
    string pathLoaded;
    <string> sourceLines;
    string getSourceLine(string path, string lnum)
    {
        if (pathLoaded != path)
        {
            file sourceFile = File.Open(path);
            if (sourceFile.IsValid())
            {
                sourceLines.Clear();
                pathLoaded = path;
                loop
                {
                    string ln = sourceFile.ReadLine();
                    if (ln.Length == 0)
                    {
                        if (!sourceFile.IsValid())
                        {
                            break;
                        }
                    }
                    sourceLines.Append(ln);
                }
            }
        }
        string sourceLine;
        uint iline;
        if (UInt.TryParse(lnum, ref iline))
        {
            if (iline > 0)
            {
                iline--;
            }
            if (sourceLines.Count > iline)
            {
                sourceLine = sourceLines[iline];
            }
        }
        return sourceLine;
    }

    <byte> readIHex(file hexFile)
    {
        <byte> code;
        loop
        {
            string ln = hexFile.ReadLine();
            if (!hexFile.IsValid()) { break; }
            string len = ln.Substring(1,2);
            uint length;
            _ = UInt.TryParse("0x" + len, ref length);
            if (length == 0) { continue; }
            ln = ln.Substring(9);
            while (length > 0)
            {
                string br = ln.Substring(0, 2);
                ln = ln.Substring(2);
                uint b;
                _ = UInt.TryParse("0x" + br, ref b);
                code.Append(byte(b));
                length--;
            }
        }
        return code;
    }
    bool ValidateHexPage(ref string hexpage)
    {
        bool valid = false;
        hexpage = hexpage.ToUpper();
    
        uint returnValue = 0;
        if (UInt.TryParse("0x" + hexpage, ref returnValue))
        {
            if ((returnValue >= 0x00) && (returnValue <= 0xFF))
            {
                valid = true;
                if (hexpage.Length == 1)
                {
                    hexpage = "0" + hexpage;
                }
            }
        }
        
        return valid;
    }
    PrintPad(string ln, uint padding)
    {
        while (padding > 0)
        {
            String.BuildFront(ref ln, ' ');
            padding--;
        }
        PrintLn(ln);
    }
    Help()
    {
        PrintLn();
        PrintPad("Commands:", 2);
        PrintPad("?        - this", 4);
        PrintPad("Q        - exit, also <alt><F4>", 4);
        PrintLn();
        PrintPad("D        - debug program, also <F5>", 4);
        PrintPad("X        - execute program, also <ctrl><F5>", 4);
        PrintPad("W        - warm restart of loaded 6502 program (RESET)", 4);
        PrintPad("N        - trigger non-maskable interrupt (NMI)", 4);
        PrintPad("O        - step over, also <F10>", 4);
        PrintPad("I        - step into, also <F11>", 4);
        PrintPad("B X      - clear all breakpoints", 4);
        PrintPad("B x xxxx - set breakpoint 1..F", 4);
        PrintLn();
        PrintPad("C        - show stack", 4);
        PrintPad("R        - show registers", 4);
        PrintPad("S        - show source listing at PC", 4);
        PrintPad("M <page> - dump a 256 byte page of memory", 4);
    }
    
    Hopper()
    {
        string filePath;
        bool showHelp;
        
        <string> rawArgs = System.Arguments;
        <string> args;
        
        for (uint iArg = 0; iArg < rawArgs.Count; iArg++)
        {
          string arg = rawArgs[iArg];
          if ((arg.Length == 2) && (arg[0] == '-'))
          {
              arg = arg.ToLower();
              switch (arg)
              {
                  default:
                  {
                      args.Clear();
                      break;
                  }
              }
          }
          else
          {
              args.Append(arg);
          }
        }
        if (args.Count > 1)
        {
            showHelp = true;
        }
        else if (args.Count == 1)
        {
            filePath = args[0];
        }
        
        if (filePath.Length == 0)
        {
            showHelp = true;
        }
        
        loop
        {
            if (!showHelp)
            {
                loop
                {
                    // check the file
                    string fullPath;
                    if (File.Exists(filePath))
                    {
                        break;
                    }
                    fullPath = Path.Combine(System.CurrentDirectory, filePath);
                    if (File.Exists(fullPath))
                    {
                        filePath = fullPath;
                        break;
                    }
                    string extension = Path.GetExtension(filePath);
                    if (extension == ".")
                    {
                        string filePathExt = filePath + ".asm";
                        if (File.Exists(filePathExt))
                        {
                            filePath = filePathExt;
                            break;
                        }
                        string fullPathExt = Path.Combine(System.CurrentDirectory, filePathExt);
                        if (File.Exists(fullPathExt))
                        {
                            filePath = fullPathExt;
                            break;
                        }
                    }
                    if (!File.Exists(fullPath))
                    {
                        showHelp = true;
                    }
                    break;
                } // loop
            }
            string ihexPath;
            string symbolsPath;
            if (!showHelp && (filePath.Length != 0))
            {
                ihexPath = Path.GetFileName(filePath);
                string extension = Path.GetExtension(filePath);
                ihexPath = ihexPath.Replace(extension, ".hex");
                ihexPath = Path.Combine("/bin", ihexPath);
                
                symbolsPath = Path.GetFileName(filePath);
                symbolsPath = symbolsPath.Replace(extension, ".code");
                symbolsPath = Path.GetFileName(symbolsPath);
                symbolsPath = Path.Combine("/Debug/Obj", symbolsPath);
                if (!File.Exists(ihexPath))
                {
                    showHelp = true;
                }                
                if (!File.Exists(symbolsPath))
                {
                    showHelp = true;
                }
            }
            
            if (showHelp)
            {
                PrintLn("6502 <.asm filepath>");
                if ((ihexPath.Length != 0) && !File.Exists(ihexPath))
                {
                    PrintLn("    '" + ihexPath + "' not found");
                }
                if ((symbolsPath.Length != 0) && !File.Exists(symbolsPath))
                {
                    PrintLn("    '" + symbolsPath + "' not found");
                }
                break;
            }
            
            Screen.Clear();
            
            // load the ihex and symbols
            
            if (!ParseCode(symbolsPath, false, true))
            {
                PrintLn("Failed to load '" + symbolsPath + "'");
                break;
            }
            PrintLn();
            file hexFile = File.Open(ihexPath);
            <byte> code = readIHex(hexFile);
            if (code.Count < 4)
            {
                PrintLn("Failed to load '" + ihexPath + "'");
                break;
            }
            
            byte version = code[0];
            byte arch    = code[1];
            orgROM       = code[2] + (code[3] << 8);
            
            Architecture = CPUArchitecture(arch);
            
            // find the method address ranges for disassembly
            methodSizes = Code.GetMethodSizes();
            uint indexMax = 0;
            foreach (var sz in methodSizes)
            {
                if (sz.key > indexMax)
                {
                    indexMax = sz.key;
                }
            }
            uint methodAddress = 4;
            for (uint index = 0; index <= indexMax; index++)
            {
                if (!methodSizes.Contains(index)) { continue; }   
                uint methodSize = methodSizes[index];
                methodAddresses[methodAddress] = index;
                methodAddress += methodSize;
            }
            
            uint length = code.Count;
            
            uint vectorUse = 0;
            if (Is6502)
            {
                vectorUse    = 6;
                W65C02.NMI   = code[length-6] + (code[length-5] << 8);
                W65C02.Reset = code[length-4] + (code[length-3] << 8);
                W65C02.IRQ   = code[length-2] + (code[length-1] << 8);
            }
            for (uint i = 0; i < length-vectorUse; i++)
            {
                if (Is6502)
                {
                    W65C02.SetMemory(orgROM+i, code[i]);
                }
                else
                {
                    Z80.SetMemory(orgROM+i, code[i]);
                }
            }
            DoReset();
            
            
            //PrintLn(orgROM.ToHexString(4));
            //PrintLn(vectorNMI.ToHexString(4));
            //PrintLn(vectorReset.ToHexString(4));
            //PrintLn(vectorIRQ.ToHexString(4));
            
            char currentCommand = ' ';
            string commandLine = "";
            bool refresh = true;
            loop
            {
                if (refresh)
                {
                    SetCursor(0, Screen.CursorY);
                    string ln = ">" + commandLine;
                    uint cursorX = ln.Length;
                    ln = ln.Pad(' ', Screen.Columns-1);
                    Print(ln);
                    SetCursor(cursorX, Screen.CursorY);
                    refresh = false;
                }
                
                Key key = ReadKey();
                
                char ch = key.ToChar();
                ch = ch.ToUpper();
                uint clength = commandLine.Length;
                
                // shortcut keys
                bool doShortcut = false;
                if (key == (Key.Alt | Key.F4))
                {
                    commandLine = "Q";
                    doShortcut = true;
                }
                else if (key == Key.F5)
                {
                    commandLine = "D";
                    doShortcut = true;
                }
                else if (key == (Key.Control | Key.F5))
                {
                    commandLine = "X";
                    doShortcut = true;
                }
                else if (key == Key.F11)
                {
                    commandLine = "I";
                    doShortcut = true;
                }
                else if (key == Key.F10)
                {
                    commandLine = "O";
                    doShortcut = true;
                }
                if (doShortcut && (commandLine.Length != 0))
                {
                    currentCommand = commandLine[0];
                    Print(commandLine);
                    key = Key.Enter;
                }
                if (key == Key.Enter)
                {
                    // execute commandLine
                    if (currentCommand == 'Q') // exit monitor UI
                    {
                        PrintLn();
                        break; 
                    }
                    else if (currentCommand == '?') // help
                    {
                        Help();
                        refresh = true;
                    }
                    else if (currentCommand == 'Z') // zero page variables
                    {
                        ShowZeroPage();
                        refresh = true;
                    }
                    else if (currentCommand == 'C') // show call stack
                    {
                        ShowCallStack();
                        refresh = true;
                    }
                    else if (currentCommand == 'M') // memory dump
                    {
                        string hexpage = "";
                        if (commandLine.Length > 2)
                        {
                            hexpage = commandLine.Substring(2, commandLine.Length-2);
                            if (ValidateHexPage(ref hexpage))
                            {
                                MemoryDump(hexpage);
                                refresh = true;
                            }
                        }
                    } // case 'M'
                                  
                    else if (currentCommand == 'B') // breakpoints
                    {
                        if (commandLine == "B X")
                        {
                            ClearBreakPoints();
                            refresh = true;
                        }
                        else if (commandLine.Length > 4)
                        {
                            string hex = "0x" + commandLine.Substring(2,1);
                            uint breakpoint;
                            if (UInt.TryParse(hex, ref breakpoint) && (breakpoint > 0))
                            {
                                hex = "0x" + commandLine.Substring(4);
                                uint breakAddress;
                                if (UInt.TryParse(hex, ref breakAddress) && (breakAddress > 0) && (breakAddress < 0xFFFF))
                                {
                                    SetBreakPoint(breakpoint, breakAddress);
                                    refresh = true;
                                }
                            }
                        }
                    } // case 'B'
                
                    else if (currentCommand == 'X') // Execute (run with Warp)
                    {
                        Run();
                        refresh = true;
                    }
                    else if (currentCommand == 'D') // Debug (run with !Warp)
                    {
                        Debug();
                        uint pc = GetPC();
                        if (pc != InvalidAddress)
                        {
                            ShowCurrentInstruction(3);
                            ShowRegisters();
                        }
                        refresh = true;
                    }
                    else if (currentCommand == 'I') // Step (single / into / F11)
                    {
                        StepInto();
                        uint pc = GetPC();
                        if (pc != InvalidAddress)
                        {
                            ShowCurrentInstruction(3);
                            ShowRegisters();
                        }
                        refresh = true;
                    }
                    else if (currentCommand == 'O') // Step (next / over / F10)
                    {
                        StepOver();
                        uint pc = GetPC();
                        if (pc != InvalidAddress)
                        {
                            ShowCurrentInstruction(3);
                            ShowRegisters();
                        }
                        refresh = true;
                    }
                    else if (currentCommand == 'S') // Source
                    {
                        ShowCurrentInstruction(15);
                        refresh = true;
                    }
                    else if (currentCommand == 'W') // Warm Restart (keep program, reset data)
                    {
                        DoReset();
                        refresh = true;
                    }
                    else if (currentCommand == 'R') // Registers
                    {
                        ShowRegisters();
                        refresh = true;
                    }
                    if (refresh)
                    {
                        commandLine = "";
                        currentCommand = ' ';
                        PrintLn();
                    }
                } // if (key == Key.Enter)
                
                
                else if (key == Key.Escape)
                {
                    // cancel commandline
                    commandLine = "";
                    refresh = true;
                }
                else if (key == Key.ControlC)
                {
                    // cancel commandline
                    commandLine = "";
                    //Monitor.EmptyCommand();
                    PrintLn("<ctrl><C>");
                    refresh = true;
                }
                else if (key == Key.Backspace)
                {
                    // back up one
                    if (commandLine.Length != 0)
                    {
                        commandLine = commandLine.Substring(0, commandLine.Length-1);
                        SetCursor(0, Screen.CursorY);
                        refresh = true;
                    }
                }
                else
                { 
                    // alphanumeric
                    if (clength < Screen.Columns-1)
                    {
                        if (clength == 0)
                        {
                            // first character must be command key
                            if (String.Contains("?BCDHIMOQRSWXZ", ch))
                            {
                                currentCommand = ch;
                            }
                            else
                            {
                                continue;
                            }
                        } // clength == 0
                        else if (clength == 1)
                        {
                            if (ch != ' ') // 2nd character must be ' '
                            {
                                continue;
                            }
                            if (currentCommand == 'L')
                            {
                                // has arguments
                            }
                            else if (currentCommand == 'M')
                            {
                                // has arguments
                            }
                            else if (currentCommand == 'F')
                            {
                                // has arguments
                            }
                            else if (currentCommand == 'B')
                            {
                                // has arguments
                            }
                            else
                            {
                                continue; // no arguments
                            }
                        } // clength == 1
                        else
                        {   // clength > 1
                            // arguments
                            if (currentCommand == 'L')
                            {
                                // L <ihex path>
                            }
                            else if (currentCommand == 'T')
                            {
                                // T <local file path> <remote folder>
                            }
                            else if (currentCommand == 'M')
                            {
                                // M n or nn (MSB hex for page)
                            }
                            else if (currentCommand == 'F')
                            {
                                // F n or nn (MSB hex for page)
                            }
                            else if (currentCommand == 'B')
                            {
                                // B X or B n nnnn
                            }
                            else
                            {
                                continue; // should never get here
                            }
                        } // clength > 1
                        
                        if (ch != char(0))
                        {
                            commandLine = commandLine + ch;
                            refresh = true;
                        }
                    }  // if (commandLine.Length < Screen.Columns-1)
                } // alphanumeric
                
            } // loop
            
            break;
        } // loop
        ACIA.Close();
    }
}
