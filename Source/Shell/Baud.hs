program Baud
{
    uses "/Source/System/System"
    uses "/Source/System/Serial"
    uses "/Source/System/Keyboard"
    uses "/Source/System/Screen"
    
    #define JSON_EXPRESS // .code and .json are generated by us so assume .json files have no errors
    uses "/Source/Compiler/JSON/JSON"
    
    <string, string> debugOptions;
    string LoadBaud()
    {
        // load options
        string baud; // empty string means 'default'
        string optionsPath = Path.MakeOptions("Debugger.options");
        if (File.Exists(optionsPath))
        {
            <string, variant> dict;
            if (JSON.Read(optionsPath, ref dict))
            {
                debugOptions = dict["debugoptions"];
                if (debugOptions.Contains("baudRate"))
                {
                    baud = debugOptions["baudRate"];
                }
            }
        }
        return baud;
    }
   
    SaveBaud(string baud)
    {
        debugOptions["baudRate"] = baud;
        
        // save options
        string optionsPath = Path.MakeOptions("Debugger.options");
        File.Delete(optionsPath);
        <string, variant> dict;
        dict["debugoptions"] = debugOptions;
        if (JSON.Write(optionsPath, dict))
        {
        }
    }
    
    {
        loop
        {
            <char, string> rates;
            rates['1'] = "9600";
            rates['2'] = "28800";
            rates['3'] = "57600";
            rates['4'] = "115200";
            string currentBaud = LoadBaud();
            bool currentExists;
            char defCh;
            char maxCh;
            PrintLn("Baud rate options:");
            foreach (var rate in rates)
            {
                string content = "  " + rate.key + ": " + rate.value;
                if (rate.value == currentBaud)
                {
                    content = content + " (current)";
                    defCh = rate.key;    
                    currentExists = true;
                }
                if ((defCh == char(0)) && (rate.value == "56000"))
                {
                    content = content + " (default)";
                    defCh = rate.key;
                }
                PrintLn(content);
                if (rate.key > maxCh)
                {
                    maxCh = rate.key;
                }
            }
        
            PrintLn("Press number to select Baud rate (or <enter> for default)");
            Key key = ReadKey();
            char ch = Keyboard.ToChar(key);
            if (key == Key.Enter)
            {
                ch = defCh;
            }
            if ((ch >= '1') && (ch <= maxCh))
            {
                string baud = rates[ch];
                SaveBaud(baud);
                PrintLn("The current Debug / Hopper Monitor baud rate is " + baud);
            }
            break;
        } // loop
    }
}
