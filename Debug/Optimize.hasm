0x0000 0x0000 // binary version number
0x0002 0x0216 // offset to constant data
0x0004 0x0818 // 'main' entry point offset

0x0006 0x001F 0x0A44
0x000A 0x0002 0x0A5E
0x000E 0x001E 0x0AA5
0x0012 0x0007 0x0E8B
0x0016 0x0008 0x0EBF
0x001A 0x0013 0x0EF3
0x001E 0x0014 0x0FB6
0x0022 0x0017 0x1031
0x0026 0x0018 0x10CD
0x002A 0x0019 0x11DF
0x002E 0x001A 0x12D8
0x0032 0x001B 0x1423
0x0036 0x001D 0x1588
0x003A 0x0016 0x16A5
0x003E 0x001C 0x16F0
0x0042 0x000B 0x186A
0x0046 0x0005 0x1886
0x004A 0x0011 0x1892
0x004E 0x0012 0x18E0
0x0052 0x000A 0x1947
0x0056 0x0006 0x1981
0x005A 0x000D 0x199D
0x005E 0x0009 0x19C3
0x0062 0x0010 0x1A00
0x0066 0x000E 0x1A81
0x006A 0x000C 0x1A93
0x006E 0x000F 0x1AAF
0x0072 0x0015 0x1AE9
0x0076 0x0004 0x1B60
0x007A 0x0003 0x1BB8
0x007E 0x00F1 0x1C2E
0x0082 0x0079 0x1C53
0x0086 0x0077 0x1C7E
0x008A 0x0093 0x1CF2
0x008E 0x0094 0x1D18
0x0092 0x0097 0x1D1C
0x0096 0x0096 0x1D2F
0x009A 0x0115 0x1D64
0x009E 0x011A 0x1DBF
0x00A2 0x0119 0x1DED
0x00A6 0x006B 0x1E42
0x00AA 0x006C 0x20AF
0x00AE 0x0066 0x2339
0x00B2 0x0062 0x2371
0x00B6 0x0064 0x237A
0x00BA 0x0063 0x23AD
0x00BE 0x0065 0x23B7
0x00C2 0x006A 0x23E8
0x00C6 0x005A 0x2A22
0x00CA 0x004E 0x2B0C
0x00CE 0x004B 0x2BB1
0x00D2 0x004D 0x2BCF
0x00D6 0x004C 0x2C9E
0x00DA 0x004A 0x2CEF
0x00DE 0x0048 0x2F0E
0x00E2 0x0047 0x2F1C
0x00E6 0x0049 0x2F24
0x00EA 0x00C5 0x30AC
0x00EE 0x00C8 0x30DF
0x00F2 0x0142 0x310D
0x00F6 0x0143 0x3111
0x00FA 0x0144 0x3116
0x00FE 0x0154 0x311B
0x0102 0x0153 0x311F
0x0106 0x0140 0x3124
0x010A 0x0141 0x3129
0x010E 0x0036 0x312E
0x0112 0x003A 0x313A
0x0116 0x00AF 0x3149
0x011A 0x00AE 0x32A6
0x011E 0x00BA 0x32D5
0x0122 0x00B7 0x32ED
0x0126 0x00B9 0x3301
0x012A 0x00B3 0x331D
0x012E 0x00E3 0x3331
0x0132 0x00EC 0x3347
0x0136 0x00EE 0x336F
0x013A 0x0080 0x339A
0x013E 0x0081 0x33A2
0x0142 0x0082 0x3427
0x0146 0x009D 0x345A
0x014A 0x00A4 0x346C
0x014E 0x00A5 0x3490
0x0152 0x0098 0x34AA
0x0156 0x00A8 0x34AE
0x015A 0x00A6 0x34B7
0x015E 0x009A 0x34C2
0x0162 0x00A1 0x34C6
0x0166 0x0099 0x34CF
0x016A 0x009E 0x34D3
0x016E 0x00A3 0x34D9
0x0172 0x00A7 0x34E2
0x0176 0x00A9 0x3543
0x017A 0x009F 0x35DF
0x017E 0x0095 0x368D
0x0182 0x007A 0x36B8
0x0186 0x006F 0x3727
0x018A 0x006E 0x3C69
0x018E 0x00C1 0x3C96
0x0192 0x00BF 0x3CE1
0x0196 0x00C0 0x3CEB
0x019A 0x013C 0x3D19
0x019E 0x0124 0x3D1E
0x01A2 0x0091 0x3D21
0x01A6 0x0085 0x3F9C
0x01AA 0x008C 0x3FA3
0x01AE 0x0088 0x405F
0x01B2 0x008F 0x4073
0x01B6 0x0090 0x41E5
0x01BA 0x008B 0x4269
0x01BE 0x008D 0x428A
0x01C2 0x008E 0x430D
0x01C6 0x0086 0x4356
0x01CA 0x0089 0x436B
0x01CE 0x008A 0x4372
0x01D2 0x0087 0x4389
0x01D6 0x00E2 0x4429
0x01DA 0x00E4 0x4434
0x01DE 0x00EA 0x4462
0x01E2 0x00BB 0x44AB
0x01E6 0x00B6 0x44E3
0x01EA 0x00BC 0x44EF
0x01EE 0x00BD 0x4515
0x01F2 0x007E 0x451F
0x01F6 0x007F 0x456A
0x01FA 0x007C 0x4699
0x01FE 0x007D 0x46E5
0x0202 0x0076 0x4788
0x0206 0x0070 0x479C
0x020A 0x006D 0x47A5
0x020E 0x0133 0x47D6
0x0212 0x00E5 0x47DB

// constant data  [1538]

0x0216  0x2D 0x5C 0x7C 0x2F 0x2D 0x5C 0x7C 0x2F  0x2E 0x63 0x6F 0x64 0x65 0x2F 0x44 0x65  -\|/-\|/.code/De
0x0226  0x62 0x75 0x67 0x2F 0x4F 0x62 0x6A 0x2F  0x2E 0x6A 0x73 0x6F 0x6E 0x53 0x75 0x63  bug/Obj/.jsonSuc
0x0236  0x63 0x65 0x73 0x73 0x2C 0x20 0x20 0x63  0x6F 0x64 0x65 0x20 0x62 0x79 0x74 0x65  cess,  code byte
0x0246  0x73 0x2E 0x00 0x00 0x7A 0x44 0x49 0x6E  0x76 0x61 0x6C 0x69 0x64 0x20 0x61 0x72  s...zDInvalid ar
0x0256  0x67 0x75 0x6D 0x65 0x6E 0x74 0x73 0x20  0x66 0x6F 0x72 0x20 0x4F 0x70 0x74 0x69  guments for Opti
0x0266  0x6D 0x69 0x7A 0x65 0x3A 0x20 0x20 0x4F  0x50 0x54 0x49 0x4D 0x49 0x5A 0x45 0x20  mize:  OPTIMIZE 
0x0276  0x3C 0x63 0x6F 0x64 0x65 0x20 0x66 0x69  0x6C 0x65 0x3E 0x20 0x20 0x20 0x20 0x2D  <code file>    -
0x0286  0x67 0x20 0x3C 0x63 0x3E 0x20 0x3C 0x72  0x3E 0x20 0x3A 0x20 0x63 0x61 0x6C 0x6C  g <c> <r> : call
0x0296  0x65 0x64 0x20 0x66 0x72 0x6F 0x6D 0x20  0x47 0x55 0x49 0x2C 0x20 0x6E 0x6F 0x74  ed from GUI, not
0x02A6  0x20 0x63 0x6F 0x6E 0x73 0x6F 0x6C 0x65  0x73 0x79 0x6D 0x62 0x6F 0x6C 0x73 0x48   consolesymbolsH
0x02B6  0x36 0x35 0x30 0x32 0x00 0x00 0x01 0x00  0x42 0x61 0x64 0x20 0x4A 0x75 0x6D 0x70  6502....Bad Jump
0x02C6  0x3A 0x20 0x20 0x2F 0x54 0x65 0x6D 0x70  0x2F 0x45 0x72 0x72 0x6F 0x72 0x73 0x2E  :  /Temp/Errors.
0x02D6  0x74 0x78 0x74 0x6D 0x65 0x74 0x68 0x6F  0x64 0x20 0x69 0x6E 0x64 0x65 0x78 0x20  txtmethod index 
0x02E6  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x6C 0x65 0x78 0x65 0x6D 0x65 0x67 0x6C  expectedlexemegl
0x02F6  0x6F 0x62 0x61 0x6C 0x73 0x27 0x2C 0x27  0x20 0x63 0x6F 0x6D 0x6D 0x61 0x20 0x65  obals',' comma e
0x0306  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x67  0x6C 0x6F 0x62 0x61 0x6C 0x20 0x6F 0x66  xpectedglobal of
0x0316  0x66 0x73 0x65 0x74 0x20 0x65 0x78 0x70  0x65 0x63 0x74 0x65 0x64 0x67 0x6C 0x6F  fset expectedglo
0x0326  0x62 0x61 0x6C 0x20 0x6D 0x65 0x6D 0x62  0x65 0x72 0x20 0x6E 0x61 0x6D 0x65 0x20  bal member name 
0x0336  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x67 0x6C 0x6F 0x62 0x61 0x6C 0x20 0x6D  expectedglobal m
0x0346  0x65 0x6D 0x62 0x65 0x72 0x20 0x76 0x61  0x6C 0x75 0x65 0x20 0x65 0x78 0x70 0x65  ember value expe
0x0356  0x63 0x74 0x65 0x64 0x74 0x79 0x70 0x65  0x63 0x6F 0x6E 0x73 0x74 0x2E 0x6D 0x61  ctedtypeconst.ma
0x0366  0x69 0x6E 0x64 0x61 0x74 0x61 0x72 0x65  0x66 0x6C 0x6F 0x63 0x61 0x6C 0x73 0x6C  indatareflocalsl
0x0376  0x69 0x6E 0x65 0x64 0x65 0x62 0x75 0x67  0x6B 0x65 0x79 0x20 0x6E 0x61 0x6D 0x65  inedebugkey name
0x0386  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  0x64 0x6D 0x65 0x74 0x68 0x6F 0x64 0x20   expectedmethod 
0x0396  0x6E 0x61 0x6D 0x65 0x20 0x65 0x78 0x70  0x65 0x63 0x74 0x65 0x64 0x73 0x6F 0x75  name expectedsou
0x03A6  0x72 0x63 0x65 0x73 0x6F 0x75 0x72 0x63  0x65 0x20 0x70 0x61 0x74 0x68 0x20 0x65  rcesource path e
0x03B6  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x6C  0x69 0x6E 0x65 0x20 0x6E 0x75 0x6D 0x62  xpectedline numb
0x03C6  0x65 0x72 0x20 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x68 0x69 0x74 0x73 0x68  er expectedhitsh
0x03D6  0x69 0x74 0x73 0x20 0x65 0x78 0x70 0x65  0x63 0x74 0x65 0x64 0x61 0x63 0x74 0x69  its expectedacti
0x03E6  0x76 0x65 0x20 0x72 0x61 0x6E 0x67 0x65  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  ve range expecte
0x03F6  0x64 0x6C 0x6F 0x63 0x61 0x6C 0x20 0x6D  0x65 0x6D 0x62 0x65 0x72 0x20 0x6E 0x61  dlocal member na
0x0406  0x6D 0x65 0x20 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x6C 0x6F 0x63 0x61 0x6C  me expectedlocal
0x0416  0x20 0x6D 0x65 0x6D 0x62 0x65 0x72 0x20  0x76 0x61 0x6C 0x75 0x65 0x20 0x65 0x78   member value ex
0x0426  0x70 0x65 0x63 0x74 0x65 0x64 0x42 0x50  0x20 0x6F 0x66 0x66 0x73 0x65 0x74 0x20  pectedBP offset 
0x0436  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x61 0x72 0x67 0x75 0x6D 0x65 0x6E 0x74  expectedargument
0x0446  0x20 0x6D 0x65 0x6D 0x62 0x65 0x72 0x20  0x6E 0x61 0x6D 0x65 0x20 0x65 0x78 0x70   member name exp
0x0456  0x65 0x63 0x74 0x65 0x64 0x61 0x72 0x67  0x75 0x6D 0x65 0x6E 0x74 0x20 0x6D 0x65  ectedargument me
0x0466  0x6D 0x62 0x65 0x72 0x20 0x76 0x61 0x6C  0x75 0x65 0x20 0x65 0x78 0x70 0x65 0x63  mber value expec
0x0476  0x74 0x65 0x64 0x6F 0x66 0x66 0x73 0x65  0x74 0x20 0x6B 0x65 0x79 0x20 0x65 0x78  tedoffset key ex
0x0486  0x70 0x65 0x63 0x74 0x65 0x64 0x6C 0x69  0x6E 0x65 0x20 0x76 0x61 0x6C 0x75 0x65  pectedline value
0x0496  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  0x64 0x63 0x6F 0x64 0x65 0x20 0x65 0x78   expectedcode ex
0x04A6  0x70 0x65 0x63 0x74 0x65 0x64 0x75 0x6E  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  pectedunexpected
0x04B6  0x20 0x6B 0x65 0x79 0x20 0x27 0x73 0x65  0x63 0x74 0x69 0x6F 0x6E 0x20 0x6E 0x61   key 'section na
0x04C6  0x6D 0x65 0x20 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x6B 0x65 0x79 0x20 0x73  me expectedkey s
0x04D6  0x74 0x72 0x69 0x6E 0x67 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x22 0x3A  tring expected":
0x04E6  0x20 0x74 0x72 0x75 0x65 0x66 0x61 0x6C  0x73 0x65 0x27 0x20 0x65 0x78 0x70 0x65   truefalse' expe
0x04F6  0x63 0x74 0x65 0x64 0x20 0x45 0x72 0x72  0x6F 0x72 0x20 0x61 0x74 0x20 0x65 0x6E  cted Error at en
0x0506  0x64 0x20 0x45 0x72 0x72 0x6F 0x72 0x20  0x61 0x74 0x20 0x27 0x45 0x4F 0x46 0x55  d Error at 'EOFU
0x0516  0x6E 0x64 0x65 0x66 0x69 0x6E 0x65 0x64  0x43 0x68 0x61 0x72 0x42 0x6F 0x6F 0x6C  ndefinedCharBool
0x0526  0x4B 0x65 0x79 0x77 0x6F 0x72 0x64 0x44  0x69 0x72 0x65 0x63 0x74 0x69 0x76 0x65  KeywordDirective
0x0536  0x49 0x64 0x65 0x6E 0x74 0x69 0x66 0x69  0x65 0x72 0x44 0x6F 0x74 0x74 0x65 0x64  IdentifierDotted
0x0546  0x49 0x64 0x65 0x6E 0x74 0x69 0x66 0x69  0x65 0x72 0x49 0x6E 0x74 0x65 0x67 0x65  IdentifierIntege
0x0556  0x72 0x46 0x6C 0x6F 0x61 0x74 0x53 0x74  0x72 0x69 0x6E 0x67 0x43 0x6F 0x6E 0x73  rFloatStringCons
0x0566  0x74 0x61 0x6E 0x74 0x41 0x73 0x73 0x69  0x67 0x6E 0x42 0x69 0x74 0x41 0x6E 0x64  tantAssignBitAnd
0x0576  0x42 0x69 0x74 0x4F 0x72 0x4C 0x50 0x61  0x72 0x65 0x6E 0x52 0x50 0x61 0x72 0x65  BitOrLParenRPare
0x0586  0x6E 0x4C 0x42 0x72 0x61 0x63 0x65 0x52  0x42 0x72 0x61 0x63 0x65 0x4C 0x42 0x72  nLBraceRBraceLBr
0x0596  0x61 0x63 0x6B 0x65 0x74 0x52 0x42 0x72  0x61 0x63 0x6B 0x65 0x74 0x53 0x65 0x6D  acketRBracketSem
0x05A6  0x69 0x43 0x6F 0x6C 0x6F 0x6E 0x43 0x6F  0x6D 0x6D 0x61 0x41 0x64 0x64 0x53 0x75  iColonCommaAddSu
0x05B6  0x62 0x74 0x72 0x61 0x63 0x74 0x4D 0x75  0x6C 0x74 0x69 0x70 0x6C 0x79 0x44 0x69  btractMultiplyDi
0x05C6  0x76 0x69 0x64 0x65 0x4D 0x6F 0x64 0x75  0x6C 0x75 0x73 0x49 0x6E 0x63 0x72 0x65  videModulusIncre
0x05D6  0x6D 0x65 0x6E 0x74 0x44 0x65 0x63 0x72  0x65 0x6D 0x65 0x6E 0x74 0x53 0x68 0x69  mentDecrementShi
0x05E6  0x66 0x74 0x4C 0x65 0x66 0x74 0x53 0x68  0x69 0x66 0x74 0x52 0x69 0x67 0x68 0x74  ftLeftShiftRight
0x05F6  0x42 0x6F 0x6F 0x6C 0x65 0x61 0x6E 0x4E  0x6F 0x74 0x42 0x6F 0x6F 0x6C 0x65 0x61  BooleanNotBoolea
0x0606  0x6E 0x4F 0x72 0x42 0x6F 0x6F 0x6C 0x65  0x61 0x6E 0x41 0x6E 0x64 0x42 0x69 0x74  nOrBooleanAndBit
0x0616  0x4E 0x6F 0x74 0x42 0x69 0x74 0x58 0x6F  0x72 0x70 0x6F 0x72 0x74 0x6D 0x65 0x6D  NotBitXorportmem
0x0626  0x6F 0x72 0x79 0x6D 0x65 0x6D 0x6F 0x72  0x79 0x77 0x6F 0x72 0x64 0x61 0x72 0x72  orymemorywordarr
0x0636  0x61 0x79 0x62 0x6F 0x6F 0x6C 0x63 0x68  0x61 0x72 0x64 0x65 0x6C 0x65 0x67 0x61  ayboolchardelega
0x0646  0x74 0x65 0x64 0x69 0x63 0x74 0x69 0x6F  0x6E 0x61 0x72 0x79 0x64 0x69 0x72 0x65  tedictionarydire
0x0656  0x63 0x74 0x6F 0x72 0x79 0x65 0x6E 0x75  0x6D 0x66 0x6C 0x61 0x67 0x73 0x66 0x6C  ctoryenumflagsfl
0x0666  0x6F 0x61 0x74 0x69 0x6E 0x74 0x75 0x69  0x6E 0x74 0x6C 0x69 0x73 0x74 0x6C 0x6F  oatintuintlistlo
0x0676  0x6E 0x67 0x70 0x61 0x69 0x72 0x76 0x61  0x72 0x69 0x61 0x6E 0x74 0x23 0x69 0x66  ngpairvariant#if
0x0686  0x23 0x69 0x66 0x64 0x65 0x66 0x23 0x69  0x66 0x6E 0x64 0x65 0x66 0x23 0x65 0x6C  #ifdef#ifndef#el
0x0696  0x73 0x65 0x23 0x65 0x6E 0x64 0x69 0x66  0x23 0x64 0x65 0x66 0x69 0x6E 0x65 0x62  se#endif#defineb
0x06A6  0x72 0x65 0x61 0x6B 0x63 0x61 0x73 0x65  0x63 0x6F 0x6E 0x74 0x69 0x6E 0x75 0x65  reakcasecontinue
0x06B6  0x64 0x65 0x66 0x61 0x75 0x6C 0x74 0x65  0x6D 0x62 0x65 0x64 0x66 0x6F 0x72 0x65  defaultembedfore
0x06C6  0x61 0x63 0x68 0x67 0x65 0x74 0x6C 0x6F  0x6F 0x70 0x70 0x72 0x6F 0x67 0x72 0x61  achgetloopprogra
0x06D6  0x6D 0x72 0x65 0x74 0x75 0x72 0x6E 0x73  0x77 0x69 0x74 0x63 0x68 0x73 0x79 0x73  mreturnswitchsys
0x06E6  0x74 0x65 0x6D 0x74 0x79 0x70 0x65 0x6F  0x66 0x75 0x6E 0x69 0x74 0x75 0x73 0x65  temtypeofunituse
0x06F6  0x73 0x77 0x68 0x69 0x6C 0x65 0x54 0x4F  0x44 0x4F 0x20 0x3A 0x20 0x74 0x6F 0x6B  swhileTODO : tok
0x0706  0x65 0x6E 0x20 0x6E 0x6F 0x74 0x20 0x69  0x6D 0x70 0x6C 0x65 0x6D 0x65 0x6E 0x74  en not implement
0x0716  0x65 0x64 0x20 0x69 0x6E 0x20 0x54 0x6F  0x6B 0x65 0x6E 0x2E 0x47 0x65 0x74 0x54  ed in Token.GetT
0x0726  0x79 0x70 0x65 0x75 0x6E 0x65 0x78 0x70  0x65 0x63 0x74 0x65 0x64 0x20 0x63 0x68  ypeunexpected ch
0x0736  0x61 0x72 0x61 0x63 0x74 0x65 0x72 0x3A  0x20 0x27 0x27 0x20 0x28 0x30 0x78 0x69  aracter: '' (0xi
0x0746  0x6E 0x76 0x61 0x6C 0x69 0x64 0x20 0x68  0x65 0x78 0x20 0x69 0x6E 0x74 0x65 0x67  nvalid hex integ
0x0756  0x65 0x72 0x20 0x6C 0x69 0x74 0x65 0x72  0x61 0x6C 0x69 0x6E 0x76 0x61 0x6C 0x69  er literalinvali
0x0766  0x64 0x20 0x62 0x69 0x6E 0x61 0x72 0x79  0x20 0x69 0x6E 0x74 0x65 0x67 0x65 0x72  d binary integer
0x0776  0x20 0x6C 0x69 0x74 0x65 0x72 0x61 0x6C  0x69 0x6E 0x76 0x61 0x6C 0x69 0x64 0x20   literalinvalid 
0x0786  0x66 0x6C 0x6F 0x61 0x74 0x20 0x6C 0x69  0x74 0x65 0x72 0x61 0x6C 0x69 0x6E 0x76  float literalinv
0x0796  0x61 0x6C 0x69 0x64 0x20 0x69 0x6E 0x74  0x65 0x67 0x65 0x72 0x20 0x6C 0x69 0x74  alid integer lit
0x07A6  0x65 0x72 0x61 0x6C 0x75 0x6E 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x20 0x45  eralunexpected E
0x07B6  0x4F 0x4C 0x20 0x69 0x6E 0x20 0x73 0x74  0x72 0x69 0x6E 0x67 0x75 0x6E 0x74 0x65  OL in stringunte
0x07C6  0x72 0x6D 0x69 0x6E 0x61 0x74 0x65 0x64  0x20 0x73 0x74 0x72 0x69 0x6E 0x67 0x3A  rminated string:
0x07D6  0x20 0x27 0x70 0x6F 0x73 0x00 0x00 0x20  0x41 0x54 0x4F 0x44 0x4F 0x20 0x3A 0x20   'pos.. ATODO : 
0x07E6  0x74 0x6F 0x6B 0x65 0x6E 0x20 0x6E 0x6F  0x74 0x20 0x69 0x6D 0x70 0x6C 0x65 0x6D  token not implem
0x07F6  0x65 0x6E 0x74 0x65 0x64 0x20 0x69 0x6E  0x20 0x54 0x6F 0x6B 0x65 0x6E 0x2E 0x48  ented in Token.H
0x0806  0x6F 0x70 0x70 0x65 0x72 0x54 0x6F 0x6B  0x65 0x6E 0x54 0x6F 0x53 0x74 0x72 0x69  opperTokenToStri
0x0816  0x6E 0x67                                                                        ng


// Optimize.hs:1169
// ####  Optimize.main(..)  ####                                                0x0000

0x0818  0x1A 0x0F       PUSHIB 0x0F
0x081A  0x1A 0x14       PUSHIB 0x14
0x081C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x081E  0x44            PUSHI0
0x081F  0x44            PUSHI0
0x0820  0x1A 0x04       PUSHIB 0x04
0x0822  0x1A 0x19       PUSHIB 0x19
0x0824  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0826  0x1A 0x04       PUSHIB 0x04
0x0828  0x1A 0x04       PUSHIB 0x04
0x082A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x082C  0x1A 0x04       PUSHIB 0x04
0x082E  0x1A 0x04       PUSHIB 0x04
0x0830  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0832  0x1A 0x04       PUSHIB 0x04
0x0834  0x1A 0x0F       PUSHIB 0x0F
0x0836  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0838  0x1A 0x03       PUSHIB 0x03
0x083A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x083C  0x1A 0x0F       PUSHIB 0x0F
0x083E  0x1A 0x13       PUSHIB 0x13
0x0840  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0842  0x1A 0x0F       PUSHIB 0x0F
0x0844  0x1A 0x13       PUSHIB 0x13
0x0846  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0848  0x1A 0x04       PUSHIB 0x04
0x084A  0x1A 0x0F       PUSHIB 0x0F
0x084C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x084E  0x24 0x02       SYSCALL0 0x02  // String.New
0x0850  0x1A 0x0F       PUSHIB 0x0F
0x0852  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0854  0x1A 0x0F       PUSHIB 0x0F
0x0856  0x1A 0x06       PUSHIB 0x06
0x0858  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x085A  0x1A 0x0F       PUSHIB 0x0F
0x085C  0x1A 0x06       PUSHIB 0x06
0x085E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0860  0x1A 0x0F       PUSHIB 0x0F
0x0862  0x1A 0x06       PUSHIB 0x06
0x0864  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0866  0x1A 0x0F       PUSHIB 0x0F
0x0868  0x1A 0x06       PUSHIB 0x06
0x086A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x086C  0x1A 0x0F       PUSHIB 0x0F
0x086E  0x1A 0x06       PUSHIB 0x06
0x0870  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0872  0x1A 0x0F       PUSHIB 0x0F
0x0874  0x1A 0x07       PUSHIB 0x07
0x0876  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0878  0x1A 0x07       PUSHIB 0x07
0x087A  0x1A 0x0F       PUSHIB 0x0F
0x087C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x087E  0x1A 0x0F       PUSHIB 0x0F
0x0880  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0882  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0884  0x44            PUSHI0
0x0885  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0887  0x44            PUSHI0
0x0888  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x088A  0x24 0x02       SYSCALL0 0x02  // String.New
0x088C  0x44            PUSHI0
0x088D  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x088F  0x44            PUSHI0
0x0890  0x44            PUSHI0
0x0891  0x1A 0x0F       PUSHIB 0x0F
0x0893  0x1A 0x0F       PUSHIB 0x0F
0x0895  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0897  0x44            PUSHI0
0x0898  0x44            PUSHI0
0x0899  0x1F 0x40       POPGLOBALB 0x40
0x089B  0x1A 0x0F       PUSHIB 0x0F
0x089D  0x1A 0x0F       PUSHIB 0x0F
0x089F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x08A1  0x1A 0x0F       PUSHIB 0x0F
0x08A3  0x1A 0x0F       PUSHIB 0x0F
0x08A5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x08A7  0x44            PUSHI0
0x08A8  0x44            PUSHI0
0x08A9  0x24 0x02       SYSCALL0 0x02  // String.New
0x08AB  0x44            PUSHI0
0x08AC  0x1A 0x08       PUSHIB 0x08
0x08AE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x08B0  0x1F 0x4A       POPGLOBALB 0x4A
0x08B2  0x24 0x60       SYSCALL0 0x60  // File.New
0x08B4  0x44            PUSHI0
0x08B5  0x44            PUSHI0
0x08B6  0x44            PUSHI0
0x08B7  0x1A 0x0F       PUSHIB 0x0F
0x08B9  0x1A 0x03       PUSHIB 0x03
0x08BB  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // uint codeBefore;                                     Optimize.hs:1170

0x08BD  0x5F 0x03       ENTERB 0x03

                        // <string> rawArgs = System.Arguments;                 Optimize.hs:1175

0x08BF  0x1A 0x0F       PUSHIB 0x0F
0x08C1  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x08C3  0x24 0x59       SYSCALL0 0x59  // System.Arguments_Get
0x08C5  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // <string> args;                                       Optimize.hs:1176

0x08C7  0x1A 0x0F       PUSHIB 0x0F
0x08C9  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // for (uint iArg = 0; iArg < rawArgs.Length; iArg++)

0x08CB  0x44            PUSHI0
0x08CC  0x56 0x0A 0x06  PUSHLOCALBB 0x060A
0x08CF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x08D1  0x08            LT
0x08D2  0x31 0x77 0x00  JZW 0x0949 (+119)

                        // string arg = rawArgs[iArg];                          Optimize.hs:1179

0x08D5  0x24 0x02       SYSCALL0 0x02  // String.New
0x08D7  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x08DA  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x08DC  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // if ((arg.Length >= 2) && (arg[0] == '-'))            Optimize.hs:1180

0x08DE  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x08E0  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x08E2  0x1A 0x02       PUSHIB 0x02
0x08E4  0x09            GE
0x08E5  0x27 0x00       DUP 0x00
0x08E7  0x2E 0x0B       JZB 0x08F2 (+11)
0x08E9  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x08EB  0x44            PUSHI0
0x08EC  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x08EE  0x1A 0x2D       PUSHIB 0x2D
0x08F0  0x05            EQ
0x08F1  0x0C            BOOLAND
0x08F2  0x2E 0x4B       JZB 0x093D (+75)

                        // arg = arg.ToLower();                                 Optimize.hs:1182

0x08F4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x08F6  0x2C 0xF1       CALLB 0xF1     // String.ToLower
0x08F8  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // switch (arg)                                         Optimize.hs:1183

0x08FA  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)

                        // case "-g":                                           Optimize.hs:1185

0x08FC  0x37 0x2D 0x67  PUSHIW 0x672D
0x08FF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0901  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0903  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x0905  0x2F 0x2C       JNZB 0x0931 (+44)

                        // uint col;                                            Optimize.hs:1187

0x0907  0x44            PUSHI0

                        // uint row;                                            Optimize.hs:1188

0x0908  0x44            PUSHI0

                        // iArg++;                                              Optimize.hs:1189

0x0909  0x22 0x0A       INCLOCALB 0x0A (BP+10)

                        // if (TryParseUInt(rawArgs[iArg], ref col))            Optimize.hs:1190

0x090B  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x090E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0910  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0x0912  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x0914  0x2E 0x02       JZB 0x0916 (+2)

                        // iArg++;                                              Optimize.hs:1193

0x0916  0x22 0x0A       INCLOCALB 0x0A (BP+10)

                        // if (TryParseUInt(rawArgs[iArg], ref row))            Optimize.hs:1194

0x0918  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x091B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x091D  0x21 0x12       PUSHSTACKADDRB 0x12 (BP+18)
0x091F  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x0921  0x2E 0x02       JZB 0x0923 (+2)

                        // Parser.SetInteractive(byte(col), byte(row));

0x0923  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0925  0x51 0x03       CAST 0x03
0x0927  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x0929  0x51 0x03       CAST 0x03
0x092B  0x2C 0x93       CALLB 0x93     // Parser.SetInteractive

                        // }                                                    Optimize.hs:1198

0x092D  0x28 0x04       DECSP 0x04
0x092F  0x30 0x0A       JB 0x0939 (+10)

                        // args.Clear();                                        Optimize.hs:1201

0x0931  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0933  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // break;                                               Optimize.hs:1202

0x0935  0x28 0x06       DECSP 0x06
0x0937  0x30 0x14       JB 0x094B (+20)

                        // }                                                    Optimize.hs:1204

0x0939  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:1205

0x093B  0x30 0x07       JB 0x0942 (+7)

                        // args.Append(arg);                                    Optimize.hs:1208

0x093D  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x0940  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    Optimize.hs:1210

0x0942  0x28 0x02       DECSP 0x02
0x0944  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0x0946  0x33 0x86 0xFF  JW 0x08CC (-122)
0x0949  0x28 0x02       DECSP 0x02

                        // if (args.Length != 1)                                Optimize.hs:1212

0x094B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x094D  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x094F  0x45            PUSHI1
0x0950  0x06            NE
0x0951  0x2E 0x08       JZB 0x0959 (+8)

                        // BadArguments();                                      Optimize.hs:1214

0x0953  0x2C 0x1F       CALLB 0x1F     // Optimize.BadArguments

                        // break;                                               Optimize.hs:1215

0x0955  0x28 0x06       DECSP 0x06
0x0957  0x2A 0x5A       RETB 0x5A

                        // string codePath = args[0];                           Optimize.hs:1217

0x0959  0x24 0x02       SYSCALL0 0x02  // String.New
0x095B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x095D  0x44            PUSHI0
0x095E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0960  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string ext = ".code";                                Optimize.hs:1219

0x0962  0x24 0x02       SYSCALL0 0x02  // String.New
0x0964  0x1A 0x08       PUSHIB 0x08
0x0966  0x1A 0x05       PUSHIB 0x05
0x0968  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x096A  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string codePath = args[0];                           Optimize.hs:1220

0x096C  0x24 0x02       SYSCALL0 0x02  // String.New
0x096E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0970  0x44            PUSHI0
0x0971  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0973  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (!File.Exists(ref codePath, ref ext, "/Debug/Obj/"))

0x0975  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x0977  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0979  0x1A 0x0D       PUSHIB 0x0D
0x097B  0x1A 0x0B       PUSHIB 0x0B
0x097D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x097F  0x34 0x15 0x01  CALLW 0x0115   // File.Exists
0x0982  0x2F 0x04       JNZB 0x0986 (+4)

                        // BadArguments();                                      Optimize.hs:1223

0x0984  0x2C 0x1F       CALLB 0x1F     // Optimize.BadArguments

                        // long startTime = Millis;                             Optimize.hs:1226

0x0986  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0988  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x098A  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string extension = Path.GetExtension(codePath);

0x098C  0x24 0x02       SYSCALL0 0x02  // String.New
0x098E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0990  0x34 0x1A 0x01  CALLW 0x011A   // Path.GetExtension
0x0993  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (!Code.ParseCode(codePath, true, true, false))

0x0995  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0997  0x45            PUSHI1
0x0998  0x45            PUSHI1
0x0999  0x44            PUSHI0
0x099A  0x2C 0x6B       CALLB 0x6B     // Code.ParseCode
0x099C  0x2F 0x07       JNZB 0x09A3 (+7)

                        // break;                                               Optimize.hs:1232

0x099E  0x28 0x02       DECSP 0x02
0x09A0  0x33 0xA0 0x00  JW 0x0A40 (+160)

                        // string symbolsPath = codePath.Replace(extension, ".json");

0x09A3  0x24 0x02       SYSCALL0 0x02  // String.New
0x09A5  0x56 0x0A 0x12  PUSHLOCALBB 0x120A
0x09A8  0x1A 0x18       PUSHIB 0x18
0x09AA  0x1A 0x05       PUSHIB 0x05
0x09AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x09AE  0x24 0x09       SYSCALL0 0x09  // String.Replace
0x09B0  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // if (File.Exists(symbolsPath))                        Optimize.hs:1235

0x09B2  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x09B4  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x09B6  0x2E 0x0D       JZB 0x09C3 (+13)

                        // if (JSON.Read(symbolsPath, ref symbols))             Optimize.hs:1237

0x09B8  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x09BA  0x44            PUSHI0
0x09BB  0x47            PUSHGP
0x09BC  0x00            ADD
0x09BD  0x2C 0x4E       CALLB 0x4E     // JSON.Read
0x09BF  0x2E 0x04       JZB 0x09C3 (+4)

                        // CheckTarget();                                       Optimize.hs:1239

0x09C1  0x2C 0x02       CALLB 0x02     // Optimize.CheckTarget

                        // Optimize(ref codeBefore, ref codeAfter);             Optimize.hs:1243

0x09C3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x09C5  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x09C7  0x2C 0x1E       CALLB 0x1E     // Optimize.Optimize

                        // File.Delete(codePath);                               Optimize.hs:1246

0x09C9  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x09CB  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // if (!Code.ExportCode(codePath, false)) // after

0x09CD  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x09CF  0x44            PUSHI0
0x09D0  0x2C 0x6C       CALLB 0x6C     // Code.ExportCode
0x09D2  0x2F 0x06       JNZB 0x09D8 (+6)

                        // break;                                               Optimize.hs:1249

0x09D4  0x28 0x04       DECSP 0x04
0x09D6  0x30 0x6A       JB 0x0A40 (+106)

                        // if (!Parser.IsInteractive())                         Optimize.hs:1252

0x09D8  0x2C 0x94       CALLB 0x94     // Parser.IsInteractive
0x09DA  0x2F 0x62       JNZB 0x0A3C (+98)

                        // PrintLn();                                           Optimize.hs:1254

0x09DC  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // Print("Success, " + codeBefore.ToString() + "->" + codeAfter.ToString() + " code bytes.", Color.ProgressText, Color.ProgressFace);

0x09DE  0x1A 0x1D       PUSHIB 0x1D
0x09E0  0x1A 0x09       PUSHIB 0x09
0x09E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x09E4  0x4E            PUSHLOCALB00
0x09E5  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x09E7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x09E9  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0x09EC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x09EE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x09F0  0x4F            PUSHLOCALB02
0x09F1  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x09F3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x09F5  0x1A 0x26       PUSHIB 0x26
0x09F7  0x1A 0x0C       PUSHIB 0x0C
0x09F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x09FB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x09FD  0x34 0x42 0x01  CALLW 0x0142   // Color.ProgressText_Get
0x0A00  0x34 0x43 0x01  CALLW 0x0143   // Color.ProgressFace_Get
0x0A03  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // long elapsedTime = Millis - startTime;               Optimize.hs:1256

0x0A05  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0A07  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x0A09  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0A0B  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0A0D  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // float seconds = elapsedTime / 1000.0;                Optimize.hs:1257

0x0A0F  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x0A11  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x0A13  0x1A 0x32       PUSHIB 0x32
0x0A15  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0x0A17  0x43            SWAP
0x0A18  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x0A1A  0x43            SWAP
0x0A1B  0x24 0x50       SYSCALL0 0x50  // Float.Div
0x0A1D  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // PrintLn("  " + seconds.ToString() + "s", Color.ProgressHighlight, Color.ProgressFace);

0x0A1F  0x37 0x20 0x20  PUSHIW 0x2020
0x0A22  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0A24  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0A26  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x0A28  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0A2A  0x1A 0x73       PUSHIB 0x73
0x0A2C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0A2E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0A30  0x34 0x44 0x01  CALLW 0x0144   // Color.ProgressHighlight_Get
0x0A33  0x34 0x43 0x01  CALLW 0x0143   // Color.ProgressFace_Get
0x0A36  0x2C 0x36       CALLB 0x36     // Screen.PrintLn

                        // }                                                    Optimize.hs:1259

0x0A38  0x28 0x04       DECSP 0x04
0x0A3A  0x30 0x04       JB 0x0A3E (+4)

                        // Parser.ProgressDone();                               Optimize.hs:1262

0x0A3C  0x2C 0x97       CALLB 0x97     // Parser.ProgressDone

                        // break;                                               Optimize.hs:1296

0x0A3E  0x28 0x04       DECSP 0x04

                        // break;                                               Optimize.hs:1298

0x0A40  0x28 0x0E       DECSP 0x0E
0x0A42  0x2A 0x5A       RETB 0x5A


// Optimize.hs:1163
// ####  Optimize.BadArguments(..)  ####                                        0x001F

0x0A44  0x49            ENTER

                        // PrintLn("Invalid arguments for Optimize:");

0x0A45  0x1A 0x36       PUSHIB 0x36
0x0A47  0x1A 0x1F       PUSHIB 0x1F
0x0A49  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0A4B  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // PrintLn("  OPTIMIZE <code file>");                   Optimize.hs:1165

0x0A4D  0x1A 0x55       PUSHIB 0x55
0x0A4F  0x1A 0x16       PUSHIB 0x16
0x0A51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0A53  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // PrintLn("    -g <c> <r> : called from GUI, not console");

0x0A55  0x1A 0x6B       PUSHIB 0x6B
0x0A57  0x1A 0x2D       PUSHIB 0x2D
0x0A59  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0A5B  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // }                                                    Optimize.hs:1167

0x0A5D  0x4A            RET0


// Optimize.hs:29
// ####  Optimize.CheckTarget(..)  ####                                         0x0002

0x0A5E  0x49            ENTER

                        // foreach (var kv in symbols)                          Optimize.hs:30

0x0A5F  0x20 0x00       PUSHGLOBALB 0x00
0x0A61  0x1A 0x0F       PUSHIB 0x0F
0x0A63  0x1A 0x0F       PUSHIB 0x0F
0x0A65  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x0A67  0x44            PUSHI0
0x0A68  0x4E            PUSHLOCALB00
0x0A69  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0A6B  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x0A6D  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x0A6F  0x4D            POPLOCALB02
0x0A70  0x2E 0x32       JZB 0x0AA2 (+50)

                        // switch (kv.key)                                      Optimize.hs:32

0x0A72  0x4F            PUSHLOCALB02
0x0A73  0x24 0x22       SYSCALL0 0x22  // Pair.Key

                        // case "symbols":                                      Optimize.hs:34

0x0A75  0x1A 0x98       PUSHIB 0x98
0x0A77  0x1A 0x07       PUSHIB 0x07
0x0A79  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0A7B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0A7D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x0A7F  0x2F 0x1F       JNZB 0x0A9E (+31)

                        // <string,string> pdValues = kv.value;                 Optimize.hs:37

0x0A81  0x1A 0x0F       PUSHIB 0x0F
0x0A83  0x1A 0x0F       PUSHIB 0x0F
0x0A85  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0A87  0x4F            PUSHLOCALB02
0x0A88  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x0A8A  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (pdValues.Contains("H6502"))                      Optimize.hs:38

0x0A8C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0A8E  0x1A 0x9F       PUSHIB 0x9F
0x0A90  0x1A 0x05       PUSHIB 0x05
0x0A92  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0A94  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x0A96  0x2E 0x05       JZB 0x0A9B (+5)

                        // target6502 = true;                                   Optimize.hs:40

0x0A98  0x45            PUSHI1
0x0A99  0x1F 0x02       POPGLOBALB 0x02

                        // break;                                               Optimize.hs:42

0x0A9B  0x28 0x0A       DECSP 0x0A
0x0A9D  0x4A            RET0

                        // }                                                    Optimize.hs:44

0x0A9E  0x28 0x02       DECSP 0x02

                        // } // kv                                              Optimize.hs:45

0x0AA0  0x30 0xC8       JB 0x0A68 (-56)
0x0AA2  0x28 0x06       DECSP 0x06

                        // }                                                    Optimize.hs:46

0x0AA4  0x4A            RET0


// Optimize.hs:923
// ####  Optimize.Optimize(..)  ####                                            0x001E

0x0AA5  0x49            ENTER

                        // <uint> indices = Code.GetMethodIndices();            Optimize.hs:924

0x0AA6  0x1A 0x04       PUSHIB 0x04
0x0AA8  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0AAA  0x2C 0x66       CALLB 0x66     // Code.GetMethodIndices
0x0AAC  0x5D            POPCOPYLOCALB00

                        // uint progressInstructions;                           Optimize.hs:927

0x0AAD  0x44            PUSHI0

                        // foreach (var methodIndex in indices)                 Optimize.hs:928

0x0AAE  0x4E            PUSHLOCALB00
0x0AAF  0x44            PUSHI0
0x0AB0  0x44            PUSHI0
0x0AB1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0AB3  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0AB5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0AB7  0x05            EQ
0x0AB8  0x32 0xCF 0x03  JNZW 0x0E87 (+975)
0x0ABB  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x0ABE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0AC0  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // <byte> code = Code.GetMethodCode(methodIndex);

0x0AC2  0x1A 0x03       PUSHIB 0x03
0x0AC4  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0AC6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0AC8  0x2C 0x62       CALLB 0x62     // Code.GetMethodCode
0x0ACA  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // < <uint> > instructions;                             Optimize.hs:941

0x0ACC  0x1A 0x19       PUSHIB 0x19
0x0ACE  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint codeLength = code.Length;                       Optimize.hs:942

0x0AD0  0x44            PUSHI0
0x0AD1  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0AD3  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0AD5  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // codeBefore = codeBefore + codeLength;                Optimize.hs:943

0x0AD7  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0AD9  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0ADB  0x00            ADD
0x0ADC  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // byte operandWidth;                                   Optimize.hs:944

0x0ADE  0x44            PUSHI0

                        // uint i = 0;                                          Optimize.hs:945

0x0ADF  0x44            PUSHI0

                        // Instruction opCode = Instruction(code[i]);           Optimize.hs:948

0x0AE0  0x44            PUSHI0
0x0AE1  0x56 0x0A 0x12  PUSHLOCALBB 0x120A
0x0AE4  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0AE6  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // operandWidth = Instructions.OperandWidth(opCode);

0x0AE8  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x0AEA  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x0AEC  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // <uint> instructionList;                              Optimize.hs:951

0x0AEE  0x1A 0x04       PUSHIB 0x04
0x0AF0  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // instructionList.Append(code[i]);                     Optimize.hs:952

0x0AF2  0x56 0x16 0x0A  PUSHLOCALBB 0x0A16
0x0AF5  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x0AF7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0AF9  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // i++;                                                 Optimize.hs:954

0x0AFB  0x22 0x12       INCLOCALB 0x12 (BP+18)

                        // if (operandWidth == 1)                               Optimize.hs:955

0x0AFD  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0AFF  0x45            PUSHI1
0x0B00  0x05            EQ
0x0B01  0x2E 0x0D       JZB 0x0B0E (+13)

                        // instructionList.Append(code[i]);                     Optimize.hs:957

0x0B03  0x56 0x16 0x0A  PUSHLOCALBB 0x0A16
0x0B06  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x0B08  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B0A  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // i++;                                                 Optimize.hs:958

0x0B0C  0x22 0x12       INCLOCALB 0x12 (BP+18)

                        // if (operandWidth == 2)                               Optimize.hs:960

0x0B0E  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0B10  0x1A 0x02       PUSHIB 0x02
0x0B12  0x05            EQ
0x0B13  0x2E 0x27       JZB 0x0B3A (+39)

                        // uint lsb = code[i];                                  Optimize.hs:962

0x0B15  0x44            PUSHI0
0x0B16  0x56 0x0A 0x12  PUSHLOCALBB 0x120A
0x0B19  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B1B  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // i++;                                                 Optimize.hs:963

0x0B1D  0x22 0x12       INCLOCALB 0x12 (BP+18)

                        // uint msb = code[i];                                  Optimize.hs:964

0x0B1F  0x44            PUSHI0
0x0B20  0x56 0x0A 0x12  PUSHLOCALBB 0x120A
0x0B23  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B25  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // i++;                                                 Optimize.hs:965

0x0B27  0x22 0x12       INCLOCALB 0x12 (BP+18)

                        // uint operand = lsb + (msb << 8);                     Optimize.hs:966

0x0B29  0x44            PUSHI0
0x0B2A  0x56 0x18 0x1A  PUSHLOCALBB 0x1A18
0x0B2D  0x1A 0x08       PUSHIB 0x08
0x0B2F  0x0F            BITSHL
0x0B30  0x00            ADD
0x0B31  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // instructionList.Append(operand);                     Optimize.hs:967

0x0B33  0x56 0x16 0x1C  PUSHLOCALBB 0x1C16
0x0B36  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    Optimize.hs:968

0x0B38  0x28 0x06       DECSP 0x06

                        // instructions.Append(instructionList);                Optimize.hs:969

0x0B3A  0x56 0x0C 0x16  PUSHLOCALBB 0x160C
0x0B3D  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (i == codeLength)                                 Optimize.hs:970

0x0B3F  0x56 0x12 0x0E  PUSHLOCALBB 0x0E12
0x0B42  0x05            EQ
0x0B43  0x2E 0x06       JZB 0x0B49 (+6)

                        // break;                                               Optimize.hs:972

0x0B45  0x28 0x04       DECSP 0x04
0x0B47  0x30 0x16       JB 0x0B5D (+22)

                        // progressInstructions++;                              Optimize.hs:974

0x0B49  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if ((progressInstructions % progressSteps) == 0)

0x0B4B  0x4F            PUSHLOCALB02
0x0B4C  0x37 0x00 0x08  PUSHIW 0x0800
0x0B4F  0x04            MOD
0x0B50  0x2F 0x08       JNZB 0x0B58 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:977

0x0B52  0x1A 0x2E       PUSHIB 0x2E
0x0B54  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0B56  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // } // loop                                            Optimize.hs:979

0x0B58  0x28 0x04       DECSP 0x04
0x0B5A  0x33 0x86 0xFF  JW 0x0AE0 (-122)

                        // uint instructionsLength = instructions.Length;

0x0B5D  0x44            PUSHI0
0x0B5E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0B60  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0B62  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // uint iIndex = 0;                                     Optimize.hs:984

0x0B64  0x44            PUSHI0

                        // if (iIndex == instructionsLength)                    Optimize.hs:987

0x0B65  0x56 0x16 0x14  PUSHLOCALBB 0x1416
0x0B68  0x05            EQ
0x0B69  0x32 0xC7 0x00  JNZW 0x0C30 (+199)

                        // <uint> instructionList = instructions[iIndex];

0x0B6C  0x1A 0x04       PUSHIB 0x04
0x0B6E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0B70  0x56 0x0C 0x16  PUSHLOCALBB 0x160C
0x0B73  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B75  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // Instruction opCode = Instruction(instructionList[0]);

0x0B77  0x44            PUSHI0
0x0B78  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0B7A  0x44            PUSHI0
0x0B7B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B7D  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // byte operandWidth = Instructions.OperandWidth(opCode);

0x0B7F  0x44            PUSHI0
0x0B80  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x0B82  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x0B84  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // long offset;                                         Optimize.hs:994

0x0B86  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // uint address = GetInstructionAddress(iIndex, ref instructions);

0x0B88  0x44            PUSHI0
0x0B89  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x0B8B  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0B8D  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x0B8F  0x1B 0x20       POPLOCALB 0x20 (BP+32)

                        // long jumpTarget;                                     Optimize.hs:996

0x0B91  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (Instructions.OperandIsAddressOffset(opCode))

0x0B93  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x0B95  0x2C 0xAE       CALLB 0xAE     // Instructions.OperandIsAddressOffset
0x0B97  0x2E 0x61       JZB 0x0BF8 (+97)

                        // if (operandWidth == 1)                               Optimize.hs:999

0x0B99  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0B9B  0x45            PUSHI1
0x0B9C  0x05            EQ
0x0B9D  0x2E 0x2C       JZB 0x0BC9 (+44)

                        // offset = instructionList[1];                         Optimize.hs:1001

0x0B9F  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0BA1  0x45            PUSHI1
0x0BA2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0BA4  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BA6  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (offset > 127)                                    Optimize.hs:1002

0x0BA8  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BAA  0x1A 0x7F       PUSHIB 0x7F
0x0BAC  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BAE  0x24 0x47       SYSCALL0 0x47  // Long.GT
0x0BB0  0x2E 0x0D       JZB 0x0BBD (+13)

                        // offset = offset - 256; // 255 -> -1                  Optimize.hs:1004

0x0BB2  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BB4  0x37 0x00 0x01  PUSHIW 0x0100
0x0BB7  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0BB9  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0BBB  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // jumpTarget = long(address) + offset;                 Optimize.hs:1006

0x0BBD  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x0BBF  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BC1  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BC3  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x0BC5  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // }                                                    Optimize.hs:1007

0x0BC7  0x30 0x31       JB 0x0BF8 (+49)

                        // uint operand = instructionList[1];                   Optimize.hs:1011

0x0BC9  0x44            PUSHI0
0x0BCA  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0BCC  0x45            PUSHI1
0x0BCD  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0BCF  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // offset = operand;                                    Optimize.hs:1012

0x0BD1  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x0BD3  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BD5  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (offset > 32767)                                  Optimize.hs:1013

0x0BD7  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BD9  0x37 0xFF 0x7F  PUSHIW 0x7FFF
0x0BDC  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0BDE  0x24 0x47       SYSCALL0 0x47  // Long.GT
0x0BE0  0x2E 0x0C       JZB 0x0BEC (+12)

                        // offset = offset - 65536; // 0x10000 -> -1            Optimize.hs:1015

0x0BE2  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BE4  0x1A 0xA4       PUSHIB 0xA4
0x0BE6  0x24 0x3E       SYSCALL0 0x3E  // Long.NewFromConstant
0x0BE8  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0BEA  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // jumpTarget = long(address) + offset;                 Optimize.hs:1017

0x0BEC  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x0BEE  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BF0  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0BF2  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x0BF4  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // }                                                    Optimize.hs:1018

0x0BF6  0x28 0x02       DECSP 0x02

                        // if (jumpTarget != 0)                                 Optimize.hs:1020

0x0BF8  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0BFA  0x44            PUSHI0
0x0BFB  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0BFD  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x0BFF  0x2F 0x1B       JNZB 0x0C1A (+27)

                        // uint jumpIndex = GetInstructionIndex(jumpTarget, ref instructions);

0x0C01  0x44            PUSHI0
0x0C02  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0C04  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0C06  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x0C08  0x2C 0x08       CALLB 0x08     // Optimize.GetInstructionIndex
0x0C0A  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // instructionList.Append(jumpIndex);                   Optimize.hs:1023

0x0C0C  0x56 0x18 0x24  PUSHLOCALBB 0x2418
0x0C0F  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex, instructionList);

0x0C11  0x56 0x0C 0x16  PUSHLOCALBB 0x160C
0x0C14  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0C16  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:1025

0x0C18  0x28 0x02       DECSP 0x02

                        // iIndex++;                                            Optimize.hs:1027

0x0C1A  0x22 0x16       INCLOCALB 0x16 (BP+22)

                        // progressInstructions++;                              Optimize.hs:1028

0x0C1C  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if ((progressInstructions % progressSteps) == 0)

0x0C1E  0x4F            PUSHLOCALB02
0x0C1F  0x37 0x00 0x08  PUSHIW 0x0800
0x0C22  0x04            MOD
0x0C23  0x2F 0x08       JNZB 0x0C2B (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:1031

0x0C25  0x1A 0x2E       PUSHIB 0x2E
0x0C27  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0C29  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // } // loop iIndex                                     Optimize.hs:1033

0x0C2B  0x28 0x0C       DECSP 0x0C
0x0C2D  0x33 0x38 0xFF  JW 0x0B65 (-200)

                        // <string,string> debugInfo = GetMethodDebugInfo(methodIndex);

0x0C30  0x1A 0x0F       PUSHIB 0x0F
0x0C32  0x1A 0x0F       PUSHIB 0x0F
0x0C34  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0C36  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0C38  0x2C 0x64       CALLB 0x64     // Code.GetMethodDebugInfo
0x0C3A  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // <uint,string> indexDebugInfo;                        Optimize.hs:1037

0x0C3C  0x1A 0x04       PUSHIB 0x04
0x0C3E  0x1A 0x0F       PUSHIB 0x0F
0x0C40  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var kv in debugInfo)                        Optimize.hs:1038

0x0C42  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0C44  0x1A 0x0F       PUSHIB 0x0F
0x0C46  0x1A 0x0F       PUSHIB 0x0F
0x0C48  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x0C4A  0x44            PUSHI0
0x0C4B  0x56 0x1C 0x20  PUSHLOCALBB 0x201C
0x0C4E  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x0C50  0x1B 0x20       POPLOCALB 0x20 (BP+32)
0x0C52  0x1B 0x1E       POPLOCALB 0x1E (BP+30)
0x0C54  0x2E 0x29       JZB 0x0C7D (+41)

                        // string saddress = kv.key;                            Optimize.hs:1040

0x0C56  0x24 0x02       SYSCALL0 0x02  // String.New
0x0C58  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0C5A  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x0C5C  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // uint address;                                        Optimize.hs:1041

0x0C5E  0x44            PUSHI0

                        // if (TryParseUInt(saddress, ref address))             Optimize.hs:1042

0x0C5F  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0C61  0x21 0x24       PUSHSTACKADDRB 0x24 (BP+36)
0x0C63  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x0C65  0x2E 0x02       JZB 0x0C67 (+2)

                        // uint index = GetInstructionIndex(address, ref instructions);

0x0C67  0x44            PUSHI0
0x0C68  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x0C6A  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0C6C  0x2C 0x08       CALLB 0x08     // Optimize.GetInstructionIndex
0x0C6E  0x1B 0x26       POPLOCALB 0x26 (BP+38)

                        // indexDebugInfo[index] = kv.value;                    Optimize.hs:1046

0x0C70  0x56 0x1A 0x26  PUSHLOCALBB 0x261A
0x0C73  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0C75  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x0C77  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    Optimize.hs:1047

0x0C79  0x28 0x06       DECSP 0x06
0x0C7B  0x30 0xD0       JB 0x0C4B (-48)
0x0C7D  0x28 0x06       DECSP 0x06

                        // bool modified;                                       Optimize.hs:1050

0x0C7F  0x44            PUSHI0

                        // modified = OptimizeJumpW(ref instructions, ref progressInstructions);

0x0C80  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0C82  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0C84  0x2C 0x13       CALLB 0x13     // Optimize.OptimizeJumpW
0x0C86  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeRemoveNOP(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0C88  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0C8A  0x27 0x00       DUP 0x00
0x0C8C  0x2F 0x0B       JNZB 0x0C97 (+11)
0x0C8E  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0C90  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0C92  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0C94  0x2C 0x14       CALLB 0x14     // Optimize.OptimizeRemoveNOP
0x0C96  0x0B            BOOLOR
0x0C97  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeCOPYPOP(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0C99  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0C9B  0x27 0x00       DUP 0x00
0x0C9D  0x2F 0x0B       JNZB 0x0CA8 (+11)
0x0C9F  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CA1  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CA3  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CA5  0x2C 0x17       CALLB 0x17     // Optimize.OptimizeCOPYPOP
0x0CA7  0x0B            BOOLOR
0x0CA8  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeENTERPUSHI0(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CAA  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0CAC  0x27 0x00       DUP 0x00
0x0CAE  0x2F 0x0B       JNZB 0x0CB9 (+11)
0x0CB0  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CB2  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CB4  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CB6  0x2C 0x18       CALLB 0x18     // Optimize.OptimizeENTERPUSHI0
0x0CB8  0x0B            BOOLOR
0x0CB9  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeNOTJump(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CBB  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0CBD  0x27 0x00       DUP 0x00
0x0CBF  0x2F 0x0B       JNZB 0x0CCA (+11)
0x0CC1  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CC3  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CC5  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CC7  0x2C 0x19       CALLB 0x19     // Optimize.OptimizeNOTJump
0x0CC9  0x0B            BOOLOR
0x0CCA  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeZEROEQJump(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CCC  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0CCE  0x27 0x00       DUP 0x00
0x0CD0  0x2F 0x0B       JNZB 0x0CDB (+11)
0x0CD2  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CD4  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CD6  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CD8  0x2C 0x1A       CALLB 0x1A     // Optimize.OptimizeZEROEQJump
0x0CDA  0x0B            BOOLOR
0x0CDB  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizePUSHPUSHSWAP(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CDD  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0CDF  0x27 0x00       DUP 0x00
0x0CE1  0x2F 0x0B       JNZB 0x0CEC (+11)
0x0CE3  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CE5  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CE7  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CE9  0x2C 0x1B       CALLB 0x1B     // Optimize.OptimizePUSHPUSHSWAP
0x0CEB  0x0B            BOOLOR
0x0CEC  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeJumpToJump(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CEE  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0CF0  0x27 0x00       DUP 0x00
0x0CF2  0x2F 0x0B       JNZB 0x0CFD (+11)
0x0CF4  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0CF6  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0CF8  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CFA  0x2C 0x1D       CALLB 0x1D     // Optimize.OptimizeJumpToJump
0x0CFC  0x0B            BOOLOR
0x0CFD  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified || OptimizeRemoveDeadCode(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0CFF  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0D01  0x27 0x00       DUP 0x00
0x0D03  0x2F 0x0B       JNZB 0x0D0E (+11)
0x0D05  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0D07  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0D09  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0D0B  0x2C 0x16       CALLB 0x16     // Optimize.OptimizeRemoveDeadCode
0x0D0D  0x0B            BOOLOR
0x0D0E  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // modified = modified ||  OptimizeJumpFollowedByJump(ref instructions, ref indexDebugInfo, ref progressInstructions);

0x0D10  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0D12  0x27 0x00       DUP 0x00
0x0D14  0x2F 0x0B       JNZB 0x0D1F (+11)
0x0D16  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0D18  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x0D1A  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0D1C  0x2C 0x1C       CALLB 0x1C     // Optimize.OptimizeJumpFollowedByJump
0x0D1E  0x0B            BOOLOR
0x0D1F  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // if (!modified)                                       Optimize.hs:1080

0x0D21  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x0D23  0x2F 0x06       JNZB 0x0D29 (+6)

                        // break; // no more changes                            Optimize.hs:1082

0x0D25  0x28 0x02       DECSP 0x02
0x0D27  0x30 0x07       JB 0x0D2E (+7)

                        // }                                                    Optimize.hs:1084

0x0D29  0x28 0x02       DECSP 0x02
0x0D2B  0x33 0x54 0xFF  JW 0x0C7F (-172)

                        // code.Clear();                                        Optimize.hs:1087

0x0D2E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0D30  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // instructionsLength = instructions.Length;            Optimize.hs:1088

0x0D32  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0D34  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0D36  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // iIndex = 0;                                          Optimize.hs:1089

0x0D38  0x44            PUSHI0
0x0D39  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // if (iIndex == instructionsLength)                    Optimize.hs:1092

0x0D3B  0x56 0x16 0x14  PUSHLOCALBB 0x1416
0x0D3E  0x05            EQ
0x0D3F  0x32 0xF5 0x00  JNZW 0x0E34 (+245)

                        // uint currentAddress = code.Length;                   Optimize.hs:1096

0x0D42  0x44            PUSHI0
0x0D43  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0D45  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0D47  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // < uint > instructionList = instructions[iIndex];

0x0D49  0x1A 0x04       PUSHIB 0x04
0x0D4B  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0D4D  0x56 0x0C 0x16  PUSHLOCALBB 0x160C
0x0D50  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0D52  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // Instruction opCode = Instruction(instructionList[0]);

0x0D54  0x44            PUSHI0
0x0D55  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0D57  0x44            PUSHI0
0x0D58  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0D5A  0x1B 0x20       POPLOCALB 0x20 (BP+32)

                        // byte operandWidth = Instructions.OperandWidth(opCode);

0x0D5C  0x44            PUSHI0
0x0D5D  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x0D5F  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x0D61  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // code.Append(instructionList[0]);                     Optimize.hs:1100

0x0D63  0x56 0x0A 0x1E  PUSHLOCALBB 0x1E0A
0x0D66  0x44            PUSHI0
0x0D67  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0D69  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (operandWidth > 0)                                Optimize.hs:1101

0x0D6B  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0D6D  0x44            PUSHI0
0x0D6E  0x07            GT
0x0D6F  0x31 0xAF 0x00  JZW 0x0E1E (+175)

                        // uint operand = instructionList[1];                   Optimize.hs:1103

0x0D72  0x44            PUSHI0
0x0D73  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0D75  0x45            PUSHI1
0x0D76  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0D78  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // if (Instructions.OperandIsAddressOffset(opCode))

0x0D7A  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x0D7C  0x2C 0xAE       CALLB 0xAE     // Instructions.OperandIsAddressOffset
0x0D7E  0x31 0x78 0x00  JZW 0x0DF6 (+120)

                        // uint iIndex = instructionList[2];                    Optimize.hs:1107

0x0D81  0x44            PUSHI0
0x0D82  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0D84  0x1A 0x02       PUSHIB 0x02
0x0D86  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0D88  0x1B 0x26       POPLOCALB 0x26 (BP+38)

                        // long jumpAddress    = GetInstructionAddress(iIndex, ref instructions);

0x0D8A  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0D8C  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x0D8E  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0D90  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x0D92  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0D94  0x57 0x28       POPCOPYLOCALB 0x28 (BP+40)

                        // long offset = jumpAddress - currentAddress;

0x0D96  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0D98  0x56 0x28 0x1C  PUSHLOCALBB 0x1C28
0x0D9B  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0D9D  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0D9F  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // if (offset < 0)                                      Optimize.hs:1111

0x0DA1  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DA3  0x44            PUSHI0
0x0DA4  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0DA6  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x0DA8  0x2E 0x46       JZB 0x0DEE (+70)

                        // if (operandWidth == 1)                               Optimize.hs:1113

0x0DAA  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0DAC  0x45            PUSHI1
0x0DAD  0x05            EQ
0x0DAE  0x2E 0x36       JZB 0x0DE4 (+54)

                        // if ((offset < -128) || (offset > 127))               Optimize.hs:1115

0x0DB0  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DB2  0x44            PUSHI0
0x0DB3  0x1A 0x80       PUSHIB 0x80
0x0DB5  0x12            SUBI
0x0DB6  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0DB8  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x0DBA  0x27 0x00       DUP 0x00
0x0DBC  0x2F 0x0B       JNZB 0x0DC7 (+11)
0x0DBE  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DC0  0x1A 0x7F       PUSHIB 0x7F
0x0DC2  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0DC4  0x24 0x47       SYSCALL0 0x47  // Long.GT
0x0DC6  0x0B            BOOLOR
0x0DC7  0x2E 0x10       JZB 0x0DD7 (+16)

                        // PrintLn("Bad Jump:  " + offset.ToString());

0x0DC9  0x1A 0xA8       PUSHIB 0xA8
0x0DCB  0x1A 0x0B       PUSHIB 0x0B
0x0DCD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0DCF  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DD1  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x0DD3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0DD5  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // offset = offset + 256;                               Optimize.hs:1119

0x0DD7  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DD9  0x37 0x00 0x01  PUSHIW 0x0100
0x0DDC  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0DDE  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x0DE0  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // }                                                    Optimize.hs:1120

0x0DE2  0x30 0x0C       JB 0x0DEE (+12)

                        // offset = offset + 65536;                             Optimize.hs:1123

0x0DE4  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DE6  0x1A 0xA4       PUSHIB 0xA4
0x0DE8  0x24 0x3E       SYSCALL0 0x3E  // Long.NewFromConstant
0x0DEA  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x0DEC  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // operand = uint(offset);                              Optimize.hs:1126

0x0DEE  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0DF0  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x0DF2  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // }                                                    Optimize.hs:1127

0x0DF4  0x28 0x06       DECSP 0x06

                        // byte lsb = byte(operand & 0xFF);                     Optimize.hs:1128

0x0DF6  0x44            PUSHI0
0x0DF7  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x0DF9  0x1A 0xFF       PUSHIB 0xFF
0x0DFB  0x0E            BITAND
0x0DFC  0x51 0x03       CAST 0x03
0x0DFE  0x1B 0x26       POPLOCALB 0x26 (BP+38)

                        // code.Append(lsb);                                    Optimize.hs:1129

0x0E00  0x56 0x0A 0x26  PUSHLOCALBB 0x260A
0x0E03  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (operandWidth > 1)                                Optimize.hs:1130

0x0E05  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0E07  0x45            PUSHI1
0x0E08  0x07            GT
0x0E09  0x2E 0x13       JZB 0x0E1C (+19)

                        // byte msb = byte(operand >> 8);                       Optimize.hs:1132

0x0E0B  0x44            PUSHI0
0x0E0C  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x0E0E  0x1A 0x08       PUSHIB 0x08
0x0E10  0x10            BITSHR
0x0E11  0x51 0x03       CAST 0x03
0x0E13  0x1B 0x28       POPLOCALB 0x28 (BP+40)

                        // code.Append(msb);                                    Optimize.hs:1133

0x0E15  0x56 0x0A 0x28  PUSHLOCALBB 0x280A
0x0E18  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    Optimize.hs:1134

0x0E1A  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:1135

0x0E1C  0x28 0x04       DECSP 0x04

                        // iIndex++;                                            Optimize.hs:1136

0x0E1E  0x22 0x16       INCLOCALB 0x16 (BP+22)

                        // progressInstructions++;                              Optimize.hs:1137

0x0E20  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if ((progressInstructions % progressSteps) == 0)

0x0E22  0x4F            PUSHLOCALB02
0x0E23  0x37 0x00 0x08  PUSHIW 0x0800
0x0E26  0x04            MOD
0x0E27  0x2F 0x08       JNZB 0x0E2F (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:1140

0x0E29  0x1A 0x2E       PUSHIB 0x2E
0x0E2B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0E2D  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // } // loop // convert from '< <uint > > instructions' back to '<byte> code'

0x0E2F  0x28 0x08       DECSP 0x08
0x0E31  0x33 0x0A 0xFF  JW 0x0D3B (-246)

                        // debugInfo.Clear();                                   Optimize.hs:1145

0x0E34  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x0E36  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // foreach (var kv in indexDebugInfo)                   Optimize.hs:1146

0x0E38  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x0E3A  0x1A 0x04       PUSHIB 0x04
0x0E3C  0x1A 0x04       PUSHIB 0x04
0x0E3E  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x0E40  0x44            PUSHI0
0x0E41  0x56 0x1C 0x20  PUSHLOCALBB 0x201C
0x0E44  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x0E46  0x1B 0x20       POPLOCALB 0x20 (BP+32)
0x0E48  0x1B 0x1E       POPLOCALB 0x1E (BP+30)
0x0E4A  0x2E 0x21       JZB 0x0E6B (+33)

                        // uint iIndex = kv.key;                                Optimize.hs:1148

0x0E4C  0x44            PUSHI0
0x0E4D  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0E4F  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x0E51  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // uint address = GetInstructionAddress(iIndex, ref instructions);

0x0E53  0x44            PUSHI0
0x0E54  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0E56  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0E58  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x0E5A  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // debugInfo[address.ToString()] = kv.value;            Optimize.hs:1150

0x0E5C  0x56 0x18 0x24  PUSHLOCALBB 0x2418
0x0E5F  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x0E61  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x0E63  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x0E65  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    Optimize.hs:1151

0x0E67  0x28 0x04       DECSP 0x04
0x0E69  0x30 0xD8       JB 0x0E41 (-40)
0x0E6B  0x28 0x06       DECSP 0x06

                        // Code.SetMethodCode(methodIndex, code);               Optimize.hs:1154

0x0E6D  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x0E70  0x2C 0x63       CALLB 0x63     // Code.SetMethodCode

                        // Code.SetMethodDebugInfo(methodIndex, debugInfo);

0x0E72  0x56 0x06 0x18  PUSHLOCALBB 0x1806
0x0E75  0x2C 0x65       CALLB 0x65     // Code.SetMethodDebugInfo

                        // codeAfter = codeAfter + code.Length;                 Optimize.hs:1157

0x0E77  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0E79  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0E7B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0E7D  0x00            ADD
0x0E7E  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // } // foreach methodIndex                             Optimize.hs:1159

0x0E80  0x28 0x12       DECSP 0x12
0x0E82  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x0E84  0x33 0x2D 0xFC  JW 0x0AB1 (-979)
0x0E87  0x28 0x06       DECSP 0x06

                        // }                                                    Optimize.hs:1160

0x0E89  0x2A 0x08       RETB 0x08


// Optimize.hs:121
// ####  Optimize.GetInstructionAddress(..)  ####                               0x0007


                        // uint address = 0;                                    Optimize.hs:122

0x0E8B  0x5F 0x02       ENTERB 0x02

                        // if (index == seekIndex)                              Optimize.hs:126

0x0E8D  0x4F            PUSHLOCALB02
0x0E8E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0E90  0x05            EQ
0x0E91  0x2F 0x2B       JNZB 0x0EBC (+43)

                        // <uint> instruction = instructions[index];            Optimize.hs:130

0x0E93  0x1A 0x04       PUSHIB 0x04
0x0E95  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0E97  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0E99  0x4F            PUSHLOCALB02
0x0E9A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0E9C  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Instruction opCode = Instruction(byte(instruction[0]));

0x0E9E  0x44            PUSHI0
0x0E9F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0EA1  0x44            PUSHI0
0x0EA2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0EA4  0x51 0x03       CAST 0x03
0x0EA6  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte operands = Instructions.OperandWidth(opCode);

0x0EA8  0x44            PUSHI0
0x0EA9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0EAB  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x0EAD  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // address = address + operands + 1;                    Optimize.hs:133

0x0EAF  0x4E            PUSHLOCALB00
0x0EB0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0EB2  0x00            ADD
0x0EB3  0x45            PUSHI1
0x0EB4  0x00            ADD
0x0EB5  0x4C            POPLOCALB00

                        // index++;                                             Optimize.hs:134

0x0EB6  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:135

0x0EB8  0x28 0x06       DECSP 0x06
0x0EBA  0x30 0xD3       JB 0x0E8D (-45)

                        // return address;                                      Optimize.hs:136

0x0EBC  0x4E            PUSHLOCALB00
0x0EBD  0x2B 0x08       RETRETB 0x08


// Optimize.hs:139
// ####  Optimize.GetInstructionIndex(..)  ####                                 0x0008


                        // uint address = 0;                                    Optimize.hs:140

0x0EBF  0x5F 0x02       ENTERB 0x02

                        // if (address == seekAddress)                          Optimize.hs:144

0x0EC1  0x4E            PUSHLOCALB00
0x0EC2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0EC4  0x05            EQ
0x0EC5  0x2F 0x2B       JNZB 0x0EF0 (+43)

                        // <uint> instruction = instructions[index];            Optimize.hs:148

0x0EC7  0x1A 0x04       PUSHIB 0x04
0x0EC9  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0ECB  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0ECD  0x4F            PUSHLOCALB02
0x0ECE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0ED0  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Instruction opCode = Instruction(byte(instruction[0]));

0x0ED2  0x44            PUSHI0
0x0ED3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0ED5  0x44            PUSHI0
0x0ED6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0ED8  0x51 0x03       CAST 0x03
0x0EDA  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte operands = Instructions.OperandWidth(opCode);

0x0EDC  0x44            PUSHI0
0x0EDD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0EDF  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x0EE1  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // address = address + operands + 1;                    Optimize.hs:151

0x0EE3  0x4E            PUSHLOCALB00
0x0EE4  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0EE6  0x00            ADD
0x0EE7  0x45            PUSHI1
0x0EE8  0x00            ADD
0x0EE9  0x4C            POPLOCALB00

                        // index++;                                             Optimize.hs:152

0x0EEA  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:153

0x0EEC  0x28 0x06       DECSP 0x06
0x0EEE  0x30 0xD3       JB 0x0EC1 (-45)

                        // return index;                                        Optimize.hs:154

0x0EF0  0x4F            PUSHLOCALB02
0x0EF1  0x2B 0x08       RETRETB 0x08


// Optimize.hs:269
// ####  Optimize.OptimizeJumpW(..)  ####                                       0x0013


                        // uint iIndex = 0;                                     Optimize.hs:270

0x0EF3  0x5F 0x02       ENTERB 0x02

                        // uint instructionsLength = instructions.Length;

0x0EF5  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0EF7  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0EF9  0x4D            POPLOCALB02

                        // bool modified = false;                               Optimize.hs:272

0x0EFA  0x44            PUSHI0

                        // if (iIndex == instructionsLength)                    Optimize.hs:275

0x0EFB  0x4E            PUSHLOCALB00
0x0EFC  0x4F            PUSHLOCALB02
0x0EFD  0x05            EQ
0x0EFE  0x32 0xB4 0x00  JNZW 0x0FB2 (+180)

                        // <uint> instructionList = instructions[iIndex];

0x0F01  0x1A 0x04       PUSHIB 0x04
0x0F03  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0F05  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0F07  0x4E            PUSHLOCALB00
0x0F08  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0F0A  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x0F0C  0x44            PUSHI0
0x0F0D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F0F  0x44            PUSHI0
0x0F10  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0F12  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (IsJumpWInstruction(opCode))                      Optimize.hs:281

0x0F14  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0F16  0x2C 0x0B       CALLB 0x0B     // Optimize.IsJumpWInstruction
0x0F18  0x31 0x7F 0x00  JZW 0x0F97 (+127)

                        // uint operand = instructionList[1];                   Optimize.hs:283

0x0F1B  0x44            PUSHI0
0x0F1C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F1E  0x45            PUSHI1
0x0F1F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0F21  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // long offset = operand;                               Optimize.hs:285

0x0F23  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0F25  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0F27  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0F29  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // if (offset > 32767)                                  Optimize.hs:286

0x0F2B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0F2D  0x37 0xFF 0x7F  PUSHIW 0x7FFF
0x0F30  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0F32  0x24 0x47       SYSCALL0 0x47  // Long.GT
0x0F34  0x2E 0x0C       JZB 0x0F40 (+12)

                        // offset = offset - 65536; // 0x10000 -> -1            Optimize.hs:288

0x0F36  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0F38  0x1A 0xA4       PUSHIB 0xA4
0x0F3A  0x24 0x3E       SYSCALL0 0x3E  // Long.NewFromConstant
0x0F3C  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0F3E  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // if ((offset >= -128) && (offset <= 127))             Optimize.hs:290

0x0F40  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0F42  0x44            PUSHI0
0x0F43  0x1A 0x80       PUSHIB 0x80
0x0F45  0x12            SUBI
0x0F46  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x0F48  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x0F4A  0x27 0x00       DUP 0x00
0x0F4C  0x2E 0x0B       JZB 0x0F57 (+11)
0x0F4E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0F50  0x1A 0x7F       PUSHIB 0x7F
0x0F52  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0F54  0x24 0x46       SYSCALL0 0x46  // Long.LE
0x0F56  0x0C            BOOLAND
0x0F57  0x2E 0x3E       JZB 0x0F95 (+62)

                        // switch (opCode)                                      Optimize.hs:292

0x0F59  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)

                        // case Instruction.JW:                                 Optimize.hs:294

0x0F5B  0x1A 0x33       PUSHIB 0x33
0x0F5D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0F5F  0x05            EQ
0x0F60  0x2E 0x0B       JZB 0x0F6B (+11)

                        // instructionList.SetItem(0, uint (Instruction.JB));

0x0F62  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F64  0x44            PUSHI0
0x0F65  0x1A 0x30       PUSHIB 0x30
0x0F67  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:297

0x0F69  0x30 0x20       JB 0x0F89 (+32)

                        // case Instruction.JZW:                                Optimize.hs:298

0x0F6B  0x1A 0x31       PUSHIB 0x31
0x0F6D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0F6F  0x05            EQ
0x0F70  0x2E 0x0B       JZB 0x0F7B (+11)

                        // instructionList.SetItem(0, uint (Instruction.JZB));

0x0F72  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F74  0x44            PUSHI0
0x0F75  0x1A 0x2E       PUSHIB 0x2E
0x0F77  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:301

0x0F79  0x30 0x10       JB 0x0F89 (+16)

                        // case Instruction.JNZW:                               Optimize.hs:302

0x0F7B  0x1A 0x32       PUSHIB 0x32
0x0F7D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0F7F  0x05            EQ
0x0F80  0x2E 0x09       JZB 0x0F89 (+9)

                        // instructionList.SetItem(0, uint (Instruction.JNZB));

0x0F82  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F84  0x44            PUSHI0
0x0F85  0x1A 0x2F       PUSHIB 0x2F
0x0F87  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:306

0x0F89  0x28 0x02       DECSP 0x02

                        // instructions.SetItem(iIndex, instructionList);

0x0F8B  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0F8D  0x4E            PUSHLOCALB00
0x0F8E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0F90  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // modified = true;                                     Optimize.hs:308

0x0F92  0x45            PUSHI1
0x0F93  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    Optimize.hs:310

0x0F95  0x28 0x04       DECSP 0x04

                        // iIndex++;                                            Optimize.hs:311

0x0F97  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // progressInstructions++;                              Optimize.hs:312

0x0F99  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0F9B  0x45            PUSHI1
0x0F9C  0x00            ADD
0x0F9D  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x0F9F  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0FA1  0x37 0x00 0x08  PUSHIW 0x0800
0x0FA4  0x04            MOD
0x0FA5  0x2F 0x08       JNZB 0x0FAD (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:315

0x0FA7  0x1A 0x2E       PUSHIB 0x2E
0x0FA9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0FAB  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // }                                                    Optimize.hs:317

0x0FAD  0x28 0x04       DECSP 0x04
0x0FAF  0x33 0x4C 0xFF  JW 0x0EFB (-180)

                        // return modified;                                     Optimize.hs:318

0x0FB2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0FB4  0x2B 0x0A       RETRETB 0x0A


// Optimize.hs:321
// ####  Optimize.OptimizeRemoveNOP(..)  ####                                   0x0014


                        // uint iIndex = 0;                                     Optimize.hs:322

0x0FB6  0x5F 0x02       ENTERB 0x02

                        // if (iIndex >= instructions.Length)                   Optimize.hs:326

0x0FB8  0x4E            PUSHLOCALB00
0x0FB9  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0FBB  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0FBD  0x09            GE
0x0FBE  0x2F 0x70       JNZB 0x102E (+112)

                        // <uint> instructionList = instructions[iIndex];

0x0FC0  0x1A 0x04       PUSHIB 0x04
0x0FC2  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0FC4  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0FC6  0x4E            PUSHLOCALB00
0x0FC7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0FC9  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Instruction opCode = Instruction(instructionList[0]);

0x0FCB  0x44            PUSHI0
0x0FCC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0FCE  0x44            PUSHI0
0x0FCF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0FD1  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // bool removeSingleNOP = false;                        Optimize.hs:332

0x0FD3  0x44            PUSHI0

                        // if (opCode == Instruction.NOP)                       Optimize.hs:333

0x0FD4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0FD6  0x1A 0x50       PUSHIB 0x50
0x0FD8  0x05            EQ
0x0FD9  0x2E 0x07       JZB 0x0FE0 (+7)

                        // removeSingleNOP = true;                              Optimize.hs:335

0x0FDB  0x45            PUSHI1
0x0FDC  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    Optimize.hs:336

0x0FDE  0x30 0x29       JB 0x1007 (+41)

                        // else if ((opCode == Instruction.JB) || (opCode == Instruction.JW))

0x0FE0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0FE2  0x1A 0x30       PUSHIB 0x30
0x0FE4  0x05            EQ
0x0FE5  0x27 0x00       DUP 0x00
0x0FE7  0x2F 0x08       JNZB 0x0FEF (+8)
0x0FE9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0FEB  0x1A 0x33       PUSHIB 0x33
0x0FED  0x05            EQ
0x0FEE  0x0B            BOOLOR
0x0FEF  0x2E 0x18       JZB 0x1007 (+24)

                        // uint iJumpTarget = instructionList[2];               Optimize.hs:339

0x0FF1  0x44            PUSHI0
0x0FF2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0FF4  0x1A 0x02       PUSHIB 0x02
0x0FF6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0FF8  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (iJumpTarget == iIndex + 1)                       Optimize.hs:340

0x0FFA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0FFC  0x4E            PUSHLOCALB00
0x0FFD  0x45            PUSHI1
0x0FFE  0x00            ADD
0x0FFF  0x05            EQ
0x1000  0x2E 0x05       JZB 0x1005 (+5)

                        // removeSingleNOP = true;                              Optimize.hs:342

0x1002  0x45            PUSHI1
0x1003  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    Optimize.hs:344

0x1005  0x28 0x02       DECSP 0x02

                        // if (removeSingleNOP)                                 Optimize.hs:345

0x1007  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1009  0x2E 0x0A       JZB 0x1013 (+10)

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x100B  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x100E  0x4E            PUSHLOCALB00
0x100F  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:348

0x1011  0x45            PUSHI1
0x1012  0x4D            POPLOCALB02

                        // iIndex++;                                            Optimize.hs:350

0x1013  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // progressInstructions++;                              Optimize.hs:351

0x1015  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1017  0x45            PUSHI1
0x1018  0x00            ADD
0x1019  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x101B  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x101D  0x37 0x00 0x08  PUSHIW 0x0800
0x1020  0x04            MOD
0x1021  0x2F 0x08       JNZB 0x1029 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:354

0x1023  0x1A 0x2E       PUSHIB 0x2E
0x1025  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1027  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // }                                                    Optimize.hs:356

0x1029  0x28 0x06       DECSP 0x06
0x102B  0x33 0x8D 0xFF  JW 0x0FB8 (-115)

                        // return modified;                                     Optimize.hs:357

0x102E  0x4F            PUSHLOCALB02
0x102F  0x2B 0x0A       RETRETB 0x0A


// Optimize.hs:426
// ####  Optimize.OptimizeCOPYPOP(..)  ####                                     0x0017


                        // bool modified = false;                               Optimize.hs:427

0x1031  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 1; // start at 2nd instruction

0x1033  0x45            PUSHI1
0x1034  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:429

0x1035  0x44            PUSHI0
0x1036  0x45            PUSHI1
0x1037  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:432

0x1039  0x4F            PUSHLOCALB02
0x103A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x103C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x103E  0x09            GE
0x103F  0x2F 0x77       JNZB 0x10B6 (+119)

                        // <uint> instructionList = instructions[iIndex-1];

0x1041  0x1A 0x04       PUSHIB 0x04
0x1043  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1045  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1047  0x4F            PUSHLOCALB02
0x1048  0x45            PUSHI1
0x1049  0x01            SUB
0x104A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x104C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x104E  0x44            PUSHI0
0x104F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1051  0x44            PUSHI0
0x1052  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1054  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (opCode == Instruction.COPYNEXTPOP)               Optimize.hs:439

0x1056  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1058  0x1A 0x48       PUSHIB 0x48
0x105A  0x05            EQ
0x105B  0x2E 0x54       JZB 0x10AF (+84)

                        // <uint> instructionListNext = instructions[iIndex];

0x105D  0x1A 0x04       PUSHIB 0x04
0x105F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1061  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1063  0x4F            PUSHLOCALB02
0x1064  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1066  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // Instruction opCodeNext = Instruction(instructionListNext[0]);

0x1068  0x44            PUSHI0
0x1069  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x106B  0x44            PUSHI0
0x106C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x106E  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (IsPOPInstruction(opCodeNext))                    Optimize.hs:443

0x1070  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1072  0x2C 0x11       CALLB 0x11     // Optimize.IsPOPInstruction
0x1074  0x2E 0x39       JZB 0x10AD (+57)

                        // opCodeNext = SwitchToCOPYPOP(opCodeNext);            Optimize.hs:445

0x1076  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1078  0x2C 0x12       CALLB 0x12     // Optimize.SwitchToCOPYPOP
0x107A  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // uint popOperandWidth = OperandWidth(opCodeNext);

0x107C  0x44            PUSHI0
0x107D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x107F  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x1081  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // <uint> newInstructionList;                           Optimize.hs:447

0x1083  0x1A 0x04       PUSHIB 0x04
0x1085  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // newInstructionList.Append(byte(opCodeNext));

0x1087  0x56 0x10 0x0C  PUSHLOCALBB 0x0C10
0x108A  0x51 0x03       CAST 0x03
0x108C  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (popOperandWidth != 0)                            Optimize.hs:449

0x108E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1090  0x2E 0x0A       JZB 0x109A (+10)

                        // newInstructionList.Append(instructionListNext[1]); // operand

0x1092  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x1095  0x45            PUSHI1
0x1096  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1098  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex - 1, newInstructionList);

0x109A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x109C  0x4F            PUSHLOCALB02
0x109D  0x45            PUSHI1
0x109E  0x01            SUB
0x109F  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x10A1  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x10A3  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x10A6  0x4F            PUSHLOCALB02
0x10A7  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:456

0x10A9  0x45            PUSHI1
0x10AA  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:457

0x10AB  0x28 0x04       DECSP 0x04

                        // }                                                    Optimize.hs:458

0x10AD  0x28 0x04       DECSP 0x04

                        // iIndex++;                                            Optimize.hs:459

0x10AF  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:460

0x10B1  0x28 0x04       DECSP 0x04
0x10B3  0x33 0x86 0xFF  JW 0x1039 (-122)

                        // progressInstructions++;                              Optimize.hs:461

0x10B6  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x10B8  0x45            PUSHI1
0x10B9  0x00            ADD
0x10BA  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x10BC  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x10BE  0x37 0x00 0x08  PUSHIW 0x0800
0x10C1  0x04            MOD
0x10C2  0x2F 0x08       JNZB 0x10CA (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:464

0x10C4  0x1A 0x2E       PUSHIB 0x2E
0x10C6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x10C8  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:466

0x10CA  0x4E            PUSHLOCALB00
0x10CB  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:469
// ####  Optimize.OptimizeENTERPUSHI0(..)  ####                                 0x0018


                        // bool modified = false;                               Optimize.hs:470

0x10CD  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 1; // start at 2nd instruction

0x10CF  0x45            PUSHI1
0x10D0  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:472

0x10D1  0x44            PUSHI0
0x10D2  0x45            PUSHI1
0x10D3  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:475

0x10D5  0x4F            PUSHLOCALB02
0x10D6  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x10D8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x10DA  0x09            GE
0x10DB  0x32 0xED 0x00  JNZW 0x11C8 (+237)

                        // <uint> instructionList = instructions[iIndex-1];

0x10DE  0x1A 0x04       PUSHIB 0x04
0x10E0  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x10E2  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x10E4  0x4F            PUSHLOCALB02
0x10E5  0x45            PUSHI1
0x10E6  0x01            SUB
0x10E7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x10E9  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x10EB  0x44            PUSHI0
0x10EC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x10EE  0x44            PUSHI0
0x10EF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x10F1  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if ((opCode == Instruction.ENTER) || ((opCode == Instruction.ENTERB) && (instructionList[1] < 255)))

0x10F3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x10F5  0x1A 0x49       PUSHIB 0x49
0x10F7  0x05            EQ
0x10F8  0x27 0x00       DUP 0x00
0x10FA  0x2F 0x15       JNZB 0x110F (+21)
0x10FC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x10FE  0x1A 0x5F       PUSHIB 0x5F
0x1100  0x05            EQ
0x1101  0x27 0x00       DUP 0x00
0x1103  0x2E 0x0B       JZB 0x110E (+11)
0x1105  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1107  0x45            PUSHI1
0x1108  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x110A  0x1A 0xFF       PUSHIB 0xFF
0x110C  0x08            LT
0x110D  0x0C            BOOLAND
0x110E  0x0B            BOOLOR
0x110F  0x31 0xB2 0x00  JZW 0x11C1 (+178)

                        // <uint> instructionListNext = instructions[iIndex];

0x1112  0x1A 0x04       PUSHIB 0x04
0x1114  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1116  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1118  0x4F            PUSHLOCALB02
0x1119  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x111B  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // Instruction opCodeNext = Instruction(instructionListNext[0]);

0x111D  0x44            PUSHI0
0x111E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1120  0x44            PUSHI0
0x1121  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1123  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (opCodeNext == Instruction.PUSHI0)                Optimize.hs:486

0x1125  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1127  0x1A 0x44       PUSHIB 0x44
0x1129  0x05            EQ
0x112A  0x31 0x95 0x00  JZW 0x11BF (+149)

                        // bool reachable = false;                              Optimize.hs:488

0x112D  0x44            PUSHI0

                        // for (uint rIndex = 0; rIndex < instructions.Length; rIndex++)

0x112E  0x44            PUSHI0
0x112F  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1131  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1133  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1135  0x08            LT
0x1136  0x2E 0x4B       JZB 0x1181 (+75)

                        // if ((rIndex == iIndex) || (rIndex == iIndex-1))

0x1138  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x113A  0x4F            PUSHLOCALB02
0x113B  0x05            EQ
0x113C  0x27 0x00       DUP 0x00
0x113E  0x2F 0x09       JNZB 0x1147 (+9)
0x1140  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1142  0x4F            PUSHLOCALB02
0x1143  0x45            PUSHI1
0x1144  0x01            SUB
0x1145  0x05            EQ
0x1146  0x0B            BOOLOR
0x1147  0x2F 0x36       JNZB 0x117D (+54)

                        // <uint> instructionListReach = instructions[rIndex];

0x1149  0x1A 0x04       PUSHIB 0x04
0x114B  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x114D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x114F  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1151  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1153  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // Instruction opCodeReach = Instruction(instructionListReach[0]);

0x1155  0x44            PUSHI0
0x1156  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1158  0x44            PUSHI0
0x1159  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x115B  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (IsJumpInstruction(opCodeReach))                  Optimize.hs:499

0x115D  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x115F  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x1161  0x2E 0x1A       JZB 0x117B (+26)

                        // uint iJumpTarget = instructionListReach[2];

0x1163  0x44            PUSHI0
0x1164  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1166  0x1A 0x02       PUSHIB 0x02
0x1168  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x116A  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // if (iJumpTarget == iIndex)                           Optimize.hs:502

0x116C  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x116E  0x4F            PUSHLOCALB02
0x116F  0x05            EQ
0x1170  0x2E 0x09       JZB 0x1179 (+9)

                        // reachable = true;                                    Optimize.hs:504

0x1172  0x45            PUSHI1
0x1173  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // break;                                               Optimize.hs:505

0x1175  0x28 0x08       DECSP 0x08
0x1177  0x30 0x0C       JB 0x1183 (+12)

                        // }                                                    Optimize.hs:507

0x1179  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:508

0x117B  0x28 0x04       DECSP 0x04

                        // } // foreach                                         Optimize.hs:509

0x117D  0x22 0x10       INCLOCALB 0x10 (BP+16)
0x117F  0x30 0xB0       JB 0x112F (-80)
0x1181  0x28 0x02       DECSP 0x02

                        // if (!reachable)                                      Optimize.hs:510

0x1183  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1185  0x2F 0x38       JNZB 0x11BD (+56)

                        // if (opCode == Instruction.ENTERB)                    Optimize.hs:512

0x1187  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1189  0x1A 0x5F       PUSHIB 0x5F
0x118B  0x05            EQ
0x118C  0x2E 0x10       JZB 0x119C (+16)

                        // instructionList.SetItem(1, instructionList[1] + 1);

0x118E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1190  0x45            PUSHI1
0x1191  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1193  0x45            PUSHI1
0x1194  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1196  0x45            PUSHI1
0x1197  0x00            ADD
0x1198  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:515

0x119A  0x30 0x0E       JB 0x11A8 (+14)

                        // instructionList.SetItem(0, uint(Instruction.ENTERB));

0x119C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x119E  0x44            PUSHI0
0x119F  0x1A 0x5F       PUSHIB 0x5F
0x11A1  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructionList.Append(1);                           Optimize.hs:519

0x11A3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x11A5  0x45            PUSHI1
0x11A6  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex-1, instructionList);

0x11A8  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x11AA  0x4F            PUSHLOCALB02
0x11AB  0x45            PUSHI1
0x11AC  0x01            SUB
0x11AD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x11AF  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex, true, iIndex-1);

0x11B1  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x11B4  0x4F            PUSHLOCALB02
0x11B5  0x45            PUSHI1
0x11B6  0x4F            PUSHLOCALB02
0x11B7  0x45            PUSHI1
0x11B8  0x01            SUB
0x11B9  0x2C 0x06       CALLB 0x06     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:523

0x11BB  0x45            PUSHI1
0x11BC  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:525

0x11BD  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:526

0x11BF  0x28 0x04       DECSP 0x04

                        // iIndex++;                                            Optimize.hs:527

0x11C1  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:528

0x11C3  0x28 0x04       DECSP 0x04
0x11C5  0x33 0x10 0xFF  JW 0x10D5 (-240)

                        // progressInstructions++;                              Optimize.hs:529

0x11C8  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x11CA  0x45            PUSHI1
0x11CB  0x00            ADD
0x11CC  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x11CE  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x11D0  0x37 0x00 0x08  PUSHIW 0x0800
0x11D3  0x04            MOD
0x11D4  0x2F 0x08       JNZB 0x11DC (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:532

0x11D6  0x1A 0x2E       PUSHIB 0x2E
0x11D8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x11DA  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:534

0x11DC  0x4E            PUSHLOCALB00
0x11DD  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:537
// ####  Optimize.OptimizeNOTJump(..)  ####                                     0x0019


                        // bool modified = false;                               Optimize.hs:538

0x11DF  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 1; // start at 2nd instruction

0x11E1  0x45            PUSHI1
0x11E2  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:540

0x11E3  0x44            PUSHI0
0x11E4  0x45            PUSHI1
0x11E5  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:543

0x11E7  0x4F            PUSHLOCALB02
0x11E8  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x11EA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x11EC  0x09            GE
0x11ED  0x32 0xD4 0x00  JNZW 0x12C1 (+212)

                        // <uint> instructionList = instructions[iIndex-1];

0x11F0  0x1A 0x04       PUSHIB 0x04
0x11F2  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x11F4  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x11F6  0x4F            PUSHLOCALB02
0x11F7  0x45            PUSHI1
0x11F8  0x01            SUB
0x11F9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x11FB  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x11FD  0x44            PUSHI0
0x11FE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1200  0x44            PUSHI0
0x1201  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1203  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (opCode == Instruction.BOOLNOT)                   Optimize.hs:550

0x1205  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1207  0x1A 0x41       PUSHIB 0x41
0x1209  0x05            EQ
0x120A  0x31 0xB0 0x00  JZW 0x12BA (+176)

                        // <uint> instructionListNext = instructions[iIndex];

0x120D  0x1A 0x04       PUSHIB 0x04
0x120F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1211  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1213  0x4F            PUSHLOCALB02
0x1214  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1216  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // Instruction opCodeNext = Instruction(instructionListNext[0]);

0x1218  0x44            PUSHI0
0x1219  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x121B  0x44            PUSHI0
0x121C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x121E  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (IsConditionalJumpInstruction(opCodeNext))

0x1220  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1222  0x2C 0x0D       CALLB 0x0D     // Optimize.IsConditionalJumpInstruction
0x1224  0x31 0x94 0x00  JZW 0x12B8 (+148)

                        // bool reachable = false;                              Optimize.hs:556

0x1227  0x44            PUSHI0

                        // for (uint rIndex = 0; rIndex < instructions.Length; rIndex++)

0x1228  0x44            PUSHI0
0x1229  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x122B  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x122D  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x122F  0x08            LT
0x1230  0x2E 0x4B       JZB 0x127B (+75)

                        // if ((rIndex == iIndex) || (rIndex == iIndex-1))

0x1232  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1234  0x4F            PUSHLOCALB02
0x1235  0x05            EQ
0x1236  0x27 0x00       DUP 0x00
0x1238  0x2F 0x09       JNZB 0x1241 (+9)
0x123A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x123C  0x4F            PUSHLOCALB02
0x123D  0x45            PUSHI1
0x123E  0x01            SUB
0x123F  0x05            EQ
0x1240  0x0B            BOOLOR
0x1241  0x2F 0x36       JNZB 0x1277 (+54)

                        // <uint> instructionListReach = instructions[rIndex];

0x1243  0x1A 0x04       PUSHIB 0x04
0x1245  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1247  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1249  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x124B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x124D  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // Instruction opCodeReach = Instruction(instructionListReach[0]);

0x124F  0x44            PUSHI0
0x1250  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1252  0x44            PUSHI0
0x1253  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1255  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (IsJumpInstruction(opCodeReach))                  Optimize.hs:567

0x1257  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x1259  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x125B  0x2E 0x1A       JZB 0x1275 (+26)

                        // uint iJumpTarget = instructionListReach[2];

0x125D  0x44            PUSHI0
0x125E  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1260  0x1A 0x02       PUSHIB 0x02
0x1262  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1264  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // if (iJumpTarget == iIndex)                           Optimize.hs:570

0x1266  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1268  0x4F            PUSHLOCALB02
0x1269  0x05            EQ
0x126A  0x2E 0x09       JZB 0x1273 (+9)

                        // reachable = true;                                    Optimize.hs:572

0x126C  0x45            PUSHI1
0x126D  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // break;                                               Optimize.hs:573

0x126F  0x28 0x08       DECSP 0x08
0x1271  0x30 0x0C       JB 0x127D (+12)

                        // }                                                    Optimize.hs:575

0x1273  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:576

0x1275  0x28 0x04       DECSP 0x04

                        // } // foreach                                         Optimize.hs:577

0x1277  0x22 0x10       INCLOCALB 0x10 (BP+16)
0x1279  0x30 0xB0       JB 0x1229 (-80)
0x127B  0x28 0x02       DECSP 0x02

                        // if (!reachable)                                      Optimize.hs:578

0x127D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x127F  0x2F 0x37       JNZB 0x12B6 (+55)

                        // opCodeNext = FlipConditionalJumpCondition(opCodeNext);

0x1281  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1283  0x2C 0x09       CALLB 0x09     // Optimize.FlipConditionalJumpCondition
0x1285  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // <uint> newInstructionList;                           Optimize.hs:582

0x1287  0x1A 0x04       PUSHIB 0x04
0x1289  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // newInstructionList.Append(byte(opCodeNext));

0x128B  0x56 0x10 0x0C  PUSHLOCALBB 0x0C10
0x128E  0x51 0x03       CAST 0x03
0x1290  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // newInstructionList.Append(instructionListNext[1]); // needs operand, value not important

0x1292  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x1295  0x45            PUSHI1
0x1296  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1298  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // newInstructionList.Append(instructionListNext[2]);

0x129A  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x129D  0x1A 0x02       PUSHIB 0x02
0x129F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x12A1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex - 1, newInstructionList);

0x12A3  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x12A5  0x4F            PUSHLOCALB02
0x12A6  0x45            PUSHI1
0x12A7  0x01            SUB
0x12A8  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x12AA  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x12AC  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x12AF  0x4F            PUSHLOCALB02
0x12B0  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:589

0x12B2  0x45            PUSHI1
0x12B3  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:590

0x12B4  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:591

0x12B6  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:592

0x12B8  0x28 0x04       DECSP 0x04

                        // iIndex++;                                            Optimize.hs:593

0x12BA  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:594

0x12BC  0x28 0x04       DECSP 0x04
0x12BE  0x33 0x29 0xFF  JW 0x11E7 (-215)

                        // progressInstructions++;                              Optimize.hs:595

0x12C1  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x12C3  0x45            PUSHI1
0x12C4  0x00            ADD
0x12C5  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x12C7  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x12C9  0x37 0x00 0x08  PUSHIW 0x0800
0x12CC  0x04            MOD
0x12CD  0x2F 0x08       JNZB 0x12D5 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:598

0x12CF  0x1A 0x2E       PUSHIB 0x2E
0x12D1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x12D3  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:600

0x12D5  0x4E            PUSHLOCALB00
0x12D6  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:604
// ####  Optimize.OptimizeZEROEQJump(..)  ####                                  0x001A


                        // bool modified = false;                               Optimize.hs:605

0x12D8  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 2; // start at 3nd instruction

0x12DA  0x1A 0x02       PUSHIB 0x02
0x12DC  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:607

0x12DD  0x44            PUSHI0
0x12DE  0x45            PUSHI1
0x12DF  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:610

0x12E1  0x4F            PUSHLOCALB02
0x12E2  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x12E4  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x12E6  0x09            GE
0x12E7  0x32 0x25 0x01  JNZW 0x140C (+293)

                        // <uint> instructionList0 = instructions[iIndex-2];

0x12EA  0x1A 0x04       PUSHIB 0x04
0x12EC  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x12EE  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x12F0  0x4F            PUSHLOCALB02
0x12F1  0x1A 0x02       PUSHIB 0x02
0x12F3  0x01            SUB
0x12F4  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x12F6  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode0 = Instruction(instructionList0[0]);

0x12F8  0x44            PUSHI0
0x12F9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x12FB  0x44            PUSHI0
0x12FC  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x12FE  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (opCode0 == Instruction.PUSHI0)                   Optimize.hs:617

0x1300  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1302  0x1A 0x44       PUSHIB 0x44
0x1304  0x05            EQ
0x1305  0x31 0x00 0x01  JZW 0x1405 (+256)

                        // <uint> instructionList1 = instructions[iIndex-1];

0x1308  0x1A 0x04       PUSHIB 0x04
0x130A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x130C  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x130E  0x4F            PUSHLOCALB02
0x130F  0x45            PUSHI1
0x1310  0x01            SUB
0x1311  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1313  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // Instruction opCode1 = Instruction(instructionList1[0]);

0x1315  0x44            PUSHI0
0x1316  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1318  0x44            PUSHI0
0x1319  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x131B  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // <uint> instructionList2 = instructions[iIndex];

0x131D  0x1A 0x04       PUSHIB 0x04
0x131F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1321  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1323  0x4F            PUSHLOCALB02
0x1324  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1326  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // Instruction opCode2 = Instruction(instructionList2[0]);

0x1328  0x44            PUSHI0
0x1329  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x132B  0x44            PUSHI0
0x132C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x132E  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (((opCode1 == Instruction.EQ) || (opCode1 == Instruction.NE)) && IsConditionalJumpInstruction(opCode2))

0x1330  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1332  0x1A 0x05       PUSHIB 0x05
0x1334  0x05            EQ
0x1335  0x27 0x00       DUP 0x00
0x1337  0x2F 0x08       JNZB 0x133F (+8)
0x1339  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x133B  0x1A 0x06       PUSHIB 0x06
0x133D  0x05            EQ
0x133E  0x0B            BOOLOR
0x133F  0x27 0x00       DUP 0x00
0x1341  0x2E 0x07       JZB 0x1348 (+7)
0x1343  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1345  0x2C 0x0D       CALLB 0x0D     // Optimize.IsConditionalJumpInstruction
0x1347  0x0C            BOOLAND
0x1348  0x31 0xBB 0x00  JZW 0x1403 (+187)

                        // bool reachable = false;                              Optimize.hs:625

0x134B  0x44            PUSHI0

                        // for (uint rIndex = 0; rIndex < instructions.Length; rIndex++)

0x134C  0x44            PUSHI0
0x134D  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x134F  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1351  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1353  0x08            LT
0x1354  0x2E 0x62       JZB 0x13B6 (+98)

                        // if ((rIndex == iIndex) || (rIndex == iIndex-1) || (rIndex == iIndex-2))

0x1356  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x1358  0x4F            PUSHLOCALB02
0x1359  0x05            EQ
0x135A  0x27 0x00       DUP 0x00
0x135C  0x2F 0x15       JNZB 0x1371 (+21)
0x135E  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x1360  0x4F            PUSHLOCALB02
0x1361  0x45            PUSHI1
0x1362  0x01            SUB
0x1363  0x05            EQ
0x1364  0x0B            BOOLOR
0x1365  0x27 0x00       DUP 0x00
0x1367  0x2F 0x0A       JNZB 0x1371 (+10)
0x1369  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x136B  0x4F            PUSHLOCALB02
0x136C  0x1A 0x02       PUSHIB 0x02
0x136E  0x01            SUB
0x136F  0x05            EQ
0x1370  0x0B            BOOLOR
0x1371  0x2F 0x41       JNZB 0x13B2 (+65)

                        // <uint> instructionListReach = instructions[rIndex];

0x1373  0x1A 0x04       PUSHIB 0x04
0x1375  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1377  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1379  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x137B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x137D  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // Instruction opCodeReach = Instruction(instructionListReach[0]);

0x137F  0x44            PUSHI0
0x1380  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1382  0x44            PUSHI0
0x1383  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1385  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // if (IsJumpInstruction(opCodeReach))                  Optimize.hs:636

0x1387  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1389  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x138B  0x2E 0x25       JZB 0x13B0 (+37)

                        // uint iJumpTarget = instructionListReach[2];

0x138D  0x44            PUSHI0
0x138E  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1390  0x1A 0x02       PUSHIB 0x02
0x1392  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1394  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // if ((iJumpTarget == iIndex) || (iJumpTarget == iIndex-1))

0x1396  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x1398  0x4F            PUSHLOCALB02
0x1399  0x05            EQ
0x139A  0x27 0x00       DUP 0x00
0x139C  0x2F 0x09       JNZB 0x13A5 (+9)
0x139E  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x13A0  0x4F            PUSHLOCALB02
0x13A1  0x45            PUSHI1
0x13A2  0x01            SUB
0x13A3  0x05            EQ
0x13A4  0x0B            BOOLOR
0x13A5  0x2E 0x09       JZB 0x13AE (+9)

                        // reachable = true;                                    Optimize.hs:641

0x13A7  0x45            PUSHI1
0x13A8  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // break;                                               Optimize.hs:642

0x13AA  0x28 0x08       DECSP 0x08
0x13AC  0x30 0x0C       JB 0x13B8 (+12)

                        // }                                                    Optimize.hs:644

0x13AE  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:645

0x13B0  0x28 0x04       DECSP 0x04

                        // } // foreach                                         Optimize.hs:646

0x13B2  0x22 0x14       INCLOCALB 0x14 (BP+20)
0x13B4  0x30 0x99       JB 0x134D (-103)
0x13B6  0x28 0x02       DECSP 0x02

                        // if (!reachable)                                      Optimize.hs:647

0x13B8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x13BA  0x2F 0x47       JNZB 0x1401 (+71)

                        // if (opCode1 == Instruction.EQ)                       Optimize.hs:649

0x13BC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x13BE  0x1A 0x05       PUSHIB 0x05
0x13C0  0x05            EQ
0x13C1  0x2E 0x08       JZB 0x13C9 (+8)

                        // opCode2 = FlipConditionalJumpCondition(opCode2);

0x13C3  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x13C5  0x2C 0x09       CALLB 0x09     // Optimize.FlipConditionalJumpCondition
0x13C7  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // <uint> newInstructionList;                           Optimize.hs:654

0x13C9  0x1A 0x04       PUSHIB 0x04
0x13CB  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // newInstructionList.Append(byte(opCode2));            Optimize.hs:655

0x13CD  0x56 0x14 0x10  PUSHLOCALBB 0x1014
0x13D0  0x51 0x03       CAST 0x03
0x13D2  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // newInstructionList.Append(instructionList2[1]); // needs operand, value not important

0x13D4  0x56 0x14 0x0E  PUSHLOCALBB 0x0E14
0x13D7  0x45            PUSHI1
0x13D8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x13DA  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // newInstructionList.Append(instructionList2[2]);

0x13DC  0x56 0x14 0x0E  PUSHLOCALBB 0x0E14
0x13DF  0x1A 0x02       PUSHIB 0x02
0x13E1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x13E3  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex - 2, newInstructionList);

0x13E5  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x13E7  0x4F            PUSHLOCALB02
0x13E8  0x1A 0x02       PUSHIB 0x02
0x13EA  0x01            SUB
0x13EB  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x13ED  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x13EF  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x13F2  0x4F            PUSHLOCALB02
0x13F3  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex-1);

0x13F5  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x13F8  0x4F            PUSHLOCALB02
0x13F9  0x45            PUSHI1
0x13FA  0x01            SUB
0x13FB  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:663

0x13FD  0x45            PUSHI1
0x13FE  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:665

0x13FF  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:666

0x1401  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:667

0x1403  0x28 0x08       DECSP 0x08

                        // iIndex++;                                            Optimize.hs:668

0x1405  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:669

0x1407  0x28 0x04       DECSP 0x04
0x1409  0x33 0xD8 0xFE  JW 0x12E1 (-296)

                        // progressInstructions++;                              Optimize.hs:670

0x140C  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x140E  0x45            PUSHI1
0x140F  0x00            ADD
0x1410  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x1412  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1414  0x37 0x00 0x08  PUSHIW 0x0800
0x1417  0x04            MOD
0x1418  0x2F 0x08       JNZB 0x1420 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:673

0x141A  0x1A 0x2E       PUSHIB 0x2E
0x141C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x141E  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:675

0x1420  0x4E            PUSHLOCALB00
0x1421  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:679
// ####  Optimize.OptimizePUSHPUSHSWAP(..)  ####                                0x001B


                        // bool modified = false;                               Optimize.hs:680

0x1423  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 2; // start at 3nd instruction

0x1425  0x1A 0x02       PUSHIB 0x02
0x1427  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:682

0x1428  0x44            PUSHI0
0x1429  0x45            PUSHI1
0x142A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:685

0x142C  0x4F            PUSHLOCALB02
0x142D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x142F  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1431  0x09            GE
0x1432  0x32 0x3F 0x01  JNZW 0x1571 (+319)

                        // <uint> instructionList0 = instructions[iIndex-2];

0x1435  0x1A 0x04       PUSHIB 0x04
0x1437  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1439  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x143B  0x4F            PUSHLOCALB02
0x143C  0x1A 0x02       PUSHIB 0x02
0x143E  0x01            SUB
0x143F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1441  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // <uint> instructionList1 = instructions[iIndex-1];

0x1443  0x1A 0x04       PUSHIB 0x04
0x1445  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1447  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1449  0x4F            PUSHLOCALB02
0x144A  0x45            PUSHI1
0x144B  0x01            SUB
0x144C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x144E  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // <uint> instructionList2 = instructions[iIndex];

0x1450  0x1A 0x04       PUSHIB 0x04
0x1452  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1454  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1456  0x4F            PUSHLOCALB02
0x1457  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1459  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // Instruction opCode0 = Instruction(instructionList0[0]);

0x145B  0x44            PUSHI0
0x145C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x145E  0x44            PUSHI0
0x145F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1461  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // Instruction opCode1 = Instruction(instructionList1[0]);

0x1463  0x44            PUSHI0
0x1464  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1466  0x44            PUSHI0
0x1467  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1469  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // Instruction opCode2 = Instruction(instructionList2[0]);

0x146B  0x44            PUSHI0
0x146C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x146E  0x44            PUSHI0
0x146F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1471  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // bool pushPushSwap = (IsPUSHInstruction(opCode0) && IsPUSHInstruction(opCode1) && (opCode2 == Instruction.SWAP));

0x1473  0x44            PUSHI0
0x1474  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1476  0x2C 0x10       CALLB 0x10     // Optimize.IsPUSHInstruction
0x1478  0x27 0x00       DUP 0x00
0x147A  0x2E 0x11       JZB 0x148B (+17)
0x147C  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x147E  0x2C 0x10       CALLB 0x10     // Optimize.IsPUSHInstruction
0x1480  0x0C            BOOLAND
0x1481  0x27 0x00       DUP 0x00
0x1483  0x2E 0x08       JZB 0x148B (+8)
0x1485  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1487  0x1A 0x43       PUSHIB 0x43
0x1489  0x05            EQ
0x148A  0x0C            BOOLAND
0x148B  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // bool push0EQJ     = ((opCode0 == Instruction.PUSHI0) && (opCode1 == Instruction.EQ) && IsConditionalJumpInstruction(opCode2));

0x148D  0x44            PUSHI0
0x148E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1490  0x1A 0x44       PUSHIB 0x44
0x1492  0x05            EQ
0x1493  0x27 0x00       DUP 0x00
0x1495  0x2E 0x11       JZB 0x14A6 (+17)
0x1497  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1499  0x1A 0x05       PUSHIB 0x05
0x149B  0x05            EQ
0x149C  0x0C            BOOLAND
0x149D  0x27 0x00       DUP 0x00
0x149F  0x2E 0x07       JZB 0x14A6 (+7)
0x14A1  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x14A3  0x2C 0x0D       CALLB 0x0D     // Optimize.IsConditionalJumpInstruction
0x14A5  0x0C            BOOLAND
0x14A6  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (pushPushSwap || push0EQJ)                        Optimize.hs:697

0x14A8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x14AA  0x27 0x00       DUP 0x00
0x14AC  0x2F 0x05       JNZB 0x14B1 (+5)
0x14AE  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x14B0  0x0B            BOOLOR
0x14B1  0x31 0xB9 0x00  JZW 0x156A (+185)

                        // bool reachable = false;                              Optimize.hs:699

0x14B4  0x44            PUSHI0

                        // for (uint rIndex = 0; rIndex < instructions.Length; rIndex++)

0x14B5  0x44            PUSHI0
0x14B6  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x14B8  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x14BA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x14BC  0x08            LT
0x14BD  0x2E 0x55       JZB 0x1512 (+85)

                        // if ((rIndex == iIndex) || (rIndex == iIndex-1))

0x14BF  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x14C1  0x4F            PUSHLOCALB02
0x14C2  0x05            EQ
0x14C3  0x27 0x00       DUP 0x00
0x14C5  0x2F 0x09       JNZB 0x14CE (+9)
0x14C7  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x14C9  0x4F            PUSHLOCALB02
0x14CA  0x45            PUSHI1
0x14CB  0x01            SUB
0x14CC  0x05            EQ
0x14CD  0x0B            BOOLOR
0x14CE  0x2F 0x40       JNZB 0x150E (+64)

                        // <uint> instructionListReach = instructions[rIndex];

0x14D0  0x1A 0x04       PUSHIB 0x04
0x14D2  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x14D4  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x14D6  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x14D8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x14DA  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // Instruction opCodeReach = Instruction(instructionListReach[0]);

0x14DC  0x44            PUSHI0
0x14DD  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x14DF  0x44            PUSHI0
0x14E0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x14E2  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // if (IsJumpInstruction(opCodeReach))                  Optimize.hs:710

0x14E4  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x14E6  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x14E8  0x2E 0x24       JZB 0x150C (+36)

                        // uint iJumpTarget = instructionListReach[2];

0x14EA  0x44            PUSHI0
0x14EB  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x14ED  0x1A 0x02       PUSHIB 0x02
0x14EF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x14F1  0x1B 0x1E       POPLOCALB 0x1E (BP+30)

                        // if ((iJumpTarget == iIndex) || (iIndex == iIndex-1))

0x14F3  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x14F5  0x4F            PUSHLOCALB02
0x14F6  0x05            EQ
0x14F7  0x27 0x00       DUP 0x00
0x14F9  0x2F 0x08       JNZB 0x1501 (+8)
0x14FB  0x4F            PUSHLOCALB02
0x14FC  0x4F            PUSHLOCALB02
0x14FD  0x45            PUSHI1
0x14FE  0x01            SUB
0x14FF  0x05            EQ
0x1500  0x0B            BOOLOR
0x1501  0x2E 0x09       JZB 0x150A (+9)

                        // reachable = true;                                    Optimize.hs:715

0x1503  0x45            PUSHI1
0x1504  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // break;                                               Optimize.hs:716

0x1506  0x28 0x08       DECSP 0x08
0x1508  0x30 0x0C       JB 0x1514 (+12)

                        // }                                                    Optimize.hs:718

0x150A  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:719

0x150C  0x28 0x04       DECSP 0x04

                        // } // foreach                                         Optimize.hs:720

0x150E  0x22 0x18       INCLOCALB 0x18 (BP+24)
0x1510  0x30 0xA6       JB 0x14B6 (-90)
0x1512  0x28 0x02       DECSP 0x02

                        // if (!reachable)                                      Optimize.hs:721

0x1514  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1516  0x2F 0x52       JNZB 0x1568 (+82)

                        // if (pushPushSwap)                                    Optimize.hs:723

0x1518  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x151A  0x2E 0x1D       JZB 0x1537 (+29)

                        // instructions.SetItem(iIndex-2, instructionList1);

0x151C  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x151E  0x4F            PUSHLOCALB02
0x151F  0x1A 0x02       PUSHIB 0x02
0x1521  0x01            SUB
0x1522  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1524  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex-1, instructionList0);

0x1526  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1528  0x4F            PUSHLOCALB02
0x1529  0x45            PUSHI1
0x152A  0x01            SUB
0x152B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x152D  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x152F  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x1532  0x4F            PUSHLOCALB02
0x1533  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:729

0x1535  0x45            PUSHI1
0x1536  0x4C            POPLOCALB00

                        // if (false && push0EQJ) // TODO                       Optimize.hs:731

0x1537  0x44            PUSHI0
0x1538  0x27 0x00       DUP 0x00
0x153A  0x2E 0x05       JZB 0x153F (+5)
0x153C  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x153E  0x0C            BOOLAND
0x153F  0x2E 0x29       JZB 0x1568 (+41)

                        // opCode2 =  FlipConditionalJumpCondition(opCode2);

0x1541  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1543  0x2C 0x09       CALLB 0x09     // Optimize.FlipConditionalJumpCondition
0x1545  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // instructionList2.SetItem(0, opCode2);                Optimize.hs:734

0x1547  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1549  0x44            PUSHI0
0x154A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x154C  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex-2, instructionList2);

0x154E  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1550  0x4F            PUSHLOCALB02
0x1551  0x1A 0x02       PUSHIB 0x02
0x1553  0x01            SUB
0x1554  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1556  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x1558  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x155B  0x4F            PUSHLOCALB02
0x155C  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex-1);

0x155E  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x1561  0x4F            PUSHLOCALB02
0x1562  0x45            PUSHI1
0x1563  0x01            SUB
0x1564  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:738

0x1566  0x45            PUSHI1
0x1567  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:741

0x1568  0x28 0x02       DECSP 0x02

                        // iIndex++;                                            Optimize.hs:742

0x156A  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:743

0x156C  0x28 0x10       DECSP 0x10
0x156E  0x33 0xBE 0xFE  JW 0x142C (-322)

                        // progressInstructions++;                              Optimize.hs:744

0x1571  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1573  0x45            PUSHI1
0x1574  0x00            ADD
0x1575  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x1577  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1579  0x37 0x00 0x08  PUSHIW 0x0800
0x157C  0x04            MOD
0x157D  0x2F 0x08       JNZB 0x1585 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:747

0x157F  0x1A 0x2E       PUSHIB 0x2E
0x1581  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1583  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:749

0x1585  0x4E            PUSHLOCALB00
0x1586  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:837
// ####  Optimize.OptimizeJumpToJump(..)  ####                                  0x001D


                        // bool modified = false;                               Optimize.hs:838

0x1588  0x5F 0x03       ENTERB 0x03

                        // bool first = true;                                   Optimize.hs:840

0x158A  0x45            PUSHI1
0x158B  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:843

0x158D  0x4F            PUSHLOCALB02
0x158E  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1590  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1592  0x09            GE
0x1593  0x32 0x0F 0x01  JNZW 0x16A2 (+271)

                        // <uint> instructionList = instructions[iIndex];

0x1596  0x1A 0x04       PUSHIB 0x04
0x1598  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x159A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x159C  0x4F            PUSHLOCALB02
0x159D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x159F  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x15A1  0x44            PUSHI0
0x15A2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x15A4  0x44            PUSHI0
0x15A5  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x15A7  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // bool removeSingleNOP = false;                        Optimize.hs:849

0x15A9  0x44            PUSHI0

                        // if (IsJumpInstruction(opCode))                       Optimize.hs:850

0x15AA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x15AC  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x15AE  0x31 0xD9 0x00  JZW 0x1687 (+217)

                        // uint iJumpTarget = instructionList[2];               Optimize.hs:852

0x15B1  0x44            PUSHI0
0x15B2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x15B4  0x1A 0x02       PUSHIB 0x02
0x15B6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x15B8  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // <uint> targetInstructionList = instructions[iJumpTarget];

0x15BA  0x1A 0x04       PUSHIB 0x04
0x15BC  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x15BE  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x15C0  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x15C2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x15C4  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // Instruction targetOpCode = Instruction(targetInstructionList[0]);

0x15C6  0x44            PUSHI0
0x15C7  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x15C9  0x44            PUSHI0
0x15CA  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x15CC  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (IsUnconditionalJumpInstruction(targetOpCode))

0x15CE  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x15D0  0x2C 0x0E       CALLB 0x0E     // Optimize.IsUnconditionalJumpInstruction
0x15D2  0x2E 0x68       JZB 0x163A (+104)

                        // uint iTargetJumpTarget = targetInstructionList[2];

0x15D4  0x44            PUSHI0
0x15D5  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x15D7  0x1A 0x02       PUSHIB 0x02
0x15D9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x15DB  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // uint fromAddress = GetInstructionAddress(iIndex, ref instructions);

0x15DD  0x44            PUSHI0
0x15DE  0x4F            PUSHLOCALB02
0x15DF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x15E1  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x15E3  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // uint toAddress   = GetInstructionAddress(iTargetJumpTarget, ref instructions);

0x15E5  0x44            PUSHI0
0x15E6  0x56 0x12 0xFA  PUSHLOCALBB 0xFA12
0x15E9  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x15EB  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // int offset = int(toAddress) - int(fromAddress);

0x15ED  0x44            PUSHI0
0x15EE  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x15F0  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x15F2  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x15F4  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x15F6  0x12            SUBI
0x15F7  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // if (IsJumpBInstruction(opCode))                      Optimize.hs:863

0x15F9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x15FB  0x2C 0x0C       CALLB 0x0C     // Optimize.IsJumpBInstruction
0x15FD  0x2E 0x28       JZB 0x1625 (+40)

                        // if ((offset >= -128) && (offset < 127))              Optimize.hs:865

0x15FF  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1601  0x44            PUSHI0
0x1602  0x1A 0x80       PUSHIB 0x80
0x1604  0x12            SUBI
0x1605  0x18            GEI
0x1606  0x27 0x00       DUP 0x00
0x1608  0x2E 0x08       JZB 0x1610 (+8)
0x160A  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x160C  0x1A 0x7F       PUSHIB 0x7F
0x160E  0x17            LTI
0x160F  0x0C            BOOLAND
0x1610  0x2E 0x26       JZB 0x1636 (+38)

                        // instructionList.SetItem(2, iTargetJumpTarget);

0x1612  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1614  0x1A 0x02       PUSHIB 0x02
0x1616  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1618  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex, instructionList);

0x161A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x161C  0x4F            PUSHLOCALB02
0x161D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x161F  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // modified = true;                                     Optimize.hs:870

0x1621  0x45            PUSHI1
0x1622  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:876

0x1623  0x30 0x13       JB 0x1636 (+19)

                        // instructionList.SetItem(2, iTargetJumpTarget);

0x1625  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1627  0x1A 0x02       PUSHIB 0x02
0x1629  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x162B  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex, instructionList);

0x162D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x162F  0x4F            PUSHLOCALB02
0x1630  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1632  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // modified = true;                                     Optimize.hs:882

0x1634  0x45            PUSHI1
0x1635  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:884

0x1636  0x28 0x08       DECSP 0x08
0x1638  0x30 0x4D       JB 0x1685 (+77)

                        // else if (IsUnconditionalJumpInstruction(opCode) && IsMethodExitInstruction(targetOpCode))

0x163A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x163C  0x2C 0x0E       CALLB 0x0E     // Optimize.IsUnconditionalJumpInstruction
0x163E  0x27 0x00       DUP 0x00
0x1640  0x2E 0x07       JZB 0x1647 (+7)
0x1642  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1644  0x2C 0x0F       CALLB 0x0F     // Optimize.IsMethodExitInstruction
0x1646  0x0C            BOOLAND
0x1647  0x2E 0x3E       JZB 0x1685 (+62)

                        // uint jumpOperandWidth   = OperandWidth(opCode);

0x1649  0x44            PUSHI0
0x164A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x164C  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x164E  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // uint targetOperandWidth = OperandWidth(targetOpCode);

0x1650  0x44            PUSHI0
0x1651  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1653  0x2C 0xAF       CALLB 0xAF     // Instructions.OperandWidth
0x1655  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (targetOperandWidth <= jumpOperandWidth) // inserting code is harder than it may first appear (knock-on effects ..)

0x1657  0x56 0x14 0x12  PUSHLOCALBB 0x1214
0x165A  0x0A            LE
0x165B  0x2E 0x28       JZB 0x1683 (+40)

                        // <uint> exitInstructionList;                          Optimize.hs:901

0x165D  0x1A 0x04       PUSHIB 0x04
0x165F  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // exitInstructionList.Append(targetInstructionList[0]);

0x1661  0x56 0x16 0x0E  PUSHLOCALBB 0x0E16
0x1664  0x44            PUSHI0
0x1665  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1667  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (targetOpCode != Instruction.RET0)                Optimize.hs:903

0x1669  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x166B  0x1A 0x4A       PUSHIB 0x4A
0x166D  0x06            NE
0x166E  0x2E 0x0A       JZB 0x1678 (+10)

                        // exitInstructionList.Append(targetInstructionList[1]);

0x1670  0x56 0x16 0x0E  PUSHLOCALBB 0x0E16
0x1673  0x45            PUSHI1
0x1674  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1676  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // instructions.SetItem(iIndex, exitInstructionList);

0x1678  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x167A  0x4F            PUSHLOCALB02
0x167B  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x167D  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // modified = true;                                     Optimize.hs:908

0x167F  0x45            PUSHI1
0x1680  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:909

0x1681  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:910

0x1683  0x28 0x04       DECSP 0x04

                        // }                                                    Optimize.hs:911

0x1685  0x28 0x06       DECSP 0x06

                        // iIndex++;                                            Optimize.hs:912

0x1687  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // progressInstructions++;                              Optimize.hs:913

0x1689  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x168B  0x45            PUSHI1
0x168C  0x00            ADD
0x168D  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x168F  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1691  0x37 0x00 0x08  PUSHIW 0x0800
0x1694  0x04            MOD
0x1695  0x2F 0x08       JNZB 0x169D (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:916

0x1697  0x1A 0x2E       PUSHIB 0x2E
0x1699  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x169B  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // } // loop                                            Optimize.hs:918

0x169D  0x28 0x06       DECSP 0x06
0x169F  0x33 0xEE 0xFE  JW 0x158D (-274)

                        // return modified;                                     Optimize.hs:919

0x16A2  0x4E            PUSHLOCALB00
0x16A3  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:396
// ####  Optimize.OptimizeRemoveDeadCode(..)  ####                              0x0016


                        // bool modified = false;                               Optimize.hs:397

0x16A5  0x5F 0x01       ENTERB 0x01

                        // <bool> instructionsReached;                          Optimize.hs:399

0x16A7  0x1A 0x06       PUSHIB 0x06
0x16A9  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint length = instructions.Length;                   Optimize.hs:400

0x16AB  0x44            PUSHI0
0x16AC  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x16AE  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x16B0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (uint i=0; i < length; i++)                      Optimize.hs:401

0x16B2  0x44            PUSHI0
0x16B3  0x56 0x06 0x04  PUSHLOCALBB 0x0406
0x16B6  0x08            LT
0x16B7  0x2E 0x0A       JZB 0x16C1 (+10)

                        // instructionsReached.Append(false);                   Optimize.hs:403

0x16B9  0x4F            PUSHLOCALB02
0x16BA  0x44            PUSHI0
0x16BB  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    Optimize.hs:404

0x16BD  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x16BF  0x30 0xF4       JB 0x16B3 (-12)
0x16C1  0x28 0x02       DECSP 0x02

                        // WalkCode(ref instructions, ref instructionsReached, 0);

0x16C3  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x16C5  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x16C7  0x44            PUSHI0
0x16C8  0x2C 0x15       CALLB 0x15     // Optimize.WalkCode

                        // uint iIndex = 0;                                     Optimize.hs:407

0x16CA  0x44            PUSHI0

                        // if (iIndex >= instructions.Length)                   Optimize.hs:410

0x16CB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x16CD  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x16CF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x16D1  0x09            GE
0x16D2  0x2F 0x1B       JNZB 0x16ED (+27)

                        // if (!instructionsReached[iIndex])                    Optimize.hs:414

0x16D4  0x4F            PUSHLOCALB02
0x16D5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x16D7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x16D9  0x2F 0x10       JNZB 0x16E9 (+16)

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x16DB  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x16DE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x16E0  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // instructionsReached.Remove(iIndex);                  Optimize.hs:417

0x16E2  0x4F            PUSHLOCALB02
0x16E3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x16E5  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // modified = true;                                     Optimize.hs:418

0x16E7  0x45            PUSHI1
0x16E8  0x4C            POPLOCALB00

                        // iIndex++;                                            Optimize.hs:420

0x16E9  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // }                                                    Optimize.hs:421

0x16EB  0x30 0xE0       JB 0x16CB (-32)

                        // return modified;                                     Optimize.hs:422

0x16ED  0x4E            PUSHLOCALB00
0x16EE  0x2B 0x0E       RETRETB 0x0E


// Optimize.hs:753
// ####  Optimize.OptimizeJumpFollowedByJump(..)  ####                          0x001C


                        // bool modified = false;                               Optimize.hs:754

0x16F0  0x5F 0x02       ENTERB 0x02

                        // uint iIndex = 1; // start at 2nd instruction

0x16F2  0x45            PUSHI1
0x16F3  0x4D            POPLOCALB02

                        // bool first = true;                                   Optimize.hs:756

0x16F4  0x44            PUSHI0
0x16F5  0x45            PUSHI1
0x16F6  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (iIndex >= instructions.Length)                   Optimize.hs:759

0x16F8  0x4F            PUSHLOCALB02
0x16F9  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x16FB  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x16FD  0x09            GE
0x16FE  0x32 0x55 0x01  JNZW 0x1853 (+341)

                        // <uint> instructionList = instructions[iIndex-1];

0x1701  0x1A 0x04       PUSHIB 0x04
0x1703  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1705  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1707  0x4F            PUSHLOCALB02
0x1708  0x45            PUSHI1
0x1709  0x01            SUB
0x170A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x170C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Instruction opCode = Instruction(instructionList[0]);

0x170E  0x44            PUSHI0
0x170F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1711  0x44            PUSHI0
0x1712  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1714  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (IsConditionalJumpInstruction(opCode))            Optimize.hs:765

0x1716  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1718  0x2C 0x0D       CALLB 0x0D     // Optimize.IsConditionalJumpInstruction
0x171A  0x31 0x32 0x01  JZW 0x184C (+306)

                        // uint iConditionalJumpTarget = instructionList[2];

0x171D  0x44            PUSHI0
0x171E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1720  0x1A 0x02       PUSHIB 0x02
0x1722  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1724  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // <uint> instructionListNext = instructions[iIndex];

0x1726  0x1A 0x04       PUSHIB 0x04
0x1728  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x172A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x172C  0x4F            PUSHLOCALB02
0x172D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x172F  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // Instruction opCodeNext = Instruction(instructionListNext[0]);

0x1731  0x44            PUSHI0
0x1732  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1734  0x44            PUSHI0
0x1735  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1737  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if ((iConditionalJumpTarget == iIndex+1) && ((opCodeNext == Instruction.JB) || (opCodeNext == Instruction.JW)))

0x1739  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x173B  0x4F            PUSHLOCALB02
0x173C  0x45            PUSHI1
0x173D  0x00            ADD
0x173E  0x05            EQ
0x173F  0x27 0x00       DUP 0x00
0x1741  0x2E 0x12       JZB 0x1753 (+18)
0x1743  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1745  0x1A 0x30       PUSHIB 0x30
0x1747  0x05            EQ
0x1748  0x27 0x00       DUP 0x00
0x174A  0x2F 0x08       JNZB 0x1752 (+8)
0x174C  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x174E  0x1A 0x33       PUSHIB 0x33
0x1750  0x05            EQ
0x1751  0x0B            BOOLOR
0x1752  0x0C            BOOLAND
0x1753  0x31 0xF7 0x00  JZW 0x184A (+247)

                        // bool reachable = false;                              Optimize.hs:772

0x1756  0x44            PUSHI0

                        // for (uint rIndex = 0; rIndex < instructions.Length; rIndex++)

0x1757  0x44            PUSHI0
0x1758  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x175A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x175C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x175E  0x08            LT
0x175F  0x2E 0x55       JZB 0x17B4 (+85)

                        // if ((rIndex == iIndex) || (rIndex == iIndex-1))

0x1761  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1763  0x4F            PUSHLOCALB02
0x1764  0x05            EQ
0x1765  0x27 0x00       DUP 0x00
0x1767  0x2F 0x09       JNZB 0x1770 (+9)
0x1769  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x176B  0x4F            PUSHLOCALB02
0x176C  0x45            PUSHI1
0x176D  0x01            SUB
0x176E  0x05            EQ
0x176F  0x0B            BOOLOR
0x1770  0x2F 0x40       JNZB 0x17B0 (+64)

                        // <uint> instructionListReach = instructions[rIndex];

0x1772  0x1A 0x04       PUSHIB 0x04
0x1774  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1776  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1778  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x177A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x177C  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // Instruction opCodeReach = Instruction(instructionListReach[0]);

0x177E  0x44            PUSHI0
0x177F  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x1781  0x44            PUSHI0
0x1782  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1784  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // if (IsJumpInstruction(opCodeReach))                  Optimize.hs:783

0x1786  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1788  0x2C 0x0A       CALLB 0x0A     // Optimize.IsJumpInstruction
0x178A  0x2E 0x24       JZB 0x17AE (+36)

                        // uint iJumpTarget = instructionListReach[2];

0x178C  0x44            PUSHI0
0x178D  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x178F  0x1A 0x02       PUSHIB 0x02
0x1791  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1793  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // if ((iJumpTarget == iIndex) || (iIndex == iIndex-1))

0x1795  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1797  0x4F            PUSHLOCALB02
0x1798  0x05            EQ
0x1799  0x27 0x00       DUP 0x00
0x179B  0x2F 0x08       JNZB 0x17A3 (+8)
0x179D  0x4F            PUSHLOCALB02
0x179E  0x4F            PUSHLOCALB02
0x179F  0x45            PUSHI1
0x17A0  0x01            SUB
0x17A1  0x05            EQ
0x17A2  0x0B            BOOLOR
0x17A3  0x2E 0x09       JZB 0x17AC (+9)

                        // reachable = true;                                    Optimize.hs:788

0x17A5  0x45            PUSHI1
0x17A6  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // break;                                               Optimize.hs:789

0x17A8  0x28 0x08       DECSP 0x08
0x17AA  0x30 0x0C       JB 0x17B6 (+12)

                        // }                                                    Optimize.hs:791

0x17AC  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:792

0x17AE  0x28 0x04       DECSP 0x04

                        // } // foreach                                         Optimize.hs:793

0x17B0  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x17B2  0x30 0xA6       JB 0x1758 (-90)
0x17B4  0x28 0x02       DECSP 0x02

                        // if (!reachable)                                      Optimize.hs:794

0x17B6  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x17B8  0x32 0x90 0x00  JNZW 0x1848 (+144)

                        // uint iJumpTarget = instructionListNext[2];           Optimize.hs:797

0x17BB  0x44            PUSHI0
0x17BC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x17BE  0x1A 0x02       PUSHIB 0x02
0x17C0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x17C2  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // uint fromAddress = GetInstructionAddress(iIndex-1, ref instructions);

0x17C4  0x44            PUSHI0
0x17C5  0x4F            PUSHLOCALB02
0x17C6  0x45            PUSHI1
0x17C7  0x01            SUB
0x17C8  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x17CA  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x17CC  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // uint toAddress   = GetInstructionAddress(iJumpTarget, ref instructions);

0x17CE  0x44            PUSHI0
0x17CF  0x56 0x12 0xFA  PUSHLOCALBB 0xFA12
0x17D2  0x2C 0x07       CALLB 0x07     // Optimize.GetInstructionAddress
0x17D4  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // int offset = int(toAddress) - int(fromAddress);

0x17D6  0x44            PUSHI0
0x17D7  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x17D9  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x17DB  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x17DD  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x17DF  0x12            SUBI
0x17E0  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // if ((opCode == Instruction.JZB) || (opCode == Instruction.JNZB))

0x17E2  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x17E4  0x1A 0x2E       PUSHIB 0x2E
0x17E6  0x05            EQ
0x17E7  0x27 0x00       DUP 0x00
0x17E9  0x2F 0x08       JNZB 0x17F1 (+8)
0x17EB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x17ED  0x1A 0x2F       PUSHIB 0x2F
0x17EF  0x05            EQ
0x17F0  0x0B            BOOLOR
0x17F1  0x2E 0x2D       JZB 0x181E (+45)

                        // if ((offset < -128) || (offset > 127))               Optimize.hs:803

0x17F3  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x17F5  0x44            PUSHI0
0x17F6  0x1A 0x80       PUSHIB 0x80
0x17F8  0x12            SUBI
0x17F9  0x17            LTI
0x17FA  0x27 0x00       DUP 0x00
0x17FC  0x2F 0x08       JNZB 0x1804 (+8)
0x17FE  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1800  0x1A 0x7F       PUSHIB 0x7F
0x1802  0x16            GTI
0x1803  0x0B            BOOLOR
0x1804  0x2E 0x1A       JZB 0x181E (+26)

                        // if (opCode == Instruction.JZB)                       Optimize.hs:805

0x1806  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1808  0x1A 0x2E       PUSHIB 0x2E
0x180A  0x05            EQ
0x180B  0x2E 0x08       JZB 0x1813 (+8)

                        // opCode = Instruction.JZW;                            Optimize.hs:807

0x180D  0x1A 0x31       PUSHIB 0x31
0x180F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    Optimize.hs:808

0x1811  0x30 0x0D       JB 0x181E (+13)

                        // else if (opCode == Instruction.JNZB)                 Optimize.hs:809

0x1813  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1815  0x1A 0x2F       PUSHIB 0x2F
0x1817  0x05            EQ
0x1818  0x2E 0x06       JZB 0x181E (+6)

                        // opCode = Instruction.JNZW;                           Optimize.hs:811

0x181A  0x1A 0x32       PUSHIB 0x32
0x181C  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // opCode = FlipConditionalJumpCondition(opCode);

0x181E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1820  0x2C 0x09       CALLB 0x09     // Optimize.FlipConditionalJumpCondition
0x1822  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // instructionListNext.SetItem(0, byte(opCode));

0x1824  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1826  0x44            PUSHI0
0x1827  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1829  0x51 0x03       CAST 0x03
0x182B  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructionListNext.SetItem(2, iJumpTarget);

0x182D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x182F  0x1A 0x02       PUSHIB 0x02
0x1831  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x1833  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex-1, instructionListNext);

0x1835  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1837  0x4F            PUSHLOCALB02
0x1838  0x45            PUSHI1
0x1839  0x01            SUB
0x183A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x183C  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex);

0x183E  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x1841  0x4F            PUSHLOCALB02
0x1842  0x2C 0x05       CALLB 0x05     // Optimize.RemoveInstruction

                        // modified = true;                                     Optimize.hs:822

0x1844  0x45            PUSHI1
0x1845  0x4C            POPLOCALB00

                        // }                                                    Optimize.hs:823

0x1846  0x28 0x08       DECSP 0x08

                        // }                                                    Optimize.hs:824

0x1848  0x28 0x02       DECSP 0x02

                        // }                                                    Optimize.hs:825

0x184A  0x28 0x06       DECSP 0x06

                        // iIndex++;                                            Optimize.hs:826

0x184C  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    Optimize.hs:827

0x184E  0x28 0x04       DECSP 0x04
0x1850  0x33 0xA8 0xFE  JW 0x16F8 (-344)

                        // progressInstructions++;                              Optimize.hs:828

0x1853  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x1855  0x45            PUSHI1
0x1856  0x00            ADD
0x1857  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if ((progressInstructions % progressSteps) == 0)

0x1859  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x185B  0x37 0x00 0x08  PUSHIW 0x0800
0x185E  0x04            MOD
0x185F  0x2F 0x08       JNZB 0x1867 (+8)

                        // Parser.ProgressTick(".");                            Optimize.hs:831

0x1861  0x1A 0x2E       PUSHIB 0x2E
0x1863  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1865  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // return modified;                                     Optimize.hs:833

0x1867  0x4E            PUSHLOCALB00
0x1868  0x2B 0x0C       RETRETB 0x0C


// Optimize.hs:193
// ####  Optimize.IsJumpWInstruction(..)  ####                                  0x000B

0x186A  0x49            ENTER

                        // return ((opCode == Instruction.JW) || (opCode == Instruction.JZW) || (opCode == Instruction.JNZW));

0x186B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x186D  0x1A 0x33       PUSHIB 0x33
0x186F  0x05            EQ
0x1870  0x27 0x00       DUP 0x00
0x1872  0x2F 0x12       JNZB 0x1884 (+18)
0x1874  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1876  0x1A 0x31       PUSHIB 0x31
0x1878  0x05            EQ
0x1879  0x0B            BOOLOR
0x187A  0x27 0x00       DUP 0x00
0x187C  0x2F 0x08       JNZB 0x1884 (+8)
0x187E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1880  0x1A 0x32       PUSHIB 0x32
0x1882  0x05            EQ
0x1883  0x0B            BOOLOR
0x1884  0x2B 0x02       RETRETB 0x02


// Optimize.hs:104
// ####  Optimize.RemoveInstruction(..)  ####                                   0x0005

0x1886  0x49            ENTER

                        // RemoveInstruction(ref instructions, ref indexDebugInfo, iIndex, false, 0);

0x1887  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x188A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x188C  0x44            PUSHI0
0x188D  0x44            PUSHI0
0x188E  0x2C 0x06       CALLB 0x06     // Optimize.RemoveInstruction

                        // }                                                    Optimize.hs:106

0x1890  0x2A 0x06       RETB 0x06


// Optimize.hs:223
// ####  Optimize.IsPOPInstruction(..)  ####                                    0x0011

0x1892  0x49            ENTER

                        // return (opCode == Instruction.POPLOCALB)   || (opCode == Instruction.POPGLOBALB) || (opCode == Instruction.POPRELB) ||

0x1893  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1895  0x1A 0x1B       PUSHIB 0x1B
0x1897  0x05            EQ
0x1898  0x27 0x00       DUP 0x00
0x189A  0x2F 0x44       JNZB 0x18DE (+68)
0x189C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x189E  0x1A 0x1F       PUSHIB 0x1F
0x18A0  0x05            EQ
0x18A1  0x0B            BOOLOR
0x18A2  0x27 0x00       DUP 0x00
0x18A4  0x2F 0x3A       JNZB 0x18DE (+58)
0x18A6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18A8  0x1A 0x1D       PUSHIB 0x1D
0x18AA  0x05            EQ
0x18AB  0x0B            BOOLOR
0x18AC  0x27 0x00       DUP 0x00
0x18AE  0x2F 0x30       JNZB 0x18DE (+48)
0x18B0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18B2  0x1A 0x38       PUSHIB 0x38
0x18B4  0x05            EQ
0x18B5  0x0B            BOOLOR
0x18B6  0x27 0x00       DUP 0x00
0x18B8  0x2F 0x26       JNZB 0x18DE (+38)
0x18BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18BC  0x1A 0x3C       PUSHIB 0x3C
0x18BE  0x05            EQ
0x18BF  0x0B            BOOLOR
0x18C0  0x27 0x00       DUP 0x00
0x18C2  0x2F 0x1C       JNZB 0x18DE (+28)
0x18C4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18C6  0x1A 0x3A       PUSHIB 0x3A
0x18C8  0x05            EQ
0x18C9  0x0B            BOOLOR
0x18CA  0x27 0x00       DUP 0x00
0x18CC  0x2F 0x12       JNZB 0x18DE (+18)
0x18CE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18D0  0x1A 0x4C       PUSHIB 0x4C
0x18D2  0x05            EQ
0x18D3  0x0B            BOOLOR
0x18D4  0x27 0x00       DUP 0x00
0x18D6  0x2F 0x08       JNZB 0x18DE (+8)
0x18D8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x18DA  0x1A 0x4D       PUSHIB 0x4D
0x18DC  0x05            EQ
0x18DD  0x0B            BOOLOR
0x18DE  0x2B 0x02       RETRETB 0x02


// Optimize.hs:229
// ####  Optimize.SwitchToCOPYPOP(..)  ####                                     0x0012

0x18E0  0x49            ENTER

                        // switch (opCode)                                      Optimize.hs:230

0x18E1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.POPLOCALB:                          Optimize.hs:232

0x18E3  0x1A 0x1B       PUSHIB 0x1B
0x18E5  0x4E            PUSHLOCALB00
0x18E6  0x05            EQ
0x18E7  0x2E 0x08       JZB 0x18EF (+8)

                        // opCode = Instruction.POPCOPYLOCALB;                  Optimize.hs:234

0x18E9  0x1A 0x57       PUSHIB 0x57
0x18EB  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:235

0x18ED  0x30 0x54       JB 0x1941 (+84)

                        // case Instruction.POPLOCALB00:                        Optimize.hs:236

0x18EF  0x1A 0x4C       PUSHIB 0x4C
0x18F1  0x4E            PUSHLOCALB00
0x18F2  0x05            EQ
0x18F3  0x2E 0x08       JZB 0x18FB (+8)

                        // opCode = Instruction.POPCOPYLOCALB00;                Optimize.hs:238

0x18F5  0x1A 0x5D       PUSHIB 0x5D
0x18F7  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:239

0x18F9  0x30 0x48       JB 0x1941 (+72)

                        // case Instruction.POPLOCALB02:                        Optimize.hs:240

0x18FB  0x1A 0x4D       PUSHIB 0x4D
0x18FD  0x4E            PUSHLOCALB00
0x18FE  0x05            EQ
0x18FF  0x2E 0x08       JZB 0x1907 (+8)

                        // opCode = Instruction.POPCOPYLOCALB02;                Optimize.hs:242

0x1901  0x1A 0x5E       PUSHIB 0x5E
0x1903  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:243

0x1905  0x30 0x3C       JB 0x1941 (+60)

                        // case Instruction.POPLOCALW:                          Optimize.hs:244

0x1907  0x1A 0x38       PUSHIB 0x38
0x1909  0x4E            PUSHLOCALB00
0x190A  0x05            EQ
0x190B  0x2E 0x08       JZB 0x1913 (+8)

                        // opCode = Instruction.POPCOPYLOCALW;                  Optimize.hs:246

0x190D  0x1A 0x5A       PUSHIB 0x5A
0x190F  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:247

0x1911  0x30 0x30       JB 0x1941 (+48)

                        // case Instruction.POPGLOBALB:                         Optimize.hs:248

0x1913  0x1A 0x1F       PUSHIB 0x1F
0x1915  0x4E            PUSHLOCALB00
0x1916  0x05            EQ
0x1917  0x2E 0x08       JZB 0x191F (+8)

                        // opCode = Instruction.POPCOPYGLOBALB;                 Optimize.hs:250

0x1919  0x1A 0x59       PUSHIB 0x59
0x191B  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:251

0x191D  0x30 0x24       JB 0x1941 (+36)

                        // case Instruction.POPGLOBALW:                         Optimize.hs:252

0x191F  0x1A 0x3C       PUSHIB 0x3C
0x1921  0x4E            PUSHLOCALB00
0x1922  0x05            EQ
0x1923  0x2E 0x08       JZB 0x192B (+8)

                        // opCode = Instruction.POPCOPYGLOBALW;                 Optimize.hs:254

0x1925  0x1A 0x5C       PUSHIB 0x5C
0x1927  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:255

0x1929  0x30 0x18       JB 0x1941 (+24)

                        // case Instruction.POPRELB:                            Optimize.hs:256

0x192B  0x1A 0x1D       PUSHIB 0x1D
0x192D  0x4E            PUSHLOCALB00
0x192E  0x05            EQ
0x192F  0x2E 0x08       JZB 0x1937 (+8)

                        // opCode = Instruction.POPCOPYRELB;                    Optimize.hs:258

0x1931  0x1A 0x58       PUSHIB 0x58
0x1933  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:259

0x1935  0x30 0x0C       JB 0x1941 (+12)

                        // case Instruction.POPRELW:                            Optimize.hs:260

0x1937  0x1A 0x3A       PUSHIB 0x3A
0x1939  0x4E            PUSHLOCALB00
0x193A  0x05            EQ
0x193B  0x2E 0x06       JZB 0x1941 (+6)

                        // opCode = Instruction.POPCOPYRELW;                    Optimize.hs:262

0x193D  0x1A 0x5B       PUSHIB 0x5B
0x193F  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:264

0x1941  0x28 0x02       DECSP 0x02

                        // return opCode;                                       Optimize.hs:265

0x1943  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1945  0x2B 0x02       RETRETB 0x02


// Optimize.hs:188
// ####  Optimize.IsJumpInstruction(..)  ####                                   0x000A

0x1947  0x49            ENTER

                        // return ((opCode == Instruction.JW) || (opCode == Instruction.JZW) || (opCode == Instruction.JNZW) ||

0x1948  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x194A  0x1A 0x33       PUSHIB 0x33
0x194C  0x05            EQ
0x194D  0x27 0x00       DUP 0x00
0x194F  0x2F 0x30       JNZB 0x197F (+48)
0x1951  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1953  0x1A 0x31       PUSHIB 0x31
0x1955  0x05            EQ
0x1956  0x0B            BOOLOR
0x1957  0x27 0x00       DUP 0x00
0x1959  0x2F 0x26       JNZB 0x197F (+38)
0x195B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x195D  0x1A 0x32       PUSHIB 0x32
0x195F  0x05            EQ
0x1960  0x0B            BOOLOR
0x1961  0x27 0x00       DUP 0x00
0x1963  0x2F 0x1C       JNZB 0x197F (+28)
0x1965  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1967  0x1A 0x30       PUSHIB 0x30
0x1969  0x05            EQ
0x196A  0x0B            BOOLOR
0x196B  0x27 0x00       DUP 0x00
0x196D  0x2F 0x12       JNZB 0x197F (+18)
0x196F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1971  0x1A 0x2E       PUSHIB 0x2E
0x1973  0x05            EQ
0x1974  0x0B            BOOLOR
0x1975  0x27 0x00       DUP 0x00
0x1977  0x2F 0x08       JNZB 0x197F (+8)
0x1979  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x197B  0x1A 0x2F       PUSHIB 0x2F
0x197D  0x05            EQ
0x197E  0x0B            BOOLOR
0x197F  0x2B 0x02       RETRETB 0x02


// Optimize.hs:108
// ####  Optimize.RemoveInstruction(..)  ####                                   0x0006

0x1981  0x49            ENTER

                        // instructions.Remove(iIndex);                         Optimize.hs:109

0x1982  0x1E 0xF6       PUSHRELB 0xF6 (BP-10)
0x1984  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1986  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // AdjustJumps(ref instructions, iIndex, -1);           Optimize.hs:112

0x1988  0x56 0xF6 0xFA  PUSHLOCALBB 0xFAF6
0x198B  0x44            PUSHI0
0x198C  0x45            PUSHI1
0x198D  0x12            SUBI
0x198E  0x2C 0x04       CALLB 0x04     // Optimize.AdjustJumps

                        // AdjustDebugIndices(ref indexDebugInfo, iIndex, -1, foldENTER, iEnter);

0x1990  0x56 0xF8 0xFA  PUSHLOCALBB 0xFAF8
0x1993  0x44            PUSHI0
0x1994  0x45            PUSHI1
0x1995  0x12            SUBI
0x1996  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x1999  0x2C 0x03       CALLB 0x03     // Optimize.AdjustDebugIndices

                        // }                                                    Optimize.hs:117

0x199B  0x2A 0x0A       RETB 0x0A


// Optimize.hs:201
// ####  Optimize.IsConditionalJumpInstruction(..)  ####                        0x000D

0x199D  0x49            ENTER

                        // return ((opCode == Instruction.JZW) || (opCode == Instruction.JNZW) ||

0x199E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19A0  0x1A 0x31       PUSHIB 0x31
0x19A2  0x05            EQ
0x19A3  0x27 0x00       DUP 0x00
0x19A5  0x2F 0x1C       JNZB 0x19C1 (+28)
0x19A7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19A9  0x1A 0x32       PUSHIB 0x32
0x19AB  0x05            EQ
0x19AC  0x0B            BOOLOR
0x19AD  0x27 0x00       DUP 0x00
0x19AF  0x2F 0x12       JNZB 0x19C1 (+18)
0x19B1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19B3  0x1A 0x2E       PUSHIB 0x2E
0x19B5  0x05            EQ
0x19B6  0x0B            BOOLOR
0x19B7  0x27 0x00       DUP 0x00
0x19B9  0x2F 0x08       JNZB 0x19C1 (+8)
0x19BB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19BD  0x1A 0x2F       PUSHIB 0x2F
0x19BF  0x05            EQ
0x19C0  0x0B            BOOLOR
0x19C1  0x2B 0x02       RETRETB 0x02


// Optimize.hs:161
// ####  Optimize.FlipConditionalJumpCondition(..)  ####                        0x0009

0x19C3  0x49            ENTER

                        // switch (opCode)                                      Optimize.hs:162

0x19C4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.JZW:                                Optimize.hs:164

0x19C6  0x1A 0x31       PUSHIB 0x31
0x19C8  0x4E            PUSHLOCALB00
0x19C9  0x05            EQ
0x19CA  0x2E 0x08       JZB 0x19D2 (+8)

                        // opCode = Instruction.JNZW;                           Optimize.hs:166

0x19CC  0x1A 0x32       PUSHIB 0x32
0x19CE  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:167

0x19D0  0x30 0x2A       JB 0x19FA (+42)

                        // case Instruction.JNZW:                               Optimize.hs:168

0x19D2  0x1A 0x32       PUSHIB 0x32
0x19D4  0x4E            PUSHLOCALB00
0x19D5  0x05            EQ
0x19D6  0x2E 0x08       JZB 0x19DE (+8)

                        // opCode = Instruction.JZW;                            Optimize.hs:170

0x19D8  0x1A 0x31       PUSHIB 0x31
0x19DA  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:171

0x19DC  0x30 0x1E       JB 0x19FA (+30)

                        // case Instruction.JZB:                                Optimize.hs:172

0x19DE  0x1A 0x2E       PUSHIB 0x2E
0x19E0  0x4E            PUSHLOCALB00
0x19E1  0x05            EQ
0x19E2  0x2E 0x08       JZB 0x19EA (+8)

                        // opCode = Instruction.JNZB;                           Optimize.hs:174

0x19E4  0x1A 0x2F       PUSHIB 0x2F
0x19E6  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:175

0x19E8  0x30 0x12       JB 0x19FA (+18)

                        // case Instruction.JNZB:                               Optimize.hs:176

0x19EA  0x1A 0x2F       PUSHIB 0x2F
0x19EC  0x4E            PUSHLOCALB00
0x19ED  0x05            EQ
0x19EE  0x2E 0x08       JZB 0x19F6 (+8)

                        // opCode = Instruction.JZB;                            Optimize.hs:178

0x19F0  0x1A 0x2E       PUSHIB 0x2E
0x19F2  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:179

0x19F4  0x30 0x06       JB 0x19FA (+6)

                        // Die(0x0B); // expected a conditional jump            Optimize.hs:182

0x19F6  0x1A 0x0B       PUSHIB 0x0B
0x19F8  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    Optimize.hs:184

0x19FA  0x28 0x02       DECSP 0x02

                        // return opCode;                                       Optimize.hs:185

0x19FC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19FE  0x2B 0x02       RETRETB 0x02


// Optimize.hs:215
// ####  Optimize.IsPUSHInstruction(..)  ####                                   0x0010

0x1A00  0x49            ENTER

                        // return (opCode == Instruction.PUSHIB)       || (opCode == Instruction.PUSHI0)       || (opCode == Instruction.PUSHI1) ||

0x1A01  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A03  0x1A 0x1A       PUSHIB 0x1A
0x1A05  0x05            EQ
0x1A06  0x27 0x00       DUP 0x00
0x1A08  0x32 0x77 0x00  JNZW 0x1A7F (+119)
0x1A0B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A0D  0x1A 0x44       PUSHIB 0x44
0x1A0F  0x05            EQ
0x1A10  0x0B            BOOLOR
0x1A11  0x27 0x00       DUP 0x00
0x1A13  0x2F 0x6C       JNZB 0x1A7F (+108)
0x1A15  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A17  0x1A 0x45       PUSHIB 0x45
0x1A19  0x05            EQ
0x1A1A  0x0B            BOOLOR
0x1A1B  0x27 0x00       DUP 0x00
0x1A1D  0x2F 0x62       JNZB 0x1A7F (+98)
0x1A1F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A21  0x1A 0x37       PUSHIB 0x37
0x1A23  0x05            EQ
0x1A24  0x0B            BOOLOR
0x1A25  0x27 0x00       DUP 0x00
0x1A27  0x2F 0x58       JNZB 0x1A7F (+88)
0x1A29  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A2B  0x1A 0x46       PUSHIB 0x46
0x1A2D  0x05            EQ
0x1A2E  0x0B            BOOLOR
0x1A2F  0x27 0x00       DUP 0x00
0x1A31  0x2F 0x4E       JNZB 0x1A7F (+78)
0x1A33  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A35  0x1A 0x1C       PUSHIB 0x1C
0x1A37  0x05            EQ
0x1A38  0x0B            BOOLOR
0x1A39  0x27 0x00       DUP 0x00
0x1A3B  0x2F 0x44       JNZB 0x1A7F (+68)
0x1A3D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A3F  0x1A 0x20       PUSHIB 0x20
0x1A41  0x05            EQ
0x1A42  0x0B            BOOLOR
0x1A43  0x27 0x00       DUP 0x00
0x1A45  0x2F 0x3A       JNZB 0x1A7F (+58)
0x1A47  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A49  0x1A 0x1E       PUSHIB 0x1E
0x1A4B  0x05            EQ
0x1A4C  0x0B            BOOLOR
0x1A4D  0x27 0x00       DUP 0x00
0x1A4F  0x2F 0x30       JNZB 0x1A7F (+48)
0x1A51  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A53  0x1A 0x39       PUSHIB 0x39
0x1A55  0x05            EQ
0x1A56  0x0B            BOOLOR
0x1A57  0x27 0x00       DUP 0x00
0x1A59  0x2F 0x26       JNZB 0x1A7F (+38)
0x1A5B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A5D  0x1A 0x3D       PUSHIB 0x3D
0x1A5F  0x05            EQ
0x1A60  0x0B            BOOLOR
0x1A61  0x27 0x00       DUP 0x00
0x1A63  0x2F 0x1C       JNZB 0x1A7F (+28)
0x1A65  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A67  0x1A 0x3B       PUSHIB 0x3B
0x1A69  0x05            EQ
0x1A6A  0x0B            BOOLOR
0x1A6B  0x27 0x00       DUP 0x00
0x1A6D  0x2F 0x12       JNZB 0x1A7F (+18)
0x1A6F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A71  0x1A 0x4E       PUSHIB 0x4E
0x1A73  0x05            EQ
0x1A74  0x0B            BOOLOR
0x1A75  0x27 0x00       DUP 0x00
0x1A77  0x2F 0x08       JNZB 0x1A7F (+8)
0x1A79  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A7B  0x1A 0x4F       PUSHIB 0x4F
0x1A7D  0x05            EQ
0x1A7E  0x0B            BOOLOR
0x1A7F  0x2B 0x02       RETRETB 0x02


// Optimize.hs:206
// ####  Optimize.IsUnconditionalJumpInstruction(..)  ####                      0x000E

0x1A81  0x49            ENTER

                        // return (opCode == Instruction.JB) || (opCode == Instruction.JW);

0x1A82  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A84  0x1A 0x30       PUSHIB 0x30
0x1A86  0x05            EQ
0x1A87  0x27 0x00       DUP 0x00
0x1A89  0x2F 0x08       JNZB 0x1A91 (+8)
0x1A8B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A8D  0x1A 0x33       PUSHIB 0x33
0x1A8F  0x05            EQ
0x1A90  0x0B            BOOLOR
0x1A91  0x2B 0x02       RETRETB 0x02


// Optimize.hs:197
// ####  Optimize.IsJumpBInstruction(..)  ####                                  0x000C

0x1A93  0x49            ENTER

                        // return ((opCode == Instruction.JB) || (opCode == Instruction.JZB) || (opCode == Instruction.JNZB));

0x1A94  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A96  0x1A 0x30       PUSHIB 0x30
0x1A98  0x05            EQ
0x1A99  0x27 0x00       DUP 0x00
0x1A9B  0x2F 0x12       JNZB 0x1AAD (+18)
0x1A9D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A9F  0x1A 0x2E       PUSHIB 0x2E
0x1AA1  0x05            EQ
0x1AA2  0x0B            BOOLOR
0x1AA3  0x27 0x00       DUP 0x00
0x1AA5  0x2F 0x08       JNZB 0x1AAD (+8)
0x1AA7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AA9  0x1A 0x2F       PUSHIB 0x2F
0x1AAB  0x05            EQ
0x1AAC  0x0B            BOOLOR
0x1AAD  0x2B 0x02       RETRETB 0x02


// Optimize.hs:210
// ####  Optimize.IsMethodExitInstruction(..)  ####                             0x000F

0x1AAF  0x49            ENTER

                        // return (opCode == Instruction.RETB) || (opCode == Instruction.RET0)    || (opCode == Instruction.RETRETB) ||

0x1AB0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AB2  0x1A 0x2A       PUSHIB 0x2A
0x1AB4  0x05            EQ
0x1AB5  0x27 0x00       DUP 0x00
0x1AB7  0x2F 0x30       JNZB 0x1AE7 (+48)
0x1AB9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1ABB  0x1A 0x4A       PUSHIB 0x4A
0x1ABD  0x05            EQ
0x1ABE  0x0B            BOOLOR
0x1ABF  0x27 0x00       DUP 0x00
0x1AC1  0x2F 0x26       JNZB 0x1AE7 (+38)
0x1AC3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AC5  0x1A 0x2B       PUSHIB 0x2B
0x1AC7  0x05            EQ
0x1AC8  0x0B            BOOLOR
0x1AC9  0x27 0x00       DUP 0x00
0x1ACB  0x2F 0x1C       JNZB 0x1AE7 (+28)
0x1ACD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1ACF  0x1A 0x35       PUSHIB 0x35
0x1AD1  0x05            EQ
0x1AD2  0x0B            BOOLOR
0x1AD3  0x27 0x00       DUP 0x00
0x1AD5  0x2F 0x12       JNZB 0x1AE7 (+18)
0x1AD7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AD9  0x1A 0x36       PUSHIB 0x36
0x1ADB  0x05            EQ
0x1ADC  0x0B            BOOLOR
0x1ADD  0x27 0x00       DUP 0x00
0x1ADF  0x2F 0x08       JNZB 0x1AE7 (+8)
0x1AE1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AE3  0x1A 0x29       PUSHIB 0x29
0x1AE5  0x05            EQ
0x1AE6  0x0B            BOOLOR
0x1AE7  0x2B 0x02       RETRETB 0x02


// Optimize.hs:360
// ####  Optimize.WalkCode(..)  ####                                            0x0015


                        // uint length = instructions.Length;                   Optimize.hs:361

0x1AE9  0x5F 0x01       ENTERB 0x01

                        // uint length = instructions.Length;                   Optimize.hs:361

0x1AEB  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1AED  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1AEF  0x4C            POPLOCALB00

                        // if (iIndex > length)                                 Optimize.hs:364

0x1AF0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AF2  0x4E            PUSHLOCALB00
0x1AF3  0x07            GT
0x1AF4  0x2E 0x04       JZB 0x1AF8 (+4)

                        // break;                                               Optimize.hs:366

0x1AF6  0x2A 0x08       RETB 0x08

                        // if (instructionsReached[iIndex])                     Optimize.hs:368

0x1AF8  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x1AFA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1AFC  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1AFE  0x2E 0x04       JZB 0x1B02 (+4)

                        // break;                                               Optimize.hs:370

0x1B00  0x2A 0x08       RETB 0x08

                        // instructionsReached.SetItem(iIndex, true);           Optimize.hs:372

0x1B02  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x1B04  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B06  0x45            PUSHI1
0x1B07  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // <uint> instructionList = instructions[iIndex];

0x1B09  0x1A 0x04       PUSHIB 0x04
0x1B0B  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1B0D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1B0F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B11  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B13  0x5E            POPCOPYLOCALB02

                        // Instruction opCode = Instruction(instructionList[0]);

0x1B14  0x44            PUSHI0
0x1B15  0x4F            PUSHLOCALB02
0x1B16  0x44            PUSHI0
0x1B17  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B19  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (IsConditionalJumpInstruction(opCode))            Optimize.hs:375

0x1B1B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B1D  0x2C 0x0D       CALLB 0x0D     // Optimize.IsConditionalJumpInstruction
0x1B1F  0x2E 0x15       JZB 0x1B34 (+21)

                        // uint iJumpTarget = instructionList[2];               Optimize.hs:378

0x1B21  0x44            PUSHI0
0x1B22  0x4F            PUSHLOCALB02
0x1B23  0x1A 0x02       PUSHIB 0x02
0x1B25  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B27  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // WalkCode(ref instructions, ref instructionsReached, iJumpTarget);

0x1B29  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x1B2C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1B2E  0x2C 0x15       CALLB 0x15     // Optimize.WalkCode

                        // }                                                    Optimize.hs:381

0x1B30  0x28 0x02       DECSP 0x02
0x1B32  0x30 0x28       JB 0x1B5A (+40)

                        // else if ((opCode == Instruction.JW) || (opCode == Instruction.JB))

0x1B34  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B36  0x1A 0x33       PUSHIB 0x33
0x1B38  0x05            EQ
0x1B39  0x27 0x00       DUP 0x00
0x1B3B  0x2F 0x08       JNZB 0x1B43 (+8)
0x1B3D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B3F  0x1A 0x30       PUSHIB 0x30
0x1B41  0x05            EQ
0x1B42  0x0B            BOOLOR
0x1B43  0x2E 0x0D       JZB 0x1B50 (+13)

                        // iIndex = instructionList[2];                         Optimize.hs:385

0x1B45  0x4F            PUSHLOCALB02
0x1B46  0x1A 0x02       PUSHIB 0x02
0x1B48  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B4A  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // continue;                                            Optimize.hs:386

0x1B4C  0x28 0x04       DECSP 0x04
0x1B4E  0x30 0xA2       JB 0x1AF0 (-94)

                        // else if (IsMethodExitInstruction(opCode))            Optimize.hs:388

0x1B50  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B52  0x2C 0x0F       CALLB 0x0F     // Optimize.IsMethodExitInstruction
0x1B54  0x2E 0x06       JZB 0x1B5A (+6)

                        // break; // end of this path                           Optimize.hs:390

0x1B56  0x28 0x04       DECSP 0x04
0x1B58  0x2A 0x08       RETB 0x08

                        // iIndex++;                                            Optimize.hs:392

0x1B5A  0x22 0xFE       INCLOCALB 0xFE (BP-2)

                        // }                                                    Optimize.hs:393

0x1B5C  0x28 0x04       DECSP 0x04
0x1B5E  0x30 0x92       JB 0x1AF0 (-110)


// Optimize.hs:79
// ####  Optimize.AdjustJumps(..)  ####                                         0x0004


                        // uint iIndex = 0;                                     Optimize.hs:80

0x1B60  0x5F 0x02       ENTERB 0x02

                        // uint instructionsLength = instructions.Length;

0x1B62  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1B64  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1B66  0x4D            POPLOCALB02

                        // if (iIndex == instructionsLength)                    Optimize.hs:84

0x1B67  0x4E            PUSHLOCALB00
0x1B68  0x4F            PUSHLOCALB02
0x1B69  0x05            EQ
0x1B6A  0x2E 0x04       JZB 0x1B6E (+4)

                        // break;                                               Optimize.hs:86

0x1B6C  0x2A 0x0A       RETB 0x0A

                        // <uint> instructionList = instructions[iIndex];

0x1B6E  0x1A 0x04       PUSHIB 0x04
0x1B70  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1B72  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1B74  0x4E            PUSHLOCALB00
0x1B75  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B77  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Instruction opCode = Instruction(instructionList[0]);

0x1B79  0x44            PUSHI0
0x1B7A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B7C  0x44            PUSHI0
0x1B7D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B7F  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (Instructions.OperandIsAddressOffset(opCode))

0x1B81  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1B83  0x2C 0xAE       CALLB 0xAE     // Instructions.OperandIsAddressOffset
0x1B85  0x2E 0x2D       JZB 0x1BB2 (+45)

                        // uint iTarget = instructionList[2];                   Optimize.hs:92

0x1B87  0x44            PUSHI0
0x1B88  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1B8A  0x1A 0x02       PUSHIB 0x02
0x1B8C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1B8E  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (iTarget > iMargin)                               Optimize.hs:93

0x1B90  0x56 0x08 0xFC  PUSHLOCALBB 0xFC08
0x1B93  0x07            GT
0x1B94  0x2E 0x0D       JZB 0x1BA1 (+13)

                        // iTarget = uint(int(iTarget) + delta);                Optimize.hs:95

0x1B96  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1B98  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x1B9A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B9C  0x11            ADDI
0x1B9D  0x51 0x04       CAST 0x04
0x1B9F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // instructionList.SetItem(2, iTarget);                 Optimize.hs:97

0x1BA1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1BA3  0x1A 0x02       PUSHIB 0x02
0x1BA5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1BA7  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // instructions.SetItem(iIndex, instructionList);

0x1BA9  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1BAB  0x4E            PUSHLOCALB00
0x1BAC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1BAE  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    Optimize.hs:99

0x1BB0  0x28 0x02       DECSP 0x02

                        // iIndex++;                                            Optimize.hs:100

0x1BB2  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // }                                                    Optimize.hs:101

0x1BB4  0x28 0x04       DECSP 0x04
0x1BB6  0x30 0xB1       JB 0x1B67 (-79)


// Optimize.hs:49
// ####  Optimize.AdjustDebugIndices(..)  ####                                  0x0003

0x1BB8  0x49            ENTER

                        // if (delta >= 0)                                      Optimize.hs:52

0x1BB9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1BBB  0x44            PUSHI0
0x1BBC  0x18            GEI
0x1BBD  0x2E 0x06       JZB 0x1BC3 (+6)

                        // Die(0x0B);                                           Optimize.hs:54

0x1BBF  0x1A 0x0B       PUSHIB 0x0B
0x1BC1  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // <uint,string> oldDebugInfo = indexDebugInfo;

0x1BC3  0x1A 0x04       PUSHIB 0x04
0x1BC5  0x1A 0x0F       PUSHIB 0x0F
0x1BC7  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1BC9  0x1E 0xF6       PUSHRELB 0xF6 (BP-10)
0x1BCB  0x5D            POPCOPYLOCALB00

                        // indexDebugInfo.Clear();                              Optimize.hs:57

0x1BCC  0x1E 0xF6       PUSHRELB 0xF6 (BP-10)
0x1BCE  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // uint iLow = 10000;                                   Optimize.hs:58

0x1BD0  0x44            PUSHI0
0x1BD1  0x37 0x10 0x27  PUSHIW 0x2710
0x1BD4  0x4D            POPLOCALB02

                        // foreach (var kv in oldDebugInfo)                     Optimize.hs:59

0x1BD5  0x4E            PUSHLOCALB00
0x1BD6  0x1A 0x04       PUSHIB 0x04
0x1BD8  0x1A 0x04       PUSHIB 0x04
0x1BDA  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x1BDC  0x44            PUSHI0
0x1BDD  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x1BE0  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x1BE2  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x1BE4  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x1BE6  0x2E 0x36       JZB 0x1C1C (+54)

                        // uint iIndex = kv.key;                                Optimize.hs:61

0x1BE8  0x44            PUSHI0
0x1BE9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1BEB  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x1BED  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // string ln   = kv.value;                              Optimize.hs:62

0x1BEF  0x24 0x02       SYSCALL0 0x02  // String.New
0x1BF1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1BF3  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x1BF5  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // if (iIndex < iLow)                                   Optimize.hs:63

0x1BF7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1BF9  0x4F            PUSHLOCALB02
0x1BFA  0x08            LT
0x1BFB  0x2E 0x05       JZB 0x1C00 (+5)

                        // iLow = iIndex;                                       Optimize.hs:65

0x1BFD  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1BFF  0x4D            POPLOCALB02

                        // if (iIndex > iMargin)                                Optimize.hs:67

0x1C00  0x56 0x0A 0xF8  PUSHLOCALBB 0xF80A
0x1C03  0x07            GT
0x1C04  0x2E 0x0D       JZB 0x1C11 (+13)

                        // iIndex = uint(int(iIndex) + delta);                  Optimize.hs:69

0x1C06  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1C08  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x1C0A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1C0C  0x11            ADDI
0x1C0D  0x51 0x04       CAST 0x04
0x1C0F  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // indexDebugInfo[iIndex] = ln;                         Optimize.hs:71

0x1C11  0x1E 0xF6       PUSHRELB 0xF6 (BP-10)
0x1C13  0x56 0x0A 0x0C  PUSHLOCALBB 0x0C0A
0x1C16  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    Optimize.hs:72

0x1C18  0x28 0x04       DECSP 0x04
0x1C1A  0x30 0xC3       JB 0x1BDD (-61)
0x1C1C  0x28 0x06       DECSP 0x06

                        // if (foldENTER)                                       Optimize.hs:73

0x1C1E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C20  0x2E 0x0C       JZB 0x1C2C (+12)

                        // indexDebugInfo[iEnter] = oldDebugInfo[iLow];

0x1C22  0x1E 0xF6       PUSHRELB 0xF6 (BP-10)
0x1C24  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1C26  0x4E            PUSHLOCALB00
0x1C27  0x4F            PUSHLOCALB02
0x1C28  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1C2A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    Optimize.hs:77

0x1C2C  0x2A 0x0E       RETB 0x0E


// /source/system/string.hs:489
// ####  String.ToLower(..)  ####                                               0x00F1


                        // uint i;                                              string.hs:490

0x1C2E  0x5F 0x03       ENTERB 0x03

                        // string result;                                       string.hs:493

0x1C30  0x24 0x02       SYSCALL0 0x02  // String.New

                        // length = this.Length;                                string.hs:494

0x1C32  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1C34  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1C36  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (; i < length; i++)                              string.hs:495

0x1C38  0x4E            PUSHLOCALB00
0x1C39  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1C3B  0x08            LT
0x1C3C  0x2E 0x13       JZB 0x1C4F (+19)

                        // c = this[i];                                         string.hs:497

0x1C3E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1C40  0x4E            PUSHLOCALB00
0x1C41  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1C43  0x4D            POPLOCALB02

                        // Build(ref result, c.ToLower());                      string.hs:498

0x1C44  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x1C46  0x4F            PUSHLOCALB02
0x1C47  0x2C 0xBA       CALLB 0xBA     // Char.ToLower
0x1C49  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    string.hs:499

0x1C4B  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x1C4D  0x30 0xEB       JB 0x1C38 (-21)

                        // return result;                                       string.hs:500

0x1C4F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1C51  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:320
// ####  Token.TryParseUInt(..)  ####                                           0x0079


                        // bool success;                                        token.hs:321

0x1C53  0x5F 0x01       ENTERB 0x01

                        // long rv;                                             token.hs:322

0x1C55  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (TryParseLong(content, ref rv))                   token.hs:323

0x1C57  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C59  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x1C5B  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x1C5D  0x2E 0x1E       JZB 0x1C7B (+30)

                        // if ((rv >= 0) && (rv <= 65535))                      token.hs:325

0x1C5F  0x4F            PUSHLOCALB02
0x1C60  0x44            PUSHI0
0x1C61  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1C63  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x1C65  0x27 0x00       DUP 0x00
0x1C67  0x2E 0x0B       JZB 0x1C72 (+11)
0x1C69  0x4F            PUSHLOCALB02
0x1C6A  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0x1C6D  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1C6F  0x24 0x46       SYSCALL0 0x46  // Long.LE
0x1C71  0x0C            BOOLAND
0x1C72  0x2E 0x09       JZB 0x1C7B (+9)

                        // returnValue = uint(rv);                              token.hs:327

0x1C74  0x4F            PUSHLOCALB02
0x1C75  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x1C77  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // success = true;                                      token.hs:328

0x1C79  0x45            PUSHI1
0x1C7A  0x4C            POPLOCALB00

                        // return success;                                      token.hs:331

0x1C7B  0x4E            PUSHLOCALB00
0x1C7C  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:273
// ####  Token.TryParseLong(..)  ####                                           0x0077

0x1C7E  0x49            ENTER

                        // long result;                                         token.hs:274

0x1C7F  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // bool makeNegative;                                   token.hs:275

0x1C81  0x44            PUSHI0

                        // if (content.Length < 1)                              token.hs:276

0x1C82  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C84  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1C86  0x45            PUSHI1
0x1C87  0x08            LT
0x1C88  0x2E 0x05       JZB 0x1C8D (+5)

                        // return false;                                        token.hs:278

0x1C8A  0x44            PUSHI0
0x1C8B  0x2B 0x08       RETRETB 0x08

                        // if (content.StartsWith('+'))                         token.hs:280

0x1C8D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C8F  0x1A 0x2B       PUSHIB 0x2B
0x1C91  0x2C 0xE3       CALLB 0xE3     // String.StartsWith
0x1C93  0x2E 0x0B       JZB 0x1C9E (+11)

                        // content = content.Substring(1);                      token.hs:282

0x1C95  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C97  0x45            PUSHI1
0x1C98  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x1C9A  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    token.hs:283

0x1C9C  0x30 0x13       JB 0x1CAF (+19)

                        // else if (content.StartsWith('-'))                    token.hs:284

0x1C9E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CA0  0x1A 0x2D       PUSHIB 0x2D
0x1CA2  0x2C 0xE3       CALLB 0xE3     // String.StartsWith
0x1CA4  0x2E 0x0B       JZB 0x1CAF (+11)

                        // content = content.Substring(1);                      token.hs:286

0x1CA6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CA8  0x45            PUSHI1
0x1CA9  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x1CAB  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // makeNegative = true;                                 token.hs:287

0x1CAD  0x45            PUSHI1
0x1CAE  0x4D            POPLOCALB02

                        // foreach (var c in content)                           token.hs:289

0x1CAF  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CB1  0x44            PUSHI0
0x1CB2  0x44            PUSHI0
0x1CB3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1CB5  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1CB7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1CB9  0x05            EQ
0x1CBA  0x2F 0x29       JNZB 0x1CE3 (+41)
0x1CBC  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x1CBF  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1CC1  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // result = result * 10;                                token.hs:291

0x1CC3  0x4E            PUSHLOCALB00
0x1CC4  0x1A 0x0A       PUSHIB 0x0A
0x1CC6  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1CC8  0x24 0x42       SYSCALL0 0x42  // Long.Mul
0x1CCA  0x5D            POPCOPYLOCALB00

                        // if (!c.IsDigit())                                    token.hs:292

0x1CCB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1CCD  0x2C 0xB7       CALLB 0xB7     // Char.IsDigit
0x1CCF  0x2F 0x05       JNZB 0x1CD4 (+5)

                        // return false;                                        token.hs:294

0x1CD1  0x44            PUSHI0
0x1CD2  0x2B 0x0E       RETRETB 0x0E

                        // result = result + (byte(c) - 48); // 48 is ASCII for '0'

0x1CD4  0x4E            PUSHLOCALB00
0x1CD5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1CD7  0x1A 0x30       PUSHIB 0x30
0x1CD9  0x01            SUB
0x1CDA  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1CDC  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x1CDE  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:297

0x1CDF  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x1CE1  0x30 0xD2       JB 0x1CB3 (-46)
0x1CE3  0x28 0x06       DECSP 0x06

                        // if (makeNegative)                                    token.hs:298

0x1CE5  0x4F            PUSHLOCALB02
0x1CE6  0x2E 0x06       JZB 0x1CEC (+6)

                        // result = -result;                                    token.hs:300

0x1CE8  0x4E            PUSHLOCALB00
0x1CE9  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0x1CEB  0x5D            POPCOPYLOCALB00

                        // returnValue = result;                                token.hs:302

0x1CEC  0x4E            PUSHLOCALB00
0x1CED  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return true;                                         token.hs:303

0x1CEF  0x45            PUSHI1
0x1CF0  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/parser.hs:27
// ####  Parser.SetInteractive(..)  ####                                        0x0093

0x1CF2  0x49            ENTER

                        // tickColumn = column;                                 parser.hs:28

0x1CF3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CF5  0x1F 0x52       POPGLOBALB 0x52

                        // tickRow = row;                                       parser.hs:29

0x1CF7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1CF9  0x1F 0x50       POPGLOBALB 0x50

                        // interactive = true;                                  parser.hs:30

0x1CFB  0x45            PUSHI1
0x1CFC  0x1F 0x48       POPGLOBALB 0x48

                        // File.Delete(errorPath);                              parser.hs:31

0x1CFE  0x1A 0xB3       PUSHIB 0xB3
0x1D00  0x1A 0x10       PUSHIB 0x10
0x1D02  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D04  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // errorFile = File.Create(errorPath);                  parser.hs:32

0x1D06  0x1A 0xB3       PUSHIB 0xB3
0x1D08  0x1A 0x10       PUSHIB 0x10
0x1D0A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D0C  0x24 0x62       SYSCALL0 0x62  // File.Create
0x1D0E  0x59 0x4C       POPCOPYGLOBALB 0x4C

                        // currentTick = 0;                                     parser.hs:33

0x1D10  0x44            PUSHI0
0x1D11  0x1F 0x4E       POPGLOBALB 0x4E

                        // Diagnostics.SetError(0x00);                          parser.hs:34

0x1D13  0x44            PUSHI0
0x1D14  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:35

0x1D16  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:37
// ####  Parser.IsInteractive(..)  ####                                         0x0094

0x1D18  0x49            ENTER

                        // return interactive;                                  parser.hs:38

0x1D19  0x20 0x48       PUSHGLOBALB 0x48
0x1D1B  0x4A            RET0


// /source/compiler/tokens/parser.hs:74
// ####  Parser.ProgressDone(..)  ####                                          0x0097

0x1D1C  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:75

0x1D1D  0x2C 0x94       CALLB 0x94     // Parser.IsInteractive
0x1D1F  0x2E 0x0F       JZB 0x1D2E (+15)

                        // DrawChar(tickColumn, tickRow, ' ', Color.ProgressText, Color.ProgressFace);

0x1D21  0x52 0x52 0x50  PUSHGLOBALBB 0x5052
0x1D24  0x1A 0x20       PUSHIB 0x20
0x1D26  0x34 0x42 0x01  CALLW 0x0142   // Color.ProgressText_Get
0x1D29  0x34 0x43 0x01  CALLW 0x0143   // Color.ProgressFace_Get
0x1D2C  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // }                                                    parser.hs:79

0x1D2E  0x4A            RET0


// /source/compiler/tokens/parser.hs:57
// ####  Parser.ProgressTick(..)  ####                                          0x0096

0x1D2F  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:58

0x1D30  0x2C 0x94       CALLB 0x94     // Parser.IsInteractive
0x1D32  0x2E 0x26       JZB 0x1D58 (+38)

                        // char c = progressTicks[currentTick];                 parser.hs:60

0x1D34  0x44            PUSHI0
0x1D35  0x52 0x4A 0x4E  PUSHGLOBALBB 0x4E4A
0x1D38  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1D3A  0x4C            POPLOCALB00

                        // DrawChar(tickColumn, tickRow, c, Color.StatusText, Color.StatusFace);

0x1D3B  0x52 0x52 0x50  PUSHGLOBALBB 0x5052
0x1D3E  0x4E            PUSHLOCALB00
0x1D3F  0x34 0x54 0x01  CALLW 0x0154   // Color.StatusText_Get
0x1D42  0x34 0x53 0x01  CALLW 0x0153   // Color.StatusFace_Get
0x1D45  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // currentTick++;                                       parser.hs:62

0x1D47  0x53 0x4E       INCGLOBALB 0x4E

                        // if (currentTick == progressTicks.Length)             parser.hs:63

0x1D49  0x52 0x4E 0x4A  PUSHGLOBALBB 0x4A4E
0x1D4C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1D4E  0x05            EQ
0x1D4F  0x2E 0x05       JZB 0x1D54 (+5)

                        // currentTick = 0;                                     parser.hs:65

0x1D51  0x44            PUSHI0
0x1D52  0x1F 0x4E       POPGLOBALB 0x4E

                        // }                                                    parser.hs:67

0x1D54  0x28 0x02       DECSP 0x02
0x1D56  0x2A 0x02       RETB 0x02

                        // Print(str, Color.ProgressTick, Color.ProgressBackground);

0x1D58  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1D5A  0x34 0x40 0x01  CALLW 0x0140   // Color.ProgressTick_Get
0x1D5D  0x34 0x41 0x01  CALLW 0x0141   // Color.ProgressBackground_Get
0x1D60  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // }                                                    parser.hs:72

0x1D62  0x2A 0x02       RETB 0x02


// /source/system/file.hs:18
// ####  File.Exists(..)  ####                                                  0x0115

0x1D64  0x49            ENTER

                        // if (!File.Exists(filePath))                          file.hs:19

0x1D65  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1D67  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x1D69  0x2F 0x4C       JNZB 0x1DB5 (+76)

                        // string rawPath = filePath;                           file.hs:21

0x1D6B  0x24 0x02       SYSCALL0 0x02  // String.New
0x1D6D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1D6F  0x5D            POPCOPYLOCALB00

                        // string ext = Path.GetExtension(rawPath);             file.hs:22

0x1D70  0x24 0x02       SYSCALL0 0x02  // String.New
0x1D72  0x4E            PUSHLOCALB00
0x1D73  0x34 0x1A 0x01  CALLW 0x011A   // Path.GetExtension
0x1D76  0x5E            POPCOPYLOCALB02

                        // if (ext == ".")                                      file.hs:23

0x1D77  0x4F            PUSHLOCALB02
0x1D78  0x1A 0x2E       PUSHIB 0x2E
0x1D7A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D7C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1D7E  0x2F 0x24       JNZB 0x1DA2 (+36)

                        // filePath = rawPath + extension;                      file.hs:26

0x1D80  0x4E            PUSHLOCALB00
0x1D81  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x1D83  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D85  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:27

0x1D87  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1D89  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x1D8B  0x2F 0x28       JNZB 0x1DB3 (+40)

                        // filePath = Path.Combine(searchFolder, rawPath + extension);

0x1D8D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1D8F  0x4E            PUSHLOCALB00
0x1D90  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x1D92  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D94  0x34 0x19 0x01  CALLW 0x0119   // Path.Combine
0x1D97  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:31

0x1D99  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1D9B  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x1D9D  0x2F 0x16       JNZB 0x1DB3 (+22)

                        // return false;                                        file.hs:33

0x1D9F  0x44            PUSHI0
0x1DA0  0x2B 0x0A       RETRETB 0x0A

                        // filePath = Path.Combine(searchFolder, rawPath);

0x1DA2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DA4  0x4E            PUSHLOCALB00
0x1DA5  0x34 0x19 0x01  CALLW 0x0119   // Path.Combine
0x1DA8  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:41

0x1DAA  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1DAC  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x1DAE  0x2F 0x05       JNZB 0x1DB3 (+5)

                        // return false;                                        file.hs:43

0x1DB0  0x44            PUSHI0
0x1DB1  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    file.hs:46

0x1DB3  0x28 0x04       DECSP 0x04

                        // extension = Path.GetExtension(filePath);             file.hs:47

0x1DB5  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x1DB7  0x34 0x1A 0x01  CALLW 0x011A   // Path.GetExtension
0x1DBA  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // return true;                                         file.hs:48

0x1DBC  0x45            PUSHI1
0x1DBD  0x2B 0x06       RETRETB 0x06


// /source/system/path.hs:94
// ####  Path.GetExtension(..)  ####                                            0x011A


                        // uint iDot;                                           path.hs:95

0x1DBF  0x5F 0x02       ENTERB 0x02

                        // string extension;                                    path.hs:98

0x1DC1  0x24 0x02       SYSCALL0 0x02  // String.New

                        // extension = "."; // empty "."                        path.hs:101

0x1DC3  0x1A 0x2E       PUSHIB 0x2E
0x1DC5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1DC7  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (path.LastIndexOf('.', ref iDot))                 path.hs:102

0x1DC9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DCB  0x1A 0x2E       PUSHIB 0x2E
0x1DCD  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x1DCF  0x2C 0xEC       CALLB 0xEC     // String.LastIndexOf
0x1DD1  0x2E 0x18       JZB 0x1DE9 (+24)

                        // if (path.LastIndexOf('/', ref iSlash))               path.hs:104

0x1DD3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DD5  0x1A 0x2F       PUSHIB 0x2F
0x1DD7  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x1DD9  0x2C 0xEC       CALLB 0xEC     // String.LastIndexOf
0x1DDB  0x2E 0x07       JZB 0x1DE2 (+7)

                        // if (iSlash > iDot)                                   path.hs:106

0x1DDD  0x4F            PUSHLOCALB02
0x1DDE  0x4E            PUSHLOCALB00
0x1DDF  0x07            GT
0x1DE0  0x2F 0x09       JNZB 0x1DE9 (+9)

                        // extension = path.Substring(iDot);                    path.hs:111

0x1DE2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DE4  0x4E            PUSHLOCALB00
0x1DE5  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x1DE7  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // return extension;                                    path.hs:115

0x1DE9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1DEB  0x2B 0x08       RETRETB 0x08


// /source/system/path.hs:66
// ####  Path.Combine(..)  ####                                                 0x0119


                        // uint length;                                         path.hs:67

0x1DED  0x5F 0x01       ENTERB 0x01

                        // string resultPath;                                   path.hs:68

0x1DEF  0x24 0x02       SYSCALL0 0x02  // String.New

                        // resultPath = partOne;                                path.hs:69

0x1DF1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1DF3  0x5E            POPCOPYLOCALB02

                        // length = resultPath.Length;                          path.hs:70

0x1DF4  0x4F            PUSHLOCALB02
0x1DF5  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1DF7  0x4C            POPLOCALB00

                        // if ((length > 0) && (resultPath[length - 1] == '/'))

0x1DF8  0x4E            PUSHLOCALB00
0x1DF9  0x44            PUSHI0
0x1DFA  0x07            GT
0x1DFB  0x27 0x00       DUP 0x00
0x1DFD  0x2E 0x0C       JZB 0x1E09 (+12)
0x1DFF  0x4F            PUSHLOCALB02
0x1E00  0x4E            PUSHLOCALB00
0x1E01  0x45            PUSHI1
0x1E02  0x01            SUB
0x1E03  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1E05  0x1A 0x2F       PUSHIB 0x2F
0x1E07  0x05            EQ
0x1E08  0x0C            BOOLAND
0x1E09  0x2F 0x08       JNZB 0x1E11 (+8)

                        // resultPath = resultPath + '/'; // append trailing slash

0x1E0B  0x4F            PUSHLOCALB02
0x1E0C  0x1A 0x2F       PUSHIB 0x2F
0x1E0E  0x25 0x03       SYSCALL1 0x03  // String.Append
0x1E10  0x5E            POPCOPYLOCALB02

                        // if ((0 != partTwo.Length) && (partTwo[0] == '/'))

0x1E11  0x44            PUSHI0
0x1E12  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1E14  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1E16  0x06            NE
0x1E17  0x27 0x00       DUP 0x00
0x1E19  0x2E 0x0B       JZB 0x1E24 (+11)
0x1E1B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1E1D  0x44            PUSHI0
0x1E1E  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1E20  0x1A 0x2F       PUSHIB 0x2F
0x1E22  0x05            EQ
0x1E23  0x0C            BOOLAND
0x1E24  0x2E 0x15       JZB 0x1E39 (+21)

                        // if (partTwo.Length > 1)                              path.hs:82

0x1E26  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1E28  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1E2A  0x45            PUSHI1
0x1E2B  0x07            GT
0x1E2C  0x2E 0x13       JZB 0x1E3F (+19)

                        // resultPath = resultPath + partTwo.Substring(1);

0x1E2E  0x4F            PUSHLOCALB02
0x1E2F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1E31  0x45            PUSHI1
0x1E32  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x1E34  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1E36  0x5E            POPCOPYLOCALB02

                        // }                                                    path.hs:86

0x1E37  0x30 0x08       JB 0x1E3F (+8)

                        // resultPath = resultPath + partTwo;                   path.hs:89

0x1E39  0x4F            PUSHLOCALB02
0x1E3A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1E3C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1E3E  0x5E            POPCOPYLOCALB02

                        // return resultPath;                                   path.hs:91

0x1E3F  0x4F            PUSHLOCALB02
0x1E40  0x2B 0x08       RETRETB 0x08


// /source/compiler/json/code.hs:943
// ####  Code.ParseCode(..)  ####                                               0x006B


                        // bool success;                                        code.hs:944

0x1E42  0x5F 0x01       ENTERB 0x01

                        // long pos;                                            code.hs:945

0x1E44  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // bool first;                                          code.hs:946

0x1E46  0x44            PUSHI0

                        // Scanner.New();                                       code.hs:949

0x1E47  0x2C 0x80       CALLB 0x80     // Scanner.New

                        // Parser.Reset();                                      code.hs:950

0x1E49  0x2C 0x9D       CALLB 0x9D     // Parser.Reset

                        // Scanner.Load(codePath);                              code.hs:951

0x1E4B  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x1E4D  0x2C 0x81       CALLB 0x81     // Scanner.Load

                        // Scanner.Reset(pos, 1, codePath);                     code.hs:952

0x1E4F  0x4F            PUSHLOCALB02
0x1E50  0x45            PUSHI1
0x1E51  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x1E53  0x2C 0x82       CALLB 0x82     // Scanner.Reset

                        // Parser.Advance(); // load up first token             code.hs:954

0x1E55  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:955

0x1E57  0x1A 0x12       PUSHIB 0x12
0x1E59  0x1A 0x7B       PUSHIB 0x7B
0x1E5B  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // first = true;                                        code.hs:956

0x1E5D  0x45            PUSHI1
0x1E5E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Parser.HadError)                                 code.hs:959

0x1E60  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1E62  0x32 0x33 0x02  JNZW 0x2095 (+563)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:963

0x1E65  0x1A 0x13       PUSHIB 0x13
0x1E67  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x1E69  0x32 0x2C 0x02  JNZW 0x2095 (+556)

                        // if (!first)                                          code.hs:967

0x1E6C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1E6E  0x2F 0x08       JNZB 0x1E76 (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              code.hs:969

0x1E70  0x1A 0x0D       PUSHIB 0x0D
0x1E72  0x1A 0x2C       PUSHIB 0x2C
0x1E74  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // first = false;                                       code.hs:971

0x1E76  0x44            PUSHI0
0x1E77  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // Parser.Consume(HopperToken.StringConstant, "method index expected");

0x1E79  0x1A 0x0B       PUSHIB 0x0B
0x1E7B  0x1A 0xC3       PUSHIB 0xC3
0x1E7D  0x1A 0x15       PUSHIB 0x15
0x1E7F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E81  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:973

0x1E83  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1E85  0x32 0x10 0x02  JNZW 0x2095 (+528)

                        // <string,string> previousToken = PreviousToken;

0x1E88  0x1A 0x0F       PUSHIB 0x0F
0x1E8A  0x1A 0x0F       PUSHIB 0x0F
0x1E8C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E8E  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x1E90  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string methodIndex = previousToken["lexeme"];

0x1E92  0x24 0x02       SYSCALL0 0x02  // String.New
0x1E94  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1E96  0x1A 0xD8       PUSHIB 0xD8
0x1E98  0x1A 0x06       PUSHIB 0x06
0x1E9A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E9C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1E9E  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:979

0x1EA0  0x1A 0x0E       PUSHIB 0x0E
0x1EA2  0x1A 0x3A       PUSHIB 0x3A
0x1EA4  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:980

0x1EA6  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1EA8  0x2E 0x07       JZB 0x1EAF (+7)

                        // break;                                               code.hs:982

0x1EAA  0x28 0x04       DECSP 0x04
0x1EAC  0x33 0xE9 0x01  JW 0x2095 (+489)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:984

0x1EAF  0x1A 0x12       PUSHIB 0x12
0x1EB1  0x1A 0x7B       PUSHIB 0x7B
0x1EB3  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:985

0x1EB5  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1EB7  0x2E 0x07       JZB 0x1EBE (+7)

                        // break;                                               code.hs:987

0x1EB9  0x28 0x04       DECSP 0x04
0x1EBB  0x33 0xDA 0x01  JW 0x2095 (+474)

                        // if (methodIndex == "globals")                        code.hs:990

0x1EBE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1EC0  0x1A 0xDE       PUSHIB 0xDE
0x1EC2  0x1A 0x07       PUSHIB 0x07
0x1EC4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EC6  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1EC8  0x32 0x4B 0x01  JNZW 0x2013 (+331)

                        // <string, variant > globalLists;                      code.hs:992

0x1ECB  0x1A 0x0F       PUSHIB 0x0F
0x1ECD  0x1A 0x14       PUSHIB 0x14
0x1ECF  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // bool fc = true;                                      code.hs:993

0x1ED1  0x44            PUSHI0
0x1ED2  0x45            PUSHI1
0x1ED3  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 code.hs:996

0x1ED5  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1ED7  0x32 0x27 0x01  JNZW 0x1FFE (+295)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:1000

0x1EDA  0x1A 0x13       PUSHIB 0x13
0x1EDC  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x1EDE  0x2E 0x07       JZB 0x1EE5 (+7)

                        // Parser.Advance(); // }                               code.hs:1002

0x1EE0  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:1003

0x1EE2  0x33 0x1C 0x01  JW 0x1FFE (+284)

                        // if (!fc)                                             code.hs:1005

0x1EE5  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1EE7  0x2F 0x11       JNZB 0x1EF8 (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x1EE9  0x1A 0x0D       PUSHIB 0x0D
0x1EEB  0x1A 0xE5       PUSHIB 0xE5
0x1EED  0x1A 0x12       PUSHIB 0x12
0x1EEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EF1  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1008

0x1EF3  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1EF5  0x32 0x09 0x01  JNZW 0x1FFE (+265)

                        // Parser.Consume(HopperToken.StringConstant, "global offset expected");

0x1EF8  0x1A 0x0B       PUSHIB 0x0B
0x1EFA  0x1A 0xF7       PUSHIB 0xF7
0x1EFC  0x1A 0x16       PUSHIB 0x16
0x1EFE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F00  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1015

0x1F02  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F04  0x32 0xFA 0x00  JNZW 0x1FFE (+250)

                        // previousToken = PreviousToken;                       code.hs:1019

0x1F07  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x1F09  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:1020

0x1F0B  0x24 0x02       SYSCALL0 0x02  // String.New
0x1F0D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1F0F  0x1A 0xD8       PUSHIB 0xD8
0x1F11  0x1A 0x06       PUSHIB 0x06
0x1F13  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F15  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1F17  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:1022

0x1F19  0x1A 0x0E       PUSHIB 0x0E
0x1F1B  0x1A 0x3A       PUSHIB 0x3A
0x1F1D  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1023

0x1F1F  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F21  0x2E 0x07       JZB 0x1F28 (+7)

                        // break;                                               code.hs:1025

0x1F23  0x28 0x02       DECSP 0x02
0x1F25  0x33 0xD9 0x00  JW 0x1FFE (+217)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:1028

0x1F28  0x1A 0x12       PUSHIB 0x12
0x1F2A  0x1A 0x7B       PUSHIB 0x7B
0x1F2C  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1029

0x1F2E  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F30  0x2E 0x07       JZB 0x1F37 (+7)

                        // break;                                               code.hs:1031

0x1F32  0x28 0x02       DECSP 0x02
0x1F34  0x33 0xCA 0x00  JW 0x1FFE (+202)

                        // bool fg = true;                                      code.hs:1033

0x1F37  0x44            PUSHI0
0x1F38  0x45            PUSHI1
0x1F39  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // string globalName;                                   code.hs:1034

0x1F3B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string globalType;                                   code.hs:1035

0x1F3D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:1038

0x1F3F  0x1A 0x13       PUSHIB 0x13
0x1F41  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x1F43  0x2E 0x07       JZB 0x1F4A (+7)

                        // Parser.Advance(); // }                               code.hs:1040

0x1F45  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:1041

0x1F47  0x33 0x9A 0x00  JW 0x1FE1 (+154)

                        // if (!fg)                                             code.hs:1043

0x1F4A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1F4C  0x2F 0x11       JNZB 0x1F5D (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x1F4E  0x1A 0x0D       PUSHIB 0x0D
0x1F50  0x1A 0xE5       PUSHIB 0xE5
0x1F52  0x1A 0x12       PUSHIB 0x12
0x1F54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F56  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1046

0x1F58  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F5A  0x32 0x87 0x00  JNZW 0x1FE1 (+135)

                        // Parser.Consume(HopperToken.StringConstant, "global member name expected");

0x1F5D  0x1A 0x0B       PUSHIB 0x0B
0x1F5F  0x37 0x0D 0x01  PUSHIW 0x010D
0x1F62  0x1A 0x1B       PUSHIB 0x1B
0x1F64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F66  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1052

0x1F68  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F6A  0x2F 0x77       JNZB 0x1FE1 (+119)

                        // previousToken = PreviousToken;                       code.hs:1056

0x1F6C  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x1F6E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x1F70  0x24 0x02       SYSCALL0 0x02  // String.New
0x1F72  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1F74  0x1A 0xD8       PUSHIB 0xD8
0x1F76  0x1A 0x06       PUSHIB 0x06
0x1F78  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F7A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1F7C  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:1059

0x1F7E  0x1A 0x0E       PUSHIB 0x0E
0x1F80  0x1A 0x3A       PUSHIB 0x3A
0x1F82  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1060

0x1F84  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1F86  0x2E 0x06       JZB 0x1F8C (+6)

                        // break;                                               code.hs:1062

0x1F88  0x28 0x02       DECSP 0x02
0x1F8A  0x30 0x57       JB 0x1FE1 (+87)

                        // Parser.Consume(HopperToken.StringConstant, "global member value expected");

0x1F8C  0x1A 0x0B       PUSHIB 0x0B
0x1F8E  0x37 0x28 0x01  PUSHIW 0x0128
0x1F91  0x1A 0x1C       PUSHIB 0x1C
0x1F93  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F95  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // previousToken = PreviousToken;                       code.hs:1065

0x1F97  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x1F99  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x1F9B  0x24 0x02       SYSCALL0 0x02  // String.New
0x1F9D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1F9F  0x1A 0xD8       PUSHIB 0xD8
0x1FA1  0x1A 0x06       PUSHIB 0x06
0x1FA3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FA5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1FA7  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // if (Parser.HadError)                                 code.hs:1067

0x1FA9  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x1FAB  0x2E 0x06       JZB 0x1FB1 (+6)

                        // break;                                               code.hs:1069

0x1FAD  0x28 0x04       DECSP 0x04
0x1FAF  0x30 0x32       JB 0x1FE1 (+50)

                        // switch (membername)                                  code.hs:1071

0x1FB1  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)

                        // case "name":                                         code.hs:1073

0x1FB3  0x37 0x1B 0x01  PUSHIW 0x011B
0x1FB6  0x1A 0x04       PUSHIB 0x04
0x1FB8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FBA  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x1FBC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1FBE  0x2F 0x08       JNZB 0x1FC6 (+8)

                        // globalName = membervalue;                            code.hs:1075

0x1FC0  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1FC2  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:1076

0x1FC4  0x30 0x13       JB 0x1FD7 (+19)

                        // case "type":                                         code.hs:1077

0x1FC6  0x37 0x44 0x01  PUSHIW 0x0144
0x1FC9  0x1A 0x04       PUSHIB 0x04
0x1FCB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FCD  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x1FCF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1FD1  0x2F 0x06       JNZB 0x1FD7 (+6)

                        // globalType = membervalue;                            code.hs:1079

0x1FD3  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1FD5  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:1081

0x1FD7  0x28 0x02       DECSP 0x02

                        // fg = false;                                          code.hs:1082

0x1FD9  0x44            PUSHI0
0x1FDA  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // }                                                    code.hs:1083

0x1FDC  0x28 0x04       DECSP 0x04
0x1FDE  0x33 0x61 0xFF  JW 0x1F3F (-159)

                        // <string> globalList;                                 code.hs:1084

0x1FE1  0x1A 0x0F       PUSHIB 0x0F
0x1FE3  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // globalList.Append(globalType);                       code.hs:1085

0x1FE5  0x56 0x16 0x14  PUSHLOCALBB 0x1416
0x1FE8  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // globalList.Append(globalName);                       code.hs:1086

0x1FEA  0x56 0x16 0x12  PUSHLOCALBB 0x1216
0x1FED  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // globalLists[offset] = globalList;                    code.hs:1087

0x1FEF  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0x1FF2  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1FF4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:1089

0x1FF6  0x44            PUSHI0
0x1FF7  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // } // loop                                            code.hs:1090

0x1FF9  0x28 0x0A       DECSP 0x0A
0x1FFB  0x33 0xDA 0xFE  JW 0x1ED5 (-294)

                        // if (keepSymbols)                                     code.hs:1091

0x1FFE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2000  0x2E 0x0E       JZB 0x200E (+14)

                        // debugSymbols["globals"] = globalLists;               code.hs:1093

0x2002  0x20 0x10       PUSHGLOBALB 0x10
0x2004  0x1A 0xDE       PUSHIB 0xDE
0x2006  0x1A 0x07       PUSHIB 0x07
0x2008  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x200A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x200C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1095

0x200E  0x28 0x04       DECSP 0x04
0x2010  0x33 0x7A 0x00  JW 0x208A (+122)

                        // string name;                                         code.hs:1098

0x2013  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <byte> code;                                         code.hs:1099

0x2015  0x1A 0x03       PUSHIB 0x03
0x2017  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint codeLength;                                     code.hs:1100

0x2019  0x44            PUSHI0

                        // if (!ParseMethod(methodIndex, keepCode, keepSymbols, experimental, ref name, ref code, ref codeLength))

0x201A  0x56 0x08 0xFA  PUSHLOCALBB 0xFA08
0x201D  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x2020  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x2022  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x2024  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x2026  0x2C 0x6A       CALLB 0x6A     // Code.ParseMethod
0x2028  0x2F 0x06       JNZB 0x202E (+6)

                        // break;                                               code.hs:1103

0x202A  0x28 0x0A       DECSP 0x0A
0x202C  0x30 0x69       JB 0x2095 (+105)

                        // if (methodIndex == "const")                          code.hs:1105

0x202E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2030  0x37 0x48 0x01  PUSHIW 0x0148
0x2033  0x1A 0x05       PUSHIB 0x05
0x2035  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2037  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2039  0x2F 0x0C       JNZB 0x2045 (+12)

                        // if (keepCode)                                        code.hs:1107

0x203B  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x203D  0x2E 0x3D       JZB 0x207A (+61)

                        // constantData = code;                                 code.hs:1109

0x203F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2041  0x59 0x0E       POPCOPYGLOBALB 0x0E

                        // }                                                    code.hs:1111

0x2043  0x30 0x37       JB 0x207A (+55)

                        // uint index;                                          code.hs:1114

0x2045  0x44            PUSHI0

                        // if (Token.TryParseUInt(methodIndex, ref index))

0x2046  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2048  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0x204A  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x204C  0x2E 0x02       JZB 0x204E (+2)

                        // if (name.EndsWith(".main"))                          code.hs:1118

0x204E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2050  0x37 0x4D 0x01  PUSHIW 0x014D
0x2053  0x1A 0x05       PUSHIB 0x05
0x2055  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2057  0x25 0x07       SYSCALL1 0x07  // String.EndsWith
0x2059  0x2E 0x06       JZB 0x205F (+6)

                        // entryIndex = index;                                  code.hs:1120

0x205B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x205D  0x1F 0x04       POPGLOBALB 0x04

                        // if (keepCode)                                        code.hs:1122

0x205F  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2061  0x2E 0x09       JZB 0x206A (+9)

                        // methodCode[index] = code;                            code.hs:1124

0x2063  0x20 0x06       PUSHGLOBALB 0x06
0x2065  0x56 0x10 0x0C  PUSHLOCALBB 0x0C10
0x2068  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // methodSize[index] = codeLength;                      code.hs:1126

0x206A  0x20 0x08       PUSHGLOBALB 0x08
0x206C  0x56 0x10 0x0E  PUSHLOCALBB 0x0E10
0x206F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // methodName[index] = name;                            code.hs:1127

0x2071  0x20 0x0C       PUSHGLOBALB 0x0C
0x2073  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x2076  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1128

0x2078  0x28 0x02       DECSP 0x02

                        // Parser.Consume(HopperToken.RBrace, '}');             code.hs:1129

0x207A  0x1A 0x13       PUSHIB 0x13
0x207C  0x1A 0x7D       PUSHIB 0x7D
0x207E  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1130

0x2080  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2082  0x2E 0x06       JZB 0x2088 (+6)

                        // break;                                               code.hs:1132

0x2084  0x28 0x0A       DECSP 0x0A
0x2086  0x30 0x0F       JB 0x2095 (+15)

                        // }                                                    code.hs:1134

0x2088  0x28 0x06       DECSP 0x06

                        // Parser.ProgressTick(".");                            code.hs:1135

0x208A  0x1A 0x2E       PUSHIB 0x2E
0x208C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x208E  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // } // loop                                            code.hs:1136

0x2090  0x28 0x04       DECSP 0x04
0x2092  0x33 0xCE 0xFD  JW 0x1E60 (-562)

                        // if (Parser.HadError)                                 code.hs:1137

0x2095  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2097  0x2F 0x04       JNZB 0x209B (+4)

                        // success = true;                                      code.hs:1141

0x2099  0x45            PUSHI1
0x209A  0x4C            POPLOCALB00

                        // if (keepSymbols && (methodStart.Count > 0))

0x209B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x209D  0x27 0x00       DUP 0x00
0x209F  0x2E 0x09       JZB 0x20A8 (+9)
0x20A1  0x20 0x0A       PUSHGLOBALB 0x0A
0x20A3  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x20A5  0x44            PUSHI0
0x20A6  0x07            GT
0x20A7  0x0C            BOOLAND
0x20A8  0x2E 0x04       JZB 0x20AC (+4)

                        // MapSource();                                         code.hs:1146

0x20AA  0x2C 0x5A       CALLB 0x5A     // Code.MapSource

                        // return success;                                      code.hs:1148

0x20AC  0x4E            PUSHLOCALB00
0x20AD  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/json/code.hs:1152
// ####  Code.ExportCode(..)  ####                                              0x006C


                        // bool success = true;                                 code.hs:1153

0x20AF  0x5F 0x01       ENTERB 0x01

                        // bool success = true;                                 code.hs:1153

0x20B1  0x45            PUSHI1
0x20B2  0x4C            POPLOCALB00

                        // <string, variant> dict;                              code.hs:1155

0x20B3  0x1A 0x0F       PUSHIB 0x0F
0x20B5  0x1A 0x14       PUSHIB 0x14
0x20B7  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (constantData.Length > 0)                         code.hs:1157

0x20B9  0x20 0x0E       PUSHGLOBALB 0x0E
0x20BB  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x20BD  0x44            PUSHI0
0x20BE  0x07            GT
0x20BF  0x2E 0x23       JZB 0x20E2 (+35)

                        // <string, variant> cdict;                             code.hs:1159

0x20C1  0x1A 0x0F       PUSHIB 0x0F
0x20C3  0x1A 0x14       PUSHIB 0x14
0x20C5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // cdict["data"] = constantData;                        code.hs:1160

0x20C7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x20C9  0x37 0x52 0x01  PUSHIW 0x0152
0x20CC  0x1A 0x04       PUSHIB 0x04
0x20CE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20D0  0x20 0x0E       PUSHGLOBALB 0x0E
0x20D2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // dict["const"] = cdict;                               code.hs:1161

0x20D4  0x4F            PUSHLOCALB02
0x20D5  0x37 0x48 0x01  PUSHIW 0x0148
0x20D8  0x1A 0x05       PUSHIB 0x05
0x20DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20DC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x20DE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1162

0x20E0  0x28 0x02       DECSP 0x02

                        // foreach (var kv in debugSymbols)                     code.hs:1164

0x20E2  0x20 0x10       PUSHGLOBALB 0x10
0x20E4  0x1A 0x0F       PUSHIB 0x0F
0x20E6  0x1A 0x0F       PUSHIB 0x0F
0x20E8  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x20EA  0x44            PUSHI0
0x20EB  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x20EE  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x20F0  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x20F2  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x20F4  0x31 0x37 0x02  JZW 0x232B (+567)

                        // uint index;                                          code.hs:1166

0x20F7  0x44            PUSHI0

                        // if (TryParseHex(kv.key, ref index))                  code.hs:1167

0x20F8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x20FA  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x20FC  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x20FE  0x2C 0x7A       CALLB 0x7A     // Token.TryParseHex
0x2100  0x31 0xB2 0x01  JZW 0x22B2 (+434)

                        // <string,variant> methodDictionary;                   code.hs:1169

0x2103  0x1A 0x0F       PUSHIB 0x0F
0x2105  0x1A 0x14       PUSHIB 0x14
0x2107  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var mkv in kv.value) // just to get the order the same as the original .code

0x2109  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x210B  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x210D  0x1A 0x0F       PUSHIB 0x0F
0x210F  0x1A 0x0F       PUSHIB 0x0F
0x2111  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2113  0x44            PUSHI0
0x2114  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x2117  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x2119  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x211B  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x211D  0x31 0x86 0x01  JZW 0x22A3 (+390)

                        // if (mkv.key == "arguments")                          code.hs:1172

0x2120  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2122  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2124  0x1A 0x3E       PUSHIB 0x3E
0x2126  0x1A 0x09       PUSHIB 0x09
0x2128  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x212A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x212C  0x32 0x87 0x00  JNZW 0x21B3 (+135)

                        // <string, <string> > loadedArguments = mkv.value;

0x212F  0x1A 0x0F       PUSHIB 0x0F
0x2131  0x1A 0x19       PUSHIB 0x19
0x2133  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2135  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2137  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2139  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string,variant> argumentsDictionary;                code.hs:1175

0x213B  0x1A 0x0F       PUSHIB 0x0F
0x213D  0x1A 0x14       PUSHIB 0x14
0x213F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var akv in loadedArguments)                 code.hs:1176

0x2141  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2143  0x1A 0x0F       PUSHIB 0x0F
0x2145  0x1A 0x0F       PUSHIB 0x0F
0x2147  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2149  0x44            PUSHI0
0x214A  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x214D  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x214F  0x1B 0x1C       POPLOCALB 0x1C (BP+28)
0x2151  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x2153  0x2E 0x50       JZB 0x21A3 (+80)

                        // <string> alist = akv.value;                          code.hs:1178

0x2155  0x1A 0x0F       PUSHIB 0x0F
0x2157  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2159  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x215B  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x215D  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // <string,string> adict;                               code.hs:1179

0x215F  0x1A 0x0F       PUSHIB 0x0F
0x2161  0x1A 0x0F       PUSHIB 0x0F
0x2163  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // adict["name"] = alist[2];                            code.hs:1180

0x2165  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2167  0x37 0x1B 0x01  PUSHIW 0x011B
0x216A  0x1A 0x04       PUSHIB 0x04
0x216C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x216E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2170  0x1A 0x02       PUSHIB 0x02
0x2172  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2174  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // adict["type"] = alist[1];                            code.hs:1181

0x2176  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2178  0x37 0x44 0x01  PUSHIW 0x0144
0x217B  0x1A 0x04       PUSHIB 0x04
0x217D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x217F  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2181  0x45            PUSHI1
0x2182  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2184  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // adict["ref"]  = alist[0];                            code.hs:1182

0x2186  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2188  0x37 0x56 0x01  PUSHIW 0x0156
0x218B  0x1A 0x03       PUSHIB 0x03
0x218D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x218F  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2191  0x44            PUSHI0
0x2192  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2194  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // argumentsDictionary[akv.key] = adict;                code.hs:1183

0x2196  0x56 0x16 0x1A  PUSHLOCALBB 0x1A16
0x2199  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x219B  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x219D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1184

0x219F  0x28 0x04       DECSP 0x04
0x21A1  0x30 0xA9       JB 0x214A (-87)
0x21A3  0x28 0x06       DECSP 0x06

                        // methodDictionary[mkv.key] = argumentsDictionary;

0x21A5  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x21A8  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x21AA  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x21AC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1186

0x21AE  0x28 0x04       DECSP 0x04
0x21B0  0x33 0x64 0xFF  JW 0x2114 (-156)

                        // else if (mkv.key == "locals")                        code.hs:1187

0x21B3  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x21B5  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x21B7  0x37 0x59 0x01  PUSHIW 0x0159
0x21BA  0x1A 0x06       PUSHIB 0x06
0x21BC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21BE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x21C0  0x32 0x85 0x00  JNZW 0x2245 (+133)

                        // <string, <string> > loadedLocals = mkv.value;

0x21C3  0x1A 0x0F       PUSHIB 0x0F
0x21C5  0x1A 0x19       PUSHIB 0x19
0x21C7  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x21C9  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x21CB  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x21CD  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string,variant> localsDictionary;                   code.hs:1190

0x21CF  0x1A 0x0F       PUSHIB 0x0F
0x21D1  0x1A 0x14       PUSHIB 0x14
0x21D3  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var lkv in loadedLocals)                    code.hs:1191

0x21D5  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x21D7  0x1A 0x0F       PUSHIB 0x0F
0x21D9  0x1A 0x0F       PUSHIB 0x0F
0x21DB  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x21DD  0x44            PUSHI0
0x21DE  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x21E1  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x21E3  0x1B 0x1C       POPLOCALB 0x1C (BP+28)
0x21E5  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x21E7  0x2E 0x4F       JZB 0x2236 (+79)

                        // <string> llist = lkv.value;                          code.hs:1193

0x21E9  0x1A 0x0F       PUSHIB 0x0F
0x21EB  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x21ED  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x21EF  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x21F1  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // <string,string> ldict;                               code.hs:1194

0x21F3  0x1A 0x0F       PUSHIB 0x0F
0x21F5  0x1A 0x0F       PUSHIB 0x0F
0x21F7  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // ldict["name"] = llist[0];                            code.hs:1195

0x21F9  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x21FB  0x37 0x1B 0x01  PUSHIW 0x011B
0x21FE  0x1A 0x04       PUSHIB 0x04
0x2200  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2202  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2204  0x44            PUSHI0
0x2205  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2207  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // ldict["type"] = llist[1];                            code.hs:1196

0x2209  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x220B  0x37 0x44 0x01  PUSHIW 0x0144
0x220E  0x1A 0x04       PUSHIB 0x04
0x2210  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2212  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2214  0x45            PUSHI1
0x2215  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2217  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // ldict["offset"]  = llist[2];                         code.hs:1197

0x2219  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x221B  0x1A 0xFE       PUSHIB 0xFE
0x221D  0x1A 0x06       PUSHIB 0x06
0x221F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2221  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2223  0x1A 0x02       PUSHIB 0x02
0x2225  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2227  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // localsDictionary[lkv.key] = ldict;                   code.hs:1198

0x2229  0x56 0x16 0x1A  PUSHLOCALBB 0x1A16
0x222C  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x222E  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2230  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1199

0x2232  0x28 0x04       DECSP 0x04
0x2234  0x30 0xAA       JB 0x21DE (-86)
0x2236  0x28 0x06       DECSP 0x06

                        // methodDictionary[mkv.key] = localsDictionary;

0x2238  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x223B  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x223D  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x223F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1201

0x2241  0x28 0x04       DECSP 0x04
0x2243  0x30 0x5D       JB 0x22A0 (+93)

                        // else if (mkv.key == "line")                          code.hs:1202

0x2245  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2247  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2249  0x37 0x5F 0x01  PUSHIW 0x015F
0x224C  0x1A 0x04       PUSHIB 0x04
0x224E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2250  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2252  0x2F 0x24       JNZB 0x2276 (+36)

                        // uint ln;                                             code.hs:1204

0x2254  0x44            PUSHI0

                        // string sln = mkv.value;                              code.hs:1205

0x2255  0x24 0x02       SYSCALL0 0x02  // String.New
0x2257  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2259  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x225B  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // if (TryParseUInt(sln, ref ln))                       code.hs:1206

0x225D  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x225F  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0x2261  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x2263  0x2E 0x0F       JZB 0x2272 (+15)

                        // methodDictionary[mkv.key] = ln;                      code.hs:1208

0x2265  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x2268  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x226A  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x226C  0x1A 0x04       PUSHIB 0x04
0x226E  0x24 0x27       SYSCALL0 0x27  // Variant.Box
0x2270  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1210

0x2272  0x28 0x04       DECSP 0x04
0x2274  0x30 0x2C       JB 0x22A0 (+44)

                        // if (mkv.key == "debug") // "code" comes before "debug"

0x2276  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2278  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x227A  0x37 0x63 0x01  PUSHIW 0x0163
0x227D  0x1A 0x05       PUSHIB 0x05
0x227F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2281  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2283  0x2F 0x12       JNZB 0x2295 (+18)

                        // methodDictionary["code"] = methodCode[index];

0x2285  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2287  0x1A 0x09       PUSHIB 0x09
0x2289  0x1A 0x04       PUSHIB 0x04
0x228B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x228D  0x20 0x06       PUSHGLOBALB 0x06
0x228F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2291  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2293  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // methodDictionary[mkv.key] = mkv.value;               code.hs:1217

0x2295  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x2298  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x229A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x229C  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x229E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1219

0x22A0  0x33 0x74 0xFE  JW 0x2114 (-396)
0x22A3  0x28 0x06       DECSP 0x06

                        // dict[index.ToString()] = methodDictionary;           code.hs:1220

0x22A5  0x4F            PUSHLOCALB02
0x22A6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x22A8  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x22AA  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x22AC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1221

0x22AE  0x28 0x02       DECSP 0x02
0x22B0  0x30 0x76       JB 0x2326 (+118)

                        // else if (kv.key == "globals")                        code.hs:1222

0x22B2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x22B4  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x22B6  0x1A 0xDE       PUSHIB 0xDE
0x22B8  0x1A 0x07       PUSHIB 0x07
0x22BA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22BC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x22BE  0x2F 0x68       JNZB 0x2326 (+104)

                        // <string,variant> globalsDictionary;                  code.hs:1224

0x22C0  0x1A 0x0F       PUSHIB 0x0F
0x22C2  0x1A 0x14       PUSHIB 0x14
0x22C4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var gkv in kv.value)                        code.hs:1225

0x22C6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x22C8  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x22CA  0x1A 0x0F       PUSHIB 0x0F
0x22CC  0x1A 0x0F       PUSHIB 0x0F
0x22CE  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x22D0  0x44            PUSHI0
0x22D1  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x22D4  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x22D6  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x22D8  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x22DA  0x2E 0x3F       JZB 0x2319 (+63)

                        // <string> glist = gkv.value;                          code.hs:1227

0x22DC  0x1A 0x0F       PUSHIB 0x0F
0x22DE  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x22E0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x22E2  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x22E4  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string,string> gdict;                               code.hs:1228

0x22E6  0x1A 0x0F       PUSHIB 0x0F
0x22E8  0x1A 0x0F       PUSHIB 0x0F
0x22EA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // gdict["name"] = glist[1];                            code.hs:1229

0x22EC  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x22EE  0x37 0x1B 0x01  PUSHIW 0x011B
0x22F1  0x1A 0x04       PUSHIB 0x04
0x22F3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22F5  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x22F7  0x45            PUSHI1
0x22F8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x22FA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // gdict["type"] = glist[0];                            code.hs:1230

0x22FC  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x22FE  0x37 0x44 0x01  PUSHIW 0x0144
0x2301  0x1A 0x04       PUSHIB 0x04
0x2303  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2305  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2307  0x44            PUSHI0
0x2308  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x230A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // globalsDictionary[gkv.key] = gdict;                  code.hs:1231

0x230C  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x230F  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2311  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x2313  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1232

0x2315  0x28 0x04       DECSP 0x04
0x2317  0x30 0xBA       JB 0x22D1 (-70)
0x2319  0x28 0x06       DECSP 0x06

                        // dict[kv.key] = globalsDictionary;                    code.hs:1233

0x231B  0x4F            PUSHLOCALB02
0x231C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x231E  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2320  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2322  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1234

0x2324  0x28 0x02       DECSP 0x02

                        // }                                                    code.hs:1235

0x2326  0x28 0x02       DECSP 0x02
0x2328  0x33 0xC3 0xFD  JW 0x20EB (-573)
0x232B  0x28 0x06       DECSP 0x06

                        // if (!JSON.Write(codePath, dict))                     code.hs:1237

0x232D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x232F  0x4F            PUSHLOCALB02
0x2330  0x2C 0x4B       CALLB 0x4B     // JSON.Write
0x2332  0x2F 0x04       JNZB 0x2336 (+4)

                        // success = false;                                     code.hs:1239

0x2334  0x44            PUSHI0
0x2335  0x4C            POPLOCALB00

                        // return success;                                      code.hs:1242

0x2336  0x4E            PUSHLOCALB00
0x2337  0x2B 0x08       RETRETB 0x08


// /source/compiler/json/code.hs:448
// ####  Code.GetMethodIndices(..)  ####                                        0x0066

0x2339  0x49            ENTER

                        // <uint> indices;                                      code.hs:449

0x233A  0x1A 0x04       PUSHIB 0x04
0x233C  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // foreach (var kv in debugSymbols)                     code.hs:450

0x233E  0x20 0x10       PUSHGLOBALB 0x10
0x2340  0x1A 0x0F       PUSHIB 0x0F
0x2342  0x1A 0x0F       PUSHIB 0x0F
0x2344  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2346  0x44            PUSHI0
0x2347  0x4F            PUSHLOCALB02
0x2348  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x234A  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x234C  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x234E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2350  0x2E 0x1C       JZB 0x236C (+28)

                        // string key = kv.key;                                 code.hs:452

0x2352  0x24 0x02       SYSCALL0 0x02  // String.New
0x2354  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2356  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2358  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // uint index;                                          code.hs:453

0x235A  0x44            PUSHI0

                        // if (TryParseHex(key, ref index))                     code.hs:454

0x235B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x235D  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x235F  0x2C 0x7A       CALLB 0x7A     // Token.TryParseHex
0x2361  0x2E 0x07       JZB 0x2368 (+7)

                        // indices.Append(index);                               code.hs:456

0x2363  0x4E            PUSHLOCALB00
0x2364  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2366  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    code.hs:458

0x2368  0x28 0x04       DECSP 0x04
0x236A  0x30 0xDD       JB 0x2347 (-35)
0x236C  0x28 0x06       DECSP 0x06

                        // return indices;                                      code.hs:459

0x236E  0x4E            PUSHLOCALB00
0x236F  0x2B 0x02       RETRETB 0x02


// /source/compiler/json/code.hs:424
// ####  Code.GetMethodCode(..)  ####                                           0x0062

0x2371  0x49            ENTER

                        // return methodCode[methodIndex];                      code.hs:425

0x2372  0x20 0x06       PUSHGLOBALB 0x06
0x2374  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2376  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2378  0x2B 0x02       RETRETB 0x02


// /source/compiler/json/code.hs:432
// ####  Code.GetMethodDebugInfo(..)  ####                                      0x0064

0x237A  0x49            ENTER

                        // string key = "0x" + methodIndex.ToHexString(4);

0x237B  0x24 0x02       SYSCALL0 0x02  // String.New
0x237D  0x37 0x30 0x78  PUSHIW 0x7830
0x2380  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2382  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2384  0x1A 0x04       PUSHIB 0x04
0x2386  0x2C 0xC8       CALLB 0xC8     // UInt.ToHexString
0x2388  0x24 0x03       SYSCALL0 0x03  // String.Append
0x238A  0x5D            POPCOPYLOCALB00

                        // <string,variant> methodSymbols = debugSymbols[key];

0x238B  0x1A 0x0F       PUSHIB 0x0F
0x238D  0x1A 0x14       PUSHIB 0x14
0x238F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2391  0x20 0x10       PUSHGLOBALB 0x10
0x2393  0x4E            PUSHLOCALB00
0x2394  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2396  0x5E            POPCOPYLOCALB02

                        // <string,string> debugInfo = methodSymbols["debug"];

0x2397  0x1A 0x0F       PUSHIB 0x0F
0x2399  0x1A 0x0F       PUSHIB 0x0F
0x239B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x239D  0x4F            PUSHLOCALB02
0x239E  0x37 0x63 0x01  PUSHIW 0x0163
0x23A1  0x1A 0x05       PUSHIB 0x05
0x23A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x23A5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x23A7  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // return debugInfo;                                    code.hs:436

0x23A9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x23AB  0x2B 0x08       RETRETB 0x08


// /source/compiler/json/code.hs:428
// ####  Code.SetMethodCode(..)  ####                                           0x0063

0x23AD  0x49            ENTER

                        // methodCode[methodIndex] = code;                      code.hs:429

0x23AE  0x20 0x06       PUSHGLOBALB 0x06
0x23B0  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x23B3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:430

0x23B5  0x2A 0x04       RETB 0x04


// /source/compiler/json/code.hs:439
// ####  Code.SetMethodDebugInfo(..)  ####                                      0x0065

0x23B7  0x49            ENTER

                        // string key = "0x" + methodIndex.ToHexString(4);

0x23B8  0x24 0x02       SYSCALL0 0x02  // String.New
0x23BA  0x37 0x30 0x78  PUSHIW 0x7830
0x23BD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x23BF  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x23C1  0x1A 0x04       PUSHIB 0x04
0x23C3  0x2C 0xC8       CALLB 0xC8     // UInt.ToHexString
0x23C5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x23C7  0x5D            POPCOPYLOCALB00

                        // <string, variant> methodSymbols = debugSymbols[key];

0x23C8  0x1A 0x0F       PUSHIB 0x0F
0x23CA  0x1A 0x14       PUSHIB 0x14
0x23CC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x23CE  0x20 0x10       PUSHGLOBALB 0x10
0x23D0  0x4E            PUSHLOCALB00
0x23D1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x23D3  0x5E            POPCOPYLOCALB02

                        // methodSymbols["debug"] = debugInfo;                  code.hs:442

0x23D4  0x4F            PUSHLOCALB02
0x23D5  0x37 0x63 0x01  PUSHIW 0x0163
0x23D8  0x1A 0x05       PUSHIB 0x05
0x23DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x23DC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x23DE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // debugSymbols[key] = methodSymbols;                   code.hs:443

0x23E0  0x20 0x10       PUSHGLOBALB 0x10
0x23E2  0x4E            PUSHLOCALB00
0x23E3  0x4F            PUSHLOCALB02
0x23E4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:444

0x23E6  0x2A 0x08       RETB 0x08


// /source/compiler/json/code.hs:482
// ####  Code.ParseMethod(..)  ####                                             0x006A

0x23E8  0x49            ENTER

                        // <string,variant> methodDictionary;                   code.hs:483

0x23E9  0x1A 0x0F       PUSHIB 0x0F
0x23EB  0x1A 0x14       PUSHIB 0x14
0x23ED  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // bool first = true;                                   code.hs:485

0x23EF  0x44            PUSHI0
0x23F0  0x45            PUSHI1
0x23F1  0x4D            POPLOCALB02

                        // bool isData;                                         code.hs:486

0x23F2  0x44            PUSHI0

                        // if (Parser.HadError)                                 code.hs:489

0x23F3  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x23F5  0x32 0xF9 0x05  JNZW 0x29EE (+1529)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:493

0x23F8  0x1A 0x13       PUSHIB 0x13
0x23FA  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x23FC  0x32 0xF2 0x05  JNZW 0x29EE (+1522)

                        // if (!first)                                          code.hs:497

0x23FF  0x4F            PUSHLOCALB02
0x2400  0x2F 0x11       JNZB 0x2411 (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x2402  0x1A 0x0D       PUSHIB 0x0D
0x2404  0x1A 0xE5       PUSHIB 0xE5
0x2406  0x1A 0x12       PUSHIB 0x12
0x2408  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x240A  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:500

0x240C  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x240E  0x32 0xE0 0x05  JNZW 0x29EE (+1504)

                        // Parser.Consume(HopperToken.StringConstant, "key name expected");

0x2411  0x1A 0x0B       PUSHIB 0x0B
0x2413  0x37 0x68 0x01  PUSHIW 0x0168
0x2416  0x1A 0x11       PUSHIB 0x11
0x2418  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x241A  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:506

0x241C  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x241E  0x32 0xD0 0x05  JNZW 0x29EE (+1488)

                        // <string,string> previousToken = PreviousToken;

0x2421  0x1A 0x0F       PUSHIB 0x0F
0x2423  0x1A 0x0F       PUSHIB 0x0F
0x2425  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2427  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2429  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string keyName = previousToken["lexeme"];            code.hs:511

0x242B  0x24 0x02       SYSCALL0 0x02  // String.New
0x242D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x242F  0x1A 0xD8       PUSHIB 0xD8
0x2431  0x1A 0x06       PUSHIB 0x06
0x2433  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2435  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2437  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:512

0x2439  0x1A 0x0E       PUSHIB 0x0E
0x243B  0x1A 0x3A       PUSHIB 0x3A
0x243D  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:513

0x243F  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2441  0x2E 0x07       JZB 0x2448 (+7)

                        // break;                                               code.hs:515

0x2443  0x28 0x04       DECSP 0x04
0x2445  0x33 0xA9 0x05  JW 0x29EE (+1449)

                        // if (keyName == "data")                               code.hs:517

0x2448  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x244A  0x37 0x52 0x01  PUSHIW 0x0152
0x244D  0x1A 0x04       PUSHIB 0x04
0x244F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2451  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2453  0x2F 0x16       JNZB 0x2469 (+22)

                        // isData = true;                                       code.hs:519

0x2455  0x45            PUSHI1
0x2456  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // keyName = "code";                                    code.hs:520

0x2458  0x1A 0x09       PUSHIB 0x09
0x245A  0x1A 0x04       PUSHIB 0x04
0x245C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x245E  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // methodName = "const";                                code.hs:521

0x2460  0x37 0x48 0x01  PUSHIW 0x0148
0x2463  0x1A 0x05       PUSHIB 0x05
0x2465  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2467  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // switch (keyName)                                     code.hs:523

0x2469  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)

                        // case "name":                                         code.hs:525

0x246B  0x37 0x1B 0x01  PUSHIW 0x011B
0x246E  0x1A 0x04       PUSHIB 0x04
0x2470  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2472  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2474  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2476  0x2F 0x3D       JNZB 0x24B3 (+61)

                        // Parser.Consume(HopperToken.StringConstant, "method name expected");

0x2478  0x1A 0x0B       PUSHIB 0x0B
0x247A  0x37 0x79 0x01  PUSHIW 0x0179
0x247D  0x1A 0x14       PUSHIB 0x14
0x247F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2481  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:528

0x2483  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2485  0x2E 0x07       JZB 0x248C (+7)

                        // break;                                               code.hs:530

0x2487  0x28 0x06       DECSP 0x06
0x2489  0x33 0x65 0x05  JW 0x29EE (+1381)

                        // previousToken = PreviousToken;                       code.hs:532

0x248C  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x248E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodName = previousToken["lexeme"];                code.hs:533

0x2490  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2492  0x1A 0xD8       PUSHIB 0xD8
0x2494  0x1A 0x06       PUSHIB 0x06
0x2496  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2498  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x249A  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // methodDictionary["name"] = previousToken["lexeme"];

0x249C  0x4E            PUSHLOCALB00
0x249D  0x37 0x1B 0x01  PUSHIW 0x011B
0x24A0  0x1A 0x04       PUSHIB 0x04
0x24A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24A4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24A6  0x1A 0xD8       PUSHIB 0xD8
0x24A8  0x1A 0x06       PUSHIB 0x06
0x24AA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24AC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x24AE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:535

0x24B0  0x33 0x35 0x05  JW 0x29E5 (+1333)

                        // case "source":                                       code.hs:536

0x24B3  0x37 0x8D 0x01  PUSHIW 0x018D
0x24B6  0x1A 0x06       PUSHIB 0x06
0x24B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24BA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x24BC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x24BE  0x2F 0x31       JNZB 0x24EF (+49)

                        // Parser.Consume(HopperToken.StringConstant, "source path expected");

0x24C0  0x1A 0x0B       PUSHIB 0x0B
0x24C2  0x37 0x93 0x01  PUSHIW 0x0193
0x24C5  0x1A 0x14       PUSHIB 0x14
0x24C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24C9  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:539

0x24CB  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x24CD  0x2E 0x07       JZB 0x24D4 (+7)

                        // break;                                               code.hs:541

0x24CF  0x28 0x06       DECSP 0x06
0x24D1  0x33 0x1D 0x05  JW 0x29EE (+1309)

                        // previousToken = PreviousToken;                       code.hs:543

0x24D4  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x24D6  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodDictionary["source"] = previousToken["lexeme"];

0x24D8  0x4E            PUSHLOCALB00
0x24D9  0x37 0x8D 0x01  PUSHIW 0x018D
0x24DC  0x1A 0x06       PUSHIB 0x06
0x24DE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24E0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24E2  0x1A 0xD8       PUSHIB 0xD8
0x24E4  0x1A 0x06       PUSHIB 0x06
0x24E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24E8  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x24EA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:545

0x24EC  0x33 0xF9 0x04  JW 0x29E5 (+1273)

                        // case "line":                                         code.hs:546

0x24EF  0x37 0x5F 0x01  PUSHIW 0x015F
0x24F2  0x1A 0x04       PUSHIB 0x04
0x24F4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x24F6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x24F8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x24FA  0x2F 0x31       JNZB 0x252B (+49)

                        // Parser.Consume(HopperToken.Integer, "line number expected");

0x24FC  0x1A 0x09       PUSHIB 0x09
0x24FE  0x37 0xA7 0x01  PUSHIW 0x01A7
0x2501  0x1A 0x14       PUSHIB 0x14
0x2503  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2505  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:549

0x2507  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2509  0x2E 0x07       JZB 0x2510 (+7)

                        // break;                                               code.hs:551

0x250B  0x28 0x06       DECSP 0x06
0x250D  0x33 0xE1 0x04  JW 0x29EE (+1249)

                        // previousToken = PreviousToken;                       code.hs:553

0x2510  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2512  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodDictionary["line"] = previousToken["lexeme"];

0x2514  0x4E            PUSHLOCALB00
0x2515  0x37 0x5F 0x01  PUSHIW 0x015F
0x2518  0x1A 0x04       PUSHIB 0x04
0x251A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x251C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x251E  0x1A 0xD8       PUSHIB 0xD8
0x2520  0x1A 0x06       PUSHIB 0x06
0x2522  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2524  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2526  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:555

0x2528  0x33 0xBD 0x04  JW 0x29E5 (+1213)

                        // case "hits":                                         code.hs:556

0x252B  0x37 0xBB 0x01  PUSHIW 0x01BB
0x252E  0x1A 0x04       PUSHIB 0x04
0x2530  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2532  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2534  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2536  0x2F 0x40       JNZB 0x2576 (+64)

                        // Parser.Consume(HopperToken.Integer, "hits expected");

0x2538  0x1A 0x09       PUSHIB 0x09
0x253A  0x37 0xBF 0x01  PUSHIW 0x01BF
0x253D  0x1A 0x0D       PUSHIB 0x0D
0x253F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2541  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:559

0x2543  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2545  0x2E 0x07       JZB 0x254C (+7)

                        // break;                                               code.hs:561

0x2547  0x28 0x06       DECSP 0x06
0x2549  0x33 0xA5 0x04  JW 0x29EE (+1189)

                        // previousToken = PreviousToken;                       code.hs:563

0x254C  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x254E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint hits;                                           code.hs:564

0x2550  0x44            PUSHI0

                        // if (TryParseUInt(previousToken["lexeme"], ref hits))

0x2551  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2553  0x1A 0xD8       PUSHIB 0xD8
0x2555  0x1A 0x06       PUSHIB 0x06
0x2557  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2559  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x255B  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x255D  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x255F  0x2E 0x02       JZB 0x2561 (+2)

                        // methodDictionary["hits"] = hits;                     code.hs:568

0x2561  0x4E            PUSHLOCALB00
0x2562  0x37 0xBB 0x01  PUSHIW 0x01BB
0x2565  0x1A 0x04       PUSHIB 0x04
0x2567  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2569  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x256B  0x1A 0x04       PUSHIB 0x04
0x256D  0x24 0x27       SYSCALL0 0x27  // Variant.Box
0x256F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:569

0x2571  0x28 0x02       DECSP 0x02
0x2573  0x33 0x72 0x04  JW 0x29E5 (+1138)

                        // case "locals":                                       code.hs:570

0x2576  0x37 0x59 0x01  PUSHIW 0x0159
0x2579  0x1A 0x06       PUSHIB 0x06
0x257B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x257D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x257F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2581  0x32 0x7D 0x01  JNZW 0x26FE (+381)

                        // <string, <string> > localLists;                      code.hs:572

0x2584  0x1A 0x0F       PUSHIB 0x0F
0x2586  0x1A 0x19       PUSHIB 0x19
0x2588  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:573

0x258A  0x1A 0x12       PUSHIB 0x12
0x258C  0x1A 0x7B       PUSHIB 0x7B
0x258E  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:574

0x2590  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2592  0x2E 0x07       JZB 0x2599 (+7)

                        // break;                                               code.hs:576

0x2594  0x28 0x08       DECSP 0x08
0x2596  0x33 0x58 0x04  JW 0x29EE (+1112)

                        // bool fc = true;                                      code.hs:578

0x2599  0x44            PUSHI0
0x259A  0x45            PUSHI1
0x259B  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:581

0x259D  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x259F  0x32 0x4A 0x01  JNZW 0x26E9 (+330)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:585

0x25A2  0x1A 0x13       PUSHIB 0x13
0x25A4  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x25A6  0x2E 0x07       JZB 0x25AD (+7)

                        // Parser.Advance(); // }                               code.hs:587

0x25A8  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:588

0x25AA  0x33 0x3F 0x01  JW 0x26E9 (+319)

                        // if (!fc)                                             code.hs:590

0x25AD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x25AF  0x2F 0x11       JNZB 0x25C0 (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x25B1  0x1A 0x0D       PUSHIB 0x0D
0x25B3  0x1A 0xE5       PUSHIB 0xE5
0x25B5  0x1A 0x12       PUSHIB 0x12
0x25B7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25B9  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:593

0x25BB  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x25BD  0x32 0x2C 0x01  JNZW 0x26E9 (+300)

                        // Parser.Consume(HopperToken.StringConstant, "active range expected");

0x25C0  0x1A 0x0B       PUSHIB 0x0B
0x25C2  0x37 0xCC 0x01  PUSHIW 0x01CC
0x25C5  0x1A 0x15       PUSHIB 0x15
0x25C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25C9  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:600

0x25CB  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x25CD  0x32 0x1C 0x01  JNZW 0x26E9 (+284)

                        // previousToken = PreviousToken;                       code.hs:604

0x25D0  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x25D2  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string range = previousToken["lexeme"];              code.hs:605

0x25D4  0x24 0x02       SYSCALL0 0x02  // String.New
0x25D6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x25D8  0x1A 0xD8       PUSHIB 0xD8
0x25DA  0x1A 0x06       PUSHIB 0x06
0x25DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25DE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x25E0  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:607

0x25E2  0x1A 0x0E       PUSHIB 0x0E
0x25E4  0x1A 0x3A       PUSHIB 0x3A
0x25E6  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:608

0x25E8  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x25EA  0x2E 0x07       JZB 0x25F1 (+7)

                        // break;                                               code.hs:610

0x25EC  0x28 0x02       DECSP 0x02
0x25EE  0x33 0xFB 0x00  JW 0x26E9 (+251)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:613

0x25F1  0x1A 0x12       PUSHIB 0x12
0x25F3  0x1A 0x7B       PUSHIB 0x7B
0x25F5  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:614

0x25F7  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x25F9  0x2E 0x07       JZB 0x2600 (+7)

                        // break;                                               code.hs:616

0x25FB  0x28 0x02       DECSP 0x02
0x25FD  0x33 0xEC 0x00  JW 0x26E9 (+236)

                        // bool fa = true;                                      code.hs:618

0x2600  0x44            PUSHI0
0x2601  0x45            PUSHI1
0x2602  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // string localName;                                    code.hs:619

0x2604  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string localType;                                    code.hs:620

0x2606  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string localOffset;                                  code.hs:621

0x2608  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:625

0x260A  0x1A 0x13       PUSHIB 0x13
0x260C  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x260E  0x2E 0x07       JZB 0x2615 (+7)

                        // Parser.Advance(); // }                               code.hs:627

0x2610  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:628

0x2612  0x33 0xAD 0x00  JW 0x26BF (+173)

                        // if (!fa)                                             code.hs:630

0x2615  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2617  0x2F 0x11       JNZB 0x2628 (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x2619  0x1A 0x0D       PUSHIB 0x0D
0x261B  0x1A 0xE5       PUSHIB 0xE5
0x261D  0x1A 0x12       PUSHIB 0x12
0x261F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2621  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:633

0x2623  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2625  0x32 0x9A 0x00  JNZW 0x26BF (+154)

                        // Parser.Consume(HopperToken.StringConstant, "local member name expected");

0x2628  0x1A 0x0B       PUSHIB 0x0B
0x262A  0x37 0xE1 0x01  PUSHIW 0x01E1
0x262D  0x1A 0x1A       PUSHIB 0x1A
0x262F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2631  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:639

0x2633  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2635  0x32 0x8A 0x00  JNZW 0x26BF (+138)

                        // previousToken = PreviousToken;                       code.hs:643

0x2638  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x263A  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x263C  0x24 0x02       SYSCALL0 0x02  // String.New
0x263E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2640  0x1A 0xD8       PUSHIB 0xD8
0x2642  0x1A 0x06       PUSHIB 0x06
0x2644  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2646  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2648  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:646

0x264A  0x1A 0x0E       PUSHIB 0x0E
0x264C  0x1A 0x3A       PUSHIB 0x3A
0x264E  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:647

0x2650  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2652  0x2E 0x06       JZB 0x2658 (+6)

                        // break;                                               code.hs:649

0x2654  0x28 0x02       DECSP 0x02
0x2656  0x30 0x69       JB 0x26BF (+105)

                        // Parser.Consume(HopperToken.StringConstant, "local member value expected");

0x2658  0x1A 0x0B       PUSHIB 0x0B
0x265A  0x37 0xFB 0x01  PUSHIW 0x01FB
0x265D  0x1A 0x1B       PUSHIB 0x1B
0x265F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2661  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:652

0x2663  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2665  0x2E 0x06       JZB 0x266B (+6)

                        // break;                                               code.hs:654

0x2667  0x28 0x02       DECSP 0x02
0x2669  0x30 0x56       JB 0x26BF (+86)

                        // previousToken = PreviousToken;                       code.hs:656

0x266B  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x266D  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x266F  0x24 0x02       SYSCALL0 0x02  // String.New
0x2671  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2673  0x1A 0xD8       PUSHIB 0xD8
0x2675  0x1A 0x06       PUSHIB 0x06
0x2677  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2679  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x267B  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // switch (membername)                                  code.hs:658

0x267D  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)

                        // case "name":                                         code.hs:660

0x267F  0x37 0x1B 0x01  PUSHIW 0x011B
0x2682  0x1A 0x04       PUSHIB 0x04
0x2684  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2686  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2688  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x268A  0x2F 0x08       JNZB 0x2692 (+8)

                        // localName = membervalue;                             code.hs:662

0x268C  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x268E  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:663

0x2690  0x30 0x25       JB 0x26B5 (+37)

                        // case "type":                                         code.hs:664

0x2692  0x37 0x44 0x01  PUSHIW 0x0144
0x2695  0x1A 0x04       PUSHIB 0x04
0x2697  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2699  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x269B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x269D  0x2F 0x08       JNZB 0x26A5 (+8)

                        // localType = membervalue;                             code.hs:666

0x269F  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x26A1  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // }                                                    code.hs:667

0x26A3  0x30 0x12       JB 0x26B5 (+18)

                        // case "offset":                                       code.hs:668

0x26A5  0x1A 0xFE       PUSHIB 0xFE
0x26A7  0x1A 0x06       PUSHIB 0x06
0x26A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x26AB  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x26AD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x26AF  0x2F 0x06       JNZB 0x26B5 (+6)

                        // localOffset = membervalue;                           code.hs:670

0x26B1  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x26B3  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // }                                                    code.hs:672

0x26B5  0x28 0x02       DECSP 0x02

                        // fa = false;                                          code.hs:673

0x26B7  0x44            PUSHI0
0x26B8  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:674

0x26BA  0x28 0x04       DECSP 0x04
0x26BC  0x33 0x4E 0xFF  JW 0x260A (-178)

                        // if (Parser.HadError)                                 code.hs:675

0x26BF  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x26C1  0x2E 0x06       JZB 0x26C7 (+6)

                        // break;                                               code.hs:677

0x26C3  0x28 0x0A       DECSP 0x0A
0x26C5  0x30 0x24       JB 0x26E9 (+36)

                        // <string> localList;                                  code.hs:679

0x26C7  0x1A 0x0F       PUSHIB 0x0F
0x26C9  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // localList.Append(localName);                         code.hs:680

0x26CB  0x56 0x1A 0x14  PUSHLOCALBB 0x141A
0x26CE  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localList.Append(localType);                         code.hs:681

0x26D0  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x26D3  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localList.Append(localOffset);                       code.hs:682

0x26D5  0x56 0x1A 0x18  PUSHLOCALBB 0x181A
0x26D8  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localLists[range] = localList;                       code.hs:683

0x26DA  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x26DD  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x26DF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:684

0x26E1  0x44            PUSHI0
0x26E2  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:685

0x26E4  0x28 0x0C       DECSP 0x0C
0x26E6  0x33 0xB7 0xFE  JW 0x259D (-329)

                        // if (keepSymbols)                                     code.hs:686

0x26E9  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x26EB  0x2E 0x0E       JZB 0x26F9 (+14)

                        // methodDictionary["locals"] = localLists;             code.hs:688

0x26ED  0x4E            PUSHLOCALB00
0x26EE  0x37 0x59 0x01  PUSHIW 0x0159
0x26F1  0x1A 0x06       PUSHIB 0x06
0x26F3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x26F5  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x26F7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:690

0x26F9  0x28 0x04       DECSP 0x04
0x26FB  0x33 0xEA 0x02  JW 0x29E5 (+746)

                        // case "arguments":                                    code.hs:691

0x26FE  0x1A 0x3E       PUSHIB 0x3E
0x2700  0x1A 0x09       PUSHIB 0x09
0x2702  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2704  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2706  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2708  0x32 0x7E 0x01  JNZW 0x2886 (+382)

                        // <string, <string> > argumentLists;                   code.hs:693

0x270B  0x1A 0x0F       PUSHIB 0x0F
0x270D  0x1A 0x19       PUSHIB 0x19
0x270F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:695

0x2711  0x1A 0x12       PUSHIB 0x12
0x2713  0x1A 0x7B       PUSHIB 0x7B
0x2715  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:696

0x2717  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2719  0x2E 0x07       JZB 0x2720 (+7)

                        // break;                                               code.hs:698

0x271B  0x28 0x08       DECSP 0x08
0x271D  0x33 0xD1 0x02  JW 0x29EE (+721)

                        // bool fc = true;                                      code.hs:700

0x2720  0x44            PUSHI0
0x2721  0x45            PUSHI1
0x2722  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:703

0x2724  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2726  0x32 0x4C 0x01  JNZW 0x2872 (+332)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:707

0x2729  0x1A 0x13       PUSHIB 0x13
0x272B  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x272D  0x2E 0x07       JZB 0x2734 (+7)

                        // Parser.Advance(); // }                               code.hs:709

0x272F  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:710

0x2731  0x33 0x41 0x01  JW 0x2872 (+321)

                        // if (!fc)                                             code.hs:712

0x2734  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2736  0x2F 0x11       JNZB 0x2747 (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x2738  0x1A 0x0D       PUSHIB 0x0D
0x273A  0x1A 0xE5       PUSHIB 0xE5
0x273C  0x1A 0x12       PUSHIB 0x12
0x273E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2740  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:715

0x2742  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2744  0x32 0x2E 0x01  JNZW 0x2872 (+302)

                        // Parser.Consume(HopperToken.StringConstant, "BP offset expected");

0x2747  0x1A 0x0B       PUSHIB 0x0B
0x2749  0x37 0x16 0x02  PUSHIW 0x0216
0x274C  0x1A 0x12       PUSHIB 0x12
0x274E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2750  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:722

0x2752  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2754  0x32 0x1E 0x01  JNZW 0x2872 (+286)

                        // previousToken = PreviousToken;                       code.hs:726

0x2757  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2759  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:727

0x275B  0x24 0x02       SYSCALL0 0x02  // String.New
0x275D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x275F  0x1A 0xD8       PUSHIB 0xD8
0x2761  0x1A 0x06       PUSHIB 0x06
0x2763  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2765  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2767  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:729

0x2769  0x1A 0x0E       PUSHIB 0x0E
0x276B  0x1A 0x3A       PUSHIB 0x3A
0x276D  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:730

0x276F  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2771  0x2E 0x07       JZB 0x2778 (+7)

                        // break;                                               code.hs:732

0x2773  0x28 0x02       DECSP 0x02
0x2775  0x33 0xFD 0x00  JW 0x2872 (+253)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:735

0x2778  0x1A 0x12       PUSHIB 0x12
0x277A  0x1A 0x7B       PUSHIB 0x7B
0x277C  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:736

0x277E  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2780  0x2E 0x07       JZB 0x2787 (+7)

                        // break;                                               code.hs:738

0x2782  0x28 0x02       DECSP 0x02
0x2784  0x33 0xEE 0x00  JW 0x2872 (+238)

                        // bool fa = true;                                      code.hs:740

0x2787  0x44            PUSHI0
0x2788  0x45            PUSHI1
0x2789  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // string argumentName;                                 code.hs:741

0x278B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string argumentRef;                                  code.hs:742

0x278D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string argumentType;                                 code.hs:743

0x278F  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:747

0x2791  0x1A 0x13       PUSHIB 0x13
0x2793  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2795  0x2E 0x07       JZB 0x279C (+7)

                        // Parser.Advance(); // }                               code.hs:749

0x2797  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:750

0x2799  0x33 0xAF 0x00  JW 0x2848 (+175)

                        // if (!fa)                                             code.hs:752

0x279C  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x279E  0x2F 0x11       JNZB 0x27AF (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x27A0  0x1A 0x0D       PUSHIB 0x0D
0x27A2  0x1A 0xE5       PUSHIB 0xE5
0x27A4  0x1A 0x12       PUSHIB 0x12
0x27A6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27A8  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:755

0x27AA  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x27AC  0x32 0x9C 0x00  JNZW 0x2848 (+156)

                        // Parser.Consume(HopperToken.StringConstant, "argument member name expected");

0x27AF  0x1A 0x0B       PUSHIB 0x0B
0x27B1  0x37 0x28 0x02  PUSHIW 0x0228
0x27B4  0x1A 0x1D       PUSHIB 0x1D
0x27B6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27B8  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:761

0x27BA  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x27BC  0x32 0x8C 0x00  JNZW 0x2848 (+140)

                        // previousToken = PreviousToken;                       code.hs:765

0x27BF  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x27C1  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x27C3  0x24 0x02       SYSCALL0 0x02  // String.New
0x27C5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x27C7  0x1A 0xD8       PUSHIB 0xD8
0x27C9  0x1A 0x06       PUSHIB 0x06
0x27CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27CD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x27CF  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:768

0x27D1  0x1A 0x0E       PUSHIB 0x0E
0x27D3  0x1A 0x3A       PUSHIB 0x3A
0x27D5  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:769

0x27D7  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x27D9  0x2E 0x07       JZB 0x27E0 (+7)

                        // break;                                               code.hs:771

0x27DB  0x28 0x02       DECSP 0x02
0x27DD  0x33 0x6B 0x00  JW 0x2848 (+107)

                        // Parser.Consume(HopperToken.StringConstant, "argument member value expected");

0x27E0  0x1A 0x0B       PUSHIB 0x0B
0x27E2  0x37 0x45 0x02  PUSHIW 0x0245
0x27E5  0x1A 0x1E       PUSHIB 0x1E
0x27E7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27E9  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:774

0x27EB  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x27ED  0x2E 0x06       JZB 0x27F3 (+6)

                        // break;                                               code.hs:776

0x27EF  0x28 0x02       DECSP 0x02
0x27F1  0x30 0x57       JB 0x2848 (+87)

                        // previousToken = PreviousToken;                       code.hs:778

0x27F3  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x27F5  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x27F7  0x24 0x02       SYSCALL0 0x02  // String.New
0x27F9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x27FB  0x1A 0xD8       PUSHIB 0xD8
0x27FD  0x1A 0x06       PUSHIB 0x06
0x27FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2801  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2803  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // switch (membername)                                  code.hs:780

0x2805  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)

                        // case "name":                                         code.hs:782

0x2807  0x37 0x1B 0x01  PUSHIW 0x011B
0x280A  0x1A 0x04       PUSHIB 0x04
0x280C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x280E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2810  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2812  0x2F 0x08       JNZB 0x281A (+8)

                        // argumentName = membervalue;                          code.hs:784

0x2814  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x2816  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:785

0x2818  0x30 0x26       JB 0x283E (+38)

                        // case "type":                                         code.hs:786

0x281A  0x37 0x44 0x01  PUSHIW 0x0144
0x281D  0x1A 0x04       PUSHIB 0x04
0x281F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2821  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2823  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2825  0x2F 0x08       JNZB 0x282D (+8)

                        // argumentType = membervalue;                          code.hs:788

0x2827  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x2829  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // }                                                    code.hs:789

0x282B  0x30 0x13       JB 0x283E (+19)

                        // case "ref":                                          code.hs:790

0x282D  0x37 0x56 0x01  PUSHIW 0x0156
0x2830  0x1A 0x03       PUSHIB 0x03
0x2832  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2834  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2836  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2838  0x2F 0x06       JNZB 0x283E (+6)

                        // argumentRef = membervalue;                           code.hs:792

0x283A  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x283C  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // }                                                    code.hs:794

0x283E  0x28 0x02       DECSP 0x02

                        // fa = false;                                          code.hs:795

0x2840  0x44            PUSHI0
0x2841  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:796

0x2843  0x28 0x04       DECSP 0x04
0x2845  0x33 0x4C 0xFF  JW 0x2791 (-180)

                        // if (Parser.HadError)                                 code.hs:797

0x2848  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x284A  0x2E 0x06       JZB 0x2850 (+6)

                        // break;                                               code.hs:799

0x284C  0x28 0x0A       DECSP 0x0A
0x284E  0x30 0x24       JB 0x2872 (+36)

                        // <string> argumentList;                               code.hs:801

0x2850  0x1A 0x0F       PUSHIB 0x0F
0x2852  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // argumentList.Append(argumentRef);                    code.hs:802

0x2854  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x2857  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentList.Append(argumentType);                   code.hs:803

0x2859  0x56 0x1A 0x18  PUSHLOCALBB 0x181A
0x285C  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentList.Append(argumentName);                   code.hs:804

0x285E  0x56 0x1A 0x14  PUSHLOCALBB 0x141A
0x2861  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentLists[offset] = argumentList;                code.hs:805

0x2863  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x2866  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x2868  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:808

0x286A  0x44            PUSHI0
0x286B  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:809

0x286D  0x28 0x0C       DECSP 0x0C
0x286F  0x33 0xB5 0xFE  JW 0x2724 (-331)

                        // if (keepSymbols)                                     code.hs:810

0x2872  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x2874  0x2E 0x0D       JZB 0x2881 (+13)

                        // methodDictionary["arguments"] = argumentLists;

0x2876  0x4E            PUSHLOCALB00
0x2877  0x1A 0x3E       PUSHIB 0x3E
0x2879  0x1A 0x09       PUSHIB 0x09
0x287B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x287D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x287F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:814

0x2881  0x28 0x04       DECSP 0x04
0x2883  0x33 0x62 0x01  JW 0x29E5 (+354)

                        // case "debug":                                        code.hs:815

0x2886  0x37 0x63 0x01  PUSHIW 0x0163
0x2889  0x1A 0x05       PUSHIB 0x05
0x288B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x288D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x288F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2891  0x32 0xB6 0x00  JNZW 0x2947 (+182)

                        // <string,string> debugInfo;                           code.hs:817

0x2894  0x1A 0x0F       PUSHIB 0x0F
0x2896  0x1A 0x0F       PUSHIB 0x0F
0x2898  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:818

0x289A  0x1A 0x12       PUSHIB 0x12
0x289C  0x1A 0x7B       PUSHIB 0x7B
0x289E  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:819

0x28A0  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x28A2  0x2E 0x07       JZB 0x28A9 (+7)

                        // break;                                               code.hs:821

0x28A4  0x28 0x08       DECSP 0x08
0x28A6  0x33 0x48 0x01  JW 0x29EE (+328)

                        // bool fc = true;                                      code.hs:823

0x28A9  0x44            PUSHI0
0x28AA  0x45            PUSHI1
0x28AB  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:826

0x28AD  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x28AF  0x32 0x83 0x00  JNZW 0x2932 (+131)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:830

0x28B2  0x1A 0x13       PUSHIB 0x13
0x28B4  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x28B6  0x2E 0x07       JZB 0x28BD (+7)

                        // Parser.Advance(); // }                               code.hs:832

0x28B8  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:833

0x28BA  0x33 0x78 0x00  JW 0x2932 (+120)

                        // if (!fc)                                             code.hs:835

0x28BD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x28BF  0x2F 0x10       JNZB 0x28CF (+16)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x28C1  0x1A 0x0D       PUSHIB 0x0D
0x28C3  0x1A 0xE5       PUSHIB 0xE5
0x28C5  0x1A 0x12       PUSHIB 0x12
0x28C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28C9  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:838

0x28CB  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x28CD  0x2F 0x65       JNZB 0x2932 (+101)

                        // Parser.Consume(HopperToken.StringConstant, "offset key expected");

0x28CF  0x1A 0x0B       PUSHIB 0x0B
0x28D1  0x37 0x63 0x02  PUSHIW 0x0263
0x28D4  0x1A 0x13       PUSHIB 0x13
0x28D6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28D8  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:845

0x28DA  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x28DC  0x2F 0x56       JNZB 0x2932 (+86)

                        // previousToken = PreviousToken;                       code.hs:849

0x28DE  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x28E0  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:850

0x28E2  0x24 0x02       SYSCALL0 0x02  // String.New
0x28E4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x28E6  0x1A 0xD8       PUSHIB 0xD8
0x28E8  0x1A 0x06       PUSHIB 0x06
0x28EA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28EC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x28EE  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:852

0x28F0  0x1A 0x0E       PUSHIB 0x0E
0x28F2  0x1A 0x3A       PUSHIB 0x3A
0x28F4  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:853

0x28F6  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x28F8  0x2E 0x06       JZB 0x28FE (+6)

                        // break;                                               code.hs:855

0x28FA  0x28 0x02       DECSP 0x02
0x28FC  0x30 0x36       JB 0x2932 (+54)

                        // Parser.Consume(HopperToken.StringConstant, "line value expected");

0x28FE  0x1A 0x0B       PUSHIB 0x0B
0x2900  0x37 0x76 0x02  PUSHIW 0x0276
0x2903  0x1A 0x13       PUSHIB 0x13
0x2905  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2907  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:859

0x2909  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x290B  0x2E 0x06       JZB 0x2911 (+6)

                        // break;                                               code.hs:861

0x290D  0x28 0x02       DECSP 0x02
0x290F  0x30 0x23       JB 0x2932 (+35)

                        // previousToken = PreviousToken;                       code.hs:863

0x2911  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2913  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string ln = previousToken["lexeme"];                 code.hs:864

0x2915  0x24 0x02       SYSCALL0 0x02  // String.New
0x2917  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2919  0x1A 0xD8       PUSHIB 0xD8
0x291B  0x1A 0x06       PUSHIB 0x06
0x291D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x291F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2921  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // debugInfo[offset] = ln;                              code.hs:866

0x2923  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x2926  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2928  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:868

0x292A  0x44            PUSHI0
0x292B  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:869

0x292D  0x28 0x04       DECSP 0x04
0x292F  0x33 0x7E 0xFF  JW 0x28AD (-130)

                        // if (keepSymbols)                                     code.hs:870

0x2932  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x2934  0x2E 0x0E       JZB 0x2942 (+14)

                        // methodDictionary["debug"] = debugInfo;               code.hs:872

0x2936  0x4E            PUSHLOCALB00
0x2937  0x37 0x63 0x01  PUSHIW 0x0163
0x293A  0x1A 0x05       PUSHIB 0x05
0x293C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x293E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2940  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:874

0x2942  0x28 0x04       DECSP 0x04
0x2944  0x33 0xA1 0x00  JW 0x29E5 (+161)

                        // case "code":                                         code.hs:875

0x2947  0x1A 0x09       PUSHIB 0x09
0x2949  0x1A 0x04       PUSHIB 0x04
0x294B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x294D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x294F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2951  0x32 0x7D 0x00  JNZW 0x29CE (+125)

                        // Parser.Consume(HopperToken.LBracket, '[');           code.hs:877

0x2954  0x1A 0x14       PUSHIB 0x14
0x2956  0x1A 0x5B       PUSHIB 0x5B
0x2958  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:878

0x295A  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x295C  0x2E 0x07       JZB 0x2963 (+7)

                        // break;                                               code.hs:880

0x295E  0x28 0x06       DECSP 0x06
0x2960  0x33 0x8E 0x00  JW 0x29EE (+142)

                        // bool fc = true;                                      code.hs:882

0x2963  0x44            PUSHI0
0x2964  0x45            PUSHI1
0x2965  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 code.hs:885

0x2967  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2969  0x2F 0x61       JNZB 0x29CA (+97)

                        // if (Parser.Check(HopperToken.RBracket))              code.hs:889

0x296B  0x1A 0x15       PUSHIB 0x15
0x296D  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x296F  0x2E 0x06       JZB 0x2975 (+6)

                        // Parser.Advance(); // ]                               code.hs:891

0x2971  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               code.hs:892

0x2973  0x30 0x57       JB 0x29CA (+87)

                        // if (!fc)                                             code.hs:894

0x2975  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2977  0x2F 0x10       JNZB 0x2987 (+16)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x2979  0x1A 0x0D       PUSHIB 0x0D
0x297B  0x1A 0xE5       PUSHIB 0xE5
0x297D  0x1A 0x12       PUSHIB 0x12
0x297F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2981  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:897

0x2983  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2985  0x2F 0x45       JNZB 0x29CA (+69)

                        // Parser.Consume(HopperToken.Integer, "code expected");

0x2987  0x1A 0x09       PUSHIB 0x09
0x2989  0x37 0x89 0x02  PUSHIW 0x0289
0x298C  0x1A 0x0D       PUSHIB 0x0D
0x298E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2990  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:903

0x2992  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2994  0x2F 0x36       JNZB 0x29CA (+54)

                        // if (keepCode)                                        code.hs:907

0x2996  0x1C 0xF4       PUSHLOCALB 0xF4 (BP-12)
0x2998  0x2E 0x27       JZB 0x29BF (+39)

                        // uint hc;                                             code.hs:909

0x299A  0x44            PUSHI0

                        // previousToken = PreviousToken;                       code.hs:910

0x299B  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x299D  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string hexcode = previousToken["lexeme"];            code.hs:911

0x299F  0x24 0x02       SYSCALL0 0x02  // String.New
0x29A1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x29A3  0x1A 0xD8       PUSHIB 0xD8
0x29A5  0x1A 0x06       PUSHIB 0x06
0x29A7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x29A9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x29AB  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Token.TryParseUInt(hexcode, ref hc))             code.hs:912

0x29AD  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x29AF  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x29B1  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x29B3  0x2E 0x02       JZB 0x29B5 (+2)

                        // code.Append(byte(hc));                               code.hs:915

0x29B5  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x29B7  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x29B9  0x51 0x03       CAST 0x03
0x29BB  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    code.hs:916

0x29BD  0x28 0x04       DECSP 0x04

                        // codeLength++;                                        code.hs:917

0x29BF  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x29C1  0x45            PUSHI1
0x29C2  0x00            ADD
0x29C3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // fc = false;                                          code.hs:918

0x29C5  0x44            PUSHI0
0x29C6  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // } // loop                                            code.hs:919

0x29C8  0x30 0x9F       JB 0x2967 (-97)

                        // }                                                    code.hs:920

0x29CA  0x28 0x02       DECSP 0x02
0x29CC  0x30 0x19       JB 0x29E5 (+25)

                        // Parser.Error("unexpected key '" + keyName + "'");

0x29CE  0x37 0x96 0x02  PUSHIW 0x0296
0x29D1  0x1A 0x10       PUSHIB 0x10
0x29D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x29D5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x29D7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x29D9  0x1A 0x27       PUSHIB 0x27
0x29DB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x29DD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x29DF  0x2C 0xA1       CALLB 0xA1     // Parser.Error

                        // break;                                               code.hs:924

0x29E1  0x28 0x06       DECSP 0x06
0x29E3  0x30 0x0B       JB 0x29EE (+11)

                        // }                                                    code.hs:926

0x29E5  0x28 0x02       DECSP 0x02

                        // first = false;                                       code.hs:927

0x29E7  0x44            PUSHI0
0x29E8  0x4D            POPLOCALB02

                        // } // loop                                            code.hs:928

0x29E9  0x28 0x04       DECSP 0x04
0x29EB  0x33 0x08 0xFA  JW 0x23F3 (-1528)

                        // if (!isData && keepSymbols)                          code.hs:930

0x29EE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x29F0  0x41            BOOLNOT
0x29F1  0x27 0x00       DUP 0x00
0x29F3  0x2E 0x05       JZB 0x29F8 (+5)
0x29F5  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x29F7  0x0C            BOOLAND
0x29F8  0x2E 0x25       JZB 0x2A1D (+37)

                        // uint iMethod;                                        code.hs:932

0x29FA  0x44            PUSHI0

                        // if (Token.TryParseUInt(methodIndex, ref iMethod))

0x29FB  0x1C 0xF2       PUSHLOCALB 0xF2 (BP-14)
0x29FD  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x29FF  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x2A01  0x2E 0x02       JZB 0x2A03 (+2)

                        // string name = "0x" + iMethod.ToHexString(4);

0x2A03  0x24 0x02       SYSCALL0 0x02  // String.New
0x2A05  0x37 0x30 0x78  PUSHIW 0x7830
0x2A08  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2A0A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2A0C  0x1A 0x04       PUSHIB 0x04
0x2A0E  0x2C 0xC8       CALLB 0xC8     // UInt.ToHexString
0x2A10  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2A12  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // debugSymbols[name] = methodDictionary;               code.hs:937

0x2A14  0x20 0x10       PUSHGLOBALB 0x10
0x2A16  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2A18  0x4E            PUSHLOCALB00
0x2A19  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:938

0x2A1B  0x28 0x04       DECSP 0x04

                        // return !Parser.HadError;                             code.hs:939

0x2A1D  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2A1F  0x41            BOOLNOT
0x2A20  0x2B 0x14       RETRETB 0x14


// /source/compiler/json/code.hs:344
// ####  Code.MapSource(..)  ####                                               0x005A

0x2A22  0x49            ENTER

                        // foreach (var kv in debugSymbols)                     code.hs:345

0x2A23  0x20 0x10       PUSHGLOBALB 0x10
0x2A25  0x1A 0x0F       PUSHIB 0x0F
0x2A27  0x1A 0x0F       PUSHIB 0x0F
0x2A29  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2A2B  0x44            PUSHI0
0x2A2C  0x4E            PUSHLOCALB00
0x2A2D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2A2F  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x2A31  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2A33  0x4D            POPLOCALB02
0x2A34  0x31 0xD5 0x00  JZW 0x2B09 (+213)

                        // if (kv.key == "globals")                             code.hs:347

0x2A37  0x4F            PUSHLOCALB02
0x2A38  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2A3A  0x1A 0xDE       PUSHIB 0xDE
0x2A3C  0x1A 0x07       PUSHIB 0x07
0x2A3E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2A40  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2A42  0x2E 0xEA       JZB 0x2A2C (-22)

                        // string hex = kv.key;                                 code.hs:352

0x2A44  0x24 0x02       SYSCALL0 0x02  // String.New
0x2A46  0x4F            PUSHLOCALB02
0x2A47  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2A49  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint index;                                          code.hs:353

0x2A4B  0x44            PUSHI0

                        // if (!TryParseHex(hex, ref index))                    code.hs:354

0x2A4C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2A4E  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x2A50  0x2C 0x7A       CALLB 0x7A     // Token.TryParseHex
0x2A52  0x2F 0x06       JNZB 0x2A58 (+6)

                        // Diagnostics.Die(0x03);                               code.hs:356

0x2A54  0x1A 0x03       PUSHIB 0x03
0x2A56  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // uint start = methodStart[index];                     code.hs:358

0x2A58  0x44            PUSHI0
0x2A59  0x20 0x0A       PUSHGLOBALB 0x0A
0x2A5B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2A5D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2A5F  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // <string,variant> methodSymbols = kv.value;           code.hs:359

0x2A61  0x1A 0x0F       PUSHIB 0x0F
0x2A63  0x1A 0x14       PUSHIB 0x14
0x2A65  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2A67  0x4F            PUSHLOCALB02
0x2A68  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2A6A  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string path = methodSymbols["source"];               code.hs:360

0x2A6C  0x24 0x02       SYSCALL0 0x02  // String.New
0x2A6E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2A70  0x37 0x8D 0x01  PUSHIW 0x018D
0x2A73  0x1A 0x06       PUSHIB 0x06
0x2A75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2A77  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2A79  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string lpath = path.ToLower();                       code.hs:361

0x2A7B  0x24 0x02       SYSCALL0 0x02  // String.New
0x2A7D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2A7F  0x2C 0xF1       CALLB 0xF1     // String.ToLower
0x2A81  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // <uint,uint> map;                                     code.hs:362

0x2A83  0x1A 0x04       PUSHIB 0x04
0x2A85  0x1A 0x04       PUSHIB 0x04
0x2A87  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (lineMap.Contains(lpath))                         code.hs:363

0x2A89  0x20 0x12       PUSHGLOBALB 0x12
0x2A8B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2A8D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2A8F  0x2E 0x0A       JZB 0x2A99 (+10)

                        // map = lineMap[lpath];                                code.hs:365

0x2A91  0x20 0x12       PUSHGLOBALB 0x12
0x2A93  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2A95  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2A97  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // <string,string> smap = methodSymbols["debug"];

0x2A99  0x1A 0x0F       PUSHIB 0x0F
0x2A9B  0x1A 0x0F       PUSHIB 0x0F
0x2A9D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2A9F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2AA1  0x37 0x63 0x01  PUSHIW 0x0163
0x2AA4  0x1A 0x05       PUSHIB 0x05
0x2AA6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AA8  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2AAA  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // foreach (var kv2 in smap)                            code.hs:368

0x2AAC  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2AAE  0x1A 0x0F       PUSHIB 0x0F
0x2AB0  0x1A 0x0F       PUSHIB 0x0F
0x2AB2  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2AB4  0x44            PUSHI0
0x2AB5  0x56 0x16 0x1A  PUSHLOCALBB 0x1A16
0x2AB8  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x2ABA  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x2ABC  0x1B 0x18       POPLOCALB 0x18 (BP+24)
0x2ABE  0x2E 0x3D       JZB 0x2AFB (+61)

                        // uint offset;                                         code.hs:370

0x2AC0  0x44            PUSHI0

                        // uint ln;                                             code.hs:371

0x2AC1  0x44            PUSHI0

                        // if (Token.TryParseUInt(kv2.key, ref offset))

0x2AC2  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x2AC4  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2AC6  0x21 0x1C       PUSHSTACKADDRB 0x1C (BP+28)
0x2AC8  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x2ACA  0x2E 0x02       JZB 0x2ACC (+2)

                        // if (Token.TryParseUInt(kv2.value, ref ln))           code.hs:375

0x2ACC  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x2ACE  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2AD0  0x21 0x1E       PUSHSTACKADDRB 0x1E (BP+30)
0x2AD2  0x2C 0x79       CALLB 0x79     // Token.TryParseUInt
0x2AD4  0x2E 0x02       JZB 0x2AD6 (+2)

                        // uint address = start + offset;                       code.hs:378

0x2AD6  0x44            PUSHI0
0x2AD7  0x56 0x0A 0x1C  PUSHLOCALBB 0x1C0A
0x2ADA  0x00            ADD
0x2ADB  0x1B 0x20       POPLOCALB 0x20 (BP+32)

                        // map[ln] = address;                                   code.hs:379

0x2ADD  0x56 0x12 0x1E  PUSHLOCALBB 0x1E12
0x2AE0  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2AE2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // codeMap[address] = path + ":" + kv2.value;           code.hs:380

0x2AE4  0x20 0x14       PUSHGLOBALB 0x14
0x2AE6  0x56 0x20 0x0E  PUSHLOCALBB 0x0E20
0x2AE9  0x1A 0x3A       PUSHIB 0x3A
0x2AEB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2AED  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2AEF  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x2AF1  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2AF3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2AF5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:381

0x2AF7  0x28 0x06       DECSP 0x06
0x2AF9  0x30 0xBC       JB 0x2AB5 (-68)
0x2AFB  0x28 0x06       DECSP 0x06

                        // lineMap[lpath] = map;                                code.hs:382

0x2AFD  0x20 0x12       PUSHGLOBALB 0x12
0x2AFF  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x2B02  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:383

0x2B04  0x28 0x10       DECSP 0x10
0x2B06  0x33 0x26 0xFF  JW 0x2A2C (-218)
0x2B09  0x28 0x06       DECSP 0x06

                        // }                                                    code.hs:384

0x2B0B  0x4A            RET0


// /source/compiler/json/json.hs:338
// ####  JSON.Read(..)  ####                                                    0x004E

0x2B0C  0x49            ENTER

                        // Scanner.New();                                       json.hs:339

0x2B0D  0x2C 0x80       CALLB 0x80     // Scanner.New

                        // Parser.Reset();                                      json.hs:340

0x2B0F  0x2C 0x9D       CALLB 0x9D     // Parser.Reset

                        // Scanner.Load(path);                                  json.hs:341

0x2B11  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2B13  0x2C 0x81       CALLB 0x81     // Scanner.Load

                        // long pos = 0;                                        json.hs:342

0x2B15  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x2B17  0x44            PUSHI0
0x2B18  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x2B1A  0x5D            POPCOPYLOCALB00

                        // Scanner.Reset(pos, 1, path);                         json.hs:343

0x2B1B  0x4E            PUSHLOCALB00
0x2B1C  0x45            PUSHI1
0x2B1D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2B1F  0x2C 0x82       CALLB 0x82     // Scanner.Reset

                        // Parser.Advance(); // load up first token             json.hs:345

0x2B21  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // Parser.Consume(HopperToken.LBrace, '{');             json.hs:346

0x2B23  0x1A 0x12       PUSHIB 0x12
0x2B25  0x1A 0x7B       PUSHIB 0x7B
0x2B27  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // bool first = true;                                   json.hs:347

0x2B29  0x44            PUSHI0
0x2B2A  0x45            PUSHI1
0x2B2B  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBrace))                json.hs:356

0x2B2C  0x1A 0x13       PUSHIB 0x13
0x2B2E  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2B30  0x2F 0x77       JNZB 0x2BA7 (+119)

                        // if (!first)                                          json.hs:360

0x2B32  0x4F            PUSHLOCALB02
0x2B33  0x2F 0x08       JNZB 0x2B3B (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:362

0x2B35  0x1A 0x0D       PUSHIB 0x0D
0x2B37  0x1A 0x2C       PUSHIB 0x2C
0x2B39  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // first = false;                                       json.hs:364

0x2B3B  0x44            PUSHI0
0x2B3C  0x4D            POPLOCALB02

                        // Parser.Consume(HopperToken.StringConstant, "section name expected");

0x2B3D  0x1A 0x0B       PUSHIB 0x0B
0x2B3F  0x37 0xA6 0x02  PUSHIW 0x02A6
0x2B42  0x1A 0x15       PUSHIB 0x15
0x2B44  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B46  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // <string,string> previousToken = PreviousToken;

0x2B48  0x1A 0x0F       PUSHIB 0x0F
0x2B4A  0x1A 0x0F       PUSHIB 0x0F
0x2B4C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2B4E  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2B50  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string sectionName = previousToken["lexeme"];

0x2B52  0x24 0x02       SYSCALL0 0x02  // String.New
0x2B54  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B56  0x1A 0xD8       PUSHIB 0xD8
0x2B58  0x1A 0x06       PUSHIB 0x06
0x2B5A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B5C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B5E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Parser.Consume(HopperToken.Colon, ':');              json.hs:374

0x2B60  0x1A 0x0E       PUSHIB 0x0E
0x2B62  0x1A 0x3A       PUSHIB 0x3A
0x2B64  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // <string,string> currentToken = CurrentToken;

0x2B66  0x1A 0x0F       PUSHIB 0x0F
0x2B68  0x1A 0x0F       PUSHIB 0x0F
0x2B6A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2B6C  0x2C 0x99       CALLB 0x99     // Parser.CurrentToken_Get
0x2B6E  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (Parser.Check(HopperToken.LBrace))                json.hs:382

0x2B70  0x1A 0x12       PUSHIB 0x12
0x2B72  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2B74  0x2E 0x17       JZB 0x2B8B (+23)

                        // <string, variant> section = ReadDictionary();

0x2B76  0x1A 0x0F       PUSHIB 0x0F
0x2B78  0x1A 0x14       PUSHIB 0x14
0x2B7A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2B7C  0x2C 0x4D       CALLB 0x4D     // JSON.ReadDictionary
0x2B7E  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[sectionName] = section;                         json.hs:385

0x2B80  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x2B82  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2B85  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:386

0x2B87  0x28 0x02       DECSP 0x02
0x2B89  0x30 0x19       JB 0x2BA2 (+25)

                        // else if (Parser.Check(HopperToken.LBracket))

0x2B8B  0x1A 0x14       PUSHIB 0x14
0x2B8D  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2B8F  0x2E 0x13       JZB 0x2BA2 (+19)

                        // <string> section = ReadList();                       json.hs:389

0x2B91  0x1A 0x0F       PUSHIB 0x0F
0x2B93  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2B95  0x2C 0x4C       CALLB 0x4C     // JSON.ReadList
0x2B97  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[sectionName] = section;                         json.hs:390

0x2B99  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x2B9B  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2B9E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:391

0x2BA0  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:399

0x2BA2  0x28 0x06       DECSP 0x06
0x2BA4  0x33 0x88 0xFF  JW 0x2B2C (-120)

                        // bool success = !Parser.HadError;                     json.hs:400

0x2BA7  0x44            PUSHI0
0x2BA8  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x2BAA  0x41            BOOLNOT
0x2BAB  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // return success;                                      json.hs:408

0x2BAD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2BAF  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/json/json.hs:206
// ####  JSON.Write(..)  ####                                                   0x004B

0x2BB1  0x49            ENTER

                        // if (File.Exists(path))                               json.hs:207

0x2BB2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2BB4  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x2BB6  0x2E 0x06       JZB 0x2BBC (+6)

                        // File.Delete(path);                                   json.hs:209

0x2BB8  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2BBA  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // file jsonFile = File.Create(path);                   json.hs:211

0x2BBC  0x24 0x60       SYSCALL0 0x60  // File.New
0x2BBE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2BC0  0x24 0x62       SYSCALL0 0x62  // File.Create
0x2BC2  0x5D            POPCOPYLOCALB00

                        // ExportDictionary(jsonFile, dict, 0);                 json.hs:212

0x2BC3  0x4E            PUSHLOCALB00
0x2BC4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2BC6  0x44            PUSHI0
0x2BC7  0x2C 0x4A       CALLB 0x4A     // JSON.ExportDictionary

                        // jsonFile.Flush();                                    json.hs:213

0x2BC9  0x4E            PUSHLOCALB00
0x2BCA  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // return true;                                         json.hs:214

0x2BCC  0x45            PUSHI1
0x2BCD  0x2B 0x06       RETRETB 0x06


// /source/compiler/json/json.hs:257
// ####  JSON.ReadDictionary(..)  ####                                          0x004D

0x2BCF  0x49            ENTER

                        // <string, variant> dict;                              json.hs:258

0x2BD0  0x1A 0x0F       PUSHIB 0x0F
0x2BD2  0x1A 0x14       PUSHIB 0x14
0x2BD4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             json.hs:259

0x2BD6  0x1A 0x12       PUSHIB 0x12
0x2BD8  0x1A 0x7B       PUSHIB 0x7B
0x2BDA  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // bool first = true;                                   json.hs:260

0x2BDC  0x44            PUSHI0
0x2BDD  0x45            PUSHI1
0x2BDE  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBrace))                json.hs:269

0x2BDF  0x1A 0x13       PUSHIB 0x13
0x2BE1  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2BE3  0x2E 0x07       JZB 0x2BEA (+7)

                        // Parser.Advance(); // }                               json.hs:271

0x2BE5  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               json.hs:272

0x2BE7  0x33 0xB4 0x00  JW 0x2C9B (+180)

                        // if (!first)                                          json.hs:274

0x2BEA  0x4F            PUSHLOCALB02
0x2BEB  0x2F 0x08       JNZB 0x2BF3 (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:276

0x2BED  0x1A 0x0D       PUSHIB 0x0D
0x2BEF  0x1A 0x2C       PUSHIB 0x2C
0x2BF1  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // first = false;                                       json.hs:278

0x2BF3  0x44            PUSHI0
0x2BF4  0x4D            POPLOCALB02

                        // Parser.Consume(HopperToken.StringConstant, "key string expected");

0x2BF5  0x1A 0x0B       PUSHIB 0x0B
0x2BF7  0x37 0xBB 0x02  PUSHIW 0x02BB
0x2BFA  0x1A 0x13       PUSHIB 0x13
0x2BFC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2BFE  0x2C 0xA6       CALLB 0xA6     // Parser.Consume

                        // <string,string> previousToken = PreviousToken;

0x2C00  0x1A 0x0F       PUSHIB 0x0F
0x2C02  0x1A 0x0F       PUSHIB 0x0F
0x2C04  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2C06  0x2C 0x9A       CALLB 0x9A     // Parser.PreviousToken_Get
0x2C08  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string name = previousToken["lexeme"];               json.hs:287

0x2C0A  0x24 0x02       SYSCALL0 0x02  // String.New
0x2C0C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C0E  0x1A 0xD8       PUSHIB 0xD8
0x2C10  0x1A 0x06       PUSHIB 0x06
0x2C12  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C14  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2C16  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Parser.Consume(HopperToken.Colon, ':');              json.hs:288

0x2C18  0x1A 0x0E       PUSHIB 0x0E
0x2C1A  0x1A 0x3A       PUSHIB 0x3A
0x2C1C  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // <string,string> currentToken = CurrentToken;

0x2C1E  0x1A 0x0F       PUSHIB 0x0F
0x2C20  0x1A 0x0F       PUSHIB 0x0F
0x2C22  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2C24  0x2C 0x99       CALLB 0x99     // Parser.CurrentToken_Get
0x2C26  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (Parser.Check(HopperToken.StringConstant))

0x2C28  0x1A 0x0B       PUSHIB 0x0B
0x2C2A  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2C2C  0x2E 0x14       JZB 0x2C40 (+20)

                        // Parser.Advance();                                    json.hs:298

0x2C2E  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // dict[name] = currentToken["lexeme"];                 json.hs:299

0x2C30  0x4E            PUSHLOCALB00
0x2C31  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x2C34  0x1A 0xD8       PUSHIB 0xD8
0x2C36  0x1A 0x06       PUSHIB 0x06
0x2C38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C3A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2C3C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:300

0x2C3E  0x30 0x58       JB 0x2C96 (+88)

                        // else if (Parser.Check(HopperToken.Integer))

0x2C40  0x1A 0x09       PUSHIB 0x09
0x2C42  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2C44  0x2E 0x22       JZB 0x2C66 (+34)

                        // Parser.Advance();                                    json.hs:303

0x2C46  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // long l;                                              json.hs:304

0x2C48  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (Token.TryParseLong(currentToken["lexeme"], ref l))

0x2C4A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2C4C  0x1A 0xD8       PUSHIB 0xD8
0x2C4E  0x1A 0x06       PUSHIB 0x06
0x2C50  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C52  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2C54  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x2C56  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x2C58  0x2E 0x0A       JZB 0x2C62 (+10)

                        // dict[name] = l.ToString();                           json.hs:307

0x2C5A  0x4E            PUSHLOCALB00
0x2C5B  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2C5E  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x2C60  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:315

0x2C62  0x28 0x02       DECSP 0x02
0x2C64  0x30 0x32       JB 0x2C96 (+50)

                        // else if (Parser.Check(HopperToken.LBracket))

0x2C66  0x1A 0x14       PUSHIB 0x14
0x2C68  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2C6A  0x2E 0x14       JZB 0x2C7E (+20)

                        // <string> lst = ReadList();                           json.hs:318

0x2C6C  0x1A 0x0F       PUSHIB 0x0F
0x2C6E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2C70  0x2C 0x4C       CALLB 0x4C     // JSON.ReadList
0x2C72  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[name] = lst;                                    json.hs:319

0x2C74  0x4E            PUSHLOCALB00
0x2C75  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2C78  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:320

0x2C7A  0x28 0x02       DECSP 0x02
0x2C7C  0x30 0x1A       JB 0x2C96 (+26)

                        // else if (Parser.Check(HopperToken.LBrace))           json.hs:321

0x2C7E  0x1A 0x12       PUSHIB 0x12
0x2C80  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2C82  0x2E 0x14       JZB 0x2C96 (+20)

                        // <string, variant> subDict = ReadDictionary();

0x2C84  0x1A 0x0F       PUSHIB 0x0F
0x2C86  0x1A 0x14       PUSHIB 0x14
0x2C88  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2C8A  0x2C 0x4D       CALLB 0x4D     // JSON.ReadDictionary
0x2C8C  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[name] = subDict;                                json.hs:324

0x2C8E  0x4E            PUSHLOCALB00
0x2C8F  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2C92  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:325

0x2C94  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:332

0x2C96  0x28 0x06       DECSP 0x06
0x2C98  0x33 0x47 0xFF  JW 0x2BDF (-185)

                        // return dict;                                         json.hs:333

0x2C9B  0x4E            PUSHLOCALB00
0x2C9C  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:218
// ####  JSON.ReadList(..)  ####                                                0x004C

0x2C9E  0x49            ENTER

                        // <string> lst;                                        json.hs:219

0x2C9F  0x1A 0x0F       PUSHIB 0x0F
0x2CA1  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // Parser.Consume(HopperToken.LBracket, '[');           json.hs:220

0x2CA3  0x1A 0x14       PUSHIB 0x14
0x2CA5  0x1A 0x5B       PUSHIB 0x5B
0x2CA7  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // bool first = true;                                   json.hs:221

0x2CA9  0x44            PUSHI0
0x2CAA  0x45            PUSHI1
0x2CAB  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBracket))              json.hs:230

0x2CAC  0x1A 0x15       PUSHIB 0x15
0x2CAE  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2CB0  0x2E 0x06       JZB 0x2CB6 (+6)

                        // Parser.Advance(); // ]                               json.hs:232

0x2CB2  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               json.hs:233

0x2CB4  0x30 0x38       JB 0x2CEC (+56)

                        // if (!first)                                          json.hs:235

0x2CB6  0x4F            PUSHLOCALB02
0x2CB7  0x2F 0x08       JNZB 0x2CBF (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:237

0x2CB9  0x1A 0x0D       PUSHIB 0x0D
0x2CBB  0x1A 0x2C       PUSHIB 0x2C
0x2CBD  0x2C 0xA5       CALLB 0xA5     // Parser.Consume

                        // first = false;                                       json.hs:239

0x2CBF  0x44            PUSHI0
0x2CC0  0x4D            POPLOCALB02

                        // <string,string> currentToken = CurrentToken;

0x2CC1  0x1A 0x0F       PUSHIB 0x0F
0x2CC3  0x1A 0x0F       PUSHIB 0x0F
0x2CC5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2CC7  0x2C 0x99       CALLB 0x99     // Parser.CurrentToken_Get
0x2CC9  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (Parser.Check(HopperToken.StringConstant))

0x2CCB  0x1A 0x0B       PUSHIB 0x0B
0x2CCD  0x2C 0xA8       CALLB 0xA8     // Parser.Check
0x2CCF  0x2E 0x19       JZB 0x2CE8 (+25)

                        // Parser.Advance();                                    json.hs:243

0x2CD1  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // string v = currentToken["lexeme"];                   json.hs:244

0x2CD3  0x24 0x02       SYSCALL0 0x02  // String.New
0x2CD5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2CD7  0x1A 0xD8       PUSHIB 0xD8
0x2CD9  0x1A 0x06       PUSHIB 0x06
0x2CDB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2CDD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2CDF  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // lst.Append(v);                                       json.hs:245

0x2CE1  0x4E            PUSHLOCALB00
0x2CE2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2CE4  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    json.hs:246

0x2CE6  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:253

0x2CE8  0x28 0x02       DECSP 0x02
0x2CEA  0x30 0xC2       JB 0x2CAC (-62)

                        // return lst;                                          json.hs:254

0x2CEC  0x4E            PUSHLOCALB00
0x2CED  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:102
// ####  JSON.ExportDictionary(..)  ####                                        0x004A

0x2CEF  0x49            ENTER

                        // string content = spaces(indent) + '{';               json.hs:103

0x2CF0  0x24 0x02       SYSCALL0 0x02  // String.New
0x2CF2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2CF4  0x2C 0x48       CALLB 0x48     // JSON.spaces
0x2CF6  0x1A 0x7B       PUSHIB 0x7B
0x2CF8  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2CFA  0x5D            POPCOPYLOCALB00

                        // jsonFile.Append(content + eol());                    json.hs:104

0x2CFB  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2CFD  0x4E            PUSHLOCALB00
0x2CFE  0x2C 0x47       CALLB 0x47     // JSON.eol
0x2D00  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2D02  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:105

0x2D04  0x24 0x02       SYSCALL0 0x02  // String.New
0x2D06  0x5D            POPCOPYLOCALB00

                        // indent = indent + 2;                                 json.hs:107

0x2D07  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D09  0x1A 0x02       PUSHIB 0x02
0x2D0B  0x00            ADD
0x2D0C  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // string comma = "  ";                                 json.hs:108

0x2D0E  0x24 0x02       SYSCALL0 0x02  // String.New
0x2D10  0x37 0x20 0x20  PUSHIW 0x2020
0x2D13  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2D15  0x5E            POPCOPYLOCALB02

                        // foreach (var kv in dict)                             json.hs:109

0x2D16  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2D18  0x1A 0x0F       PUSHIB 0x0F
0x2D1A  0x1A 0x0F       PUSHIB 0x0F
0x2D1C  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2D1E  0x44            PUSHI0
0x2D1F  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x2D22  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x2D24  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x2D26  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x2D28  0x31 0xC2 0x01  JZW 0x2EEA (+450)

                        // String.Build(ref content, spaces(indent));           json.hs:111

0x2D2B  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D2D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D2F  0x2C 0x48       CALLB 0x48     // JSON.spaces
0x2D31  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, comma);                    json.hs:112

0x2D33  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D35  0x4F            PUSHLOCALB02
0x2D36  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:113

0x2D38  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D3A  0x1A 0x22       PUSHIB 0x22
0x2D3C  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, kv.key);                   json.hs:114

0x2D3E  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D40  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2D42  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x2D44  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, "\": ");                   json.hs:115

0x2D46  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D48  0x37 0xCE 0x02  PUSHIW 0x02CE
0x2D4B  0x1A 0x03       PUSHIB 0x03
0x2D4D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2D4F  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // switch(typeof(kv.value))                             json.hs:116

0x2D51  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2D53  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2D55  0x24 0x81       SYSCALL0 0x81  // Types.BoxTypeOf

                        // case int:                                            json.hs:119

0x2D57  0x1A 0x02       PUSHIB 0x02
0x2D59  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2D5B  0x05            EQ
0x2D5C  0x2E 0x21       JZB 0x2D7D (+33)

                        // int v = int(kv.value);                               json.hs:121

0x2D5E  0x44            PUSHI0
0x2D5F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2D61  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2D63  0x27 0x00       DUP 0x00
0x2D65  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2D67  0x1A 0x14       PUSHIB 0x14
0x2D69  0x05            EQ
0x2D6A  0x2E 0x04       JZB 0x2D6E (+4)
0x2D6C  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2D6E  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:122

0x2D70  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D72  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2D74  0x2C 0xC1       CALLB 0xC1     // Int.ToString
0x2D76  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:123

0x2D78  0x28 0x02       DECSP 0x02
0x2D7A  0x33 0x50 0x01  JW 0x2ECA (+336)

                        // case uint:                                           json.hs:124

0x2D7D  0x1A 0x04       PUSHIB 0x04
0x2D7F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2D81  0x05            EQ
0x2D82  0x2E 0x21       JZB 0x2DA3 (+33)

                        // uint v = uint(kv.value);                             json.hs:126

0x2D84  0x44            PUSHI0
0x2D85  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2D87  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2D89  0x27 0x00       DUP 0x00
0x2D8B  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2D8D  0x1A 0x14       PUSHIB 0x14
0x2D8F  0x05            EQ
0x2D90  0x2E 0x04       JZB 0x2D94 (+4)
0x2D92  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2D94  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:127

0x2D96  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2D98  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2D9A  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x2D9C  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:128

0x2D9E  0x28 0x02       DECSP 0x02
0x2DA0  0x33 0x2A 0x01  JW 0x2ECA (+298)

                        // case byte:                                           json.hs:129

0x2DA3  0x1A 0x03       PUSHIB 0x03
0x2DA5  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2DA7  0x05            EQ
0x2DA8  0x2E 0x21       JZB 0x2DC9 (+33)

                        // byte v = byte(kv.value);                             json.hs:131

0x2DAA  0x44            PUSHI0
0x2DAB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2DAD  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2DAF  0x27 0x00       DUP 0x00
0x2DB1  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2DB3  0x1A 0x14       PUSHIB 0x14
0x2DB5  0x05            EQ
0x2DB6  0x2E 0x04       JZB 0x2DBA (+4)
0x2DB8  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2DBA  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:132

0x2DBC  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2DBE  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2DC0  0x2C 0xBF       CALLB 0xBF     // Byte.ToString
0x2DC2  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:133

0x2DC4  0x28 0x02       DECSP 0x02
0x2DC6  0x33 0x04 0x01  JW 0x2ECA (+260)

                        // case long:                                           json.hs:134

0x2DC9  0x1A 0x0E       PUSHIB 0x0E
0x2DCB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2DCD  0x05            EQ
0x2DCE  0x2E 0x22       JZB 0x2DF0 (+34)

                        // long v = long(kv.value);                             json.hs:136

0x2DD0  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x2DD2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2DD4  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2DD6  0x27 0x00       DUP 0x00
0x2DD8  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2DDA  0x1A 0x14       PUSHIB 0x14
0x2DDC  0x05            EQ
0x2DDD  0x2E 0x04       JZB 0x2DE1 (+4)
0x2DDF  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2DE1  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:137

0x2DE3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2DE5  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2DE7  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x2DE9  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:138

0x2DEB  0x28 0x02       DECSP 0x02
0x2DED  0x33 0xDD 0x00  JW 0x2ECA (+221)

                        // case float:                                          json.hs:139

0x2DF0  0x1A 0x0D       PUSHIB 0x0D
0x2DF2  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2DF4  0x05            EQ
0x2DF5  0x2E 0x22       JZB 0x2E17 (+34)

                        // float v = float(kv.value);                           json.hs:141

0x2DF7  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x2DF9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2DFB  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2DFD  0x27 0x00       DUP 0x00
0x2DFF  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2E01  0x1A 0x14       PUSHIB 0x14
0x2E03  0x05            EQ
0x2E04  0x2E 0x04       JZB 0x2E08 (+4)
0x2E06  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2E08  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:142

0x2E0A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E0C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2E0E  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x2E10  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:143

0x2E12  0x28 0x02       DECSP 0x02
0x2E14  0x33 0xB6 0x00  JW 0x2ECA (+182)

                        // case string:                                         json.hs:144

0x2E17  0x1A 0x0F       PUSHIB 0x0F
0x2E19  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2E1B  0x05            EQ
0x2E1C  0x2E 0x21       JZB 0x2E3D (+33)

                        // string v = kv.value;                                 json.hs:146

0x2E1E  0x24 0x02       SYSCALL0 0x02  // String.New
0x2E20  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2E22  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2E24  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, '"');                      json.hs:147

0x2E26  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E28  0x1A 0x22       PUSHIB 0x22
0x2E2A  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, v);                        json.hs:148

0x2E2C  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E2E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2E30  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:149

0x2E32  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E34  0x1A 0x22       PUSHIB 0x22
0x2E36  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    json.hs:150

0x2E38  0x28 0x02       DECSP 0x02
0x2E3A  0x33 0x90 0x00  JW 0x2ECA (+144)

                        // case bool:                                           json.hs:151

0x2E3D  0x1A 0x06       PUSHIB 0x06
0x2E3F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2E41  0x05            EQ
0x2E42  0x2E 0x34       JZB 0x2E76 (+52)

                        // bool v = bool(kv.value);                             json.hs:153

0x2E44  0x44            PUSHI0
0x2E45  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2E47  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2E49  0x27 0x00       DUP 0x00
0x2E4B  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2E4D  0x1A 0x14       PUSHIB 0x14
0x2E4F  0x05            EQ
0x2E50  0x2E 0x04       JZB 0x2E54 (+4)
0x2E52  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2E54  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (v)                                               json.hs:154

0x2E56  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2E58  0x2E 0x0F       JZB 0x2E67 (+15)

                        // String.Build(ref content, "true");                   json.hs:156

0x2E5A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E5C  0x37 0xD1 0x02  PUSHIW 0x02D1
0x2E5F  0x1A 0x04       PUSHIB 0x04
0x2E61  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E63  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:157

0x2E65  0x30 0x0D       JB 0x2E72 (+13)

                        // String.Build(ref content, "false");                  json.hs:160

0x2E67  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E69  0x37 0xD5 0x02  PUSHIW 0x02D5
0x2E6C  0x1A 0x05       PUSHIB 0x05
0x2E6E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E70  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:162

0x2E72  0x28 0x02       DECSP 0x02
0x2E74  0x30 0x56       JB 0x2ECA (+86)

                        // case list:                                           json.hs:163

0x2E76  0x1A 0x19       PUSHIB 0x19
0x2E78  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2E7A  0x05            EQ
0x2E7B  0x2E 0x25       JZB 0x2EA0 (+37)

                        // <variant> v = kv.value;                              json.hs:165

0x2E7D  0x1A 0x14       PUSHIB 0x14
0x2E7F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2E81  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2E83  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2E85  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, char(0x0A));               json.hs:166

0x2E87  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2E89  0x1A 0x0A       PUSHIB 0x0A
0x2E8B  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:167

0x2E8D  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2E8F  0x4E            PUSHLOCALB00
0x2E90  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:168

0x2E92  0x24 0x02       SYSCALL0 0x02  // String.New
0x2E94  0x5D            POPCOPYLOCALB00

                        // ExportList(jsonFile, v, indent);                     json.hs:169

0x2E95  0x56 0xFA 0x0C  PUSHLOCALBB 0x0CFA
0x2E98  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2E9A  0x2C 0x49       CALLB 0x49     // JSON.ExportList

                        // }                                                    json.hs:170

0x2E9C  0x28 0x02       DECSP 0x02
0x2E9E  0x30 0x2C       JB 0x2ECA (+44)

                        // case dictionary:                                     json.hs:171

0x2EA0  0x1A 0x13       PUSHIB 0x13
0x2EA2  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2EA4  0x05            EQ
0x2EA5  0x2E 0x25       JZB 0x2ECA (+37)

                        // <string, variant> v = kv.value;                      json.hs:173

0x2EA7  0x1A 0x0F       PUSHIB 0x0F
0x2EA9  0x1A 0x14       PUSHIB 0x14
0x2EAB  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2EAD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EAF  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2EB1  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, char(0x0A));               json.hs:174

0x2EB3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2EB5  0x1A 0x0A       PUSHIB 0x0A
0x2EB7  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:175

0x2EB9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2EBB  0x4E            PUSHLOCALB00
0x2EBC  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:176

0x2EBE  0x24 0x02       SYSCALL0 0x02  // String.New
0x2EC0  0x5D            POPCOPYLOCALB00

                        // ExportDictionary(jsonFile, v, indent);               json.hs:177

0x2EC1  0x56 0xFA 0x0C  PUSHLOCALBB 0x0CFA
0x2EC4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2EC6  0x2C 0x4A       CALLB 0x4A     // JSON.ExportDictionary

                        // }                                                    json.hs:178

0x2EC8  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:188

0x2ECA  0x28 0x02       DECSP 0x02

                        // if (content.Length > 0)                              json.hs:189

0x2ECC  0x4E            PUSHLOCALB00
0x2ECD  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2ECF  0x44            PUSHI0
0x2ED0  0x07            GT
0x2ED1  0x2E 0x10       JZB 0x2EE1 (+16)

                        // String.Build(ref content, char(0x0A));               json.hs:191

0x2ED3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2ED5  0x1A 0x0A       PUSHIB 0x0A
0x2ED7  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:192

0x2ED9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2EDB  0x4E            PUSHLOCALB00
0x2EDC  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:193

0x2EDE  0x24 0x02       SYSCALL0 0x02  // String.New
0x2EE0  0x5D            POPCOPYLOCALB00

                        // comma = ", ";                                        json.hs:195

0x2EE1  0x37 0x2C 0x20  PUSHIW 0x202C
0x2EE4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2EE6  0x5E            POPCOPYLOCALB02

                        // }                                                    json.hs:196

0x2EE7  0x33 0x38 0xFE  JW 0x2D1F (-456)
0x2EEA  0x28 0x06       DECSP 0x06

                        // indent = indent - 2;                                 json.hs:197

0x2EEC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2EEE  0x1A 0x02       PUSHIB 0x02
0x2EF0  0x01            SUB
0x2EF1  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // String.Build(ref content, spaces(indent));           json.hs:198

0x2EF3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2EF5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2EF7  0x2C 0x48       CALLB 0x48     // JSON.spaces
0x2EF9  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '}');                      json.hs:199

0x2EFB  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2EFD  0x1A 0x7D       PUSHIB 0x7D
0x2EFF  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, char(0x0A));               json.hs:200

0x2F01  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2F03  0x1A 0x0A       PUSHIB 0x0A
0x2F05  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:201

0x2F07  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2F09  0x4E            PUSHLOCALB00
0x2F0A  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    json.hs:202

0x2F0C  0x2A 0x0A       RETB 0x0A


// /source/compiler/json/json.hs:12
// ####  JSON.spaces(..)  ####                                                  0x0048

0x2F0E  0x49            ENTER

                        // string spaces;                                       json.hs:13

0x2F0F  0x24 0x02       SYSCALL0 0x02  // String.New

                        // spaces = spaces.Pad(' ', count);                     json.hs:14

0x2F11  0x4E            PUSHLOCALB00
0x2F12  0x1A 0x20       PUSHIB 0x20
0x2F14  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2F16  0x2C 0xEE       CALLB 0xEE     // String.Pad
0x2F18  0x5D            POPCOPYLOCALB00

                        // return spaces;                                       json.hs:15

0x2F19  0x4E            PUSHLOCALB00
0x2F1A  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:8
// ####  JSON.eol(..)  ####                                                     0x0047

0x2F1C  0x49            ENTER

                        // return "" + char(0x0A);                              json.hs:9

0x2F1D  0x24 0x02       SYSCALL0 0x02  // String.New
0x2F1F  0x1A 0x0A       PUSHIB 0x0A
0x2F21  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2F23  0x4A            RET0


// /source/compiler/json/json.hs:20
// ####  JSON.ExportList(..)  ####                                              0x0049


                        // uint entries;                                        json.hs:21

0x2F24  0x5F 0x01       ENTERB 0x01

                        // string content;                                      json.hs:22

0x2F26  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string comma;                                        json.hs:23

0x2F28  0x24 0x02       SYSCALL0 0x02  // String.New

                        // indent = indent + 2;                                 json.hs:24

0x2F2A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2F2C  0x1A 0x02       PUSHIB 0x02
0x2F2E  0x00            ADD
0x2F2F  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // content = spaces(indent) + '[';                      json.hs:25

0x2F31  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2F33  0x2C 0x48       CALLB 0x48     // JSON.spaces
0x2F35  0x1A 0x5B       PUSHIB 0x5B
0x2F37  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2F39  0x5E            POPCOPYLOCALB02

                        // foreach (var vv in lst)                              json.hs:26

0x2F3A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2F3C  0x44            PUSHI0
0x2F3D  0x44            PUSHI0
0x2F3E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2F40  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x2F42  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2F44  0x05            EQ
0x2F45  0x32 0x52 0x01  JNZW 0x3097 (+338)
0x2F48  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x2F4B  0x24 0x14       SYSCALL0 0x14  // List.GetItemAsVariant
0x2F4D  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // String.Build(ref content, comma);                    json.hs:28

0x2F4F  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2F51  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2F53  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // switch(typeof(vv))                                   json.hs:29

0x2F55  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2F57  0x24 0x81       SYSCALL0 0x81  // Types.BoxTypeOf

                        // case byte:                                           json.hs:31

0x2F59  0x1A 0x03       PUSHIB 0x03
0x2F5B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2F5D  0x05            EQ
0x2F5E  0x2E 0x42       JZB 0x2FA0 (+66)

                        // byte v = byte(vv);                                   json.hs:33

0x2F60  0x44            PUSHI0
0x2F61  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2F63  0x27 0x00       DUP 0x00
0x2F65  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2F67  0x1A 0x14       PUSHIB 0x14
0x2F69  0x05            EQ
0x2F6A  0x2E 0x04       JZB 0x2F6E (+4)
0x2F6C  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2F6E  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // entries++;                                           json.hs:34

0x2F70  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // if ((entries % 16) == 0)                             json.hs:35

0x2F72  0x4E            PUSHLOCALB00
0x2F73  0x1A 0x10       PUSHIB 0x10
0x2F75  0x04            MOD
0x2F76  0x2F 0x12       JNZB 0x2F88 (+18)

                        // jsonFile.Append(content + eol());                    json.hs:37

0x2F78  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2F7A  0x4F            PUSHLOCALB02
0x2F7B  0x2C 0x47       CALLB 0x47     // JSON.eol
0x2F7D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2F7F  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = spaces(indent+1);                          json.hs:38

0x2F81  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2F83  0x45            PUSHI1
0x2F84  0x00            ADD
0x2F85  0x2C 0x48       CALLB 0x48     // JSON.spaces
0x2F87  0x5E            POPCOPYLOCALB02

                        // String.Build(ref content, "0x");                     json.hs:40

0x2F88  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2F8A  0x37 0x30 0x78  PUSHIW 0x7830
0x2F8D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2F8F  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, v.ToHexString(2));

0x2F91  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2F93  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2F95  0x1A 0x02       PUSHIB 0x02
0x2F97  0x2C 0xC0       CALLB 0xC0     // Byte.ToHexString
0x2F99  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:42

0x2F9B  0x28 0x02       DECSP 0x02
0x2F9D  0x33 0xEC 0x00  JW 0x3089 (+236)

                        // case uint:                                           json.hs:43

0x2FA0  0x1A 0x04       PUSHIB 0x04
0x2FA2  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2FA4  0x05            EQ
0x2FA5  0x2E 0x1F       JZB 0x2FC4 (+31)

                        // uint v = uint(vv);                                   json.hs:45

0x2FA7  0x44            PUSHI0
0x2FA8  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2FAA  0x27 0x00       DUP 0x00
0x2FAC  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2FAE  0x1A 0x14       PUSHIB 0x14
0x2FB0  0x05            EQ
0x2FB1  0x2E 0x04       JZB 0x2FB5 (+4)
0x2FB3  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2FB5  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:46

0x2FB7  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2FB9  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2FBB  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x2FBD  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:47

0x2FBF  0x28 0x02       DECSP 0x02
0x2FC1  0x33 0xC8 0x00  JW 0x3089 (+200)

                        // case int:                                            json.hs:48

0x2FC4  0x1A 0x02       PUSHIB 0x02
0x2FC6  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2FC8  0x05            EQ
0x2FC9  0x2E 0x1F       JZB 0x2FE8 (+31)

                        // int v = int(vv);                                     json.hs:50

0x2FCB  0x44            PUSHI0
0x2FCC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2FCE  0x27 0x00       DUP 0x00
0x2FD0  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2FD2  0x1A 0x14       PUSHIB 0x14
0x2FD4  0x05            EQ
0x2FD5  0x2E 0x04       JZB 0x2FD9 (+4)
0x2FD7  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2FD9  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:51

0x2FDB  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2FDD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2FDF  0x2C 0xC1       CALLB 0xC1     // Int.ToString
0x2FE1  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:52

0x2FE3  0x28 0x02       DECSP 0x02
0x2FE5  0x33 0xA4 0x00  JW 0x3089 (+164)

                        // case long:                                           json.hs:53

0x2FE8  0x1A 0x0E       PUSHIB 0x0E
0x2FEA  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2FEC  0x05            EQ
0x2FED  0x2E 0x20       JZB 0x300D (+32)

                        // long v = long(vv);                                   json.hs:55

0x2FEF  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x2FF1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2FF3  0x27 0x00       DUP 0x00
0x2FF5  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x2FF7  0x1A 0x14       PUSHIB 0x14
0x2FF9  0x05            EQ
0x2FFA  0x2E 0x04       JZB 0x2FFE (+4)
0x2FFC  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x2FFE  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:56

0x3000  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3002  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3004  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x3006  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:57

0x3008  0x28 0x02       DECSP 0x02
0x300A  0x33 0x7F 0x00  JW 0x3089 (+127)

                        // case float:                                          json.hs:58

0x300D  0x1A 0x0D       PUSHIB 0x0D
0x300F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3011  0x05            EQ
0x3012  0x2E 0x1F       JZB 0x3031 (+31)

                        // float v = float(vv);                                 json.hs:60

0x3014  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x3016  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3018  0x27 0x00       DUP 0x00
0x301A  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x301C  0x1A 0x14       PUSHIB 0x14
0x301E  0x05            EQ
0x301F  0x2E 0x04       JZB 0x3023 (+4)
0x3021  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x3023  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:61

0x3025  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3027  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3029  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x302B  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:62

0x302D  0x28 0x02       DECSP 0x02
0x302F  0x30 0x5A       JB 0x3089 (+90)

                        // case string:                                         json.hs:63

0x3031  0x1A 0x0F       PUSHIB 0x0F
0x3033  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3035  0x05            EQ
0x3036  0x2E 0x1E       JZB 0x3054 (+30)

                        // string v = vv;                                       json.hs:65

0x3038  0x24 0x02       SYSCALL0 0x02  // String.New
0x303A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x303C  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, '"');                      json.hs:66

0x303E  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3040  0x1A 0x22       PUSHIB 0x22
0x3042  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, v);                        json.hs:67

0x3044  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3046  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3048  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:68

0x304A  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x304C  0x1A 0x22       PUSHIB 0x22
0x304E  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    json.hs:69

0x3050  0x28 0x02       DECSP 0x02
0x3052  0x30 0x37       JB 0x3089 (+55)

                        // case bool:                                           json.hs:70

0x3054  0x1A 0x06       PUSHIB 0x06
0x3056  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3058  0x05            EQ
0x3059  0x2E 0x30       JZB 0x3089 (+48)

                        // bool v = bool(vv);                                   json.hs:72

0x305B  0x44            PUSHI0
0x305C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x305E  0x27 0x00       DUP 0x00
0x3060  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0x3062  0x1A 0x14       PUSHIB 0x14
0x3064  0x05            EQ
0x3065  0x2E 0x04       JZB 0x3069 (+4)
0x3067  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0x3069  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (v)                                               json.hs:73

0x306B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x306D  0x2E 0x0F       JZB 0x307C (+15)

                        // String.Build(ref content, "true");                   json.hs:75

0x306F  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3071  0x37 0xD1 0x02  PUSHIW 0x02D1
0x3074  0x1A 0x04       PUSHIB 0x04
0x3076  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3078  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:76

0x307A  0x30 0x0D       JB 0x3087 (+13)

                        // String.Build(ref content, "false");                  json.hs:79

0x307C  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x307E  0x37 0xD5 0x02  PUSHIW 0x02D5
0x3081  0x1A 0x05       PUSHIB 0x05
0x3083  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3085  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:81

0x3087  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:92

0x3089  0x28 0x02       DECSP 0x02

                        // comma = ", ";                                        json.hs:93

0x308B  0x37 0x2C 0x20  PUSHIW 0x202C
0x308E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3090  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    json.hs:94

0x3092  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0x3094  0x33 0xAA 0xFE  JW 0x2F3E (-342)
0x3097  0x28 0x06       DECSP 0x06

                        // String.Build(ref content, ']');                      json.hs:95

0x3099  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x309B  0x1A 0x5D       PUSHIB 0x5D
0x309D  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, char(0x0A));               json.hs:96

0x309F  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x30A1  0x1A 0x0A       PUSHIB 0x0A
0x30A3  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:97

0x30A5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x30A7  0x4F            PUSHLOCALB02
0x30A8  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    json.hs:98

0x30AA  0x2A 0x0C       RETB 0x0C


// /source/system/uint.hs:4
// ####  UInt.ToString(..)  ####                                                0x00C5


                        // uint digit;                                          uint.hs:5

0x30AC  0x5F 0x02       ENTERB 0x02

                        // string result;                                       uint.hs:7

0x30AE  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (this == 0)                                       uint.hs:8

0x30B0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x30B2  0x2F 0x08       JNZB 0x30BA (+8)

                        // String.Build(ref result, '0');                       uint.hs:10

0x30B4  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x30B6  0x1A 0x30       PUSHIB 0x30
0x30B8  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // while (this != 0)                                    uint.hs:12

0x30BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x30BC  0x2E 0x1F       JZB 0x30DB (+31)

                        // digit = this % 10;                                   uint.hs:14

0x30BE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x30C0  0x1A 0x0A       PUSHIB 0x0A
0x30C2  0x04            MOD
0x30C3  0x4C            POPLOCALB00

                        // digit = digit + 48;                                  uint.hs:15

0x30C4  0x4E            PUSHLOCALB00
0x30C5  0x1A 0x30       PUSHIB 0x30
0x30C7  0x00            ADD
0x30C8  0x4C            POPLOCALB00

                        // c = char(digit);                                     uint.hs:16

0x30C9  0x4E            PUSHLOCALB00
0x30CA  0x51 0x03       CAST 0x03
0x30CC  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:17

0x30CD  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x30CF  0x4F            PUSHLOCALB02
0x30D0  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 10;                                    uint.hs:18

0x30D2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x30D4  0x1A 0x0A       PUSHIB 0x0A
0x30D6  0x02            DIV
0x30D7  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    uint.hs:19

0x30D9  0x30 0xE1       JB 0x30BA (-31)

                        // return result;                                       uint.hs:20

0x30DB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x30DD  0x2B 0x08       RETRETB 0x08


// /source/system/uint.hs:43
// ####  UInt.ToHexString(..)  ####                                             0x00C8


                        // uint digit;                                          uint.hs:44

0x30DF  0x5F 0x03       ENTERB 0x03

                        // string result;                                       uint.hs:47

0x30E1  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         uint.hs:48

0x30E3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x30E5  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x30E7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x30E9  0x44            PUSHI0
0x30EA  0x07            GT
0x30EB  0x2E 0x1E       JZB 0x3109 (+30)

                        // digit = this % 16;                                   uint.hs:50

0x30ED  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x30EF  0x1A 0x10       PUSHIB 0x10
0x30F1  0x04            MOD
0x30F2  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         uint.hs:51

0x30F3  0x4E            PUSHLOCALB00
0x30F4  0x51 0x03       CAST 0x03
0x30F6  0x2C 0xB9       CALLB 0xB9     // Char.ToHex
0x30F8  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:52

0x30F9  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x30FB  0x4F            PUSHLOCALB02
0x30FC  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    uint.hs:53

0x30FE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3100  0x1A 0x10       PUSHIB 0x10
0x3102  0x02            DIV
0x3103  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    uint.hs:54

0x3105  0x23 0x04       DECLOCALB 0x04 (BP+4)
0x3107  0x30 0xE0       JB 0x30E7 (-32)

                        // return result;                                       uint.hs:55

0x3109  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x310B  0x2B 0x0C       RETRETB 0x0C


// /source/system/color.hs:42
// ####  Color.ProgressText_Get(..)  ####                                       0x0142

0x310D  0x49            ENTER

                        // uint ProgressText        { get { return 0x006; } }

0x310E  0x1A 0x06       PUSHIB 0x06
0x3110  0x4A            RET0


// /source/system/color.hs:43
// ####  Color.ProgressFace_Get(..)  ####                                       0x0143

0x3111  0x49            ENTER

                        // uint ProgressFace        { get { return 0xDCB; } }

0x3112  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x3115  0x4A            RET0


// /source/system/color.hs:44
// ####  Color.ProgressHighlight_Get(..)  ####                                  0x0144

0x3116  0x49            ENTER

                        // uint ProgressHighlight   { get { return 0x3A8; }}

0x3117  0x37 0xA8 0x03  PUSHIW 0x03A8
0x311A  0x4A            RET0


// /source/system/color.hs:66
// ####  Color.StatusText_Get(..)  ####                                         0x0154

0x311B  0x49            ENTER

                        // uint StatusText   { get { return 0x006; } }

0x311C  0x1A 0x06       PUSHIB 0x06
0x311E  0x4A            RET0


// /source/system/color.hs:65
// ####  Color.StatusFace_Get(..)  ####                                         0x0153

0x311F  0x49            ENTER

                        // uint StatusFace   { get { return 0xDCB; } }

0x3120  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x3123  0x4A            RET0


// /source/system/color.hs:40
// ####  Color.ProgressTick_Get(..)  ####                                       0x0140

0x3124  0x49            ENTER

                        // uint ProgressTick        { get { return 0x258; } }

0x3125  0x37 0x58 0x02  PUSHIW 0x0258
0x3128  0x4A            RET0


// /source/system/color.hs:41
// ####  Color.ProgressBackground_Get(..)  ####                                 0x0141

0x3129  0x49            ENTER

                        // uint ProgressBackground  { get { return 0x68A; } }

0x312A  0x37 0x8A 0x06  PUSHIW 0x068A
0x312D  0x4A            RET0


// /source/system/screen.hs:39
// ####  Screen.PrintLn(..)  ####                                               0x0036

0x312E  0x49            ENTER

                        // Print(s, foreColour, backColour);                    screen.hs:40

0x312F  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x3132  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3134  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:41

0x3136  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:42

0x3138  0x2A 0x06       RETB 0x06


// /source/system/screen.hs:60
// ####  Screen.PrintLn(..)  ####                                               0x003A

0x313A  0x49            ENTER

                        // Print(s, Color.MatrixGreen, Color.Black);            screen.hs:61

0x313B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x313D  0x34 0x3C 0x01  CALLW 0x013C   // Color.MatrixGreen_Get
0x3140  0x34 0x24 0x01  CALLW 0x0124   // Color.Black_Get
0x3143  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:62

0x3145  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:63

0x3147  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/instructions.hs:221
// ####  Instructions.OperandWidth(..)  ####                                    0x00AF


                        // byte result;                                         instructions.hs:222

0x3149  0x5F 0x01       ENTERB 0x01

                        // switch (instruction)                                 instructions.hs:223

0x314B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.CAST:                               instructions.hs:225

0x314D  0x1A 0x51       PUSHIB 0x51
0x314F  0x4F            PUSHLOCALB02
0x3150  0x05            EQ
0x3151  0x32 0xBE 0x00  JNZW 0x320F (+190)

                        // case Instruction.CALLB:                              instructions.hs:226

0x3154  0x1A 0x2C       PUSHIB 0x2C
0x3156  0x4F            PUSHLOCALB02
0x3157  0x05            EQ
0x3158  0x32 0xB7 0x00  JNZW 0x320F (+183)

                        // case Instruction.TESTBPB:                            instructions.hs:227

0x315B  0x1A 0x2D       PUSHIB 0x2D
0x315D  0x4F            PUSHLOCALB02
0x315E  0x05            EQ
0x315F  0x32 0xB0 0x00  JNZW 0x320F (+176)

                        // case Instruction.RETB:                               instructions.hs:228

0x3162  0x1A 0x2A       PUSHIB 0x2A
0x3164  0x4F            PUSHLOCALB02
0x3165  0x05            EQ
0x3166  0x32 0xA9 0x00  JNZW 0x320F (+169)

                        // case Instruction.RETRETB:                            instructions.hs:229

0x3169  0x1A 0x2B       PUSHIB 0x2B
0x316B  0x4F            PUSHLOCALB02
0x316C  0x05            EQ
0x316D  0x32 0xA2 0x00  JNZW 0x320F (+162)

                        // case Instruction.PUSHIB:                             instructions.hs:230

0x3170  0x1A 0x1A       PUSHIB 0x1A
0x3172  0x4F            PUSHLOCALB02
0x3173  0x05            EQ
0x3174  0x32 0x9B 0x00  JNZW 0x320F (+155)

                        // case Instruction.POPGLOBALB:                         instructions.hs:231

0x3177  0x1A 0x1F       PUSHIB 0x1F
0x3179  0x4F            PUSHLOCALB02
0x317A  0x05            EQ
0x317B  0x32 0x94 0x00  JNZW 0x320F (+148)

                        // case Instruction.POPLOCALB:                          instructions.hs:232

0x317E  0x1A 0x1B       PUSHIB 0x1B
0x3180  0x4F            PUSHLOCALB02
0x3181  0x05            EQ
0x3182  0x32 0x8D 0x00  JNZW 0x320F (+141)

                        // case Instruction.POPRELB:                            instructions.hs:233

0x3185  0x1A 0x1D       PUSHIB 0x1D
0x3187  0x4F            PUSHLOCALB02
0x3188  0x05            EQ
0x3189  0x32 0x86 0x00  JNZW 0x320F (+134)

                        // case Instruction.POPCOPYGLOBALB:                     instructions.hs:234

0x318C  0x1A 0x59       PUSHIB 0x59
0x318E  0x4F            PUSHLOCALB02
0x318F  0x05            EQ
0x3190  0x32 0x7F 0x00  JNZW 0x320F (+127)

                        // case Instruction.POPCOPYLOCALB:                      instructions.hs:235

0x3193  0x1A 0x57       PUSHIB 0x57
0x3195  0x4F            PUSHLOCALB02
0x3196  0x05            EQ
0x3197  0x32 0x78 0x00  JNZW 0x320F (+120)

                        // case Instruction.POPCOPYRELB:                        instructions.hs:236

0x319A  0x1A 0x58       PUSHIB 0x58
0x319C  0x4F            PUSHLOCALB02
0x319D  0x05            EQ
0x319E  0x32 0x71 0x00  JNZW 0x320F (+113)

                        // case Instruction.PUSHGLOBALB:                        instructions.hs:237

0x31A1  0x1A 0x20       PUSHIB 0x20
0x31A3  0x4F            PUSHLOCALB02
0x31A4  0x05            EQ
0x31A5  0x32 0x6A 0x00  JNZW 0x320F (+106)

                        // case Instruction.PUSHLOCALB:                         instructions.hs:238

0x31A8  0x1A 0x1C       PUSHIB 0x1C
0x31AA  0x4F            PUSHLOCALB02
0x31AB  0x05            EQ
0x31AC  0x32 0x63 0x00  JNZW 0x320F (+99)

                        // case Instruction.PUSHRELB:                           instructions.hs:239

0x31AF  0x1A 0x1E       PUSHIB 0x1E
0x31B1  0x4F            PUSHLOCALB02
0x31B2  0x05            EQ
0x31B3  0x2F 0x5C       JNZB 0x320F (+92)

                        // case Instruction.PUSHSTACKADDRB:                     instructions.hs:240

0x31B5  0x1A 0x21       PUSHIB 0x21
0x31B7  0x4F            PUSHLOCALB02
0x31B8  0x05            EQ
0x31B9  0x2F 0x56       JNZB 0x320F (+86)

                        // case Instruction.SYSCALL:                            instructions.hs:241

0x31BB  0x1A 0x26       PUSHIB 0x26
0x31BD  0x4F            PUSHLOCALB02
0x31BE  0x05            EQ
0x31BF  0x2F 0x50       JNZB 0x320F (+80)

                        // case Instruction.SYSCALL0:                           instructions.hs:242

0x31C1  0x1A 0x24       PUSHIB 0x24
0x31C3  0x4F            PUSHLOCALB02
0x31C4  0x05            EQ
0x31C5  0x2F 0x4A       JNZB 0x320F (+74)

                        // case Instruction.SYSCALL1:                           instructions.hs:243

0x31C7  0x1A 0x25       PUSHIB 0x25
0x31C9  0x4F            PUSHLOCALB02
0x31CA  0x05            EQ
0x31CB  0x2F 0x44       JNZB 0x320F (+68)

                        // case Instruction.JB:                                 instructions.hs:244

0x31CD  0x1A 0x30       PUSHIB 0x30
0x31CF  0x4F            PUSHLOCALB02
0x31D0  0x05            EQ
0x31D1  0x2F 0x3E       JNZB 0x320F (+62)

                        // case Instruction.JZB:                                instructions.hs:245

0x31D3  0x1A 0x2E       PUSHIB 0x2E
0x31D5  0x4F            PUSHLOCALB02
0x31D6  0x05            EQ
0x31D7  0x2F 0x38       JNZB 0x320F (+56)

                        // case Instruction.JNZB:                               instructions.hs:246

0x31D9  0x1A 0x2F       PUSHIB 0x2F
0x31DB  0x4F            PUSHLOCALB02
0x31DC  0x05            EQ
0x31DD  0x2F 0x32       JNZB 0x320F (+50)

                        // case Instruction.INCGLOBALB:                         instructions.hs:247

0x31DF  0x1A 0x53       PUSHIB 0x53
0x31E1  0x4F            PUSHLOCALB02
0x31E2  0x05            EQ
0x31E3  0x2F 0x2C       JNZB 0x320F (+44)

                        // case Instruction.DECGLOBALB:                         instructions.hs:248

0x31E5  0x1A 0x54       PUSHIB 0x54
0x31E7  0x4F            PUSHLOCALB02
0x31E8  0x05            EQ
0x31E9  0x2F 0x26       JNZB 0x320F (+38)

                        // case Instruction.INCLOCALB:                          instructions.hs:249

0x31EB  0x1A 0x22       PUSHIB 0x22
0x31ED  0x4F            PUSHLOCALB02
0x31EE  0x05            EQ
0x31EF  0x2F 0x20       JNZB 0x320F (+32)

                        // case Instruction.DECLOCALB:                          instructions.hs:250

0x31F1  0x1A 0x23       PUSHIB 0x23
0x31F3  0x4F            PUSHLOCALB02
0x31F4  0x05            EQ
0x31F5  0x2F 0x1A       JNZB 0x320F (+26)

                        // case Instruction.DUP:                                instructions.hs:251

0x31F7  0x1A 0x27       PUSHIB 0x27
0x31F9  0x4F            PUSHLOCALB02
0x31FA  0x05            EQ
0x31FB  0x2F 0x14       JNZB 0x320F (+20)

                        // case Instruction.DECSP:                              instructions.hs:252

0x31FD  0x1A 0x28       PUSHIB 0x28
0x31FF  0x4F            PUSHLOCALB02
0x3200  0x05            EQ
0x3201  0x2F 0x0E       JNZB 0x320F (+14)

                        // case Instruction.DIE:                                instructions.hs:253

0x3203  0x1A 0x29       PUSHIB 0x29
0x3205  0x4F            PUSHLOCALB02
0x3206  0x05            EQ
0x3207  0x2F 0x08       JNZB 0x320F (+8)

                        // case Instruction.ENTERB:                             instructions.hs:254

0x3209  0x1A 0x5F       PUSHIB 0x5F
0x320B  0x4F            PUSHLOCALB02
0x320C  0x05            EQ
0x320D  0x2E 0x07       JZB 0x3214 (+7)

                        // result = 1;                                          instructions.hs:256

0x320F  0x45            PUSHI1
0x3210  0x4C            POPLOCALB00

                        // }                                                    instructions.hs:257

0x3211  0x33 0x90 0x00  JW 0x32A1 (+144)

                        // case Instruction.CALLW:                              instructions.hs:259

0x3214  0x1A 0x34       PUSHIB 0x34
0x3216  0x4F            PUSHLOCALB02
0x3217  0x05            EQ
0x3218  0x32 0x86 0x00  JNZW 0x329E (+134)

                        // case Instruction.RETW:                               instructions.hs:260

0x321B  0x1A 0x35       PUSHIB 0x35
0x321D  0x4F            PUSHLOCALB02
0x321E  0x05            EQ
0x321F  0x32 0x7F 0x00  JNZW 0x329E (+127)

                        // case Instruction.RETRETW:                            instructions.hs:261

0x3222  0x1A 0x36       PUSHIB 0x36
0x3224  0x4F            PUSHLOCALB02
0x3225  0x05            EQ
0x3226  0x32 0x78 0x00  JNZW 0x329E (+120)

                        // case Instruction.PUSHIW:                             instructions.hs:262

0x3229  0x1A 0x37       PUSHIB 0x37
0x322B  0x4F            PUSHLOCALB02
0x322C  0x05            EQ
0x322D  0x32 0x71 0x00  JNZW 0x329E (+113)

                        // case Instruction.PUSHIWLE:                           instructions.hs:263

0x3230  0x1A 0x40       PUSHIB 0x40
0x3232  0x4F            PUSHLOCALB02
0x3233  0x05            EQ
0x3234  0x32 0x6A 0x00  JNZW 0x329E (+106)

                        // case Instruction.PUSHIWLT:                           instructions.hs:264

0x3237  0x1A 0x55       PUSHIB 0x55
0x3239  0x4F            PUSHLOCALB02
0x323A  0x05            EQ
0x323B  0x32 0x63 0x00  JNZW 0x329E (+99)

                        // case Instruction.POPGLOBALW:                         instructions.hs:265

0x323E  0x1A 0x3C       PUSHIB 0x3C
0x3240  0x4F            PUSHLOCALB02
0x3241  0x05            EQ
0x3242  0x2F 0x5C       JNZB 0x329E (+92)

                        // case Instruction.POPLOCALW:                          instructions.hs:266

0x3244  0x1A 0x38       PUSHIB 0x38
0x3246  0x4F            PUSHLOCALB02
0x3247  0x05            EQ
0x3248  0x2F 0x56       JNZB 0x329E (+86)

                        // case Instruction.POPRELW:                            instructions.hs:267

0x324A  0x1A 0x3A       PUSHIB 0x3A
0x324C  0x4F            PUSHLOCALB02
0x324D  0x05            EQ
0x324E  0x2F 0x50       JNZB 0x329E (+80)

                        // case Instruction.POPCOPYGLOBALW:                     instructions.hs:268

0x3250  0x1A 0x5C       PUSHIB 0x5C
0x3252  0x4F            PUSHLOCALB02
0x3253  0x05            EQ
0x3254  0x2F 0x4A       JNZB 0x329E (+74)

                        // case Instruction.POPCOPYLOCALW:                      instructions.hs:269

0x3256  0x1A 0x5A       PUSHIB 0x5A
0x3258  0x4F            PUSHLOCALB02
0x3259  0x05            EQ
0x325A  0x2F 0x44       JNZB 0x329E (+68)

                        // case Instruction.POPCOPYRELW:                        instructions.hs:270

0x325C  0x1A 0x5B       PUSHIB 0x5B
0x325E  0x4F            PUSHLOCALB02
0x325F  0x05            EQ
0x3260  0x2F 0x3E       JNZB 0x329E (+62)

                        // case Instruction.PUSHGLOBALBB:                       instructions.hs:271

0x3262  0x1A 0x52       PUSHIB 0x52
0x3264  0x4F            PUSHLOCALB02
0x3265  0x05            EQ
0x3266  0x2F 0x38       JNZB 0x329E (+56)

                        // case Instruction.PUSHLOCALBB:                        instructions.hs:272

0x3268  0x1A 0x56       PUSHIB 0x56
0x326A  0x4F            PUSHLOCALB02
0x326B  0x05            EQ
0x326C  0x2F 0x32       JNZB 0x329E (+50)

                        // case Instruction.PUSHGLOBALW:                        instructions.hs:273

0x326E  0x1A 0x3D       PUSHIB 0x3D
0x3270  0x4F            PUSHLOCALB02
0x3271  0x05            EQ
0x3272  0x2F 0x2C       JNZB 0x329E (+44)

                        // case Instruction.PUSHLOCALW:                         instructions.hs:274

0x3274  0x1A 0x39       PUSHIB 0x39
0x3276  0x4F            PUSHLOCALB02
0x3277  0x05            EQ
0x3278  0x2F 0x26       JNZB 0x329E (+38)

                        // case Instruction.PUSHRELW:                           instructions.hs:275

0x327A  0x1A 0x3B       PUSHIB 0x3B
0x327C  0x4F            PUSHLOCALB02
0x327D  0x05            EQ
0x327E  0x2F 0x20       JNZB 0x329E (+32)

                        // case Instruction.PUSHSTACKADDRW:                     instructions.hs:276

0x3280  0x1A 0x3E       PUSHIB 0x3E
0x3282  0x4F            PUSHLOCALB02
0x3283  0x05            EQ
0x3284  0x2F 0x1A       JNZB 0x329E (+26)

                        // case Instruction.JW:                                 instructions.hs:277

0x3286  0x1A 0x33       PUSHIB 0x33
0x3288  0x4F            PUSHLOCALB02
0x3289  0x05            EQ
0x328A  0x2F 0x14       JNZB 0x329E (+20)

                        // case Instruction.JZW:                                instructions.hs:278

0x328C  0x1A 0x31       PUSHIB 0x31
0x328E  0x4F            PUSHLOCALB02
0x328F  0x05            EQ
0x3290  0x2F 0x0E       JNZB 0x329E (+14)

                        // case Instruction.JNZW:                               instructions.hs:279

0x3292  0x1A 0x32       PUSHIB 0x32
0x3294  0x4F            PUSHLOCALB02
0x3295  0x05            EQ
0x3296  0x2F 0x08       JNZB 0x329E (+8)

                        // case Instruction.INCLOCALBB:                         instructions.hs:280

0x3298  0x1A 0x3F       PUSHIB 0x3F
0x329A  0x4F            PUSHLOCALB02
0x329B  0x05            EQ
0x329C  0x2E 0x05       JZB 0x32A1 (+5)

                        // result = 2;                                          instructions.hs:282

0x329E  0x1A 0x02       PUSHIB 0x02
0x32A0  0x4C            POPLOCALB00

                        // }                                                    instructions.hs:284

0x32A1  0x28 0x02       DECSP 0x02

                        // return result;                                       instructions.hs:285

0x32A3  0x4E            PUSHLOCALB00
0x32A4  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/instructions.hs:204
// ####  Instructions.OperandIsAddressOffset(..)  ####                          0x00AE


                        // bool isOffset;                                       instructions.hs:205

0x32A6  0x5F 0x01       ENTERB 0x01

                        // switch (instruction)                                 instructions.hs:206

0x32A8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.JB:                                 instructions.hs:208

0x32AA  0x1A 0x30       PUSHIB 0x30
0x32AC  0x4F            PUSHLOCALB02
0x32AD  0x05            EQ
0x32AE  0x2F 0x20       JNZB 0x32CE (+32)

                        // case Instruction.JZB:                                instructions.hs:209

0x32B0  0x1A 0x2E       PUSHIB 0x2E
0x32B2  0x4F            PUSHLOCALB02
0x32B3  0x05            EQ
0x32B4  0x2F 0x1A       JNZB 0x32CE (+26)

                        // case Instruction.JNZB:                               instructions.hs:210

0x32B6  0x1A 0x2F       PUSHIB 0x2F
0x32B8  0x4F            PUSHLOCALB02
0x32B9  0x05            EQ
0x32BA  0x2F 0x14       JNZB 0x32CE (+20)

                        // case Instruction.JW:                                 instructions.hs:211

0x32BC  0x1A 0x33       PUSHIB 0x33
0x32BE  0x4F            PUSHLOCALB02
0x32BF  0x05            EQ
0x32C0  0x2F 0x0E       JNZB 0x32CE (+14)

                        // case Instruction.JZW:                                instructions.hs:212

0x32C2  0x1A 0x31       PUSHIB 0x31
0x32C4  0x4F            PUSHLOCALB02
0x32C5  0x05            EQ
0x32C6  0x2F 0x08       JNZB 0x32CE (+8)

                        // case Instruction.JNZW:                               instructions.hs:213

0x32C8  0x1A 0x32       PUSHIB 0x32
0x32CA  0x4F            PUSHLOCALB02
0x32CB  0x05            EQ
0x32CC  0x2E 0x04       JZB 0x32D0 (+4)

                        // isOffset = true;                                     instructions.hs:215

0x32CE  0x45            PUSHI1
0x32CF  0x4C            POPLOCALB00

                        // }                                                    instructions.hs:217

0x32D0  0x28 0x02       DECSP 0x02

                        // return isOffset;                                     instructions.hs:218

0x32D2  0x4E            PUSHLOCALB00
0x32D3  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:68
// ####  Char.ToLower(..)  ####                                                 0x00BA


                        // byte b;                                              char.hs:69

0x32D5  0x5F 0x01       ENTERB 0x01

                        // if (IsUpper(this))                                   char.hs:70

0x32D7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32D9  0x2C 0xB3       CALLB 0xB3     // Char.IsUpper
0x32DB  0x2E 0x0E       JZB 0x32E9 (+14)

                        // b = byte(this) - 65 + 97; // -A + a;                 char.hs:72

0x32DD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32DF  0x1A 0x41       PUSHIB 0x41
0x32E1  0x01            SUB
0x32E2  0x1A 0x61       PUSHIB 0x61
0x32E4  0x00            ADD
0x32E5  0x4C            POPLOCALB00

                        // this = char(b);                                      char.hs:73

0x32E6  0x4E            PUSHLOCALB00
0x32E7  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return this;                                         char.hs:75

0x32E9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32EB  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:42
// ####  Char.IsDigit(..)  ####                                                 0x00B7


                        // byte b;                                              char.hs:43

0x32ED  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:44

0x32EF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32F1  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)); // 0..9             char.hs:45

0x32F2  0x4E            PUSHLOCALB00
0x32F3  0x1A 0x30       PUSHIB 0x30
0x32F5  0x09            GE
0x32F6  0x27 0x00       DUP 0x00
0x32F8  0x2E 0x07       JZB 0x32FF (+7)
0x32FA  0x4E            PUSHLOCALB00
0x32FB  0x1A 0x39       PUSHIB 0x39
0x32FD  0x0A            LE
0x32FE  0x0C            BOOLAND
0x32FF  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:56
// ####  Char.ToHex(..)  ####                                                   0x00B9

0x3301  0x49            ENTER

                        // if (h < 10)                                          char.hs:57

0x3302  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3304  0x1A 0x0A       PUSHIB 0x0A
0x3306  0x08            LT
0x3307  0x2E 0x0B       JZB 0x3312 (+11)

                        // h = h + 48; // +0                                    char.hs:59

0x3309  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x330B  0x1A 0x30       PUSHIB 0x30
0x330D  0x00            ADD
0x330E  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    char.hs:60

0x3310  0x30 0x09       JB 0x3319 (+9)

                        // h = h + 55; // +A - 10                               char.hs:63

0x3312  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3314  0x1A 0x37       PUSHIB 0x37
0x3316  0x00            ADD
0x3317  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return char(h);                                      char.hs:65

0x3319  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x331B  0x2B 0x02       RETRETB 0x02


// /source/system/char.hs:15
// ####  Char.IsUpper(..)  ####                                                 0x00B3


                        // byte b;                                              char.hs:16

0x331D  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:17

0x331F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3321  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90));  // A..Z            char.hs:18

0x3322  0x4E            PUSHLOCALB00
0x3323  0x1A 0x41       PUSHIB 0x41
0x3325  0x09            GE
0x3326  0x27 0x00       DUP 0x00
0x3328  0x2E 0x07       JZB 0x332F (+7)
0x332A  0x4E            PUSHLOCALB00
0x332B  0x1A 0x5A       PUSHIB 0x5A
0x332D  0x0A            LE
0x332E  0x0C            BOOLAND
0x332F  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:259
// ####  String.StartsWith(..)  ####                                            0x00E3

0x3331  0x49            ENTER

                        // return (this.Length > 0) && (this[0] == pattern);

0x3332  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3334  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3336  0x44            PUSHI0
0x3337  0x07            GT
0x3338  0x27 0x00       DUP 0x00
0x333A  0x2E 0x0B       JZB 0x3345 (+11)
0x333C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x333E  0x44            PUSHI0
0x333F  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x3341  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3343  0x05            EQ
0x3344  0x0C            BOOLAND
0x3345  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:383
// ####  String.LastIndexOf(..)  ####                                           0x00EC


                        // uint length;                                         string.hs:384

0x3347  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:388

0x3349  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x334B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x334D  0x4C            POPLOCALB00

                        // if (length == 0)                                     string.hs:389

0x334E  0x4E            PUSHLOCALB00
0x334F  0x2E 0x1D       JZB 0x336C (+29)

                        // i = length-1;                                        string.hs:393

0x3351  0x4E            PUSHLOCALB00
0x3352  0x45            PUSHI1
0x3353  0x01            SUB
0x3354  0x4D            POPLOCALB02

                        // if (this[i] == pattern)                              string.hs:396

0x3355  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3357  0x4F            PUSHLOCALB02
0x3358  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x335A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x335C  0x05            EQ
0x335D  0x2E 0x08       JZB 0x3365 (+8)

                        // index = i;                                           string.hs:398

0x335F  0x4F            PUSHLOCALB02
0x3360  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:399

0x3362  0x45            PUSHI1
0x3363  0x2B 0x0A       RETRETB 0x0A

                        // if (i == 0)                                          string.hs:401

0x3365  0x4F            PUSHLOCALB02
0x3366  0x2E 0x06       JZB 0x336C (+6)

                        // i--;                                                 string.hs:405

0x3368  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:406

0x336A  0x30 0xEB       JB 0x3355 (-21)

                        // return false;                                        string.hs:409

0x336C  0x44            PUSHI0
0x336D  0x2B 0x0A       RETRETB 0x0A


// /source/system/string.hs:438
// ####  String.Pad(..)  ####                                                   0x00EE


                        // uint length;                                         string.hs:439

0x336F  0x5F 0x02       ENTERB 0x02

                        // string result;                                       string.hs:441

0x3371  0x24 0x02       SYSCALL0 0x02  // String.New

                        // result = this;                                       string.hs:442

0x3373  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3375  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // length = this.Length;                                string.hs:443

0x3377  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3379  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x337B  0x4C            POPLOCALB00

                        // if (width > length)                                  string.hs:444

0x337C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x337E  0x4E            PUSHLOCALB00
0x337F  0x07            GT
0x3380  0x2E 0x16       JZB 0x3396 (+22)

                        // padding = width - length;                            string.hs:446

0x3382  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3384  0x4E            PUSHLOCALB00
0x3385  0x01            SUB
0x3386  0x4D            POPLOCALB02

                        // while (padding > 0)                                  string.hs:447

0x3387  0x4F            PUSHLOCALB02
0x3388  0x44            PUSHI0
0x3389  0x07            GT
0x338A  0x2E 0x0C       JZB 0x3396 (+12)

                        // String.Build(ref result, append);                    string.hs:449

0x338C  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x338E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3390  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // padding--;                                           string.hs:450

0x3392  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:451

0x3394  0x30 0xF3       JB 0x3387 (-13)

                        // return result;                                       string.hs:453

0x3396  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3398  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/tokens/scanner.hs:32
// ####  Scanner.New(..)  ####                                                  0x0080

0x339A  0x49            ENTER

                        // sourceLines.Clear();                                 scanner.hs:33

0x339B  0x20 0x28       PUSHGLOBALB 0x28
0x339D  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // Token.Initialize();                                  scanner.hs:34

0x339F  0x2C 0x6F       CALLB 0x6F     // Token.Initialize

                        // }                                                    scanner.hs:35

0x33A1  0x4A            RET0


// /source/compiler/tokens/scanner.hs:38
// ####  Scanner.Load(..)  ####                                                 0x0081


                        // byte b;                                              scanner.hs:39

0x33A2  0x5F 0x01       ENTERB 0x01

                        // string ln;                                           scanner.hs:40

0x33A4  0x24 0x02       SYSCALL0 0x02  // String.New

                        // sourceLines.Clear();                                 scanner.hs:42

0x33A6  0x20 0x28       PUSHGLOBALB 0x28
0x33A8  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // sourceLength = 0;                                    scanner.hs:43

0x33AA  0x44            PUSHI0
0x33AB  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x33AD  0x59 0x2E       POPCOPYGLOBALB 0x2E

                        // file sourceFile = File.Open(sourcePath);             scanner.hs:44

0x33AF  0x24 0x60       SYSCALL0 0x60  // File.New
0x33B1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x33B3  0x24 0x61       SYSCALL0 0x61  // File.Open
0x33B5  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint progress = 0;                                   scanner.hs:45

0x33B7  0x44            PUSHI0

                        // if (sourceFile.IsValid())                            scanner.hs:46

0x33B8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x33BA  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x33BC  0x2E 0x65       JZB 0x3421 (+101)

                        // String.Build(ref ln); // clear                       scanner.hs:50

0x33BE  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x33C0  0x1A 0x02       PUSHIB 0x02
0x33C2  0x26 0x83       SYSCALL 0x83  // String.Build

                        // b = sourceFile.Read();                               scanner.hs:53

0x33C4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x33C6  0x24 0x64       SYSCALL0 0x64  // File.Read
0x33C8  0x4C            POPLOCALB00

                        // if (b == 0)                                          scanner.hs:54

0x33C9  0x4E            PUSHLOCALB00
0x33CA  0x2E 0x0D       JZB 0x33D7 (+13)

                        // Build(ref ln, char(b));                              scanner.hs:58

0x33CC  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x33CE  0x4E            PUSHLOCALB00
0x33CF  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // if (b == 0x0A)                                       scanner.hs:59

0x33D1  0x4E            PUSHLOCALB00
0x33D2  0x1A 0x0A       PUSHIB 0x0A
0x33D4  0x05            EQ
0x33D5  0x2E 0xEF       JZB 0x33C4 (-17)

                        // if ((ln.Length == 0) && !sourceFile.IsValid())

0x33D7  0x4F            PUSHLOCALB02
0x33D8  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x33DA  0x44            PUSHI0
0x33DB  0x05            EQ
0x33DC  0x27 0x00       DUP 0x00
0x33DE  0x2E 0x08       JZB 0x33E6 (+8)
0x33E0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x33E2  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x33E4  0x41            BOOLNOT
0x33E5  0x0C            BOOLAND
0x33E6  0x2F 0x2D       JNZB 0x3413 (+45)

                        // sourceLength = sourceLength + ln.Length;             scanner.hs:68

0x33E8  0x20 0x2E       PUSHGLOBALB 0x2E
0x33EA  0x4F            PUSHLOCALB02
0x33EB  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x33ED  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x33EF  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x33F1  0x59 0x2E       POPCOPYGLOBALB 0x2E

                        // sourceLines.Append(ln);                              scanner.hs:69

0x33F3  0x20 0x28       PUSHGLOBALB 0x28
0x33F5  0x4F            PUSHLOCALB02
0x33F6  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // progress = progress + ln.Length;                     scanner.hs:71

0x33F8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x33FA  0x4F            PUSHLOCALB02
0x33FB  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x33FD  0x00            ADD
0x33FE  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (progress > 10240)                                scanner.hs:72

0x3400  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3402  0x37 0x00 0x28  PUSHIW 0x2800
0x3405  0x07            GT
0x3406  0x2E 0xB8       JZB 0x33BE (-72)

                        // Parser.ProgressTick("+");                            scanner.hs:74

0x3408  0x1A 0x2B       PUSHIB 0x2B
0x340A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x340C  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // progress = 0;                                        scanner.hs:75

0x340E  0x44            PUSHI0
0x340F  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // } // loop                                            scanner.hs:77

0x3411  0x30 0xAD       JB 0x33BE (-83)

                        // if (progress > 2560)                                 scanner.hs:78

0x3413  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3415  0x37 0x00 0x0A  PUSHIW 0x0A00
0x3418  0x07            GT
0x3419  0x2E 0x08       JZB 0x3421 (+8)

                        // Parser.ProgressTick("+");                            scanner.hs:80

0x341B  0x1A 0x2B       PUSHIB 0x2B
0x341D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x341F  0x2C 0x96       CALLB 0x96     // Parser.ProgressTick

                        // currentSourcePath = sourcePath;                      scanner.hs:83

0x3421  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3423  0x59 0x34       POPCOPYGLOBALB 0x34

                        // }                                                    scanner.hs:84

0x3425  0x2A 0x0A       RETB 0x0A


// /source/compiler/tokens/scanner.hs:86
// ####  Scanner.Reset(..)  ####                                                0x0082

0x3427  0x49            ENTER

                        // if (sourcePath != currentSourcePath)                 scanner.hs:87

0x3428  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x342A  0x20 0x34       PUSHGLOBALB 0x34
0x342C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x342E  0x2E 0x06       JZB 0x3434 (+6)

                        // Load(sourcePath);                                    scanner.hs:89

0x3430  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3432  0x2C 0x81       CALLB 0x81     // Scanner.Load

                        // currentPos = pos;                                    scanner.hs:91

0x3434  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3436  0x59 0x2A       POPCOPYGLOBALB 0x2A

                        // currentLine = ln;                                    scanner.hs:92

0x3438  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x343A  0x1F 0x2C       POPGLOBALB 0x2C

                        // <string,string> empty;                               scanner.hs:93

0x343C  0x1A 0x0F       PUSHIB 0x0F
0x343E  0x1A 0x0F       PUSHIB 0x0F
0x3440  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // peekedToken = empty;                                 scanner.hs:94

0x3442  0x4E            PUSHLOCALB00
0x3443  0x59 0x3E       POPCOPYGLOBALB 0x3E

                        // isPeekedToken = false;                               scanner.hs:95

0x3445  0x44            PUSHI0
0x3446  0x1F 0x40       POPGLOBALB 0x40

                        // iCurrentSourceLine = 0;                              scanner.hs:98

0x3448  0x44            PUSHI0
0x3449  0x1F 0x30       POPGLOBALB 0x30

                        // currentStartPos = 0;                                 scanner.hs:99

0x344B  0x44            PUSHI0
0x344C  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x344E  0x59 0x32       POPCOPYGLOBALB 0x32

                        // lastPos = 0;                                         scanner.hs:100

0x3450  0x44            PUSHI0
0x3451  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x3453  0x59 0x38       POPCOPYGLOBALB 0x38

                        // lastPosSet = false;                                  scanner.hs:101

0x3455  0x44            PUSHI0
0x3456  0x1F 0x3A       POPGLOBALB 0x3A

                        // }                                                    scanner.hs:102

0x3458  0x2A 0x08       RETB 0x08


// /source/compiler/tokens/parser.hs:103
// ####  Parser.Reset(..)  ####                                                 0x009D

0x345A  0x49            ENTER

                        // <string, string> empty;                              parser.hs:104

0x345B  0x1A 0x0F       PUSHIB 0x0F
0x345D  0x1A 0x0F       PUSHIB 0x0F
0x345F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // previousToken = empty;                               parser.hs:105

0x3461  0x4E            PUSHLOCALB00
0x3462  0x59 0x42       POPCOPYGLOBALB 0x42

                        // currentToken = empty;                                parser.hs:106

0x3464  0x4E            PUSHLOCALB00
0x3465  0x59 0x44       POPCOPYGLOBALB 0x44

                        // hadError = false;                                    parser.hs:107

0x3467  0x44            PUSHI0
0x3468  0x1F 0x46       POPGLOBALB 0x46

                        // }                                                    parser.hs:108

0x346A  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:162
// ####  Parser.Advance(..)  ####                                               0x00A4

0x346C  0x49            ENTER

                        // previousToken = currentToken;                        parser.hs:163

0x346D  0x20 0x44       PUSHGLOBALB 0x44
0x346F  0x59 0x42       POPCOPYGLOBALB 0x42

                        // nextToken();                                         parser.hs:166

0x3471  0x2C 0x9E       CALLB 0x9E     // Parser.nextToken

                        // HopperToken ttype = Token.GetType(currentToken);

0x3473  0x44            PUSHI0
0x3474  0x20 0x44       PUSHGLOBALB 0x44
0x3476  0x2C 0x6E       CALLB 0x6E     // Token.GetType
0x3478  0x4C            POPLOCALB00

                        // if (ttype != HopperToken.Error)                      parser.hs:168

0x3479  0x4E            PUSHLOCALB00
0x347A  0x45            PUSHI1
0x347B  0x06            NE
0x347C  0x2E 0x05       JZB 0x3481 (+5)

                        // break;                                               parser.hs:170

0x347E  0x28 0x02       DECSP 0x02
0x3480  0x4A            RET0

                        // ErrorAtCurrent(currentToken["lexeme"]);              parser.hs:172

0x3481  0x20 0x44       PUSHGLOBALB 0x44
0x3483  0x1A 0xD8       PUSHIB 0xD8
0x3485  0x1A 0x06       PUSHIB 0x06
0x3487  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3489  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x348B  0x2C 0xA3       CALLB 0xA3     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:173

0x348D  0x28 0x02       DECSP 0x02
0x348F  0x4A            RET0


// /source/compiler/tokens/parser.hs:177
// ####  Parser.Consume(..)  ####                                               0x00A5

0x3490  0x49            ENTER

                        // Consume(consumeType, "", "'" + ch + "' expected");

0x3491  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3493  0x24 0x02       SYSCALL0 0x02  // String.New
0x3495  0x1A 0x27       PUSHIB 0x27
0x3497  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3499  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x349B  0x25 0x03       SYSCALL1 0x03  // String.Append
0x349D  0x37 0xDA 0x02  PUSHIW 0x02DA
0x34A0  0x1A 0x0A       PUSHIB 0x0A
0x34A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x34A4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x34A6  0x2C 0xA7       CALLB 0xA7     // Parser.Consume

                        // }                                                    parser.hs:179

0x34A8  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:81
// ####  Parser.HadError_Get(..)  ####                                          0x0098

0x34AA  0x49            ENTER

                        // bool HadError { get { return hadError; } }           parser.hs:81

0x34AB  0x20 0x46       PUSHGLOBALB 0x46
0x34AD  0x4A            RET0


// /source/compiler/tokens/parser.hs:216
// ####  Parser.Check(..)  ####                                                 0x00A8

0x34AE  0x49            ENTER

                        // return Check(checkType, "");                         parser.hs:217

0x34AF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x34B1  0x24 0x02       SYSCALL0 0x02  // String.New
0x34B3  0x2C 0xA9       CALLB 0xA9     // Parser.Check
0x34B5  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/parser.hs:181
// ####  Parser.Consume(..)  ####                                               0x00A6

0x34B7  0x49            ENTER

                        // Consume(consumeType, "", message);                   parser.hs:182

0x34B8  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x34BA  0x24 0x02       SYSCALL0 0x02  // String.New
0x34BC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x34BE  0x2C 0xA7       CALLB 0xA7     // Parser.Consume

                        // }                                                    parser.hs:183

0x34C0  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:84
// ####  Parser.PreviousToken_Get(..)  ####                                     0x009A

0x34C2  0x49            ENTER

                        // <string, string> PreviousToken { get { return previousToken; }}

0x34C3  0x20 0x42       PUSHGLOBALB 0x42
0x34C5  0x4A            RET0


// /source/compiler/tokens/parser.hs:149
// ####  Parser.Error(..)  ####                                                 0x00A1

0x34C6  0x49            ENTER

                        // ErrorAt(previousToken, message);                     parser.hs:150

0x34C7  0x20 0x42       PUSHGLOBALB 0x42
0x34C9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x34CB  0x2C 0x9F       CALLB 0x9F     // Parser.ErrorAt

                        // }                                                    parser.hs:151

0x34CD  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:83
// ####  Parser.CurrentToken_Get(..)  ####                                      0x0099

0x34CF  0x49            ENTER

                        // <string, string> CurrentToken { get { return currentToken; }}

0x34D0  0x20 0x44       PUSHGLOBALB 0x44
0x34D2  0x4A            RET0


// /source/compiler/tokens/parser.hs:111
// ####  Parser.nextToken(..)  ####                                             0x009E

0x34D3  0x49            ENTER

                        // currentToken = Scanner.Next();                       parser.hs:112

0x34D4  0x2C 0x91       CALLB 0x91     // Scanner.Next
0x34D6  0x59 0x44       POPCOPYGLOBALB 0x44

                        // }                                                    parser.hs:113

0x34D8  0x4A            RET0


// /source/compiler/tokens/parser.hs:157
// ####  Parser.ErrorAtCurrent(..)  ####                                        0x00A3

0x34D9  0x49            ENTER

                        // ErrorAt(currentToken, message);                      parser.hs:158

0x34DA  0x20 0x44       PUSHGLOBALB 0x44
0x34DC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x34DE  0x2C 0x9F       CALLB 0x9F     // Parser.ErrorAt

                        // }                                                    parser.hs:159

0x34E0  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:185
// ####  Parser.Consume(..)  ####                                               0x00A7

0x34E2  0x49            ENTER

                        // if (HadError)                                        parser.hs:188

0x34E3  0x2C 0x98       CALLB 0x98     // Parser.HadError_Get
0x34E5  0x2E 0x04       JZB 0x34E9 (+4)

                        // break;                                               parser.hs:190

0x34E7  0x2A 0x06       RETB 0x06

                        // HopperToken ttype = Token.GetType(currentToken);

0x34E9  0x44            PUSHI0
0x34EA  0x20 0x44       PUSHGLOBALB 0x44
0x34EC  0x2C 0x6E       CALLB 0x6E     // Token.GetType
0x34EE  0x4C            POPLOCALB00

                        // if (ttype == consumeType)                            parser.hs:193

0x34EF  0x4E            PUSHLOCALB00
0x34F0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x34F2  0x05            EQ
0x34F3  0x2E 0x48       JZB 0x353B (+72)

                        // if (ttype == HopperToken.Keyword)                    parser.hs:195

0x34F5  0x4E            PUSHLOCALB00
0x34F6  0x1A 0x05       PUSHIB 0x05
0x34F8  0x05            EQ
0x34F9  0x2E 0x3C       JZB 0x3535 (+60)

                        // keyword = "|" + keyword + "|";                       parser.hs:197

0x34FB  0x1A 0x7C       PUSHIB 0x7C
0x34FD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x34FF  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3501  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3503  0x1A 0x7C       PUSHIB 0x7C
0x3505  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3507  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3509  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x350B  0x24 0x02       SYSCALL0 0x02  // String.New
0x350D  0x1A 0x7C       PUSHIB 0x7C
0x350F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3511  0x20 0x44       PUSHGLOBALB 0x44
0x3513  0x1A 0xD8       PUSHIB 0xD8
0x3515  0x1A 0x06       PUSHIB 0x06
0x3517  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3519  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x351B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x351D  0x1A 0x7C       PUSHIB 0x7C
0x351F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3521  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3523  0x5E            POPCOPYLOCALB02

                        // if (keyword.Contains(search))                        parser.hs:199

0x3524  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3526  0x4F            PUSHLOCALB02
0x3527  0x2C 0xE2       CALLB 0xE2     // String.Contains
0x3529  0x2E 0x08       JZB 0x3531 (+8)

                        // Advance();                                           parser.hs:201

0x352B  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               parser.hs:202

0x352D  0x28 0x04       DECSP 0x04
0x352F  0x2A 0x06       RETB 0x06

                        // }                                                    parser.hs:204

0x3531  0x28 0x02       DECSP 0x02
0x3533  0x30 0x08       JB 0x353B (+8)

                        // Advance();                                           parser.hs:207

0x3535  0x2C 0xA4       CALLB 0xA4     // Parser.Advance

                        // break;                                               parser.hs:208

0x3537  0x28 0x02       DECSP 0x02
0x3539  0x2A 0x06       RETB 0x06

                        // ErrorAtCurrent(message);                             parser.hs:211

0x353B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x353D  0x2C 0xA3       CALLB 0xA3     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:212

0x353F  0x28 0x02       DECSP 0x02
0x3541  0x2A 0x06       RETB 0x06


// /source/compiler/tokens/parser.hs:220
// ####  Parser.Check(..)  ####                                                 0x00A9


                        // bool result = false;                                 parser.hs:221

0x3543  0x5F 0x02       ENTERB 0x02

                        // HopperToken ttype = Token.GetType(currentToken);

0x3545  0x20 0x44       PUSHGLOBALB 0x44
0x3547  0x2C 0x6E       CALLB 0x6E     // Token.GetType
0x3549  0x4D            POPLOCALB02

                        // result = (checkType == ttype);                       parser.hs:225

0x354A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x354C  0x4F            PUSHLOCALB02
0x354D  0x05            EQ
0x354E  0x4C            POPLOCALB00

                        // if (!result)                                         parser.hs:226

0x354F  0x4E            PUSHLOCALB00
0x3550  0x2F 0x07       JNZB 0x3557 (+7)

                        // break;                                               parser.hs:228

0x3552  0x28 0x02       DECSP 0x02
0x3554  0x33 0x88 0x00  JW 0x35DC (+136)

                        // if (checkType == HopperToken.Keyword)                parser.hs:230

0x3557  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3559  0x1A 0x05       PUSHIB 0x05
0x355B  0x05            EQ
0x355C  0x2E 0x36       JZB 0x3592 (+54)

                        // keyword = "|" + keyword + "|";                       parser.hs:232

0x355E  0x1A 0x7C       PUSHIB 0x7C
0x3560  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3562  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3564  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3566  0x1A 0x7C       PUSHIB 0x7C
0x3568  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x356A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x356C  0x57 0xFE       POPCOPYLOCALB 0xFE (BP-2)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x356E  0x24 0x02       SYSCALL0 0x02  // String.New
0x3570  0x1A 0x7C       PUSHIB 0x7C
0x3572  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3574  0x20 0x44       PUSHGLOBALB 0x44
0x3576  0x1A 0xD8       PUSHIB 0xD8
0x3578  0x1A 0x06       PUSHIB 0x06
0x357A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x357C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x357E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3580  0x1A 0x7C       PUSHIB 0x7C
0x3582  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3584  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3586  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // result = keyword.Contains(search);                   parser.hs:234

0x3588  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0x358B  0x2C 0xE2       CALLB 0xE2     // String.Contains
0x358D  0x4C            POPLOCALB00

                        // }                                                    parser.hs:235

0x358E  0x28 0x02       DECSP 0x02
0x3590  0x30 0x4A       JB 0x35DA (+74)

                        // else if ((checkType == HopperToken.Identifier) && (keyword.Length != 0))

0x3592  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3594  0x1A 0x03       PUSHIB 0x03
0x3596  0x05            EQ
0x3597  0x27 0x00       DUP 0x00
0x3599  0x2E 0x09       JZB 0x35A2 (+9)
0x359B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x359D  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x359F  0x44            PUSHI0
0x35A0  0x06            NE
0x35A1  0x0C            BOOLAND
0x35A2  0x2E 0x15       JZB 0x35B7 (+21)

                        // result = keyword == currentToken["lexeme"];

0x35A4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x35A6  0x20 0x44       PUSHGLOBALB 0x44
0x35A8  0x1A 0xD8       PUSHIB 0xD8
0x35AA  0x1A 0x06       PUSHIB 0x06
0x35AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35AE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x35B0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x35B2  0x44            PUSHI0
0x35B3  0x05            EQ
0x35B4  0x4C            POPLOCALB00

                        // }                                                    parser.hs:239

0x35B5  0x30 0x25       JB 0x35DA (+37)

                        // else if ((checkType == HopperToken.Directive) && (keyword.Length != 0))

0x35B7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x35B9  0x1A 0x06       PUSHIB 0x06
0x35BB  0x05            EQ
0x35BC  0x27 0x00       DUP 0x00
0x35BE  0x2E 0x09       JZB 0x35C7 (+9)
0x35C0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x35C2  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x35C4  0x44            PUSHI0
0x35C5  0x06            NE
0x35C6  0x0C            BOOLAND
0x35C7  0x2E 0x13       JZB 0x35DA (+19)

                        // result = keyword == currentToken["lexeme"];

0x35C9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x35CB  0x20 0x44       PUSHGLOBALB 0x44
0x35CD  0x1A 0xD8       PUSHIB 0xD8
0x35CF  0x1A 0x06       PUSHIB 0x06
0x35D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35D3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x35D5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x35D7  0x44            PUSHI0
0x35D8  0x05            EQ
0x35D9  0x4C            POPLOCALB00

                        // break;                                               parser.hs:244

0x35DA  0x28 0x02       DECSP 0x02

                        // return result;                                       parser.hs:246

0x35DC  0x4E            PUSHLOCALB00
0x35DD  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/parser.hs:115
// ####  Parser.ErrorAt(..)  ####                                               0x009F

0x35DF  0x49            ENTER

                        // if (!hadError)                                       parser.hs:116

0x35E0  0x20 0x46       PUSHGLOBALB 0x46
0x35E2  0x32 0xA6 0x00  JNZW 0x3688 (+166)

                        // string errorMessage;                                 parser.hs:118

0x35E5  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string lexeme = token["lexeme"];                     parser.hs:119

0x35E7  0x24 0x02       SYSCALL0 0x02  // String.New
0x35E9  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x35EB  0x1A 0xD8       PUSHIB 0xD8
0x35ED  0x1A 0x06       PUSHIB 0x06
0x35EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35F1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x35F3  0x5E            POPCOPYLOCALB02

                        // if (token.Contains("line"))                          parser.hs:120

0x35F4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x35F6  0x37 0x5F 0x01  PUSHIW 0x015F
0x35F9  0x1A 0x04       PUSHIB 0x04
0x35FB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35FD  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x35FF  0x2E 0x3B       JZB 0x363A (+59)

                        // string ln = token["line"];                           parser.hs:122

0x3601  0x24 0x02       SYSCALL0 0x02  // String.New
0x3603  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3605  0x37 0x5F 0x01  PUSHIW 0x015F
0x3608  0x1A 0x04       PUSHIB 0x04
0x360A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x360C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x360E  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string path = token["source"];                       parser.hs:123

0x3610  0x24 0x02       SYSCALL0 0x02  // String.New
0x3612  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3614  0x37 0x8D 0x01  PUSHIW 0x018D
0x3617  0x1A 0x06       PUSHIB 0x06
0x3619  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x361B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x361D  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // errorMessage = "[" + path + ":" + ln + "]";

0x361F  0x1A 0x5B       PUSHIB 0x5B
0x3621  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3623  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3625  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3627  0x1A 0x3A       PUSHIB 0x3A
0x3629  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x362B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x362D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x362F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3631  0x1A 0x5D       PUSHIB 0x5D
0x3633  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3635  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3637  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:125

0x3638  0x28 0x04       DECSP 0x04

                        // HopperToken ttype = Token.GetType(token);            parser.hs:126

0x363A  0x44            PUSHI0
0x363B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x363D  0x2C 0x6E       CALLB 0x6E     // Token.GetType
0x363F  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (ttype == HopperToken.EOF)                        parser.hs:127

0x3641  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3643  0x1A 0x2D       PUSHIB 0x2D
0x3645  0x05            EQ
0x3646  0x2E 0x0F       JZB 0x3655 (+15)

                        // errorMessage = errorMessage + " Error at end";

0x3648  0x4E            PUSHLOCALB00
0x3649  0x37 0xE4 0x02  PUSHIW 0x02E4
0x364C  0x1A 0x0D       PUSHIB 0x0D
0x364E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3650  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3652  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:130

0x3653  0x30 0x23       JB 0x3676 (+35)

                        // else if (ttype == HopperToken.Error)                 parser.hs:131

0x3655  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3657  0x45            PUSHI1
0x3658  0x05            EQ
0x3659  0x2F 0x1D       JNZB 0x3676 (+29)

                        // else if (lexeme.Length > 0)                          parser.hs:135

0x365B  0x4F            PUSHLOCALB02
0x365C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x365E  0x44            PUSHI0
0x365F  0x07            GT
0x3660  0x2E 0x16       JZB 0x3676 (+22)

                        // errorMessage = errorMessage + " Error at '" + lexeme + "'";

0x3662  0x4E            PUSHLOCALB00
0x3663  0x37 0xF1 0x02  PUSHIW 0x02F1
0x3666  0x1A 0x0B       PUSHIB 0x0B
0x3668  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x366A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x366C  0x4F            PUSHLOCALB02
0x366D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x366F  0x1A 0x27       PUSHIB 0x27
0x3671  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3673  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3675  0x5D            POPCOPYLOCALB00

                        // errorMessage = errorMessage + ": " + message;

0x3676  0x4E            PUSHLOCALB00
0x3677  0x37 0x3A 0x20  PUSHIW 0x203A
0x367A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x367C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x367E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3680  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3682  0x5D            POPCOPYLOCALB00

                        // EmitError(errorMessage);                             parser.hs:140

0x3683  0x4E            PUSHLOCALB00
0x3684  0x2C 0x95       CALLB 0x95     // Parser.EmitError

                        // }                                                    parser.hs:141

0x3686  0x28 0x06       DECSP 0x06

                        // hadError = true;                                     parser.hs:142

0x3688  0x45            PUSHI1
0x3689  0x1F 0x46       POPGLOBALB 0x46

                        // }                                                    parser.hs:143

0x368B  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:42
// ####  Parser.EmitError(..)  ####                                             0x0095

0x368D  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:43

0x368E  0x2C 0x94       CALLB 0x94     // Parser.IsInteractive
0x3690  0x2E 0x22       JZB 0x36B2 (+34)

                        // ProgressDone();                                      parser.hs:45

0x3692  0x2C 0x97       CALLB 0x97     // Parser.ProgressDone

                        // string eol = "" + char(0x0A);                        parser.hs:46

0x3694  0x24 0x02       SYSCALL0 0x02  // String.New
0x3696  0x24 0x02       SYSCALL0 0x02  // String.New
0x3698  0x1A 0x0A       PUSHIB 0x0A
0x369A  0x25 0x03       SYSCALL1 0x03  // String.Append
0x369C  0x5D            POPCOPYLOCALB00

                        // errorFile.Append(errorMessage + eol);                parser.hs:47

0x369D  0x20 0x4C       PUSHGLOBALB 0x4C
0x369F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x36A1  0x4E            PUSHLOCALB00
0x36A2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x36A4  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // errorFile.Flush();                                   parser.hs:48

0x36A6  0x20 0x4C       PUSHGLOBALB 0x4C
0x36A8  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // Diagnostics.SetError(0x0E);                          parser.hs:49

0x36AA  0x1A 0x0E       PUSHIB 0x0E
0x36AC  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:50

0x36AE  0x28 0x02       DECSP 0x02
0x36B0  0x2A 0x02       RETB 0x02

                        // PrintLn(errorMessage);                               parser.hs:53

0x36B2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x36B4  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // }                                                    parser.hs:55

0x36B6  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/token.hs:334
// ####  Token.TryParseHex(..)  ####                                            0x007A


                        // bool success;                                        token.hs:335

0x36B8  0x5F 0x03       ENTERB 0x03

                        // returnValue = 0;                                     token.hs:339

0x36BA  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0x"))                       token.hs:340

0x36BC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x36BE  0x37 0x30 0x78  PUSHIW 0x7830
0x36C1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x36C3  0x2C 0xE4       CALLB 0xE4     // String.StartsWith
0x36C5  0x2E 0x5F       JZB 0x3724 (+95)

                        // length = content.Length;                             token.hs:344

0x36C7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x36C9  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x36CB  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:345

0x36CC  0x4F            PUSHLOCALB02
0x36CD  0x1A 0x03       PUSHIB 0x03
0x36CF  0x08            LT
0x36D0  0x2F 0x54       JNZB 0x3724 (+84)

                        // success = true;                                      token.hs:349

0x36D2  0x45            PUSHI1
0x36D3  0x4C            POPLOCALB00

                        // for (uint i=0; i < length-2; i++)                    token.hs:350

0x36D4  0x44            PUSHI0
0x36D5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x36D7  0x4F            PUSHLOCALB02
0x36D8  0x1A 0x02       PUSHIB 0x02
0x36DA  0x01            SUB
0x36DB  0x08            LT
0x36DC  0x2E 0x46       JZB 0x3722 (+70)

                        // returnValue = returnValue * 16;                      token.hs:352

0x36DE  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x36E0  0x1A 0x10       PUSHIB 0x10
0x36E2  0x03            MUL
0x36E3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // char c = content.GetChar(i+2);                       token.hs:353

0x36E5  0x44            PUSHI0
0x36E6  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x36E9  0x1A 0x02       PUSHIB 0x02
0x36EB  0x00            ADD
0x36EC  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x36EE  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (c.IsDigit())                                     token.hs:354

0x36F0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x36F2  0x2C 0xB7       CALLB 0xB7     // Char.IsDigit
0x36F4  0x2E 0x0E       JZB 0x3702 (+14)

                        // returnValue = returnValue + (byte(c) - 48); // 48 is ASCII for '0'

0x36F6  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x36F8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x36FA  0x1A 0x30       PUSHIB 0x30
0x36FC  0x01            SUB
0x36FD  0x00            ADD
0x36FE  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:357

0x3700  0x30 0x1C       JB 0x371C (+28)

                        // else if (c.IsHexDigit())                             token.hs:358

0x3702  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3704  0x2C 0xBB       CALLB 0xBB     // Char.IsHexDigit
0x3706  0x2E 0x10       JZB 0x3716 (+16)

                        // returnValue = returnValue + (byte(c.ToLower()) - 87); // 97 is ASCII for 'a', -97+10 = -87

0x3708  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x370A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x370C  0x2C 0xBA       CALLB 0xBA     // Char.ToLower
0x370E  0x1A 0x57       PUSHIB 0x57
0x3710  0x01            SUB
0x3711  0x00            ADD
0x3712  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:361

0x3714  0x30 0x08       JB 0x371C (+8)

                        // success = false;                                     token.hs:364

0x3716  0x44            PUSHI0
0x3717  0x4C            POPLOCALB00

                        // break;                                               token.hs:365

0x3718  0x28 0x04       DECSP 0x04
0x371A  0x30 0x0A       JB 0x3724 (+10)

                        // }                                                    token.hs:367

0x371C  0x28 0x02       DECSP 0x02
0x371E  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x3720  0x30 0xB5       JB 0x36D5 (-75)
0x3722  0x28 0x02       DECSP 0x02

                        // return success;                                      token.hs:370

0x3724  0x4E            PUSHLOCALB00
0x3725  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:113
// ####  Token.Initialize(..)  ####                                             0x006F

0x3727  0x49            ENTER

                        // reservedIdentifiers.Clear();                         token.hs:114

0x3728  0x20 0x1A       PUSHGLOBALB 0x1A
0x372A  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // reservedZopperIdentifiers.Clear();                   token.hs:115

0x372C  0x20 0x1C       PUSHGLOBALB 0x1C
0x372E  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // typeKeywords.Clear();                                token.hs:116

0x3730  0x20 0x1E       PUSHGLOBALB 0x1E
0x3732  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // statementKeywords.Clear();                           token.hs:117

0x3734  0x20 0x20       PUSHGLOBALB 0x20
0x3736  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes.Clear();                            token.hs:119

0x3738  0x20 0x24       PUSHGLOBALB 0x24
0x373A  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes["EOF"] = HopperToken.EOF;           token.hs:121

0x373C  0x20 0x24       PUSHGLOBALB 0x24
0x373E  0x37 0xFC 0x02  PUSHIW 0x02FC
0x3741  0x1A 0x03       PUSHIB 0x03
0x3743  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3745  0x1A 0x2D       PUSHIB 0x2D
0x3747  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Undefined"] = HopperToken.Undefined;

0x3749  0x20 0x24       PUSHGLOBALB 0x24
0x374B  0x37 0xFF 0x02  PUSHIW 0x02FF
0x374E  0x1A 0x09       PUSHIB 0x09
0x3750  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3752  0x44            PUSHI0
0x3753  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Error"] = HopperToken.Error;

0x3755  0x20 0x24       PUSHGLOBALB 0x24
0x3757  0x1A 0xB9       PUSHIB 0xB9
0x3759  0x1A 0x05       PUSHIB 0x05
0x375B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x375D  0x45            PUSHI1
0x375E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Char"] = HopperToken.Char;

0x3760  0x20 0x24       PUSHGLOBALB 0x24
0x3762  0x37 0x08 0x03  PUSHIW 0x0308
0x3765  0x1A 0x04       PUSHIB 0x04
0x3767  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3769  0x1A 0x08       PUSHIB 0x08
0x376B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Bool"] = HopperToken.Bool;

0x376D  0x20 0x24       PUSHGLOBALB 0x24
0x376F  0x37 0x0C 0x03  PUSHIW 0x030C
0x3772  0x1A 0x04       PUSHIB 0x04
0x3774  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3776  0x1A 0x07       PUSHIB 0x07
0x3778  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Keyword"] = HopperToken.Keyword;

0x377A  0x20 0x24       PUSHGLOBALB 0x24
0x377C  0x37 0x10 0x03  PUSHIW 0x0310
0x377F  0x1A 0x07       PUSHIB 0x07
0x3781  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3783  0x1A 0x05       PUSHIB 0x05
0x3785  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Directive"] = HopperToken.Directive;

0x3787  0x20 0x24       PUSHGLOBALB 0x24
0x3789  0x37 0x17 0x03  PUSHIW 0x0317
0x378C  0x1A 0x09       PUSHIB 0x09
0x378E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3790  0x1A 0x06       PUSHIB 0x06
0x3792  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Identifier"] = HopperToken.Identifier;

0x3794  0x20 0x24       PUSHGLOBALB 0x24
0x3796  0x37 0x20 0x03  PUSHIW 0x0320
0x3799  0x1A 0x0A       PUSHIB 0x0A
0x379B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x379D  0x1A 0x03       PUSHIB 0x03
0x379F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["DottedIdentifier"] = HopperToken.DottedIdentifier;

0x37A1  0x20 0x24       PUSHGLOBALB 0x24
0x37A3  0x37 0x2A 0x03  PUSHIW 0x032A
0x37A6  0x1A 0x10       PUSHIB 0x10
0x37A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37AA  0x1A 0x02       PUSHIB 0x02
0x37AC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Integer"] = HopperToken.Integer;

0x37AE  0x20 0x24       PUSHGLOBALB 0x24
0x37B0  0x37 0x3A 0x03  PUSHIW 0x033A
0x37B3  0x1A 0x07       PUSHIB 0x07
0x37B5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37B7  0x1A 0x09       PUSHIB 0x09
0x37B9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Float"] = HopperToken.Float;

0x37BB  0x20 0x24       PUSHGLOBALB 0x24
0x37BD  0x37 0x41 0x03  PUSHIW 0x0341
0x37C0  0x1A 0x05       PUSHIB 0x05
0x37C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37C4  0x1A 0x0A       PUSHIB 0x0A
0x37C6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["StringConstant"] = HopperToken.StringConstant;

0x37C8  0x20 0x24       PUSHGLOBALB 0x24
0x37CA  0x37 0x46 0x03  PUSHIW 0x0346
0x37CD  0x1A 0x0E       PUSHIB 0x0E
0x37CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37D1  0x1A 0x0B       PUSHIB 0x0B
0x37D3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Assign"] = HopperToken.Assign;

0x37D5  0x20 0x24       PUSHGLOBALB 0x24
0x37D7  0x37 0x54 0x03  PUSHIW 0x0354
0x37DA  0x1A 0x06       PUSHIB 0x06
0x37DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37DE  0x1A 0x2C       PUSHIB 0x2C
0x37E0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0x37E2  0x20 0x24       PUSHGLOBALB 0x24
0x37E4  0x37 0x5A 0x03  PUSHIW 0x035A
0x37E7  0x1A 0x06       PUSHIB 0x06
0x37E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37EB  0x1A 0x21       PUSHIB 0x21
0x37ED  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0x37EF  0x20 0x24       PUSHGLOBALB 0x24
0x37F1  0x37 0x60 0x03  PUSHIW 0x0360
0x37F4  0x1A 0x05       PUSHIB 0x05
0x37F6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37F8  0x1A 0x22       PUSHIB 0x22
0x37FA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LParen"] = HopperToken.LParen;

0x37FC  0x20 0x24       PUSHGLOBALB 0x24
0x37FE  0x37 0x65 0x03  PUSHIW 0x0365
0x3801  0x1A 0x06       PUSHIB 0x06
0x3803  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3805  0x1A 0x10       PUSHIB 0x10
0x3807  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RParen"] = HopperToken.RParen;

0x3809  0x20 0x24       PUSHGLOBALB 0x24
0x380B  0x37 0x6B 0x03  PUSHIW 0x036B
0x380E  0x1A 0x06       PUSHIB 0x06
0x3810  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3812  0x1A 0x11       PUSHIB 0x11
0x3814  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBrace"] = HopperToken.LBrace;

0x3816  0x20 0x24       PUSHGLOBALB 0x24
0x3818  0x37 0x71 0x03  PUSHIW 0x0371
0x381B  0x1A 0x06       PUSHIB 0x06
0x381D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x381F  0x1A 0x12       PUSHIB 0x12
0x3821  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBrace"] = HopperToken.RBrace;

0x3823  0x20 0x24       PUSHGLOBALB 0x24
0x3825  0x37 0x77 0x03  PUSHIW 0x0377
0x3828  0x1A 0x06       PUSHIB 0x06
0x382A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x382C  0x1A 0x13       PUSHIB 0x13
0x382E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBracket"] = HopperToken.LBracket;

0x3830  0x20 0x24       PUSHGLOBALB 0x24
0x3832  0x37 0x7D 0x03  PUSHIW 0x037D
0x3835  0x1A 0x08       PUSHIB 0x08
0x3837  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3839  0x1A 0x14       PUSHIB 0x14
0x383B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBracket"] = HopperToken.RBracket;

0x383D  0x20 0x24       PUSHGLOBALB 0x24
0x383F  0x37 0x85 0x03  PUSHIW 0x0385
0x3842  0x1A 0x08       PUSHIB 0x08
0x3844  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3846  0x1A 0x15       PUSHIB 0x15
0x3848  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["SemiColon"] = HopperToken.SemiColon;

0x384A  0x20 0x24       PUSHGLOBALB 0x24
0x384C  0x37 0x8D 0x03  PUSHIW 0x038D
0x384F  0x1A 0x09       PUSHIB 0x09
0x3851  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3853  0x1A 0x0C       PUSHIB 0x0C
0x3855  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Colon"] = HopperToken.Colon;

0x3857  0x20 0x24       PUSHGLOBALB 0x24
0x3859  0x37 0x91 0x03  PUSHIW 0x0391
0x385C  0x1A 0x05       PUSHIB 0x05
0x385E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3860  0x1A 0x0E       PUSHIB 0x0E
0x3862  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Comma"] = HopperToken.Comma;

0x3864  0x20 0x24       PUSHGLOBALB 0x24
0x3866  0x37 0x96 0x03  PUSHIW 0x0396
0x3869  0x1A 0x05       PUSHIB 0x05
0x386B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x386D  0x1A 0x0D       PUSHIB 0x0D
0x386F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Dot"] = HopperToken.Dot;           token.hs:145

0x3871  0x20 0x24       PUSHGLOBALB 0x24
0x3873  0x37 0x2A 0x03  PUSHIW 0x032A
0x3876  0x1A 0x03       PUSHIB 0x03
0x3878  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x387A  0x1A 0x04       PUSHIB 0x04
0x387C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Add"] = HopperToken.Add;           token.hs:146

0x387E  0x20 0x24       PUSHGLOBALB 0x24
0x3880  0x37 0x9B 0x03  PUSHIW 0x039B
0x3883  0x1A 0x03       PUSHIB 0x03
0x3885  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3887  0x1A 0x25       PUSHIB 0x25
0x3889  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Subtract"] = HopperToken.Subtract;

0x388B  0x20 0x24       PUSHGLOBALB 0x24
0x388D  0x37 0x9E 0x03  PUSHIW 0x039E
0x3890  0x1A 0x08       PUSHIB 0x08
0x3892  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3894  0x1A 0x26       PUSHIB 0x26
0x3896  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Multiply"] = HopperToken.Multiply;

0x3898  0x20 0x24       PUSHGLOBALB 0x24
0x389A  0x37 0xA6 0x03  PUSHIW 0x03A6
0x389D  0x1A 0x08       PUSHIB 0x08
0x389F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38A1  0x1A 0x27       PUSHIB 0x27
0x38A3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Divide"] = HopperToken.Divide;

0x38A5  0x20 0x24       PUSHGLOBALB 0x24
0x38A7  0x37 0xAE 0x03  PUSHIW 0x03AE
0x38AA  0x1A 0x06       PUSHIB 0x06
0x38AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38AE  0x1A 0x28       PUSHIB 0x28
0x38B0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Modulus"] = HopperToken.Modulus;

0x38B2  0x20 0x24       PUSHGLOBALB 0x24
0x38B4  0x37 0xB4 0x03  PUSHIW 0x03B4
0x38B7  0x1A 0x07       PUSHIB 0x07
0x38B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38BB  0x1A 0x29       PUSHIB 0x29
0x38BD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Increment"] = HopperToken.Increment;

0x38BF  0x20 0x24       PUSHGLOBALB 0x24
0x38C1  0x37 0xBB 0x03  PUSHIW 0x03BB
0x38C4  0x1A 0x09       PUSHIB 0x09
0x38C6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38C8  0x1A 0x2A       PUSHIB 0x2A
0x38CA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Decrement"] = HopperToken.Decrement;

0x38CC  0x20 0x24       PUSHGLOBALB 0x24
0x38CE  0x37 0xC4 0x03  PUSHIW 0x03C4
0x38D1  0x1A 0x09       PUSHIB 0x09
0x38D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38D5  0x1A 0x2B       PUSHIB 0x2B
0x38D7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["NE"] = HopperToken.NE;             token.hs:153

0x38D9  0x20 0x24       PUSHGLOBALB 0x24
0x38DB  0x37 0x4E 0x45  PUSHIW 0x454E
0x38DE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38E0  0x1A 0x1B       PUSHIB 0x1B
0x38E2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["EQ"] = HopperToken.EQ;             token.hs:154

0x38E4  0x20 0x24       PUSHGLOBALB 0x24
0x38E6  0x37 0x45 0x51  PUSHIW 0x5145
0x38E9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38EB  0x1A 0x18       PUSHIB 0x18
0x38ED  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GT"] = HopperToken.GT;             token.hs:155

0x38EF  0x20 0x24       PUSHGLOBALB 0x24
0x38F1  0x37 0x47 0x54  PUSHIW 0x5447
0x38F4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38F6  0x1A 0x17       PUSHIB 0x17
0x38F8  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LT"] = HopperToken.LT;             token.hs:156

0x38FA  0x20 0x24       PUSHGLOBALB 0x24
0x38FC  0x37 0x4C 0x54  PUSHIW 0x544C
0x38FF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3901  0x1A 0x16       PUSHIB 0x16
0x3903  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LE"] = HopperToken.LE;             token.hs:157

0x3905  0x20 0x24       PUSHGLOBALB 0x24
0x3907  0x37 0x4C 0x45  PUSHIW 0x454C
0x390A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x390C  0x1A 0x19       PUSHIB 0x19
0x390E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GE"] = HopperToken.GE;             token.hs:158

0x3910  0x20 0x24       PUSHGLOBALB 0x24
0x3912  0x37 0x47 0x45  PUSHIW 0x4547
0x3915  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3917  0x1A 0x1A       PUSHIB 0x1A
0x3919  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftLeft"] = HopperToken.ShiftLeft;

0x391B  0x20 0x24       PUSHGLOBALB 0x24
0x391D  0x37 0xCD 0x03  PUSHIW 0x03CD
0x3920  0x1A 0x09       PUSHIB 0x09
0x3922  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3924  0x1A 0x1C       PUSHIB 0x1C
0x3926  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftRight"] = HopperToken.ShiftRight;

0x3928  0x20 0x24       PUSHGLOBALB 0x24
0x392A  0x37 0xD6 0x03  PUSHIW 0x03D6
0x392D  0x1A 0x0A       PUSHIB 0x0A
0x392F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3931  0x1A 0x1D       PUSHIB 0x1D
0x3933  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanNot"] = HopperToken.BooleanNot;

0x3935  0x20 0x24       PUSHGLOBALB 0x24
0x3937  0x37 0xE0 0x03  PUSHIW 0x03E0
0x393A  0x1A 0x0A       PUSHIB 0x0A
0x393C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x393E  0x1A 0x20       PUSHIB 0x20
0x3940  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanOr"] = HopperToken.BooleanOr;

0x3942  0x20 0x24       PUSHGLOBALB 0x24
0x3944  0x37 0xEA 0x03  PUSHIW 0x03EA
0x3947  0x1A 0x09       PUSHIB 0x09
0x3949  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x394B  0x1A 0x1F       PUSHIB 0x1F
0x394D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanAnd"] = HopperToken.BooleanAnd;

0x394F  0x20 0x24       PUSHGLOBALB 0x24
0x3951  0x37 0xF3 0x03  PUSHIW 0x03F3
0x3954  0x1A 0x0A       PUSHIB 0x0A
0x3956  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3958  0x1A 0x1E       PUSHIB 0x1E
0x395A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0x395C  0x20 0x24       PUSHGLOBALB 0x24
0x395E  0x37 0x5A 0x03  PUSHIW 0x035A
0x3961  0x1A 0x06       PUSHIB 0x06
0x3963  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3965  0x1A 0x21       PUSHIB 0x21
0x3967  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0x3969  0x20 0x24       PUSHGLOBALB 0x24
0x396B  0x37 0x60 0x03  PUSHIW 0x0360
0x396E  0x1A 0x05       PUSHIB 0x05
0x3970  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3972  0x1A 0x22       PUSHIB 0x22
0x3974  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitNot"] = HopperToken.BitNot;

0x3976  0x20 0x24       PUSHGLOBALB 0x24
0x3978  0x37 0xFD 0x03  PUSHIW 0x03FD
0x397B  0x1A 0x06       PUSHIB 0x06
0x397D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x397F  0x1A 0x23       PUSHIB 0x23
0x3981  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitXor"] = HopperToken.BitXor;

0x3983  0x20 0x24       PUSHGLOBALB 0x24
0x3985  0x37 0x03 0x04  PUSHIW 0x0403
0x3988  0x1A 0x06       PUSHIB 0x06
0x398A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x398C  0x1A 0x24       PUSHIB 0x24
0x398E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // foreach (var kv in hopperTokenTypes)                 token.hs:170

0x3990  0x20 0x24       PUSHGLOBALB 0x24
0x3992  0x1A 0x0F       PUSHIB 0x0F
0x3994  0x1A 0x0F       PUSHIB 0x0F
0x3996  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x3998  0x44            PUSHI0
0x3999  0x4E            PUSHLOCALB00
0x399A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x399C  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x399E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x39A0  0x4D            POPLOCALB02
0x39A1  0x2E 0x0E       JZB 0x39AF (+14)

                        // hopperTokenNames[kv.value] = kv.key;                 token.hs:172

0x39A3  0x20 0x26       PUSHGLOBALB 0x26
0x39A5  0x4F            PUSHLOCALB02
0x39A6  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x39A8  0x4F            PUSHLOCALB02
0x39A9  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x39AB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:173

0x39AD  0x30 0xEC       JB 0x3999 (-20)
0x39AF  0x28 0x06       DECSP 0x06

                        // reservedIdentifiers["line"] = true;                  token.hs:175

0x39B1  0x20 0x1A       PUSHGLOBALB 0x1A
0x39B3  0x37 0x5F 0x01  PUSHIW 0x015F
0x39B6  0x1A 0x04       PUSHIB 0x04
0x39B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39BA  0x45            PUSHI1
0x39BB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedIdentifiers["source"] = true;                token.hs:176

0x39BD  0x20 0x1A       PUSHGLOBALB 0x1A
0x39BF  0x37 0x8D 0x01  PUSHIW 0x018D
0x39C2  0x1A 0x06       PUSHIB 0x06
0x39C4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39C6  0x45            PUSHI1
0x39C7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["port"] = true;            token.hs:178

0x39C9  0x20 0x1C       PUSHGLOBALB 0x1C
0x39CB  0x37 0x09 0x04  PUSHIW 0x0409
0x39CE  0x1A 0x04       PUSHIB 0x04
0x39D0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39D2  0x45            PUSHI1
0x39D3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memory"] = true;

0x39D5  0x20 0x1C       PUSHGLOBALB 0x1C
0x39D7  0x37 0x0D 0x04  PUSHIW 0x040D
0x39DA  0x1A 0x06       PUSHIB 0x06
0x39DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39DE  0x45            PUSHI1
0x39DF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memoryword"] = true;

0x39E1  0x20 0x1C       PUSHGLOBALB 0x1C
0x39E3  0x37 0x13 0x04  PUSHIW 0x0413
0x39E6  0x1A 0x0A       PUSHIB 0x0A
0x39E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39EA  0x45            PUSHI1
0x39EB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["sp"] = true;              token.hs:181

0x39ED  0x20 0x1C       PUSHGLOBALB 0x1C
0x39EF  0x37 0x73 0x70  PUSHIW 0x7073
0x39F2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x39F4  0x45            PUSHI1
0x39F5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["pc"] = true;              token.hs:182

0x39F7  0x20 0x1C       PUSHGLOBALB 0x1C
0x39F9  0x37 0x70 0x63  PUSHIW 0x6370
0x39FC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x39FE  0x45            PUSHI1
0x39FF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["iy"] = true;              token.hs:183

0x3A01  0x20 0x1C       PUSHGLOBALB 0x1C
0x3A03  0x37 0x69 0x79  PUSHIW 0x7969
0x3A06  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3A08  0x45            PUSHI1
0x3A09  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["array"] = true;                        token.hs:186

0x3A0B  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A0D  0x37 0x1D 0x04  PUSHIW 0x041D
0x3A10  0x1A 0x05       PUSHIB 0x05
0x3A12  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A14  0x45            PUSHI1
0x3A15  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["bool"] = true;                         token.hs:187

0x3A17  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A19  0x37 0x22 0x04  PUSHIW 0x0422
0x3A1C  0x1A 0x04       PUSHIB 0x04
0x3A1E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A20  0x45            PUSHI1
0x3A21  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["byte"] = true;                         token.hs:188

0x3A23  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A25  0x1A 0x2C       PUSHIB 0x2C
0x3A27  0x1A 0x04       PUSHIB 0x04
0x3A29  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A2B  0x45            PUSHI1
0x3A2C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["char"] = true;                         token.hs:189

0x3A2E  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A30  0x37 0x26 0x04  PUSHIW 0x0426
0x3A33  0x1A 0x04       PUSHIB 0x04
0x3A35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A37  0x45            PUSHI1
0x3A38  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["delegate"] = true;                     token.hs:190

0x3A3A  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A3C  0x37 0x2A 0x04  PUSHIW 0x042A
0x3A3F  0x1A 0x08       PUSHIB 0x08
0x3A41  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A43  0x45            PUSHI1
0x3A44  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["dictionary"] = true;                   token.hs:191

0x3A46  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A48  0x37 0x32 0x04  PUSHIW 0x0432
0x3A4B  0x1A 0x0A       PUSHIB 0x0A
0x3A4D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A4F  0x45            PUSHI1
0x3A50  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["directory"] = true;                    token.hs:192

0x3A52  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A54  0x37 0x3C 0x04  PUSHIW 0x043C
0x3A57  0x1A 0x09       PUSHIB 0x09
0x3A59  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A5B  0x45            PUSHI1
0x3A5C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["enum"] = true;                         token.hs:193

0x3A5E  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A60  0x37 0x45 0x04  PUSHIW 0x0445
0x3A63  0x1A 0x04       PUSHIB 0x04
0x3A65  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A67  0x45            PUSHI1
0x3A68  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["file"] = true;                         token.hs:194

0x3A6A  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A6C  0x1A 0x66       PUSHIB 0x66
0x3A6E  0x1A 0x04       PUSHIB 0x04
0x3A70  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A72  0x45            PUSHI1
0x3A73  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["flags"] = true;                        token.hs:195

0x3A75  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A77  0x37 0x49 0x04  PUSHIW 0x0449
0x3A7A  0x1A 0x05       PUSHIB 0x05
0x3A7C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A7E  0x45            PUSHI1
0x3A7F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["float"] = true;                        token.hs:196

0x3A81  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A83  0x37 0x4E 0x04  PUSHIW 0x044E
0x3A86  0x1A 0x05       PUSHIB 0x05
0x3A88  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A8A  0x45            PUSHI1
0x3A8B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["int"] = true;                          token.hs:197

0x3A8D  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A8F  0x37 0x53 0x04  PUSHIW 0x0453
0x3A92  0x1A 0x03       PUSHIB 0x03
0x3A94  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A96  0x45            PUSHI1
0x3A97  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["uint"] = true;                         token.hs:198

0x3A99  0x20 0x1E       PUSHGLOBALB 0x1E
0x3A9B  0x37 0x56 0x04  PUSHIW 0x0456
0x3A9E  0x1A 0x04       PUSHIB 0x04
0x3AA0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AA2  0x45            PUSHI1
0x3AA3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["list"] = true;                         token.hs:199

0x3AA5  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AA7  0x37 0x5A 0x04  PUSHIW 0x045A
0x3AAA  0x1A 0x04       PUSHIB 0x04
0x3AAC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AAE  0x45            PUSHI1
0x3AAF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["long"] = true;                         token.hs:200

0x3AB1  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AB3  0x37 0x5E 0x04  PUSHIW 0x045E
0x3AB6  0x1A 0x04       PUSHIB 0x04
0x3AB8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3ABA  0x45            PUSHI1
0x3ABB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["pair"] = true;                         token.hs:201

0x3ABD  0x20 0x1E       PUSHGLOBALB 0x1E
0x3ABF  0x37 0x62 0x04  PUSHIW 0x0462
0x3AC2  0x1A 0x04       PUSHIB 0x04
0x3AC4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AC6  0x45            PUSHI1
0x3AC7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["string"] = true;                       token.hs:202

0x3AC9  0x20 0x1E       PUSHGLOBALB 0x1E
0x3ACB  0x37 0xBF 0x02  PUSHIW 0x02BF
0x3ACE  0x1A 0x06       PUSHIB 0x06
0x3AD0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AD2  0x45            PUSHI1
0x3AD3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["type"] = true;                         token.hs:203

0x3AD5  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AD7  0x37 0x44 0x01  PUSHIW 0x0144
0x3ADA  0x1A 0x04       PUSHIB 0x04
0x3ADC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3ADE  0x45            PUSHI1
0x3ADF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["variant"] = true;                      token.hs:204

0x3AE1  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AE3  0x37 0x66 0x04  PUSHIW 0x0466
0x3AE6  0x1A 0x07       PUSHIB 0x07
0x3AE8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AEA  0x45            PUSHI1
0x3AEB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["const"] = true;                        token.hs:206

0x3AED  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AEF  0x37 0x48 0x01  PUSHIW 0x0148
0x3AF2  0x1A 0x05       PUSHIB 0x05
0x3AF4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3AF6  0x45            PUSHI1
0x3AF7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["false"] = true;                        token.hs:207

0x3AF9  0x20 0x1E       PUSHGLOBALB 0x1E
0x3AFB  0x37 0xD5 0x02  PUSHIW 0x02D5
0x3AFE  0x1A 0x05       PUSHIB 0x05
0x3B00  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B02  0x45            PUSHI1
0x3B03  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["ref"] = true;                          token.hs:208

0x3B05  0x20 0x1E       PUSHGLOBALB 0x1E
0x3B07  0x37 0x56 0x01  PUSHIW 0x0156
0x3B0A  0x1A 0x03       PUSHIB 0x03
0x3B0C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B0E  0x45            PUSHI1
0x3B0F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["true"] = true;                         token.hs:209

0x3B11  0x20 0x1E       PUSHGLOBALB 0x1E
0x3B13  0x37 0xD1 0x02  PUSHIW 0x02D1
0x3B16  0x1A 0x04       PUSHIB 0x04
0x3B18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B1A  0x45            PUSHI1
0x3B1B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["var"] = true;                          token.hs:210

0x3B1D  0x20 0x1E       PUSHGLOBALB 0x1E
0x3B1F  0x37 0x66 0x04  PUSHIW 0x0466
0x3B22  0x1A 0x03       PUSHIB 0x03
0x3B24  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B26  0x45            PUSHI1
0x3B27  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#if"] = true;                     token.hs:212

0x3B29  0x20 0x22       PUSHGLOBALB 0x22
0x3B2B  0x37 0x6D 0x04  PUSHIW 0x046D
0x3B2E  0x1A 0x03       PUSHIB 0x03
0x3B30  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B32  0x45            PUSHI1
0x3B33  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifdef"] = true;                  token.hs:213

0x3B35  0x20 0x22       PUSHGLOBALB 0x22
0x3B37  0x37 0x70 0x04  PUSHIW 0x0470
0x3B3A  0x1A 0x06       PUSHIB 0x06
0x3B3C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B3E  0x45            PUSHI1
0x3B3F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifndef"] = true;                 token.hs:214

0x3B41  0x20 0x22       PUSHGLOBALB 0x22
0x3B43  0x37 0x76 0x04  PUSHIW 0x0476
0x3B46  0x1A 0x07       PUSHIB 0x07
0x3B48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B4A  0x45            PUSHI1
0x3B4B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#else"] = true;                   token.hs:215

0x3B4D  0x20 0x22       PUSHGLOBALB 0x22
0x3B4F  0x37 0x7D 0x04  PUSHIW 0x047D
0x3B52  0x1A 0x05       PUSHIB 0x05
0x3B54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B56  0x45            PUSHI1
0x3B57  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#endif"] = true;                  token.hs:216

0x3B59  0x20 0x22       PUSHGLOBALB 0x22
0x3B5B  0x37 0x82 0x04  PUSHIW 0x0482
0x3B5E  0x1A 0x06       PUSHIB 0x06
0x3B60  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B62  0x45            PUSHI1
0x3B63  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#define"] = true;                 token.hs:217

0x3B65  0x20 0x22       PUSHGLOBALB 0x22
0x3B67  0x37 0x88 0x04  PUSHIW 0x0488
0x3B6A  0x1A 0x07       PUSHIB 0x07
0x3B6C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B6E  0x45            PUSHI1
0x3B6F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["break"] = true;                   token.hs:219

0x3B71  0x20 0x20       PUSHGLOBALB 0x20
0x3B73  0x37 0x8F 0x04  PUSHIW 0x048F
0x3B76  0x1A 0x05       PUSHIB 0x05
0x3B78  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B7A  0x45            PUSHI1
0x3B7B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["case"] = true;                    token.hs:220

0x3B7D  0x20 0x20       PUSHGLOBALB 0x20
0x3B7F  0x37 0x94 0x04  PUSHIW 0x0494
0x3B82  0x1A 0x04       PUSHIB 0x04
0x3B84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B86  0x45            PUSHI1
0x3B87  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["continue"] = true;                token.hs:221

0x3B89  0x20 0x20       PUSHGLOBALB 0x20
0x3B8B  0x37 0x98 0x04  PUSHIW 0x0498
0x3B8E  0x1A 0x08       PUSHIB 0x08
0x3B90  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B92  0x45            PUSHI1
0x3B93  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["default"] = true;                 token.hs:222

0x3B95  0x20 0x20       PUSHGLOBALB 0x20
0x3B97  0x37 0xA0 0x04  PUSHIW 0x04A0
0x3B9A  0x1A 0x07       PUSHIB 0x07
0x3B9C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B9E  0x45            PUSHI1
0x3B9F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["embed"] = true;                   token.hs:223

0x3BA1  0x20 0x20       PUSHGLOBALB 0x20
0x3BA3  0x37 0xA7 0x04  PUSHIW 0x04A7
0x3BA6  0x1A 0x05       PUSHIB 0x05
0x3BA8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BAA  0x45            PUSHI1
0x3BAB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["else"] = true;                    token.hs:224

0x3BAD  0x20 0x20       PUSHGLOBALB 0x20
0x3BAF  0x37 0x7E 0x04  PUSHIW 0x047E
0x3BB2  0x1A 0x04       PUSHIB 0x04
0x3BB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BB6  0x45            PUSHI1
0x3BB7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["for"] = true;                     token.hs:225

0x3BB9  0x20 0x20       PUSHGLOBALB 0x20
0x3BBB  0x1A 0x48       PUSHIB 0x48
0x3BBD  0x1A 0x03       PUSHIB 0x03
0x3BBF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BC1  0x45            PUSHI1
0x3BC2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["foreach"] = true;                 token.hs:226

0x3BC4  0x20 0x20       PUSHGLOBALB 0x20
0x3BC6  0x37 0xAC 0x04  PUSHIW 0x04AC
0x3BC9  0x1A 0x07       PUSHIB 0x07
0x3BCB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BCD  0x45            PUSHI1
0x3BCE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["get"] = true;                     token.hs:227

0x3BD0  0x20 0x20       PUSHGLOBALB 0x20
0x3BD2  0x37 0xB3 0x04  PUSHIW 0x04B3
0x3BD5  0x1A 0x03       PUSHIB 0x03
0x3BD7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BD9  0x45            PUSHI1
0x3BDA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["if"] = true;                      token.hs:228

0x3BDC  0x20 0x20       PUSHGLOBALB 0x20
0x3BDE  0x37 0x69 0x66  PUSHIW 0x6669
0x3BE1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3BE3  0x45            PUSHI1
0x3BE4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["in"] = true;                      token.hs:229

0x3BE6  0x20 0x20       PUSHGLOBALB 0x20
0x3BE8  0x37 0x69 0x6E  PUSHIW 0x6E69
0x3BEB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3BED  0x45            PUSHI1
0x3BEE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["loop"] = true;                    token.hs:230

0x3BF0  0x20 0x20       PUSHGLOBALB 0x20
0x3BF2  0x37 0xB6 0x04  PUSHIW 0x04B6
0x3BF5  0x1A 0x04       PUSHIB 0x04
0x3BF7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3BF9  0x45            PUSHI1
0x3BFA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["program"] = true;                 token.hs:231

0x3BFC  0x20 0x20       PUSHGLOBALB 0x20
0x3BFE  0x37 0xBA 0x04  PUSHIW 0x04BA
0x3C01  0x1A 0x07       PUSHIB 0x07
0x3C03  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C05  0x45            PUSHI1
0x3C06  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["return"] = true;                  token.hs:232

0x3C08  0x20 0x20       PUSHGLOBALB 0x20
0x3C0A  0x37 0xC1 0x04  PUSHIW 0x04C1
0x3C0D  0x1A 0x06       PUSHIB 0x06
0x3C0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C11  0x45            PUSHI1
0x3C12  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["set"] = true;                     token.hs:233

0x3C14  0x20 0x20       PUSHGLOBALB 0x20
0x3C16  0x37 0x01 0x01  PUSHIW 0x0101
0x3C19  0x1A 0x03       PUSHIB 0x03
0x3C1B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C1D  0x45            PUSHI1
0x3C1E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["switch"] = true;                  token.hs:234

0x3C20  0x20 0x20       PUSHGLOBALB 0x20
0x3C22  0x37 0xC7 0x04  PUSHIW 0x04C7
0x3C25  0x1A 0x06       PUSHIB 0x06
0x3C27  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C29  0x45            PUSHI1
0x3C2A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["system"] = true;                  token.hs:235

0x3C2C  0x20 0x20       PUSHGLOBALB 0x20
0x3C2E  0x37 0xCD 0x04  PUSHIW 0x04CD
0x3C31  0x1A 0x06       PUSHIB 0x06
0x3C33  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C35  0x45            PUSHI1
0x3C36  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["typeof"] = true;                  token.hs:236

0x3C38  0x20 0x20       PUSHGLOBALB 0x20
0x3C3A  0x37 0xD3 0x04  PUSHIW 0x04D3
0x3C3D  0x1A 0x06       PUSHIB 0x06
0x3C3F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C41  0x45            PUSHI1
0x3C42  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["unit"] = true;                    token.hs:237

0x3C44  0x20 0x20       PUSHGLOBALB 0x20
0x3C46  0x37 0xD9 0x04  PUSHIW 0x04D9
0x3C49  0x1A 0x04       PUSHIB 0x04
0x3C4B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C4D  0x45            PUSHI1
0x3C4E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["uses"] = true;                    token.hs:238

0x3C50  0x20 0x20       PUSHGLOBALB 0x20
0x3C52  0x37 0xDD 0x04  PUSHIW 0x04DD
0x3C55  0x1A 0x04       PUSHIB 0x04
0x3C57  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C59  0x45            PUSHI1
0x3C5A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["while"] = true;                   token.hs:239

0x3C5C  0x20 0x20       PUSHGLOBALB 0x20
0x3C5E  0x37 0xE1 0x04  PUSHIW 0x04E1
0x3C61  0x1A 0x05       PUSHIB 0x05
0x3C63  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C65  0x45            PUSHI1
0x3C66  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:240

0x3C68  0x4A            RET0


// /source/compiler/tokens/token.hs:87
// ####  Token.GetType(..)  ####                                                0x006E

0x3C69  0x49            ENTER

                        // string name = token["type"];                         token.hs:89

0x3C6A  0x24 0x02       SYSCALL0 0x02  // String.New
0x3C6C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3C6E  0x37 0x44 0x01  PUSHIW 0x0144
0x3C71  0x1A 0x04       PUSHIB 0x04
0x3C73  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C75  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3C77  0x5D            POPCOPYLOCALB00

                        // HopperToken tokenType = HopperToken.Undefined;

0x3C78  0x44            PUSHI0
0x3C79  0x44            PUSHI0
0x3C7A  0x4D            POPLOCALB02

                        // if (hopperTokenTypes.Contains(name))                 token.hs:91

0x3C7B  0x20 0x24       PUSHGLOBALB 0x24
0x3C7D  0x4E            PUSHLOCALB00
0x3C7E  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x3C80  0x2E 0x0A       JZB 0x3C8A (+10)

                        // tokenType = hopperTokenTypes[name];                  token.hs:93

0x3C82  0x20 0x24       PUSHGLOBALB 0x24
0x3C84  0x4E            PUSHLOCALB00
0x3C85  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3C87  0x4D            POPLOCALB02

                        // }                                                    token.hs:94

0x3C88  0x30 0x0B       JB 0x3C93 (+11)

                        // PrintLn("TODO : token not implemented in Token.GetType");

0x3C8A  0x37 0xE6 0x04  PUSHIW 0x04E6
0x3C8D  0x1A 0x2D       PUSHIB 0x2D
0x3C8F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C91  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // return tokenType;                                    token.hs:99

0x3C93  0x4F            PUSHLOCALB02
0x3C94  0x2B 0x06       RETRETB 0x06


// /source/system/int.hs:4
// ####  Int.ToString(..)  ####                                                 0x00C1


                        // int digit;                                           int.hs:5

0x3C96  0x5F 0x03       ENTERB 0x03

                        // string result;                                       int.hs:8

0x3C98  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (this < 0)                                        int.hs:9

0x3C9A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3C9C  0x44            PUSHI0
0x3C9D  0x17            LTI
0x3C9E  0x2E 0x0D       JZB 0x3CAB (+13)

                        // negative = true;                                     int.hs:11

0x3CA0  0x45            PUSHI1
0x3CA1  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // this = 0 - this;                                     int.hs:12

0x3CA3  0x44            PUSHI0
0x3CA4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CA6  0x12            SUBI
0x3CA7  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    int.hs:13

0x3CA9  0x30 0x0C       JB 0x3CB5 (+12)

                        // else if (this == 0)                                  int.hs:14

0x3CAB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CAD  0x2F 0x08       JNZB 0x3CB5 (+8)

                        // String.Build(ref result, '0');                       int.hs:16

0x3CAF  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3CB1  0x1A 0x30       PUSHIB 0x30
0x3CB3  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // while (this != 0)                                    int.hs:18

0x3CB5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CB7  0x2E 0x1C       JZB 0x3CD3 (+28)

                        // digit = this % 10;                                   int.hs:20

0x3CB9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CBB  0x1A 0x0A       PUSHIB 0x0A
0x3CBD  0x15            MODI
0x3CBE  0x4C            POPLOCALB00

                        // c = Char.ToDigit(byte(digit));                       int.hs:21

0x3CBF  0x4E            PUSHLOCALB00
0x3CC0  0x51 0x03       CAST 0x03
0x3CC2  0x2C 0xB6       CALLB 0xB6     // Char.ToDigit
0x3CC4  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    int.hs:22

0x3CC5  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3CC7  0x4F            PUSHLOCALB02
0x3CC8  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 10;                                    int.hs:23

0x3CCA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CCC  0x1A 0x0A       PUSHIB 0x0A
0x3CCE  0x13            DIVI
0x3CCF  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    int.hs:24

0x3CD1  0x30 0xE4       JB 0x3CB5 (-28)

                        // if (negative)                                        int.hs:25

0x3CD3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3CD5  0x2E 0x08       JZB 0x3CDD (+8)

                        // String.BuildFront(ref result, '-');                  int.hs:27

0x3CD7  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3CD9  0x1A 0x2D       PUSHIB 0x2D
0x3CDB  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // return result;                                       int.hs:29

0x3CDD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3CDF  0x2B 0x0A       RETRETB 0x0A


// /source/system/byte.hs:4
// ####  Byte.ToString(..)  ####                                                0x00BF


                        // int value;                                           byte.hs:5

0x3CE1  0x5F 0x01       ENTERB 0x01

                        // value = int(this);                                   byte.hs:6

0x3CE3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CE5  0x4C            POPLOCALB00

                        // return value.ToString();                             byte.hs:7

0x3CE6  0x4E            PUSHLOCALB00
0x3CE7  0x2C 0xC1       CALLB 0xC1     // Int.ToString
0x3CE9  0x2B 0x04       RETRETB 0x04


// /source/system/byte.hs:10
// ####  Byte.ToHexString(..)  ####                                             0x00C0


                        // int digit;                                           byte.hs:11

0x3CEB  0x5F 0x03       ENTERB 0x03

                        // string result;                                       byte.hs:14

0x3CED  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         byte.hs:15

0x3CEF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CF1  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3CF3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3CF5  0x44            PUSHI0
0x3CF6  0x16            GTI
0x3CF7  0x2E 0x1E       JZB 0x3D15 (+30)

                        // digit = this % 16;                                   byte.hs:17

0x3CF9  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3CFB  0x1A 0x10       PUSHIB 0x10
0x3CFD  0x04            MOD
0x3CFE  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         byte.hs:18

0x3CFF  0x4E            PUSHLOCALB00
0x3D00  0x51 0x03       CAST 0x03
0x3D02  0x2C 0xB9       CALLB 0xB9     // Char.ToHex
0x3D04  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    byte.hs:19

0x3D05  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3D07  0x4F            PUSHLOCALB02
0x3D08  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    byte.hs:20

0x3D0A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3D0C  0x1A 0x10       PUSHIB 0x10
0x3D0E  0x02            DIV
0x3D0F  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    byte.hs:21

0x3D11  0x23 0x04       DECLOCALB 0x04 (BP+4)
0x3D13  0x30 0xE0       JB 0x3CF3 (-32)

                        // return result;                                       byte.hs:22

0x3D15  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3D17  0x2B 0x0C       RETRETB 0x0C


// /source/system/color.hs:34
// ####  Color.MatrixGreen_Get(..)  ####                                        0x013C

0x3D19  0x49            ENTER

                        // uint MatrixGreen         { get { return 0x7F7; } }

0x3D1A  0x37 0xF7 0x07  PUSHIW 0x07F7
0x3D1D  0x4A            RET0


// /source/system/color.hs:4
// ####  Color.Black_Get(..)  ####                                              0x0124


                        // uint Black        { get { return 0x000; } }

0x3D1E  0x5F 0x01       ENTERB 0x01

                        // uint Black        { get { return 0x000; } }

0x3D20  0x4A            RET0


// /source/compiler/tokens/scanner.hs:505
// ####  Scanner.Next(..)  ####                                                 0x0091

0x3D21  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Undefined, "", currentLine, currentPos, currentSourcePath);

0x3D22  0x1A 0x0F       PUSHIB 0x0F
0x3D24  0x1A 0x0F       PUSHIB 0x0F
0x3D26  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x3D28  0x44            PUSHI0
0x3D29  0x24 0x02       SYSCALL0 0x02  // String.New
0x3D2B  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x3D2E  0x20 0x34       PUSHGLOBALB 0x34
0x3D30  0x2C 0x7E       CALLB 0x7E     // Token.New
0x3D32  0x5D            POPCOPYLOCALB00

                        // if (isPeekedToken)                                   scanner.hs:509

0x3D33  0x20 0x40       PUSHGLOBALB 0x40
0x3D35  0x2E 0x0B       JZB 0x3D40 (+11)

                        // token = peekedToken;                                 scanner.hs:511

0x3D37  0x20 0x3E       PUSHGLOBALB 0x3E
0x3D39  0x5D            POPCOPYLOCALB00

                        // isPeekedToken = false;                               scanner.hs:512

0x3D3A  0x44            PUSHI0
0x3D3B  0x1F 0x40       POPGLOBALB 0x40

                        // break;                                               scanner.hs:513

0x3D3D  0x33 0x46 0x02  JW 0x3F83 (+582)

                        // if (isAtEnd())                                       scanner.hs:515

0x3D40  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x3D42  0x2E 0x11       JZB 0x3D53 (+17)

                        // token = Token.New(HopperToken.EOF, "", currentLine, currentPos, currentSourcePath);

0x3D44  0x1A 0x2D       PUSHIB 0x2D
0x3D46  0x24 0x02       SYSCALL0 0x02  // String.New
0x3D48  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x3D4B  0x20 0x34       PUSHGLOBALB 0x34
0x3D4D  0x2C 0x7E       CALLB 0x7E     // Token.New
0x3D4F  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:518

0x3D50  0x33 0x33 0x02  JW 0x3F83 (+563)

                        // skipWhitespace();                                    scanner.hs:522

0x3D53  0x2C 0x8C       CALLB 0x8C     // Scanner.skipWhitespace

                        // char c = advance();                                  scanner.hs:523

0x3D55  0x44            PUSHI0
0x3D56  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x3D58  0x4D            POPLOCALB02

                        // if (c.IsDigit())                                     scanner.hs:524

0x3D59  0x4F            PUSHLOCALB02
0x3D5A  0x2C 0xB7       CALLB 0xB7     // Char.IsDigit
0x3D5C  0x2E 0x0B       JZB 0x3D67 (+11)

                        // token = scanNumber(c);                               scanner.hs:526

0x3D5E  0x4F            PUSHLOCALB02
0x3D5F  0x2C 0x8F       CALLB 0x8F     // Scanner.scanNumber
0x3D61  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:527

0x3D62  0x28 0x02       DECSP 0x02
0x3D64  0x33 0x1F 0x02  JW 0x3F83 (+543)

                        // if (c.IsLetter() || (c == '#'))                      scanner.hs:529

0x3D67  0x4F            PUSHLOCALB02
0x3D68  0x2C 0xBC       CALLB 0xBC     // Char.IsLetter
0x3D6A  0x27 0x00       DUP 0x00
0x3D6C  0x2F 0x07       JNZB 0x3D73 (+7)
0x3D6E  0x4F            PUSHLOCALB02
0x3D6F  0x1A 0x23       PUSHIB 0x23
0x3D71  0x05            EQ
0x3D72  0x0B            BOOLOR
0x3D73  0x2E 0x0B       JZB 0x3D7E (+11)

                        // token = scanIdentifier(c);                           scanner.hs:531

0x3D75  0x4F            PUSHLOCALB02
0x3D76  0x2C 0x90       CALLB 0x90     // Scanner.scanIdentifier
0x3D78  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:532

0x3D79  0x28 0x02       DECSP 0x02
0x3D7B  0x33 0x08 0x02  JW 0x3F83 (+520)

                        // HopperToken htoken = HopperToken.Undefined;

0x3D7E  0x44            PUSHI0
0x3D7F  0x44            PUSHI0
0x3D80  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // switch (c)                                           scanner.hs:535

0x3D82  0x4F            PUSHLOCALB02

                        // case '(': { htoken = HopperToken.LParen; }           scanner.hs:537

0x3D83  0x1A 0x28       PUSHIB 0x28
0x3D85  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3D87  0x05            EQ
0x3D88  0x2E 0x09       JZB 0x3D91 (+9)
0x3D8A  0x1A 0x10       PUSHIB 0x10
0x3D8C  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3D8E  0x33 0xE1 0x01  JW 0x3F6F (+481)

                        // case ')': { htoken = HopperToken.RParen; }           scanner.hs:538

0x3D91  0x1A 0x29       PUSHIB 0x29
0x3D93  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3D95  0x05            EQ
0x3D96  0x2E 0x09       JZB 0x3D9F (+9)
0x3D98  0x1A 0x11       PUSHIB 0x11
0x3D9A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3D9C  0x33 0xD3 0x01  JW 0x3F6F (+467)

                        // case '{': { htoken = HopperToken.LBrace; }           scanner.hs:539

0x3D9F  0x1A 0x7B       PUSHIB 0x7B
0x3DA1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DA3  0x05            EQ
0x3DA4  0x2E 0x09       JZB 0x3DAD (+9)
0x3DA6  0x1A 0x12       PUSHIB 0x12
0x3DA8  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DAA  0x33 0xC5 0x01  JW 0x3F6F (+453)

                        // case '}': { htoken = HopperToken.RBrace; }           scanner.hs:540

0x3DAD  0x1A 0x7D       PUSHIB 0x7D
0x3DAF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DB1  0x05            EQ
0x3DB2  0x2E 0x09       JZB 0x3DBB (+9)
0x3DB4  0x1A 0x13       PUSHIB 0x13
0x3DB6  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DB8  0x33 0xB7 0x01  JW 0x3F6F (+439)

                        // case '[': { htoken = HopperToken.LBracket; }

0x3DBB  0x1A 0x5B       PUSHIB 0x5B
0x3DBD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DBF  0x05            EQ
0x3DC0  0x2E 0x09       JZB 0x3DC9 (+9)
0x3DC2  0x1A 0x14       PUSHIB 0x14
0x3DC4  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DC6  0x33 0xA9 0x01  JW 0x3F6F (+425)

                        // case ']': { htoken = HopperToken.RBracket; }

0x3DC9  0x1A 0x5D       PUSHIB 0x5D
0x3DCB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DCD  0x05            EQ
0x3DCE  0x2E 0x09       JZB 0x3DD7 (+9)
0x3DD0  0x1A 0x15       PUSHIB 0x15
0x3DD2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DD4  0x33 0x9B 0x01  JW 0x3F6F (+411)

                        // case ';': { htoken = HopperToken.SemiColon; }

0x3DD7  0x1A 0x3B       PUSHIB 0x3B
0x3DD9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DDB  0x05            EQ
0x3DDC  0x2E 0x09       JZB 0x3DE5 (+9)
0x3DDE  0x1A 0x0C       PUSHIB 0x0C
0x3DE0  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DE2  0x33 0x8D 0x01  JW 0x3F6F (+397)

                        // case ':': { htoken = HopperToken.Colon; }            scanner.hs:544

0x3DE5  0x1A 0x3A       PUSHIB 0x3A
0x3DE7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DE9  0x05            EQ
0x3DEA  0x2E 0x09       JZB 0x3DF3 (+9)
0x3DEC  0x1A 0x0E       PUSHIB 0x0E
0x3DEE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DF0  0x33 0x7F 0x01  JW 0x3F6F (+383)

                        // case ',': { htoken = HopperToken.Comma; }            scanner.hs:545

0x3DF3  0x1A 0x2C       PUSHIB 0x2C
0x3DF5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3DF7  0x05            EQ
0x3DF8  0x2E 0x09       JZB 0x3E01 (+9)
0x3DFA  0x1A 0x0D       PUSHIB 0x0D
0x3DFC  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3DFE  0x33 0x71 0x01  JW 0x3F6F (+369)

                        // case '.': { htoken = HopperToken.Dot; }              scanner.hs:546

0x3E01  0x1A 0x2E       PUSHIB 0x2E
0x3E03  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E05  0x05            EQ
0x3E06  0x2E 0x09       JZB 0x3E0F (+9)
0x3E08  0x1A 0x04       PUSHIB 0x04
0x3E0A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E0C  0x33 0x63 0x01  JW 0x3F6F (+355)

                        // case '*': { htoken = HopperToken.Multiply; }

0x3E0F  0x1A 0x2A       PUSHIB 0x2A
0x3E11  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E13  0x05            EQ
0x3E14  0x2E 0x09       JZB 0x3E1D (+9)
0x3E16  0x1A 0x27       PUSHIB 0x27
0x3E18  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E1A  0x33 0x55 0x01  JW 0x3F6F (+341)

                        // case '/': { htoken = HopperToken.Divide; }           scanner.hs:548

0x3E1D  0x1A 0x2F       PUSHIB 0x2F
0x3E1F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E21  0x05            EQ
0x3E22  0x2E 0x09       JZB 0x3E2B (+9)
0x3E24  0x1A 0x28       PUSHIB 0x28
0x3E26  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E28  0x33 0x47 0x01  JW 0x3F6F (+327)

                        // case '%': { htoken = HopperToken.Modulus; }

0x3E2B  0x1A 0x25       PUSHIB 0x25
0x3E2D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E2F  0x05            EQ
0x3E30  0x2E 0x09       JZB 0x3E39 (+9)
0x3E32  0x1A 0x29       PUSHIB 0x29
0x3E34  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E36  0x33 0x39 0x01  JW 0x3F6F (+313)

                        // case '~': { htoken = HopperToken.BitNot; }           scanner.hs:550

0x3E39  0x1A 0x7E       PUSHIB 0x7E
0x3E3B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E3D  0x05            EQ
0x3E3E  0x2E 0x09       JZB 0x3E47 (+9)
0x3E40  0x1A 0x23       PUSHIB 0x23
0x3E42  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E44  0x33 0x2B 0x01  JW 0x3F6F (+299)

                        // case '-':                                            scanner.hs:552

0x3E47  0x1A 0x2D       PUSHIB 0x2D
0x3E49  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E4B  0x05            EQ
0x3E4C  0x2E 0x15       JZB 0x3E61 (+21)

                        // if (match('-'))                                      scanner.hs:554

0x3E4E  0x1A 0x2D       PUSHIB 0x2D
0x3E50  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3E52  0x2E 0x08       JZB 0x3E5A (+8)

                        // { htoken = HopperToken.Decrement; }                  scanner.hs:555

0x3E54  0x1A 0x2B       PUSHIB 0x2B
0x3E56  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E58  0x30 0x06       JB 0x3E5E (+6)

                        // { htoken = HopperToken.Subtract; }                   scanner.hs:557

0x3E5A  0x1A 0x26       PUSHIB 0x26
0x3E5C  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:558

0x3E5E  0x33 0x11 0x01  JW 0x3F6F (+273)

                        // case '+':                                            scanner.hs:559

0x3E61  0x1A 0x2B       PUSHIB 0x2B
0x3E63  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E65  0x05            EQ
0x3E66  0x2E 0x15       JZB 0x3E7B (+21)

                        // if (match('+'))                                      scanner.hs:561

0x3E68  0x1A 0x2B       PUSHIB 0x2B
0x3E6A  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3E6C  0x2E 0x08       JZB 0x3E74 (+8)

                        // { htoken = HopperToken.Increment; }                  scanner.hs:562

0x3E6E  0x1A 0x2A       PUSHIB 0x2A
0x3E70  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E72  0x30 0x06       JB 0x3E78 (+6)

                        // { htoken = HopperToken.Add; }                        scanner.hs:564

0x3E74  0x1A 0x25       PUSHIB 0x25
0x3E76  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:565

0x3E78  0x33 0xF7 0x00  JW 0x3F6F (+247)

                        // case '!':                                            scanner.hs:566

0x3E7B  0x1A 0x21       PUSHIB 0x21
0x3E7D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E7F  0x05            EQ
0x3E80  0x2E 0x15       JZB 0x3E95 (+21)

                        // if (match('='))                                      scanner.hs:568

0x3E82  0x1A 0x3D       PUSHIB 0x3D
0x3E84  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3E86  0x2E 0x08       JZB 0x3E8E (+8)

                        // { htoken = HopperToken.NE; }                         scanner.hs:569

0x3E88  0x1A 0x1B       PUSHIB 0x1B
0x3E8A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3E8C  0x30 0x06       JB 0x3E92 (+6)

                        // { htoken = HopperToken.BooleanNot; }                 scanner.hs:571

0x3E8E  0x1A 0x20       PUSHIB 0x20
0x3E90  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:572

0x3E92  0x33 0xDD 0x00  JW 0x3F6F (+221)

                        // case '=':                                            scanner.hs:573

0x3E95  0x1A 0x3D       PUSHIB 0x3D
0x3E97  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E99  0x05            EQ
0x3E9A  0x2E 0x15       JZB 0x3EAF (+21)

                        // if (match('='))                                      scanner.hs:575

0x3E9C  0x1A 0x3D       PUSHIB 0x3D
0x3E9E  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3EA0  0x2E 0x08       JZB 0x3EA8 (+8)

                        // { htoken = HopperToken.EQ; }                         scanner.hs:576

0x3EA2  0x1A 0x18       PUSHIB 0x18
0x3EA4  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3EA6  0x30 0x06       JB 0x3EAC (+6)

                        // { htoken = HopperToken.Assign; }                     scanner.hs:578

0x3EA8  0x1A 0x2C       PUSHIB 0x2C
0x3EAA  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:579

0x3EAC  0x33 0xC3 0x00  JW 0x3F6F (+195)

                        // case '<':                                            scanner.hs:580

0x3EAF  0x1A 0x3C       PUSHIB 0x3C
0x3EB1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3EB3  0x05            EQ
0x3EB4  0x2E 0x21       JZB 0x3ED5 (+33)

                        // if (match('='))                                      scanner.hs:582

0x3EB6  0x1A 0x3D       PUSHIB 0x3D
0x3EB8  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3EBA  0x2E 0x08       JZB 0x3EC2 (+8)

                        // { htoken = HopperToken.LE; }                         scanner.hs:583

0x3EBC  0x1A 0x19       PUSHIB 0x19
0x3EBE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3EC0  0x30 0x12       JB 0x3ED2 (+18)

                        // else if (match('<'))                                 scanner.hs:584

0x3EC2  0x1A 0x3C       PUSHIB 0x3C
0x3EC4  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3EC6  0x2E 0x08       JZB 0x3ECE (+8)

                        // { htoken = HopperToken.ShiftLeft; }                  scanner.hs:585

0x3EC8  0x1A 0x1C       PUSHIB 0x1C
0x3ECA  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3ECC  0x30 0x06       JB 0x3ED2 (+6)

                        // { htoken = HopperToken.LT; }                         scanner.hs:587

0x3ECE  0x1A 0x16       PUSHIB 0x16
0x3ED0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:588

0x3ED2  0x33 0x9D 0x00  JW 0x3F6F (+157)

                        // case '>':                                            scanner.hs:589

0x3ED5  0x1A 0x3E       PUSHIB 0x3E
0x3ED7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3ED9  0x05            EQ
0x3EDA  0x2E 0x21       JZB 0x3EFB (+33)

                        // if (match('='))                                      scanner.hs:591

0x3EDC  0x1A 0x3D       PUSHIB 0x3D
0x3EDE  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3EE0  0x2E 0x08       JZB 0x3EE8 (+8)

                        // { htoken = HopperToken.GE; }                         scanner.hs:592

0x3EE2  0x1A 0x1A       PUSHIB 0x1A
0x3EE4  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3EE6  0x30 0x12       JB 0x3EF8 (+18)

                        // else if (match('>'))                                 scanner.hs:593

0x3EE8  0x1A 0x3E       PUSHIB 0x3E
0x3EEA  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3EEC  0x2E 0x08       JZB 0x3EF4 (+8)

                        // { htoken = HopperToken.ShiftRight; }                 scanner.hs:594

0x3EEE  0x1A 0x1D       PUSHIB 0x1D
0x3EF0  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3EF2  0x30 0x7D       JB 0x3F6F (+125)

                        // { htoken = HopperToken.GT; }                         scanner.hs:596

0x3EF4  0x1A 0x17       PUSHIB 0x17
0x3EF6  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:597

0x3EF8  0x33 0x77 0x00  JW 0x3F6F (+119)

                        // case '|':                                            scanner.hs:598

0x3EFB  0x1A 0x7C       PUSHIB 0x7C
0x3EFD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3EFF  0x05            EQ
0x3F00  0x2E 0x14       JZB 0x3F14 (+20)

                        // if (match('|'))                                      scanner.hs:600

0x3F02  0x1A 0x7C       PUSHIB 0x7C
0x3F04  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3F06  0x2E 0x08       JZB 0x3F0E (+8)

                        // { htoken = HopperToken.BooleanOr; }                  scanner.hs:601

0x3F08  0x1A 0x1F       PUSHIB 0x1F
0x3F0A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3F0C  0x30 0x63       JB 0x3F6F (+99)

                        // { htoken = HopperToken.BitOr; }                      scanner.hs:603

0x3F0E  0x1A 0x22       PUSHIB 0x22
0x3F10  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:604

0x3F12  0x30 0x5D       JB 0x3F6F (+93)

                        // case '&':                                            scanner.hs:605

0x3F14  0x1A 0x26       PUSHIB 0x26
0x3F16  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3F18  0x05            EQ
0x3F19  0x2E 0x14       JZB 0x3F2D (+20)

                        // if (match('&'))                                      scanner.hs:607

0x3F1B  0x1A 0x26       PUSHIB 0x26
0x3F1D  0x2C 0x8B       CALLB 0x8B     // Scanner.match
0x3F1F  0x2E 0x08       JZB 0x3F27 (+8)

                        // { htoken = HopperToken.BooleanAnd; }                 scanner.hs:608

0x3F21  0x1A 0x1E       PUSHIB 0x1E
0x3F23  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3F25  0x30 0x4A       JB 0x3F6F (+74)

                        // { htoken = HopperToken.BitAnd; }                     scanner.hs:610

0x3F27  0x1A 0x21       PUSHIB 0x21
0x3F29  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:611

0x3F2B  0x30 0x44       JB 0x3F6F (+68)

                        // case '"':                                            scanner.hs:612

0x3F2D  0x1A 0x22       PUSHIB 0x22
0x3F2F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3F31  0x05            EQ
0x3F32  0x2E 0x07       JZB 0x3F39 (+7)

                        // token = scanString();                                scanner.hs:614

0x3F34  0x2C 0x8D       CALLB 0x8D     // Scanner.scanString
0x3F36  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:615

0x3F37  0x30 0x38       JB 0x3F6F (+56)

                        // case '\'':                                           scanner.hs:616

0x3F39  0x1A 0x27       PUSHIB 0x27
0x3F3B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3F3D  0x05            EQ
0x3F3E  0x2E 0x07       JZB 0x3F45 (+7)

                        // token = scanChar();                                  scanner.hs:618

0x3F40  0x2C 0x8E       CALLB 0x8E     // Scanner.scanChar
0x3F42  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:619

0x3F43  0x30 0x2C       JB 0x3F6F (+44)

                        // uint ui = uint(c);                                   scanner.hs:622

0x3F45  0x44            PUSHI0
0x3F46  0x4F            PUSHLOCALB02
0x3F47  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // token = errorToken("unexpected character: '" + c + "' (0x" + ui.ToHexString(2) + ")");

0x3F49  0x37 0x13 0x05  PUSHIW 0x0513
0x3F4C  0x1A 0x17       PUSHIB 0x17
0x3F4E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F50  0x4F            PUSHLOCALB02
0x3F51  0x25 0x03       SYSCALL1 0x03  // String.Append
0x3F53  0x37 0x2A 0x05  PUSHIW 0x052A
0x3F56  0x1A 0x05       PUSHIB 0x05
0x3F58  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F5A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F5C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3F5E  0x1A 0x02       PUSHIB 0x02
0x3F60  0x2C 0xC8       CALLB 0xC8     // UInt.ToHexString
0x3F62  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F64  0x1A 0x29       PUSHIB 0x29
0x3F66  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F68  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F6A  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x3F6C  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:624

0x3F6D  0x28 0x02       DECSP 0x02

                        // }                                                    scanner.hs:625

0x3F6F  0x28 0x02       DECSP 0x02

                        // if (htoken != HopperToken.Undefined)                 scanner.hs:626

0x3F71  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3F73  0x2E 0x0E       JZB 0x3F81 (+14)

                        // token = Token.New(htoken, "", currentLine, currentPos, currentSourcePath);

0x3F75  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3F77  0x24 0x02       SYSCALL0 0x02  // String.New
0x3F79  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x3F7C  0x20 0x34       PUSHGLOBALB 0x34
0x3F7E  0x2C 0x7E       CALLB 0x7E     // Token.New
0x3F80  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:630

0x3F81  0x28 0x04       DECSP 0x04

                        // if (dumpTokens)                                      scanner.hs:634

0x3F83  0x20 0x3C       PUSHGLOBALB 0x3C
0x3F85  0x2E 0x14       JZB 0x3F99 (+20)

                        // PrintLn("  " + Token.ToString(token), Color.Red, Color.Black);

0x3F87  0x37 0x20 0x20  PUSHIW 0x2020
0x3F8A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F8C  0x4E            PUSHLOCALB00
0x3F8D  0x2C 0x7F       CALLB 0x7F     // Token.ToString
0x3F8F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F91  0x34 0x33 0x01  CALLW 0x0133   // Color.Red_Get
0x3F94  0x34 0x24 0x01  CALLW 0x0124   // Color.Black_Get
0x3F97  0x2C 0x36       CALLB 0x36     // Screen.PrintLn

                        // return token;                                        scanner.hs:638

0x3F99  0x4E            PUSHLOCALB00
0x3F9A  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:127
// ####  Scanner.isAtEnd(..)  ####                                              0x0085

0x3F9C  0x49            ENTER

                        // return (currentPos == sourceLength);                 scanner.hs:129

0x3F9D  0x52 0x2A 0x2E  PUSHGLOBALBB 0x2E2A
0x3FA0  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x3FA2  0x4A            RET0


// /source/compiler/tokens/scanner.hs:231
// ####  Scanner.skipWhitespace(..)  ####                                       0x008C

0x3FA3  0x49            ENTER

                        // char c = peek();                                     scanner.hs:234

0x3FA4  0x44            PUSHI0
0x3FA5  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x3FA7  0x4C            POPLOCALB00

                        // if ((c == ' ') || (c == char(0x0D)) || (c == char(0x09)))

0x3FA8  0x4E            PUSHLOCALB00
0x3FA9  0x1A 0x20       PUSHIB 0x20
0x3FAB  0x05            EQ
0x3FAC  0x27 0x00       DUP 0x00
0x3FAE  0x2F 0x10       JNZB 0x3FBE (+16)
0x3FB0  0x4E            PUSHLOCALB00
0x3FB1  0x1A 0x0D       PUSHIB 0x0D
0x3FB3  0x05            EQ
0x3FB4  0x0B            BOOLOR
0x3FB5  0x27 0x00       DUP 0x00
0x3FB7  0x2F 0x07       JNZB 0x3FBE (+7)
0x3FB9  0x4E            PUSHLOCALB00
0x3FBA  0x1A 0x09       PUSHIB 0x09
0x3FBC  0x05            EQ
0x3FBD  0x0B            BOOLOR
0x3FBE  0x2E 0x08       JZB 0x3FC6 (+8)

                        // c = advance();                                       scanner.hs:237

0x3FC0  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x3FC2  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:238

0x3FC3  0x33 0x97 0x00  JW 0x405A (+151)

                        // else if (c == char(0x0A))                            scanner.hs:239

0x3FC6  0x4E            PUSHLOCALB00
0x3FC7  0x1A 0x0A       PUSHIB 0x0A
0x3FC9  0x05            EQ
0x3FCA  0x2E 0x0A       JZB 0x3FD4 (+10)

                        // currentLine++;                                       scanner.hs:241

0x3FCC  0x53 0x2C       INCGLOBALB 0x2C

                        // c = advance();                                       scanner.hs:242

0x3FCE  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x3FD0  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:243

0x3FD1  0x33 0x89 0x00  JW 0x405A (+137)

                        // else if (c == '/')                                   scanner.hs:244

0x3FD4  0x4E            PUSHLOCALB00
0x3FD5  0x1A 0x2F       PUSHIB 0x2F
0x3FD7  0x05            EQ
0x3FD8  0x31 0x7F 0x00  JZW 0x4057 (+127)

                        // char n = peekNext();                                 scanner.hs:246

0x3FDB  0x44            PUSHI0
0x3FDC  0x2C 0x8A       CALLB 0x8A     // Scanner.peekNext
0x3FDE  0x4D            POPLOCALB02

                        // if (n == '/')                                        scanner.hs:247

0x3FDF  0x4F            PUSHLOCALB02
0x3FE0  0x1A 0x2F       PUSHIB 0x2F
0x3FE2  0x05            EQ
0x3FE3  0x2E 0x1F       JZB 0x4002 (+31)

                        // c = peek();                                          scanner.hs:252

0x3FE5  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x3FE7  0x4C            POPLOCALB00

                        // if ((c == char(0)) || (c == char(0x0A)) || isAtEnd())

0x3FE8  0x4E            PUSHLOCALB00
0x3FE9  0x44            PUSHI0
0x3FEA  0x05            EQ
0x3FEB  0x27 0x00       DUP 0x00
0x3FED  0x2F 0x0E       JNZB 0x3FFB (+14)
0x3FEF  0x4E            PUSHLOCALB00
0x3FF0  0x1A 0x0A       PUSHIB 0x0A
0x3FF2  0x05            EQ
0x3FF3  0x0B            BOOLOR
0x3FF4  0x27 0x00       DUP 0x00
0x3FF6  0x2F 0x05       JNZB 0x3FFB (+5)
0x3FF8  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x3FFA  0x0B            BOOLOR
0x3FFB  0x2F 0x58       JNZB 0x4053 (+88)

                        // c = advance(); // gobble gobble                      scanner.hs:257

0x3FFD  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x3FFF  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:258

0x4000  0x30 0xE5       JB 0x3FE5 (-27)

                        // else if (n == '*')                                   scanner.hs:260

0x4002  0x4F            PUSHLOCALB02
0x4003  0x1A 0x2A       PUSHIB 0x2A
0x4005  0x05            EQ
0x4006  0x2E 0x4A       JZB 0x4050 (+74)

                        // c = advance();                                       scanner.hs:264

0x4008  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x400A  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:265

0x400B  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x400D  0x4C            POPLOCALB00

                        // c = peek();                                          scanner.hs:268

0x400E  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x4010  0x4C            POPLOCALB00

                        // if ((c == char(0)) || isAtEnd())                     scanner.hs:269

0x4011  0x4E            PUSHLOCALB00
0x4012  0x44            PUSHI0
0x4013  0x05            EQ
0x4014  0x27 0x00       DUP 0x00
0x4016  0x2F 0x05       JNZB 0x401B (+5)
0x4018  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x401A  0x0B            BOOLOR
0x401B  0x2F 0x38       JNZB 0x4053 (+56)

                        // n = peekNext();                                      scanner.hs:273

0x401D  0x2C 0x8A       CALLB 0x8A     // Scanner.peekNext
0x401F  0x4D            POPLOCALB02

                        // if ((n == char(0)) || isAtEnd())                     scanner.hs:274

0x4020  0x4F            PUSHLOCALB02
0x4021  0x44            PUSHI0
0x4022  0x05            EQ
0x4023  0x27 0x00       DUP 0x00
0x4025  0x2F 0x05       JNZB 0x402A (+5)
0x4027  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x4029  0x0B            BOOLOR
0x402A  0x2F 0x29       JNZB 0x4053 (+41)

                        // if ((c == '*') && (n == '/'))                        scanner.hs:278

0x402C  0x4E            PUSHLOCALB00
0x402D  0x1A 0x2A       PUSHIB 0x2A
0x402F  0x05            EQ
0x4030  0x27 0x00       DUP 0x00
0x4032  0x2E 0x07       JZB 0x4039 (+7)
0x4034  0x4F            PUSHLOCALB02
0x4035  0x1A 0x2F       PUSHIB 0x2F
0x4037  0x05            EQ
0x4038  0x0C            BOOLAND
0x4039  0x2E 0x0A       JZB 0x4043 (+10)

                        // c = advance();                                       scanner.hs:281

0x403B  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x403D  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:282

0x403E  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4040  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:283

0x4041  0x30 0x12       JB 0x4053 (+18)

                        // c = advance(); // gobble gobble                      scanner.hs:285

0x4043  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4045  0x4C            POPLOCALB00

                        // if (c == char(0x0A))                                 scanner.hs:286

0x4046  0x4E            PUSHLOCALB00
0x4047  0x1A 0x0A       PUSHIB 0x0A
0x4049  0x05            EQ
0x404A  0x2E 0xC4       JZB 0x400E (-60)

                        // currentLine++;                                       scanner.hs:288

0x404C  0x53 0x2C       INCGLOBALB 0x2C

                        // }                                                    scanner.hs:290

0x404E  0x30 0xC0       JB 0x400E (-64)

                        // break; // just a single '/'                          scanner.hs:294

0x4050  0x28 0x04       DECSP 0x04
0x4052  0x4A            RET0

                        // }                                                    scanner.hs:296

0x4053  0x28 0x02       DECSP 0x02
0x4055  0x30 0x05       JB 0x405A (+5)

                        // break;                                               scanner.hs:299

0x4057  0x28 0x02       DECSP 0x02
0x4059  0x4A            RET0

                        // }                                                    scanner.hs:301

0x405A  0x28 0x02       DECSP 0x02
0x405C  0x33 0x48 0xFF  JW 0x3FA4 (-184)


// /source/compiler/tokens/scanner.hs:199
// ####  Scanner.advance(..)  ####                                              0x0088


                        // char c = sourceGetFromPos(currentPos, true);

0x405F  0x5F 0x01       ENTERB 0x01

                        // char c = sourceGetFromPos(currentPos, true);

0x4061  0x20 0x2A       PUSHGLOBALB 0x2A
0x4063  0x45            PUSHI1
0x4064  0x2C 0x87       CALLB 0x87     // Scanner.sourceGetFromPos
0x4066  0x4C            POPLOCALB00

                        // currentPos = currentPos + 1;                         scanner.hs:201

0x4067  0x20 0x2A       PUSHGLOBALB 0x2A
0x4069  0x45            PUSHI1
0x406A  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x406C  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x406E  0x59 0x2A       POPCOPYGLOBALB 0x2A

                        // return c;                                            scanner.hs:202

0x4070  0x4E            PUSHLOCALB00
0x4071  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:355
// ####  Scanner.scanNumber(..)  ####                                           0x008F

0x4073  0x49            ENTER

                        // <string,string> token;                               scanner.hs:356

0x4074  0x1A 0x0F       PUSHIB 0x0F
0x4076  0x1A 0x0F       PUSHIB 0x0F
0x4078  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // string value = c.ToString();                         scanner.hs:357

0x407A  0x24 0x02       SYSCALL0 0x02  // String.New
0x407C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x407E  0x2C 0xBD       CALLB 0xBD     // Char.ToString
0x4080  0x5E            POPCOPYLOCALB02

                        // bool hexOk = false;                                  scanner.hs:358

0x4081  0x44            PUSHI0

                        // bool binaryOk = false;                               scanner.hs:359

0x4082  0x44            PUSHI0

                        // bool floatOk = false;                                scanner.hs:360

0x4083  0x44            PUSHI0

                        // HopperToken ttype = HopperToken.Integer;             scanner.hs:362

0x4084  0x44            PUSHI0
0x4085  0x1A 0x09       PUSHIB 0x09
0x4087  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // c = peek();                                          scanner.hs:367

0x4089  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x408B  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if ((c == 'x') && (value == "0"))                    scanner.hs:368

0x408D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x408F  0x1A 0x78       PUSHIB 0x78
0x4091  0x05            EQ
0x4092  0x27 0x00       DUP 0x00
0x4094  0x2E 0x0C       JZB 0x40A0 (+12)
0x4096  0x4F            PUSHLOCALB02
0x4097  0x1A 0x30       PUSHIB 0x30
0x4099  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x409B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x409D  0x44            PUSHI0
0x409E  0x05            EQ
0x409F  0x0C            BOOLAND
0x40A0  0x2E 0x0D       JZB 0x40AD (+13)

                        // hexOk = true;                                        scanner.hs:370

0x40A2  0x45            PUSHI1
0x40A3  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // value = value + advance();                           scanner.hs:371

0x40A5  0x4F            PUSHLOCALB02
0x40A6  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x40A8  0x25 0x03       SYSCALL1 0x03  // String.Append
0x40AA  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:372

0x40AB  0x30 0xDE       JB 0x4089 (-34)

                        // if ((c == 'b') && (value == "0"))                    scanner.hs:374

0x40AD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40AF  0x1A 0x62       PUSHIB 0x62
0x40B1  0x05            EQ
0x40B2  0x27 0x00       DUP 0x00
0x40B4  0x2E 0x0C       JZB 0x40C0 (+12)
0x40B6  0x4F            PUSHLOCALB02
0x40B7  0x1A 0x30       PUSHIB 0x30
0x40B9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x40BB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x40BD  0x44            PUSHI0
0x40BE  0x05            EQ
0x40BF  0x0C            BOOLAND
0x40C0  0x2E 0x0D       JZB 0x40CD (+13)

                        // binaryOk = true;                                     scanner.hs:376

0x40C2  0x45            PUSHI1
0x40C3  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // value = value + advance();                           scanner.hs:377

0x40C5  0x4F            PUSHLOCALB02
0x40C6  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x40C8  0x25 0x03       SYSCALL1 0x03  // String.Append
0x40CA  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:378

0x40CB  0x30 0xBE       JB 0x4089 (-66)

                        // if (hexOk && c.IsHexDigit())                         scanner.hs:380

0x40CD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x40CF  0x27 0x00       DUP 0x00
0x40D1  0x2E 0x07       JZB 0x40D8 (+7)
0x40D3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40D5  0x2C 0xBB       CALLB 0xBB     // Char.IsHexDigit
0x40D7  0x0C            BOOLAND
0x40D8  0x2F 0x3E       JNZB 0x4116 (+62)

                        // else if (binaryOk && ((c == '0') || (c == '1')))

0x40DA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x40DC  0x27 0x00       DUP 0x00
0x40DE  0x2E 0x12       JZB 0x40F0 (+18)
0x40E0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40E2  0x1A 0x30       PUSHIB 0x30
0x40E4  0x05            EQ
0x40E5  0x27 0x00       DUP 0x00
0x40E7  0x2F 0x08       JNZB 0x40EF (+8)
0x40E9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40EB  0x1A 0x31       PUSHIB 0x31
0x40ED  0x05            EQ
0x40EE  0x0B            BOOLOR
0x40EF  0x0C            BOOLAND
0x40F0  0x2F 0x26       JNZB 0x4116 (+38)

                        // else if ((c == '.') && !floatOk && (value.Length > 0))

0x40F2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40F4  0x1A 0x2E       PUSHIB 0x2E
0x40F6  0x05            EQ
0x40F7  0x27 0x00       DUP 0x00
0x40F9  0x2E 0x10       JZB 0x4109 (+16)
0x40FB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x40FD  0x41            BOOLNOT
0x40FE  0x0C            BOOLAND
0x40FF  0x27 0x00       DUP 0x00
0x4101  0x2E 0x08       JZB 0x4109 (+8)
0x4103  0x4F            PUSHLOCALB02
0x4104  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4106  0x44            PUSHI0
0x4107  0x07            GT
0x4108  0x0C            BOOLAND
0x4109  0x2E 0x07       JZB 0x4110 (+7)

                        // floatOk = true;                                      scanner.hs:390

0x410B  0x45            PUSHI1
0x410C  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    scanner.hs:391

0x410E  0x30 0x08       JB 0x4116 (+8)

                        // else if (!c.IsDigit())                               scanner.hs:392

0x4110  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4112  0x2C 0xB7       CALLB 0xB7     // Char.IsDigit
0x4114  0x2E 0x0B       JZB 0x411F (+11)

                        // value = value + advance();                           scanner.hs:396

0x4116  0x4F            PUSHLOCALB02
0x4117  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4119  0x25 0x03       SYSCALL1 0x03  // String.Append
0x411B  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:397

0x411C  0x33 0x6D 0xFF  JW 0x4089 (-147)

                        // if (hexOk)                                           scanner.hs:398

0x411F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4121  0x2E 0x38       JZB 0x4159 (+56)

                        // if (value.Length < 3)                                scanner.hs:400

0x4123  0x4F            PUSHLOCALB02
0x4124  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4126  0x1A 0x03       PUSHIB 0x03
0x4128  0x08            LT
0x4129  0x2E 0x0F       JZB 0x4138 (+15)

                        // token = errorToken("invalid hex integer literal");

0x412B  0x37 0x2F 0x05  PUSHIW 0x052F
0x412E  0x1A 0x1B       PUSHIB 0x1B
0x4130  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4132  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x4134  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:403

0x4135  0x33 0xAD 0x00  JW 0x41E2 (+173)

                        // uint hexValue = 0;                                   scanner.hs:405

0x4138  0x44            PUSHI0

                        // if (!Token.TryParseHex(value, ref hexValue))

0x4139  0x4F            PUSHLOCALB02
0x413A  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x413C  0x2C 0x7A       CALLB 0x7A     // Token.TryParseHex
0x413E  0x2F 0x11       JNZB 0x414F (+17)

                        // token = errorToken("invalid hex integer literal");

0x4140  0x37 0x2F 0x05  PUSHIW 0x052F
0x4143  0x1A 0x1B       PUSHIB 0x1B
0x4145  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4147  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x4149  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:409

0x414A  0x28 0x02       DECSP 0x02
0x414C  0x33 0x96 0x00  JW 0x41E2 (+150)

                        // value = hexValue.ToString();                         scanner.hs:411

0x414F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x4151  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x4153  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:412

0x4154  0x28 0x02       DECSP 0x02
0x4156  0x33 0x81 0x00  JW 0x41D7 (+129)

                        // else if (binaryOk)                                   scanner.hs:413

0x4159  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x415B  0x2E 0x36       JZB 0x4191 (+54)

                        // if (value.Length < 3)                                scanner.hs:415

0x415D  0x4F            PUSHLOCALB02
0x415E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4160  0x1A 0x03       PUSHIB 0x03
0x4162  0x08            LT
0x4163  0x2E 0x0F       JZB 0x4172 (+15)

                        // token = errorToken("invalid binary integer literal");

0x4165  0x37 0x4A 0x05  PUSHIW 0x054A
0x4168  0x1A 0x1E       PUSHIB 0x1E
0x416A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x416C  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x416E  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:418

0x416F  0x33 0x73 0x00  JW 0x41E2 (+115)

                        // uint binaryValue = 0;                                scanner.hs:420

0x4172  0x44            PUSHI0

                        // if (!Token.TryParseBinary(value, ref binaryValue))

0x4173  0x4F            PUSHLOCALB02
0x4174  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x4176  0x2C 0x7C       CALLB 0x7C     // Token.TryParseBinary
0x4178  0x2F 0x10       JNZB 0x4188 (+16)

                        // token = errorToken("invalid binary integer literal");

0x417A  0x37 0x4A 0x05  PUSHIW 0x054A
0x417D  0x1A 0x1E       PUSHIB 0x1E
0x417F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4181  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x4183  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:424

0x4184  0x28 0x02       DECSP 0x02
0x4186  0x30 0x5C       JB 0x41E2 (+92)

                        // value = binaryValue.ToString();                      scanner.hs:426

0x4188  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x418A  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x418C  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:427

0x418D  0x28 0x02       DECSP 0x02
0x418F  0x30 0x48       JB 0x41D7 (+72)

                        // else if (floatOk)                                    scanner.hs:428

0x4191  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4193  0x2E 0x26       JZB 0x41B9 (+38)

                        // float f;                                             scanner.hs:430

0x4195  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (!Token.TryParseFloat(value, ref f))              scanner.hs:431

0x4197  0x4F            PUSHLOCALB02
0x4198  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x419A  0x2C 0x7D       CALLB 0x7D     // Token.TryParseFloat
0x419C  0x2F 0x10       JNZB 0x41AC (+16)

                        // token = errorToken("invalid float literal");

0x419E  0x37 0x68 0x05  PUSHIW 0x0568
0x41A1  0x1A 0x15       PUSHIB 0x15
0x41A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x41A5  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x41A7  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:434

0x41A8  0x28 0x02       DECSP 0x02
0x41AA  0x30 0x38       JB 0x41E2 (+56)

                        // value = f.ToString();                                scanner.hs:436

0x41AC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x41AE  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x41B0  0x5E            POPCOPYLOCALB02

                        // ttype = HopperToken.Float;                           scanner.hs:437

0x41B1  0x1A 0x0A       PUSHIB 0x0A
0x41B3  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // }                                                    scanner.hs:438

0x41B5  0x28 0x02       DECSP 0x02
0x41B7  0x30 0x20       JB 0x41D7 (+32)

                        // long l;                                              scanner.hs:441

0x41B9  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(value, ref l))               scanner.hs:442

0x41BB  0x4F            PUSHLOCALB02
0x41BC  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x41BE  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x41C0  0x2F 0x10       JNZB 0x41D0 (+16)

                        // token = errorToken("invalid integer literal");

0x41C2  0x37 0x7D 0x05  PUSHIW 0x057D
0x41C5  0x1A 0x17       PUSHIB 0x17
0x41C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x41C9  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x41CB  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:445

0x41CC  0x28 0x02       DECSP 0x02
0x41CE  0x30 0x14       JB 0x41E2 (+20)

                        // value = l.ToString();                                scanner.hs:447

0x41D0  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x41D2  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x41D4  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:448

0x41D5  0x28 0x02       DECSP 0x02

                        // token = Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x41D7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x41D9  0x4F            PUSHLOCALB02
0x41DA  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x41DD  0x20 0x34       PUSHGLOBALB 0x34
0x41DF  0x2C 0x7E       CALLB 0x7E     // Token.New
0x41E1  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:453

0x41E2  0x4E            PUSHLOCALB00
0x41E3  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/scanner.hs:456
// ####  Scanner.scanIdentifier(..)  ####                                       0x0090


                        // uint dotSeen = 0;                                    scanner.hs:457

0x41E5  0x5F 0x01       ENTERB 0x01

                        // string value = c.ToString();                         scanner.hs:458

0x41E7  0x24 0x02       SYSCALL0 0x02  // String.New
0x41E9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x41EB  0x2C 0xBD       CALLB 0xBD     // Char.ToString
0x41ED  0x5E            POPCOPYLOCALB02

                        // HopperToken ttype = HopperToken.Identifier;

0x41EE  0x44            PUSHI0
0x41EF  0x1A 0x03       PUSHIB 0x03
0x41F1  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // c = peek();                                          scanner.hs:462

0x41F3  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x41F5  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if (!c.IsLetter() && !c.IsDigit())                   scanner.hs:463

0x41F7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x41F9  0x2C 0xBC       CALLB 0xBC     // Char.IsLetter
0x41FB  0x41            BOOLNOT
0x41FC  0x27 0x00       DUP 0x00
0x41FE  0x2E 0x08       JZB 0x4206 (+8)
0x4200  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4202  0x2C 0xB7       CALLB 0xB7     // Char.IsDigit
0x4204  0x41            BOOLNOT
0x4205  0x0C            BOOLAND
0x4206  0x2E 0x0B       JZB 0x4211 (+11)

                        // if (c == '.')                                        scanner.hs:465

0x4208  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x420A  0x1A 0x2E       PUSHIB 0x2E
0x420C  0x05            EQ
0x420D  0x2E 0x0C       JZB 0x4219 (+12)

                        // dotSeen++;                                           scanner.hs:467

0x420F  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // value = value + advance();                           scanner.hs:474

0x4211  0x4F            PUSHLOCALB02
0x4212  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4214  0x25 0x03       SYSCALL1 0x03  // String.Append
0x4216  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:475

0x4217  0x30 0xDC       JB 0x41F3 (-36)

                        // if (dotSeen > 0)                                     scanner.hs:476

0x4219  0x4E            PUSHLOCALB00
0x421A  0x44            PUSHI0
0x421B  0x07            GT
0x421C  0x2E 0x06       JZB 0x4222 (+6)

                        // ttype = HopperToken.DottedIdentifier;                scanner.hs:478

0x421E  0x1A 0x02       PUSHIB 0x02
0x4220  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Token.IsKeyword(value))                          scanner.hs:480

0x4222  0x4F            PUSHLOCALB02
0x4223  0x2C 0x76       CALLB 0x76     // Token.IsKeyword
0x4225  0x2E 0x2F       JZB 0x4254 (+47)

                        // switch (value)                                       scanner.hs:482

0x4227  0x4F            PUSHLOCALB02

                        // case "true":                                         scanner.hs:484

0x4228  0x37 0xD1 0x02  PUSHIW 0x02D1
0x422B  0x1A 0x04       PUSHIB 0x04
0x422D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x422F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4231  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x4233  0x2F 0x08       JNZB 0x423B (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:486

0x4235  0x1A 0x07       PUSHIB 0x07
0x4237  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:487

0x4239  0x30 0x19       JB 0x4252 (+25)

                        // case "false":                                        scanner.hs:488

0x423B  0x37 0xD5 0x02  PUSHIW 0x02D5
0x423E  0x1A 0x05       PUSHIB 0x05
0x4240  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4242  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4244  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x4246  0x2F 0x08       JNZB 0x424E (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:490

0x4248  0x1A 0x07       PUSHIB 0x07
0x424A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:491

0x424C  0x30 0x06       JB 0x4252 (+6)

                        // ttype = HopperToken.Keyword;                         scanner.hs:494

0x424E  0x1A 0x05       PUSHIB 0x05
0x4250  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:496

0x4252  0x28 0x02       DECSP 0x02

                        // if (Token.IsDirectiveKeyword(value))                 scanner.hs:498

0x4254  0x4F            PUSHLOCALB02
0x4255  0x2C 0x70       CALLB 0x70     // Token.IsDirectiveKeyword
0x4257  0x2E 0x06       JZB 0x425D (+6)

                        // ttype = HopperToken.Directive;                       scanner.hs:500

0x4259  0x1A 0x06       PUSHIB 0x06
0x425B  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // return Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x425D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x425F  0x4F            PUSHLOCALB02
0x4260  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x4263  0x20 0x34       PUSHGLOBALB 0x34
0x4265  0x2C 0x7E       CALLB 0x7E     // Token.New
0x4267  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/scanner.hs:218
// ####  Scanner.match(..)  ####                                                0x008B

0x4269  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:219

0x426A  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x426C  0x2E 0x05       JZB 0x4271 (+5)

                        // return false;                                        scanner.hs:221

0x426E  0x44            PUSHI0
0x426F  0x2B 0x02       RETRETB 0x02

                        // if (sourceGetFromPos(currentPos, true) != expected)

0x4271  0x20 0x2A       PUSHGLOBALB 0x2A
0x4273  0x45            PUSHI1
0x4274  0x2C 0x87       CALLB 0x87     // Scanner.sourceGetFromPos
0x4276  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4278  0x06            NE
0x4279  0x2E 0x05       JZB 0x427E (+5)

                        // return false;                                        scanner.hs:225

0x427B  0x44            PUSHI0
0x427C  0x2B 0x02       RETRETB 0x02

                        // currentPos = currentPos + 1;                         scanner.hs:227

0x427E  0x20 0x2A       PUSHGLOBALB 0x2A
0x4280  0x45            PUSHI1
0x4281  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x4283  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x4285  0x59 0x2A       POPCOPYGLOBALB 0x2A

                        // return true;                                         scanner.hs:228

0x4287  0x45            PUSHI1
0x4288  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:304
// ####  Scanner.scanString(..)  ####                                           0x008D

0x428A  0x49            ENTER

                        // string value;                                        scanner.hs:305

0x428B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // while ((peek() != '"') && (peek() != char(0)))

0x428D  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x428F  0x1A 0x22       PUSHIB 0x22
0x4291  0x06            NE
0x4292  0x27 0x00       DUP 0x00
0x4294  0x2E 0x07       JZB 0x429B (+7)
0x4296  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x4298  0x44            PUSHI0
0x4299  0x06            NE
0x429A  0x0C            BOOLAND
0x429B  0x2E 0x3B       JZB 0x42D6 (+59)

                        // if (peek() == char(0x0A))                            scanner.hs:308

0x429D  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x429F  0x1A 0x0A       PUSHIB 0x0A
0x42A1  0x05            EQ
0x42A2  0x2E 0x0D       JZB 0x42AF (+13)

                        // return errorToken("unexpected EOL in string");

0x42A4  0x37 0x94 0x05  PUSHIW 0x0594
0x42A7  0x1A 0x18       PUSHIB 0x18
0x42A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x42AB  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x42AD  0x2B 0x02       RETRETB 0x02

                        // char c = advance();                                  scanner.hs:312

0x42AF  0x44            PUSHI0
0x42B0  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x42B2  0x4D            POPLOCALB02

                        // if (c == char(0x5C)) // \                            scanner.hs:313

0x42B3  0x4F            PUSHLOCALB02
0x42B4  0x1A 0x5C       PUSHIB 0x5C
0x42B6  0x05            EQ
0x42B7  0x2E 0x16       JZB 0x42CD (+22)

                        // if (   (peek() == '"') // \"                         scanner.hs:315

0x42B9  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x42BB  0x1A 0x22       PUSHIB 0x22
0x42BD  0x05            EQ
0x42BE  0x27 0x00       DUP 0x00
0x42C0  0x2F 0x08       JNZB 0x42C8 (+8)
0x42C2  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x42C4  0x1A 0x5C       PUSHIB 0x5C
0x42C6  0x05            EQ
0x42C7  0x0B            BOOLOR
0x42C8  0x2E 0x05       JZB 0x42CD (+5)

                        // c = advance(); // gooble the \                       scanner.hs:319

0x42CA  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x42CC  0x4D            POPLOCALB02

                        // value = value + c;                                   scanner.hs:322

0x42CD  0x4E            PUSHLOCALB00
0x42CE  0x4F            PUSHLOCALB02
0x42CF  0x25 0x03       SYSCALL1 0x03  // String.Append
0x42D1  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:323

0x42D2  0x28 0x02       DECSP 0x02
0x42D4  0x30 0xB9       JB 0x428D (-71)

                        // if (isAtEnd())                                       scanner.hs:324

0x42D6  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x42D8  0x2E 0x25       JZB 0x42FD (+37)

                        // if (value.Length > 80)                               scanner.hs:326

0x42DA  0x4E            PUSHLOCALB00
0x42DB  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x42DD  0x1A 0x50       PUSHIB 0x50
0x42DF  0x07            GT
0x42E0  0x2E 0x09       JZB 0x42E9 (+9)

                        // value = value.Substring(0, 80);                      scanner.hs:328

0x42E2  0x4E            PUSHLOCALB00
0x42E3  0x44            PUSHI0
0x42E4  0x1A 0x50       PUSHIB 0x50
0x42E6  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x42E8  0x5D            POPCOPYLOCALB00

                        // return errorToken("unterminated string: '" + value + "'");

0x42E9  0x37 0xAC 0x05  PUSHIW 0x05AC
0x42EC  0x1A 0x16       PUSHIB 0x16
0x42EE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x42F0  0x4E            PUSHLOCALB00
0x42F1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x42F3  0x1A 0x27       PUSHIB 0x27
0x42F5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x42F7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x42F9  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x42FB  0x2B 0x02       RETRETB 0x02

                        // char c = advance(); // consume the '"'               scanner.hs:332

0x42FD  0x44            PUSHI0
0x42FE  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4300  0x4D            POPLOCALB02

                        // return Token.New(HopperToken.StringConstant, value, currentLine, currentPos, currentSourcePath);

0x4301  0x1A 0x0B       PUSHIB 0x0B
0x4303  0x4E            PUSHLOCALB00
0x4304  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x4307  0x20 0x34       PUSHGLOBALB 0x34
0x4309  0x2C 0x7E       CALLB 0x7E     // Token.New
0x430B  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:336
// ####  Scanner.scanChar(..)  ####                                             0x008E


                        // char c = advance();                                  scanner.hs:337

0x430D  0x5F 0x01       ENTERB 0x01

                        // char c = advance();                                  scanner.hs:337

0x430F  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x4311  0x4C            POPLOCALB00

                        // if (c == char(0x5C))                                 scanner.hs:338

0x4312  0x4E            PUSHLOCALB00
0x4313  0x1A 0x5C       PUSHIB 0x5C
0x4315  0x05            EQ
0x4316  0x2E 0x16       JZB 0x432C (+22)

                        // if (   (peek() == char(0x27)) // \'                  scanner.hs:340

0x4318  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x431A  0x1A 0x27       PUSHIB 0x27
0x431C  0x05            EQ
0x431D  0x27 0x00       DUP 0x00
0x431F  0x2F 0x08       JNZB 0x4327 (+8)
0x4321  0x2C 0x89       CALLB 0x89     // Scanner.peek
0x4323  0x1A 0x5C       PUSHIB 0x5C
0x4325  0x05            EQ
0x4326  0x0B            BOOLOR
0x4327  0x2E 0x05       JZB 0x432C (+5)

                        // c = advance();         // gobble the \               scanner.hs:344

0x4329  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x432B  0x4C            POPLOCALB00

                        // char d = advance();                                  scanner.hs:347

0x432C  0x44            PUSHI0
0x432D  0x2C 0x88       CALLB 0x88     // Scanner.advance
0x432F  0x4D            POPLOCALB02

                        // if (isAtEnd() || (d != char(0x27))) // '             scanner.hs:348

0x4330  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x4332  0x27 0x00       DUP 0x00
0x4334  0x2F 0x07       JNZB 0x433B (+7)
0x4336  0x4F            PUSHLOCALB02
0x4337  0x1A 0x27       PUSHIB 0x27
0x4339  0x06            NE
0x433A  0x0B            BOOLOR
0x433B  0x2E 0x0D       JZB 0x4348 (+13)

                        // return errorToken("' expected");                     scanner.hs:350

0x433D  0x37 0xDA 0x02  PUSHIW 0x02DA
0x4340  0x1A 0x0A       PUSHIB 0x0A
0x4342  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4344  0x2C 0x86       CALLB 0x86     // Scanner.errorToken
0x4346  0x2B 0x04       RETRETB 0x04

                        // return Token.New(HopperToken.Char, c.ToString(), currentLine, currentPos, currentSourcePath);

0x4348  0x1A 0x08       PUSHIB 0x08
0x434A  0x4E            PUSHLOCALB00
0x434B  0x2C 0xBD       CALLB 0xBD     // Char.ToString
0x434D  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x4350  0x20 0x34       PUSHGLOBALB 0x34
0x4352  0x2C 0x7E       CALLB 0x7E     // Token.New
0x4354  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:132
// ####  Scanner.errorToken(..)  ####                                           0x0086

0x4356  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Error, message, currentLine, currentPos, currentSourcePath);

0x4357  0x1A 0x0F       PUSHIB 0x0F
0x4359  0x1A 0x0F       PUSHIB 0x0F
0x435B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x435D  0x45            PUSHI1
0x435E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4360  0x52 0x2C 0x2A  PUSHGLOBALBB 0x2A2C
0x4363  0x20 0x34       PUSHGLOBALB 0x34
0x4365  0x2C 0x7E       CALLB 0x7E     // Token.New
0x4367  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:134

0x4368  0x4E            PUSHLOCALB00
0x4369  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:205
// ####  Scanner.peek(..)  ####                                                 0x0089

0x436B  0x49            ENTER

                        // return sourceGetFromPos(currentPos, true);           scanner.hs:206

0x436C  0x20 0x2A       PUSHGLOBALB 0x2A
0x436E  0x45            PUSHI1
0x436F  0x2C 0x87       CALLB 0x87     // Scanner.sourceGetFromPos
0x4371  0x4A            RET0


// /source/compiler/tokens/scanner.hs:209
// ####  Scanner.peekNext(..)  ####                                             0x008A

0x4372  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:210

0x4373  0x2C 0x85       CALLB 0x85     // Scanner.isAtEnd
0x4375  0x2E 0x04       JZB 0x4379 (+4)

                        // return char(0);                                      scanner.hs:212

0x4377  0x44            PUSHI0
0x4378  0x4A            RET0

                        // long currentPlusOne = currentPos+1;                  scanner.hs:214

0x4379  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x437B  0x20 0x2A       PUSHGLOBALB 0x2A
0x437D  0x45            PUSHI1
0x437E  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x4380  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x4382  0x5D            POPCOPYLOCALB00

                        // return sourceGetFromPos(currentPlusOne, false);

0x4383  0x4E            PUSHLOCALB00
0x4384  0x44            PUSHI0
0x4385  0x2C 0x87       CALLB 0x87     // Scanner.sourceGetFromPos
0x4387  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:137
// ####  Scanner.sourceGetFromPos(..)  ####                                     0x0087


                        // char c;                                              scanner.hs:138

0x4389  0x5F 0x05       ENTERB 0x05

                        // string ln;                                           scanner.hs:143

0x438B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // long current;                                        scanner.hs:144

0x438D  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long limit;                                          scanner.hs:145

0x438F  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long index;                                          scanner.hs:146

0x4391  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (lastPosSet)                                      scanner.hs:150

0x4393  0x20 0x3A       PUSHGLOBALB 0x3A
0x4395  0x2E 0x10       JZB 0x43A5 (+16)

                        // if (pos == lastPos)                                  scanner.hs:152

0x4397  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4399  0x20 0x38       PUSHGLOBALB 0x38
0x439B  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x439D  0x2E 0x08       JZB 0x43A5 (+8)

                        // c = lastChar;                                        scanner.hs:154

0x439F  0x20 0x36       PUSHGLOBALB 0x36
0x43A1  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:155

0x43A2  0x33 0x84 0x00  JW 0x4426 (+132)

                        // if (pos < currentStartPos)                           scanner.hs:158

0x43A5  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x43A7  0x20 0x32       PUSHGLOBALB 0x32
0x43A9  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x43AB  0x2E 0x0A       JZB 0x43B5 (+10)

                        // currentStartPos = 0;                                 scanner.hs:160

0x43AD  0x44            PUSHI0
0x43AE  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x43B0  0x59 0x32       POPCOPYGLOBALB 0x32

                        // iCurrentSourceLine = 0;                              scanner.hs:161

0x43B2  0x44            PUSHI0
0x43B3  0x1F 0x30       POPGLOBALB 0x30

                        // current = currentStartPos;                           scanner.hs:164

0x43B5  0x20 0x32       PUSHGLOBALB 0x32
0x43B7  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iCurrentSourceLine;                          scanner.hs:165

0x43B9  0x20 0x30       PUSHGLOBALB 0x30
0x43BB  0x4D            POPLOCALB02

                        // maxLines = sourceLines.Length;                       scanner.hs:166

0x43BC  0x20 0x28       PUSHGLOBALB 0x28
0x43BE  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x43C0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // ln = sourceLines[iLine];                             scanner.hs:169

0x43C2  0x20 0x28       PUSHGLOBALB 0x28
0x43C4  0x4F            PUSHLOCALB02
0x43C5  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x43C7  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // length = ln.Length;                                  scanner.hs:170

0x43C9  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x43CB  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x43CD  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // limit = current+length;                              scanner.hs:171

0x43CF  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x43D2  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x43D4  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x43D6  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if ((pos >= current) && (pos < limit))               scanner.hs:172

0x43D8  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x43DB  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x43DD  0x27 0x00       DUP 0x00
0x43DF  0x2E 0x08       JZB 0x43E7 (+8)
0x43E1  0x56 0xFC 0x0E  PUSHLOCALBB 0x0EFC
0x43E4  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x43E6  0x0C            BOOLAND
0x43E7  0x2E 0x17       JZB 0x43FE (+23)

                        // index = pos - current;                               scanner.hs:174

0x43E9  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x43EC  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x43EE  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // uindex = uint(index);                                scanner.hs:175

0x43F0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x43F2  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x43F4  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // c = ln[uindex];                                      scanner.hs:176

0x43F6  0x56 0x0A 0x08  PUSHLOCALBB 0x080A
0x43F9  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x43FB  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:177

0x43FC  0x30 0x20       JB 0x441C (+32)

                        // current = current + length;                          scanner.hs:179

0x43FE  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x4401  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x4403  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x4405  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iLine + 1;                                   scanner.hs:180

0x4407  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (iLine == maxLines)                               scanner.hs:181

0x4409  0x4F            PUSHLOCALB02
0x440A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x440C  0x05            EQ
0x440D  0x2F 0x0F       JNZB 0x441C (+15)

                        // if (updateCache)                                     scanner.hs:185

0x440F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4411  0x2E 0xB1       JZB 0x43C2 (-79)

                        // currentStartPos = current;                           scanner.hs:187

0x4413  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x4415  0x59 0x32       POPCOPYGLOBALB 0x32

                        // iCurrentSourceLine = iLine;                          scanner.hs:188

0x4417  0x4F            PUSHLOCALB02
0x4418  0x1F 0x30       POPGLOBALB 0x30

                        // }                                                    scanner.hs:190

0x441A  0x30 0xA8       JB 0x43C2 (-88)

                        // lastPos = pos;                                       scanner.hs:191

0x441C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x441E  0x59 0x38       POPCOPYGLOBALB 0x38

                        // lastChar = c;                                        scanner.hs:192

0x4420  0x4E            PUSHLOCALB00
0x4421  0x1F 0x36       POPGLOBALB 0x36

                        // lastPosSet = true;                                   scanner.hs:193

0x4423  0x45            PUSHI1
0x4424  0x1F 0x3A       POPGLOBALB 0x3A

                        // return c;                                            scanner.hs:196

0x4426  0x4E            PUSHLOCALB00
0x4427  0x2B 0x16       RETRETB 0x16


// /source/system/string.hs:254
// ####  String.Contains(..)  ####                                              0x00E2


                        // uint index;                                          string.hs:255

0x4429  0x5F 0x01       ENTERB 0x01

                        // return IndexOf(this, needle, ref index);             string.hs:256

0x442B  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x442E  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x4430  0x2C 0xEA       CALLB 0xEA     // String.IndexOf
0x4432  0x2B 0x06       RETRETB 0x06


// /source/system/string.hs:263
// ####  String.StartsWith(..)  ####                                            0x00E4


                        // uint i;                                              string.hs:264

0x4434  0x5F 0x02       ENTERB 0x02

                        // length = pattern.Length;                             string.hs:266

0x4436  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4438  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x443A  0x4D            POPLOCALB02

                        // if (length <= this.Length)                           string.hs:267

0x443B  0x4F            PUSHLOCALB02
0x443C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x443E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4440  0x0A            LE
0x4441  0x2E 0x1E       JZB 0x445F (+30)

                        // for ( ; i < length; i++)                             string.hs:269

0x4443  0x4E            PUSHLOCALB00
0x4444  0x4F            PUSHLOCALB02
0x4445  0x08            LT
0x4446  0x2E 0x16       JZB 0x445C (+22)

                        // if (pattern[i] != this[i])                           string.hs:271

0x4448  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x444A  0x4E            PUSHLOCALB00
0x444B  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x444D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x444F  0x4E            PUSHLOCALB00
0x4450  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4452  0x06            NE
0x4453  0x2E 0x05       JZB 0x4458 (+5)

                        // return false;                                        string.hs:273

0x4455  0x44            PUSHI0
0x4456  0x2B 0x08       RETRETB 0x08

                        // }                                                    string.hs:275

0x4458  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x445A  0x30 0xE9       JB 0x4443 (-23)

                        // return true;                                         string.hs:276

0x445C  0x45            PUSHI1
0x445D  0x2B 0x08       RETRETB 0x08

                        // return false;                                        string.hs:278

0x445F  0x44            PUSHI0
0x4460  0x2B 0x08       RETRETB 0x08


// /source/system/string.hs:326
// ####  String.IndexOf(..)  ####                                               0x00EA


                        // bool found;                                          string.hs:327

0x4462  0x5F 0x05       ENTERB 0x05

                        // length = this.Length;                                string.hs:332

0x4464  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x4466  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4468  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // pLength = pattern.Length;                            string.hs:333

0x446A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x446C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x446E  0x4D            POPLOCALB02

                        // if (pIndex + pLength > length)                       string.hs:336

0x446F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4471  0x4F            PUSHLOCALB02
0x4472  0x00            ADD
0x4473  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4475  0x07            GT
0x4476  0x2F 0x32       JNZB 0x44A8 (+50)

                        // found = true;                                        string.hs:340

0x4478  0x45            PUSHI1
0x4479  0x4C            POPLOCALB00

                        // for (i=0; i < pLength; i++)                          string.hs:341

0x447A  0x44            PUSHI0
0x447B  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x447D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x447F  0x4F            PUSHLOCALB02
0x4480  0x08            LT
0x4481  0x2E 0x1A       JZB 0x449B (+26)

                        // if (this[i+pIndex] != pattern[i])                    string.hs:343

0x4483  0x56 0xFA 0x08  PUSHLOCALBB 0x08FA
0x4486  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4488  0x00            ADD
0x4489  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x448B  0x56 0xFC 0x08  PUSHLOCALBB 0x08FC
0x448E  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4490  0x06            NE
0x4491  0x2E 0x06       JZB 0x4497 (+6)

                        // found = false;                                       string.hs:345

0x4493  0x44            PUSHI0
0x4494  0x4C            POPLOCALB00

                        // break;                                               string.hs:346

0x4495  0x30 0x06       JB 0x449B (+6)

                        // }                                                    string.hs:348

0x4497  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x4499  0x30 0xE4       JB 0x447D (-28)

                        // if (found)                                           string.hs:349

0x449B  0x4E            PUSHLOCALB00
0x449C  0x2E 0x08       JZB 0x44A4 (+8)

                        // index = pIndex;                                      string.hs:351

0x449E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x44A0  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // break;                                               string.hs:352

0x44A2  0x30 0x06       JB 0x44A8 (+6)

                        // pIndex++;                                            string.hs:354

0x44A4  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    string.hs:355

0x44A6  0x30 0xC9       JB 0x446F (-55)

                        // return found;                                        string.hs:356

0x44A8  0x4E            PUSHLOCALB00
0x44A9  0x2B 0x10       RETRETB 0x10


// /source/system/char.hs:78
// ####  Char.IsHexDigit(..)  ####                                              0x00BB


                        // byte b;                                              char.hs:79

0x44AB  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:80

0x44AD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44AF  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)) || // 0..9           char.hs:81

0x44B0  0x4E            PUSHLOCALB00
0x44B1  0x1A 0x30       PUSHIB 0x30
0x44B3  0x09            GE
0x44B4  0x27 0x00       DUP 0x00
0x44B6  0x2E 0x07       JZB 0x44BD (+7)
0x44B8  0x4E            PUSHLOCALB00
0x44B9  0x1A 0x39       PUSHIB 0x39
0x44BB  0x0A            LE
0x44BC  0x0C            BOOLAND
0x44BD  0x27 0x00       DUP 0x00
0x44BF  0x2F 0x22       JNZB 0x44E1 (+34)
0x44C1  0x4E            PUSHLOCALB00
0x44C2  0x1A 0x41       PUSHIB 0x41
0x44C4  0x09            GE
0x44C5  0x27 0x00       DUP 0x00
0x44C7  0x2E 0x07       JZB 0x44CE (+7)
0x44C9  0x4E            PUSHLOCALB00
0x44CA  0x1A 0x46       PUSHIB 0x46
0x44CC  0x0A            LE
0x44CD  0x0C            BOOLAND
0x44CE  0x0B            BOOLOR
0x44CF  0x27 0x00       DUP 0x00
0x44D1  0x2F 0x10       JNZB 0x44E1 (+16)
0x44D3  0x4E            PUSHLOCALB00
0x44D4  0x1A 0x61       PUSHIB 0x61
0x44D6  0x09            GE
0x44D7  0x27 0x00       DUP 0x00
0x44D9  0x2E 0x07       JZB 0x44E0 (+7)
0x44DB  0x4E            PUSHLOCALB00
0x44DC  0x1A 0x66       PUSHIB 0x66
0x44DE  0x0A            LE
0x44DF  0x0C            BOOLAND
0x44E0  0x0B            BOOLOR
0x44E1  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:37
// ####  Char.ToDigit(..)  ####                                                 0x00B6

0x44E3  0x49            ENTER

                        // d = d + 48; // +0                                    char.hs:38

0x44E4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44E6  0x1A 0x30       PUSHIB 0x30
0x44E8  0x00            ADD
0x44E9  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return char(d);                                      char.hs:39

0x44EB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44ED  0x2B 0x02       RETRETB 0x02


// /source/system/char.hs:89
// ####  Char.IsLetter(..)  ####                                                0x00BC


                        // byte b;                                              char.hs:90

0x44EF  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:91

0x44F1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44F3  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90))   // A..Z            char.hs:92

0x44F4  0x4E            PUSHLOCALB00
0x44F5  0x1A 0x41       PUSHIB 0x41
0x44F7  0x09            GE
0x44F8  0x27 0x00       DUP 0x00
0x44FA  0x2E 0x07       JZB 0x4501 (+7)
0x44FC  0x4E            PUSHLOCALB00
0x44FD  0x1A 0x5A       PUSHIB 0x5A
0x44FF  0x0A            LE
0x4500  0x0C            BOOLAND
0x4501  0x27 0x00       DUP 0x00
0x4503  0x2F 0x10       JNZB 0x4513 (+16)
0x4505  0x4E            PUSHLOCALB00
0x4506  0x1A 0x61       PUSHIB 0x61
0x4508  0x09            GE
0x4509  0x27 0x00       DUP 0x00
0x450B  0x2E 0x07       JZB 0x4512 (+7)
0x450D  0x4E            PUSHLOCALB00
0x450E  0x1A 0x7A       PUSHIB 0x7A
0x4510  0x0A            LE
0x4511  0x0C            BOOLAND
0x4512  0x0B            BOOLOR
0x4513  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:99
// ####  Char.ToString(..)  ####                                                0x00BD

0x4515  0x49            ENTER

                        // string result;                                       char.hs:100

0x4516  0x24 0x02       SYSCALL0 0x02  // String.New

                        // return result.Append(this);                          char.hs:101

0x4518  0x4E            PUSHLOCALB00
0x4519  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x451B  0x25 0x03       SYSCALL1 0x03  // String.Append
0x451D  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/token.hs:506
// ####  Token.New(..)  ####                                                    0x007E

0x451F  0x49            ENTER

                        // <string,string> token;                               token.hs:507

0x4520  0x1A 0x0F       PUSHIB 0x0F
0x4522  0x1A 0x0F       PUSHIB 0x0F
0x4524  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // token["type"] = HopperTokenToString(tokenType);

0x4526  0x4E            PUSHLOCALB00
0x4527  0x37 0x44 0x01  PUSHIW 0x0144
0x452A  0x1A 0x04       PUSHIB 0x04
0x452C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x452E  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x4530  0x2C 0x6D       CALLB 0x6D     // Token.HopperTokenToString
0x4532  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["lexeme"] = lexeme;                            token.hs:509

0x4534  0x4E            PUSHLOCALB00
0x4535  0x1A 0xD8       PUSHIB 0xD8
0x4537  0x1A 0x06       PUSHIB 0x06
0x4539  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x453B  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x453D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["line"] = ln.ToString();                       token.hs:510

0x453F  0x4E            PUSHLOCALB00
0x4540  0x37 0x5F 0x01  PUSHIW 0x015F
0x4543  0x1A 0x04       PUSHIB 0x04
0x4545  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4547  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x4549  0x2C 0xC5       CALLB 0xC5     // UInt.ToString
0x454B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["source"] = sourcePath;                        token.hs:511

0x454D  0x4E            PUSHLOCALB00
0x454E  0x37 0x8D 0x01  PUSHIW 0x018D
0x4551  0x1A 0x06       PUSHIB 0x06
0x4553  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4555  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4557  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["pos"] = pos.ToString();                       token.hs:512

0x4559  0x4E            PUSHLOCALB00
0x455A  0x37 0xC2 0x05  PUSHIW 0x05C2
0x455D  0x1A 0x03       PUSHIB 0x03
0x455F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4561  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4563  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x4565  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // return token;                                        token.hs:513

0x4567  0x4E            PUSHLOCALB00
0x4568  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/tokens/token.hs:516
// ####  Token.ToString(..)  ####                                               0x007F


                        // HopperToken tokenType;                               token.hs:517

0x456A  0x5F 0x01       ENTERB 0x01

                        // string content = "Undefined";                        token.hs:518

0x456C  0x24 0x02       SYSCALL0 0x02  // String.New
0x456E  0x37 0xFF 0x02  PUSHIW 0x02FF
0x4571  0x1A 0x09       PUSHIB 0x09
0x4573  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4575  0x5E            POPCOPYLOCALB02

                        // if (token.Count > 0)                                 token.hs:519

0x4576  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4578  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x457A  0x44            PUSHI0
0x457B  0x07            GT
0x457C  0x31 0x1A 0x01  JZW 0x4696 (+282)

                        // content = token["type"];                             token.hs:521

0x457F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4581  0x37 0x44 0x01  PUSHIW 0x0144
0x4584  0x1A 0x04       PUSHIB 0x04
0x4586  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4588  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x458A  0x5E            POPCOPYLOCALB02

                        // tokenType = Token.GetType(token);                    token.hs:522

0x458B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x458D  0x2C 0x6E       CALLB 0x6E     // Token.GetType
0x458F  0x4C            POPLOCALB00

                        // switch (tokenType)                                   token.hs:523

0x4590  0x4E            PUSHLOCALB00

                        // case HopperToken.Identifier:                         token.hs:525

0x4591  0x1A 0x03       PUSHIB 0x03
0x4593  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4595  0x05            EQ
0x4596  0x2E 0x20       JZB 0x45B6 (+32)

                        // content = content + " '" + token["lexeme"] + "'";

0x4598  0x4F            PUSHLOCALB02
0x4599  0x37 0x20 0x27  PUSHIW 0x2720
0x459C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x459E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45A0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x45A2  0x1A 0xD8       PUSHIB 0xD8
0x45A4  0x1A 0x06       PUSHIB 0x06
0x45A6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x45A8  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x45AA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45AC  0x1A 0x27       PUSHIB 0x27
0x45AE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x45B0  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45B2  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:528

0x45B3  0x33 0x9F 0x00  JW 0x4652 (+159)

                        // case HopperToken.StringConstant:                     token.hs:529

0x45B6  0x1A 0x0B       PUSHIB 0x0B
0x45B8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x45BA  0x05            EQ
0x45BB  0x2E 0x1E       JZB 0x45D9 (+30)

                        // content = content + " \"" + token["lexeme"] + '"';

0x45BD  0x4F            PUSHLOCALB02
0x45BE  0x37 0x20 0x22  PUSHIW 0x2220
0x45C1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x45C3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45C5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x45C7  0x1A 0xD8       PUSHIB 0xD8
0x45C9  0x1A 0x06       PUSHIB 0x06
0x45CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x45CD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x45CF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45D1  0x1A 0x22       PUSHIB 0x22
0x45D3  0x25 0x03       SYSCALL1 0x03  // String.Append
0x45D5  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:532

0x45D6  0x33 0x7C 0x00  JW 0x4652 (+124)

                        // case HopperToken.Char:                               token.hs:533

0x45D9  0x1A 0x08       PUSHIB 0x08
0x45DB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x45DD  0x05            EQ
0x45DE  0x2E 0x1F       JZB 0x45FD (+31)

                        // content = content + " '" + token["lexeme"] + "'";

0x45E0  0x4F            PUSHLOCALB02
0x45E1  0x37 0x20 0x27  PUSHIW 0x2720
0x45E4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x45E6  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45E8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x45EA  0x1A 0xD8       PUSHIB 0xD8
0x45EC  0x1A 0x06       PUSHIB 0x06
0x45EE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x45F0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x45F2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45F4  0x1A 0x27       PUSHIB 0x27
0x45F6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x45F8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x45FA  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:536

0x45FB  0x30 0x57       JB 0x4652 (+87)

                        // case HopperToken.Keyword:                            token.hs:537

0x45FD  0x1A 0x05       PUSHIB 0x05
0x45FF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4601  0x05            EQ
0x4602  0x2E 0x18       JZB 0x461A (+24)

                        // content = content + " " + token["lexeme"];           token.hs:539

0x4604  0x4F            PUSHLOCALB02
0x4605  0x1A 0x20       PUSHIB 0x20
0x4607  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4609  0x24 0x03       SYSCALL0 0x03  // String.Append
0x460B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x460D  0x1A 0xD8       PUSHIB 0xD8
0x460F  0x1A 0x06       PUSHIB 0x06
0x4611  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4613  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x4615  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4617  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:540

0x4618  0x30 0x3A       JB 0x4652 (+58)

                        // case HopperToken.Integer:                            token.hs:541

0x461A  0x1A 0x09       PUSHIB 0x09
0x461C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x461E  0x05            EQ
0x461F  0x2E 0x18       JZB 0x4637 (+24)

                        // content = content + " " + token["lexeme"];           token.hs:543

0x4621  0x4F            PUSHLOCALB02
0x4622  0x1A 0x20       PUSHIB 0x20
0x4624  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4626  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4628  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x462A  0x1A 0xD8       PUSHIB 0xD8
0x462C  0x1A 0x06       PUSHIB 0x06
0x462E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4630  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x4632  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4634  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:544

0x4635  0x30 0x1D       JB 0x4652 (+29)

                        // case HopperToken.Bool:                               token.hs:545

0x4637  0x1A 0x07       PUSHIB 0x07
0x4639  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x463B  0x05            EQ
0x463C  0x2E 0x16       JZB 0x4652 (+22)

                        // content = content + " " + token["lexeme"];           token.hs:547

0x463E  0x4F            PUSHLOCALB02
0x463F  0x1A 0x20       PUSHIB 0x20
0x4641  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4643  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4645  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4647  0x1A 0xD8       PUSHIB 0xD8
0x4649  0x1A 0x06       PUSHIB 0x06
0x464B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x464D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x464F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4651  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:549

0x4652  0x28 0x02       DECSP 0x02

                        // content = content + "[" + token["source"] + ":" + token["line"] + "->" + token["pos"] + "]";

0x4654  0x4F            PUSHLOCALB02
0x4655  0x1A 0x5B       PUSHIB 0x5B
0x4657  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4659  0x24 0x03       SYSCALL0 0x03  // String.Append
0x465B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x465D  0x37 0x8D 0x01  PUSHIW 0x018D
0x4660  0x1A 0x06       PUSHIB 0x06
0x4662  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4664  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x4666  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4668  0x1A 0x3A       PUSHIB 0x3A
0x466A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x466C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x466E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4670  0x37 0x5F 0x01  PUSHIW 0x015F
0x4673  0x1A 0x04       PUSHIB 0x04
0x4675  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4677  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x4679  0x24 0x03       SYSCALL0 0x03  // String.Append
0x467B  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0x467E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4680  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4682  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4684  0x37 0xC2 0x05  PUSHIW 0x05C2
0x4687  0x1A 0x03       PUSHIB 0x03
0x4689  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x468B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x468D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x468F  0x1A 0x5D       PUSHIB 0x5D
0x4691  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4693  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4695  0x5E            POPCOPYLOCALB02

                        // return content;                                      token.hs:552

0x4696  0x4F            PUSHLOCALB02
0x4697  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/token.hs:414
// ####  Token.TryParseBinary(..)  ####                                         0x007C


                        // char c;                                              token.hs:415

0x4699  0x5F 0x04       ENTERB 0x04

                        // returnValue = 0;                                     token.hs:418

0x469B  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0b"))                       token.hs:419

0x469D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x469F  0x37 0x30 0x62  PUSHIW 0x6230
0x46A2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x46A4  0x2C 0xE4       CALLB 0xE4     // String.StartsWith
0x46A6  0x2F 0x05       JNZB 0x46AB (+5)

                        // return false;                                        token.hs:421

0x46A8  0x44            PUSHI0
0x46A9  0x2B 0x0A       RETRETB 0x0A

                        // length = content.Length;                             token.hs:423

0x46AB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x46AD  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x46AF  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:424

0x46B0  0x4F            PUSHLOCALB02
0x46B1  0x1A 0x03       PUSHIB 0x03
0x46B3  0x08            LT
0x46B4  0x2E 0x05       JZB 0x46B9 (+5)

                        // return false;                                        token.hs:426

0x46B6  0x44            PUSHI0
0x46B7  0x2B 0x0A       RETRETB 0x0A

                        // for ( ; i < length-2; i++)                           token.hs:428

0x46B9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x46BB  0x4F            PUSHLOCALB02
0x46BC  0x1A 0x02       PUSHIB 0x02
0x46BE  0x01            SUB
0x46BF  0x08            LT
0x46C0  0x2E 0x22       JZB 0x46E2 (+34)

                        // returnValue = returnValue * 2;                       token.hs:430

0x46C2  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x46C4  0x1A 0x02       PUSHIB 0x02
0x46C6  0x03            MUL
0x46C7  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // c = content.GetChar(i+2);                            token.hs:431

0x46C9  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x46CC  0x1A 0x02       PUSHIB 0x02
0x46CE  0x00            ADD
0x46CF  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x46D1  0x4C            POPLOCALB00

                        // if (c == '1')                                        token.hs:432

0x46D2  0x4E            PUSHLOCALB00
0x46D3  0x1A 0x31       PUSHIB 0x31
0x46D5  0x05            EQ
0x46D6  0x2E 0x08       JZB 0x46DE (+8)

                        // returnValue = returnValue + 1;                       token.hs:434

0x46D8  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x46DA  0x45            PUSHI1
0x46DB  0x00            ADD
0x46DC  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:436

0x46DE  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x46E0  0x30 0xD9       JB 0x46B9 (-39)

                        // return true;                                         token.hs:437

0x46E2  0x45            PUSHI1
0x46E3  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:440
// ####  Token.TryParseFloat(..)  ####                                          0x007D


                        // bool success;                                        token.hs:441

0x46E5  0x5F 0x02       ENTERB 0x02

                        // long longValue;                                      token.hs:443

0x46E7  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // float floatValue;                                    token.hs:444

0x46E9  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // string digits;                                       token.hs:445

0x46EB  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (content.IndexOf('.', ref iDot))                  token.hs:448

0x46ED  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x46EF  0x1A 0x2E       PUSHIB 0x2E
0x46F1  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x46F3  0x2C 0xE5       CALLB 0xE5     // String.IndexOf
0x46F5  0x31 0x79 0x00  JZW 0x476E (+121)

                        // digits = content.Substring(0, iDot);                 token.hs:450

0x46F8  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x46FA  0x44            PUSHI0
0x46FB  0x4F            PUSHLOCALB02
0x46FC  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x46FE  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:451

0x4700  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4702  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x4704  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x4706  0x2E 0x78       JZB 0x477E (+120)

                        // floatValue = longValue.ToFloat();                    token.hs:455

0x4708  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x470A  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x470C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // digits = content.Substring(iDot+1);                  token.hs:456

0x470E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4710  0x4F            PUSHLOCALB02
0x4711  0x45            PUSHI1
0x4712  0x00            ADD
0x4713  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x4715  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // uint length = digits.Length;                         token.hs:457

0x4717  0x44            PUSHI0
0x4718  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x471A  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x471C  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (length > 0)                                      token.hs:458

0x471E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x4720  0x44            PUSHI0
0x4721  0x07            GT
0x4722  0x2E 0x46       JZB 0x4768 (+70)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:460

0x4724  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4726  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x4728  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x472A  0x2F 0x06       JNZB 0x4730 (+6)

                        // break;                                               token.hs:462

0x472C  0x28 0x02       DECSP 0x02
0x472E  0x30 0x50       JB 0x477E (+80)

                        // float decimalValue = longValue.ToFloat();            token.hs:464

0x4730  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x4732  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4734  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x4736  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // while (length > 0)                                   token.hs:465

0x4738  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x473A  0x44            PUSHI0
0x473B  0x07            GT
0x473C  0x2E 0x11       JZB 0x474D (+17)

                        // decimalValue = decimalValue / 10.0;                  token.hs:467

0x473E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x4740  0x37 0xC5 0x05  PUSHIW 0x05C5
0x4743  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0x4745  0x24 0x50       SYSCALL0 0x50  // Float.Div
0x4747  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // length--;                                            token.hs:468

0x4749  0x23 0x0A       DECLOCALB 0x0A (BP+10)

                        // }                                                    token.hs:469

0x474B  0x30 0xED       JB 0x4738 (-19)

                        // if (floatValue > 0)                                  token.hs:470

0x474D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x474F  0x44            PUSHI0
0x4750  0x24 0x34       SYSCALL0 0x34  // Int.ToFloat
0x4752  0x24 0x55       SYSCALL0 0x55  // Float.GT
0x4754  0x2E 0x0B       JZB 0x475F (+11)

                        // floatValue = floatValue + decimalValue;              token.hs:472

0x4756  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x4759  0x24 0x4E       SYSCALL0 0x4E  // Float.Add
0x475B  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:473

0x475D  0x30 0x09       JB 0x4766 (+9)

                        // floatValue = floatValue - decimalValue;              token.hs:476

0x475F  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x4762  0x24 0x4F       SYSCALL0 0x4F  // Float.Sub
0x4764  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:478

0x4766  0x28 0x02       DECSP 0x02

                        // success = true;                                      token.hs:479

0x4768  0x45            PUSHI1
0x4769  0x4C            POPLOCALB00

                        // }                                                    token.hs:480

0x476A  0x28 0x02       DECSP 0x02
0x476C  0x30 0x12       JB 0x477E (+18)

                        // if (TryParseLong(content, ref longValue))            token.hs:483

0x476E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4770  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x4772  0x2C 0x77       CALLB 0x77     // Token.TryParseLong
0x4774  0x2E 0x0A       JZB 0x477E (+10)

                        // floatValue = longValue.ToFloat();                    token.hs:485

0x4776  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4778  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x477A  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // success = true;                                      token.hs:486

0x477C  0x45            PUSHI1
0x477D  0x4C            POPLOCALB00

                        // if (success)                                         token.hs:491

0x477E  0x4E            PUSHLOCALB00
0x477F  0x2E 0x06       JZB 0x4785 (+6)

                        // returnValue = floatValue;                            token.hs:493

0x4781  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4783  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return success;                                      token.hs:495

0x4785  0x4E            PUSHLOCALB00
0x4786  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/token.hs:268
// ####  Token.IsKeyword(..)  ####                                              0x0076

0x4788  0x49            ENTER

                        // return typeKeywords.Contains(candidate) || statementKeywords.Contains(candidate);

0x4789  0x20 0x1E       PUSHGLOBALB 0x1E
0x478B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x478D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x478F  0x27 0x00       DUP 0x00
0x4791  0x2F 0x09       JNZB 0x479A (+9)
0x4793  0x20 0x20       PUSHGLOBALB 0x20
0x4795  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4797  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x4799  0x0B            BOOLOR
0x479A  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:242
// ####  Token.IsDirectiveKeyword(..)  ####                                     0x0070

0x479C  0x49            ENTER

                        // return directiveKeywords.Contains(candidate);

0x479D  0x20 0x22       PUSHGLOBALB 0x22
0x479F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x47A1  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x47A3  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:69
// ####  Token.HopperTokenToString(..)  ####                                    0x006D

0x47A5  0x49            ENTER

                        // string content;                                      token.hs:71

0x47A6  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint i;                                              token.hs:72

0x47A8  0x44            PUSHI0

                        // if (hopperTokenNames.Contains(tokenType))            token.hs:73

0x47A9  0x20 0x26       PUSHGLOBALB 0x26
0x47AB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x47AD  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x47AF  0x2E 0x0B       JZB 0x47BA (+11)

                        // content = hopperTokenNames[tokenType];               token.hs:75

0x47B1  0x20 0x26       PUSHGLOBALB 0x26
0x47B3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x47B5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x47B7  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:76

0x47B8  0x30 0x1B       JB 0x47D3 (+27)

                        // i = uint(tokenType);                                 token.hs:79

0x47BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x47BC  0x4D            POPLOCALB02

                        // content = "0x" + i.ToHexString(4);                   token.hs:80

0x47BD  0x37 0x30 0x78  PUSHIW 0x7830
0x47C0  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x47C2  0x4F            PUSHLOCALB02
0x47C3  0x1A 0x04       PUSHIB 0x04
0x47C5  0x2C 0xC8       CALLB 0xC8     // UInt.ToHexString
0x47C7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x47C9  0x5D            POPCOPYLOCALB00

                        // PrintLn("TODO : token not implemented in Token.HopperTokenToString");

0x47CA  0x37 0xC9 0x05  PUSHIW 0x05C9
0x47CD  0x1A 0x39       PUSHIB 0x39
0x47CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x47D1  0x2C 0x3A       CALLB 0x3A     // Screen.PrintLn

                        // return content;                                      token.hs:83

0x47D3  0x4E            PUSHLOCALB00
0x47D4  0x2B 0x06       RETRETB 0x06


// /source/system/color.hs:21
// ####  Color.Red_Get(..)  ####                                                0x0133

0x47D6  0x49            ENTER

                        // uint Red         { get { return 0xF00; }}            color.hs:21

0x47D7  0x37 0x00 0x0F  PUSHIW 0x0F00
0x47DA  0x4A            RET0


// /source/system/string.hs:281
// ####  String.IndexOf(..)  ####                                               0x00E5


                        // uint i;                                              string.hs:282

0x47DB  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:284

0x47DD  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x47DF  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x47E1  0x4D            POPLOCALB02

                        // for ( ; i < length; i++)                             string.hs:285

0x47E2  0x4E            PUSHLOCALB00
0x47E3  0x4F            PUSHLOCALB02
0x47E4  0x08            LT
0x47E5  0x2E 0x16       JZB 0x47FB (+22)

                        // if (this[i] == pattern)                              string.hs:287

0x47E7  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x47E9  0x4E            PUSHLOCALB00
0x47EA  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x47EC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x47EE  0x05            EQ
0x47EF  0x2E 0x08       JZB 0x47F7 (+8)

                        // index = i;                                           string.hs:289

0x47F1  0x4E            PUSHLOCALB00
0x47F2  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:290

0x47F4  0x45            PUSHI1
0x47F5  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    string.hs:292

0x47F7  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x47F9  0x30 0xE9       JB 0x47E2 (-23)

                        // return false;                                        string.hs:293

0x47FB  0x44            PUSHI0
0x47FC  0x2B 0x0A       RETRETB 0x0A
