0x0000 0x0000 // binary version number
0x0002 0x017A // offset to constant data
0x0004 0x0792 // 'main' entry point offset

0x0006 0x0002 0x0B28
0x000A 0x0001 0x0B4A
0x000E 0x0005 0x0B70
0x0012 0x0004 0x0C1B
0x0016 0x0003 0x0C5F
0x001A 0x00C4 0x0CA8
0x001E 0x0053 0x0CCD
0x0022 0x0054 0x0CF8
0x0026 0x0051 0x0D67
0x002A 0x006D 0x0DDB
0x002E 0x0070 0x0E01
0x0032 0x006E 0x0E36
0x0036 0x0071 0x0E3A
0x003A 0x00E8 0x0E4D
0x003E 0x00ED 0x0EA4
0x0042 0x00EA 0x0ED2
0x0046 0x00EC 0x0EEB
0x004A 0x0020 0x0F40
0x004E 0x001C 0x0F4E
0x0052 0x0045 0x0F5A
0x0056 0x0038 0x11D0
0x005A 0x0036 0x11D6
0x005E 0x0037 0x11DA
0x0062 0x0039 0x11DE
0x0066 0x003B 0x11E7
0x006A 0x003C 0x11EB
0x006E 0x0044 0x11F4
0x0072 0x0034 0x1846
0x0076 0x0115 0x1931
0x007A 0x0116 0x1935
0x007E 0x0117 0x193A
0x0082 0x0127 0x193F
0x0086 0x0126 0x1943
0x008A 0x0113 0x1948
0x008E 0x0114 0x194D
0x0092 0x010F 0x1952
0x0096 0x00F7 0x1957
0x009A 0x0093 0x195A
0x009E 0x009B 0x1988
0x00A2 0x008D 0x19B6
0x00A6 0x008A 0x19CE
0x00AA 0x008E 0x19E2
0x00AE 0x008C 0x1A1A
0x00B2 0x0086 0x1A36
0x00B6 0x00B7 0x1A4A
0x00BA 0x00B6 0x1A78
0x00BE 0x00BF 0x1A8E
0x00C2 0x005A 0x1AB6
0x00C6 0x005B 0x1ABE
0x00CA 0x005C 0x1B43
0x00CE 0x0077 0x1B76
0x00D2 0x007E 0x1B88
0x00D6 0x007F 0x1BAD
0x00DA 0x0072 0x1BC7
0x00DE 0x0082 0x1BCB
0x00E2 0x0080 0x1BD4
0x00E6 0x0074 0x1BDF
0x00EA 0x007B 0x1BE3
0x00EE 0x0078 0x1BEC
0x00F2 0x007D 0x1BF2
0x00F6 0x0081 0x1BFB
0x00FA 0x0083 0x1C5D
0x00FE 0x0079 0x1CFC
0x0102 0x006F 0x1DAB
0x0106 0x0049 0x1DD6
0x010A 0x0048 0x2318
0x010E 0x006B 0x2345
0x0112 0x005F 0x25BF
0x0116 0x0066 0x25C6
0x011A 0x0062 0x2682
0x011E 0x0069 0x2696
0x0122 0x006A 0x2808
0x0126 0x0065 0x288C
0x012A 0x0067 0x28AD
0x012E 0x0068 0x2930
0x0132 0x0060 0x2979
0x0136 0x0063 0x298E
0x013A 0x0064 0x2995
0x013E 0x0061 0x29AC
0x0142 0x00B5 0x2A4C
0x0146 0x00BD 0x2A57
0x014A 0x0058 0x2AA0
0x014E 0x0059 0x2AEC
0x0152 0x0056 0x2C21
0x0156 0x0057 0x2C6D
0x015A 0x0050 0x2D10
0x015E 0x004A 0x2D24
0x0162 0x0047 0x2D2D
0x0166 0x008F 0x2D5E
0x016A 0x0090 0x2D84
0x016E 0x0106 0x2D8E
0x0172 0x0098 0x2D93
0x0176 0x00B8 0x2DC6

// constant data  [1560]

0x017A  0x2D 0x5C 0x7C 0x2F 0x2D 0x5C 0x7C 0x2F  0x2D 0x69 0x68 0x65 0x78 0x2E 0x63 0x6F  -\|/-\|/-ihex.co
0x018A  0x64 0x65 0x2F 0x44 0x65 0x62 0x75 0x67  0x2F 0x4F 0x62 0x6A 0x2F 0x2E 0x68 0x65  de/Debug/Obj/.he
0x019A  0x78 0x65 0x2F 0x42 0x69 0x6E 0x2F 0x46  0x61 0x69 0x6C 0x65 0x64 0x20 0x74 0x6F  xe/Bin/Failed to
0x01AA  0x20 0x63 0x72 0x65 0x61 0x74 0x65 0x20  0x27 0x53 0x75 0x63 0x63 0x65 0x73 0x73   create 'Success
0x01BA  0x2C 0x20 0x20 0x62 0x79 0x74 0x65 0x73  0x2C 0x20 0x00 0x00 0x7A 0x44 0x49 0x6E  ,  bytes, ..zDIn
0x01CA  0x76 0x61 0x6C 0x69 0x64 0x20 0x61 0x72  0x67 0x75 0x6D 0x65 0x6E 0x74 0x73 0x20  valid arguments 
0x01DA  0x66 0x6F 0x72 0x20 0x43 0x4F 0x44 0x45  0x47 0x45 0x4E 0x3A 0x20 0x20 0x43 0x4F  for CODEGEN:  CO
0x01EA  0x44 0x45 0x47 0x45 0x4E 0x20 0x3C 0x63  0x6F 0x64 0x65 0x20 0x66 0x69 0x6C 0x65  DEGEN <code file
0x01FA  0x3E 0x20 0x20 0x20 0x20 0x2D 0x67 0x20  0x3C 0x63 0x3E 0x20 0x3C 0x72 0x3E 0x20  >    -g <c> <r> 
0x020A  0x3A 0x20 0x63 0x61 0x6C 0x6C 0x65 0x64  0x20 0x66 0x72 0x6F 0x6D 0x20 0x47 0x55  : called from GU
0x021A  0x49 0x2C 0x20 0x6E 0x6F 0x74 0x20 0x63  0x6F 0x6E 0x73 0x6F 0x6C 0x65 0x20 0x20  I, not console  
0x022A  0x20 0x20 0x2D 0x69 0x68 0x65 0x78 0x20  0x3A 0x20 0x67 0x65 0x6E 0x65 0x72 0x61    -ihex : genera
0x023A  0x74 0x65 0x20 0x61 0x6E 0x20 0x49 0x6E  0x74 0x65 0x6C 0x20 0x48 0x45 0x58 0x20  te an Intel HEX 
0x024A  0x66 0x69 0x6C 0x65 0x20 0x66 0x72 0x6F  0x6D 0x20 0x74 0x68 0x65 0x20 0x2E 0x68  file from the .h
0x025A  0x65 0x78 0x65 0x3A 0x30 0x30 0x30 0x30  0x30 0x30 0x30 0x31 0x46 0x46 0x2F 0x54  exe:00000001FF/T
0x026A  0x65 0x6D 0x70 0x2F 0x45 0x72 0x72 0x6F  0x72 0x73 0x2E 0x74 0x78 0x74 0x6D 0x65  emp/Errors.txtme
0x027A  0x74 0x68 0x6F 0x64 0x20 0x69 0x6E 0x64  0x65 0x78 0x20 0x65 0x78 0x70 0x65 0x63  thod index expec
0x028A  0x74 0x65 0x64 0x6C 0x65 0x78 0x65 0x6D  0x65 0x67 0x6C 0x6F 0x62 0x61 0x6C 0x73  tedlexemeglobals
0x029A  0x27 0x2C 0x27 0x20 0x63 0x6F 0x6D 0x6D  0x61 0x20 0x65 0x78 0x70 0x65 0x63 0x74  ',' comma expect
0x02AA  0x65 0x64 0x67 0x6C 0x6F 0x62 0x61 0x6C  0x20 0x6F 0x66 0x66 0x73 0x65 0x74 0x20  edglobal offset 
0x02BA  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x67 0x6C 0x6F 0x62 0x61 0x6C 0x20 0x6D  expectedglobal m
0x02CA  0x65 0x6D 0x62 0x65 0x72 0x20 0x6E 0x61  0x6D 0x65 0x20 0x65 0x78 0x70 0x65 0x63  ember name expec
0x02DA  0x74 0x65 0x64 0x67 0x6C 0x6F 0x62 0x61  0x6C 0x20 0x6D 0x65 0x6D 0x62 0x65 0x72  tedglobal member
0x02EA  0x20 0x76 0x61 0x6C 0x75 0x65 0x20 0x65  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x74   value expectedt
0x02FA  0x79 0x70 0x65 0x63 0x6F 0x6E 0x73 0x74  0x2E 0x6D 0x61 0x69 0x6E 0x6B 0x65 0x79  ypeconst.mainkey
0x030A  0x20 0x6E 0x61 0x6D 0x65 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x64 0x61   name expectedda
0x031A  0x74 0x61 0x6D 0x65 0x74 0x68 0x6F 0x64  0x20 0x6E 0x61 0x6D 0x65 0x20 0x65 0x78  tamethod name ex
0x032A  0x70 0x65 0x63 0x74 0x65 0x64 0x73 0x6F  0x75 0x72 0x63 0x65 0x73 0x6F 0x75 0x72  pectedsourcesour
0x033A  0x63 0x65 0x20 0x70 0x61 0x74 0x68 0x20  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  ce path expected
0x034A  0x6C 0x69 0x6E 0x65 0x6C 0x69 0x6E 0x65  0x20 0x6E 0x75 0x6D 0x62 0x65 0x72 0x20  lineline number 
0x035A  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x68 0x69 0x74 0x73 0x68 0x69 0x74 0x73  expectedhitshits
0x036A  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  0x64 0x6C 0x6F 0x63 0x61 0x6C 0x73 0x61   expectedlocalsa
0x037A  0x63 0x74 0x69 0x76 0x65 0x20 0x72 0x61  0x6E 0x67 0x65 0x20 0x65 0x78 0x70 0x65  ctive range expe
0x038A  0x63 0x74 0x65 0x64 0x6C 0x6F 0x63 0x61  0x6C 0x20 0x6D 0x65 0x6D 0x62 0x65 0x72  ctedlocal member
0x039A  0x20 0x6E 0x61 0x6D 0x65 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x6C 0x6F   name expectedlo
0x03AA  0x63 0x61 0x6C 0x20 0x6D 0x65 0x6D 0x62  0x65 0x72 0x20 0x76 0x61 0x6C 0x75 0x65  cal member value
0x03BA  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  0x64 0x42 0x50 0x20 0x6F 0x66 0x66 0x73   expectedBP offs
0x03CA  0x65 0x74 0x20 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x61 0x72 0x67 0x75 0x6D  et expectedargum
0x03DA  0x65 0x6E 0x74 0x20 0x6D 0x65 0x6D 0x62  0x65 0x72 0x20 0x6E 0x61 0x6D 0x65 0x20  ent member name 
0x03EA  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x61 0x72 0x67 0x75 0x6D 0x65 0x6E 0x74  expectedargument
0x03FA  0x20 0x6D 0x65 0x6D 0x62 0x65 0x72 0x20  0x76 0x61 0x6C 0x75 0x65 0x20 0x65 0x78   member value ex
0x040A  0x70 0x65 0x63 0x74 0x65 0x64 0x72 0x65  0x66 0x64 0x65 0x62 0x75 0x67 0x6F 0x66  pectedrefdebugof
0x041A  0x66 0x73 0x65 0x74 0x20 0x6B 0x65 0x79  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  fset key expecte
0x042A  0x64 0x6C 0x69 0x6E 0x65 0x20 0x76 0x61  0x6C 0x75 0x65 0x20 0x65 0x78 0x70 0x65  dline value expe
0x043A  0x63 0x74 0x65 0x64 0x63 0x6F 0x64 0x65  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  ctedcode expecte
0x044A  0x64 0x75 0x6E 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x20 0x6B 0x65 0x79 0x20  dunexpected key 
0x045A  0x27 0x27 0x20 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x20 0x45 0x72 0x72 0x6F  '' expected Erro
0x046A  0x72 0x20 0x61 0x74 0x20 0x65 0x6E 0x64  0x20 0x45 0x72 0x72 0x6F 0x72 0x20 0x61  r at end Error a
0x047A  0x74 0x20 0x27 0x45 0x4F 0x46 0x55 0x6E  0x64 0x65 0x66 0x69 0x6E 0x65 0x64 0x43  t 'EOFUndefinedC
0x048A  0x68 0x61 0x72 0x42 0x6F 0x6F 0x6C 0x4B  0x65 0x79 0x77 0x6F 0x72 0x64 0x44 0x69  harBoolKeywordDi
0x049A  0x72 0x65 0x63 0x74 0x69 0x76 0x65 0x49  0x64 0x65 0x6E 0x74 0x69 0x66 0x69 0x65  rectiveIdentifie
0x04AA  0x72 0x44 0x6F 0x74 0x74 0x65 0x64 0x49  0x64 0x65 0x6E 0x74 0x69 0x66 0x69 0x65  rDottedIdentifie
0x04BA  0x72 0x49 0x6E 0x74 0x65 0x67 0x65 0x72  0x46 0x6C 0x6F 0x61 0x74 0x53 0x74 0x72  rIntegerFloatStr
0x04CA  0x69 0x6E 0x67 0x43 0x6F 0x6E 0x73 0x74  0x61 0x6E 0x74 0x41 0x73 0x73 0x69 0x67  ingConstantAssig
0x04DA  0x6E 0x42 0x69 0x74 0x41 0x6E 0x64 0x42  0x69 0x74 0x4F 0x72 0x4C 0x50 0x61 0x72  nBitAndBitOrLPar
0x04EA  0x65 0x6E 0x52 0x50 0x61 0x72 0x65 0x6E  0x4C 0x42 0x72 0x61 0x63 0x65 0x52 0x42  enRParenLBraceRB
0x04FA  0x72 0x61 0x63 0x65 0x4C 0x42 0x72 0x61  0x63 0x6B 0x65 0x74 0x52 0x42 0x72 0x61  raceLBracketRBra
0x050A  0x63 0x6B 0x65 0x74 0x53 0x65 0x6D 0x69  0x43 0x6F 0x6C 0x6F 0x6E 0x43 0x6F 0x6D  cketSemiColonCom
0x051A  0x6D 0x61 0x41 0x64 0x64 0x53 0x75 0x62  0x74 0x72 0x61 0x63 0x74 0x4D 0x75 0x6C  maAddSubtractMul
0x052A  0x74 0x69 0x70 0x6C 0x79 0x44 0x69 0x76  0x69 0x64 0x65 0x4D 0x6F 0x64 0x75 0x6C  tiplyDivideModul
0x053A  0x75 0x73 0x49 0x6E 0x63 0x72 0x65 0x6D  0x65 0x6E 0x74 0x44 0x65 0x63 0x72 0x65  usIncrementDecre
0x054A  0x6D 0x65 0x6E 0x74 0x53 0x68 0x69 0x66  0x74 0x4C 0x65 0x66 0x74 0x53 0x68 0x69  mentShiftLeftShi
0x055A  0x66 0x74 0x52 0x69 0x67 0x68 0x74 0x42  0x6F 0x6F 0x6C 0x65 0x61 0x6E 0x4E 0x6F  ftRightBooleanNo
0x056A  0x74 0x42 0x6F 0x6F 0x6C 0x65 0x61 0x6E  0x4F 0x72 0x42 0x6F 0x6F 0x6C 0x65 0x61  tBooleanOrBoolea
0x057A  0x6E 0x41 0x6E 0x64 0x42 0x69 0x74 0x4E  0x6F 0x74 0x42 0x69 0x74 0x58 0x6F 0x72  nAndBitNotBitXor
0x058A  0x70 0x6F 0x72 0x74 0x6D 0x65 0x6D 0x6F  0x72 0x79 0x6D 0x65 0x6D 0x6F 0x72 0x79  portmemorymemory
0x059A  0x77 0x6F 0x72 0x64 0x61 0x72 0x72 0x61  0x79 0x62 0x6F 0x6F 0x6C 0x63 0x68 0x61  wordarrayboolcha
0x05AA  0x72 0x64 0x65 0x6C 0x65 0x67 0x61 0x74  0x65 0x64 0x69 0x63 0x74 0x69 0x6F 0x6E  rdelegatediction
0x05BA  0x61 0x72 0x79 0x64 0x69 0x72 0x65 0x63  0x74 0x6F 0x72 0x79 0x65 0x6E 0x75 0x6D  arydirectoryenum
0x05CA  0x66 0x6C 0x61 0x67 0x73 0x66 0x6C 0x6F  0x61 0x74 0x69 0x6E 0x74 0x75 0x69 0x6E  flagsfloatintuin
0x05DA  0x74 0x6C 0x69 0x73 0x74 0x6C 0x6F 0x6E  0x67 0x70 0x61 0x69 0x72 0x73 0x74 0x72  tlistlongpairstr
0x05EA  0x69 0x6E 0x67 0x76 0x61 0x72 0x69 0x61  0x6E 0x74 0x66 0x61 0x6C 0x73 0x65 0x74  ingvariantfalset
0x05FA  0x72 0x75 0x65 0x23 0x69 0x66 0x23 0x69  0x66 0x64 0x65 0x66 0x23 0x69 0x66 0x6E  rue#if#ifdef#ifn
0x060A  0x64 0x65 0x66 0x23 0x65 0x6C 0x73 0x65  0x23 0x65 0x6E 0x64 0x69 0x66 0x23 0x64  def#else#endif#d
0x061A  0x65 0x66 0x69 0x6E 0x65 0x62 0x72 0x65  0x61 0x6B 0x63 0x61 0x73 0x65 0x63 0x6F  efinebreakcaseco
0x062A  0x6E 0x74 0x69 0x6E 0x75 0x65 0x64 0x65  0x66 0x61 0x75 0x6C 0x74 0x65 0x6D 0x62  ntinuedefaultemb
0x063A  0x65 0x64 0x66 0x6F 0x72 0x65 0x61 0x63  0x68 0x67 0x65 0x74 0x6C 0x6F 0x6F 0x70  edforeachgetloop
0x064A  0x70 0x72 0x6F 0x67 0x72 0x61 0x6D 0x72  0x65 0x74 0x75 0x72 0x6E 0x73 0x77 0x69  programreturnswi
0x065A  0x74 0x63 0x68 0x73 0x79 0x73 0x74 0x65  0x6D 0x74 0x79 0x70 0x65 0x6F 0x66 0x75  tchsystemtypeofu
0x066A  0x6E 0x69 0x74 0x75 0x73 0x65 0x73 0x77  0x68 0x69 0x6C 0x65 0x54 0x4F 0x44 0x4F  nituseswhileTODO
0x067A  0x20 0x3A 0x20 0x74 0x6F 0x6B 0x65 0x6E  0x20 0x6E 0x6F 0x74 0x20 0x69 0x6D 0x70   : token not imp
0x068A  0x6C 0x65 0x6D 0x65 0x6E 0x74 0x65 0x64  0x20 0x69 0x6E 0x20 0x54 0x6F 0x6B 0x65  lemented in Toke
0x069A  0x6E 0x2E 0x47 0x65 0x74 0x54 0x79 0x70  0x65 0x75 0x6E 0x65 0x78 0x70 0x65 0x63  n.GetTypeunexpec
0x06AA  0x74 0x65 0x64 0x20 0x63 0x68 0x61 0x72  0x61 0x63 0x74 0x65 0x72 0x3A 0x20 0x27  ted character: '
0x06BA  0x27 0x20 0x28 0x30 0x78 0x69 0x6E 0x76  0x61 0x6C 0x69 0x64 0x20 0x68 0x65 0x78  ' (0xinvalid hex
0x06CA  0x20 0x69 0x6E 0x74 0x65 0x67 0x65 0x72  0x20 0x6C 0x69 0x74 0x65 0x72 0x61 0x6C   integer literal
0x06DA  0x69 0x6E 0x76 0x61 0x6C 0x69 0x64 0x20  0x62 0x69 0x6E 0x61 0x72 0x79 0x20 0x69  invalid binary i
0x06EA  0x6E 0x74 0x65 0x67 0x65 0x72 0x20 0x6C  0x69 0x74 0x65 0x72 0x61 0x6C 0x69 0x6E  nteger literalin
0x06FA  0x76 0x61 0x6C 0x69 0x64 0x20 0x66 0x6C  0x6F 0x61 0x74 0x20 0x6C 0x69 0x74 0x65  valid float lite
0x070A  0x72 0x61 0x6C 0x69 0x6E 0x76 0x61 0x6C  0x69 0x64 0x20 0x69 0x6E 0x74 0x65 0x67  ralinvalid integ
0x071A  0x65 0x72 0x20 0x6C 0x69 0x74 0x65 0x72  0x61 0x6C 0x75 0x6E 0x65 0x78 0x70 0x65  er literalunexpe
0x072A  0x63 0x74 0x65 0x64 0x20 0x45 0x4F 0x4C  0x20 0x69 0x6E 0x20 0x73 0x74 0x72 0x69  cted EOL in stri
0x073A  0x6E 0x67 0x75 0x6E 0x74 0x65 0x72 0x6D  0x69 0x6E 0x61 0x74 0x65 0x64 0x20 0x73  ngunterminated s
0x074A  0x74 0x72 0x69 0x6E 0x67 0x3A 0x20 0x27  0x70 0x6F 0x73 0x00 0x00 0x20 0x41 0x54  tring: 'pos.. AT
0x075A  0x4F 0x44 0x4F 0x20 0x3A 0x20 0x74 0x6F  0x6B 0x65 0x6E 0x20 0x6E 0x6F 0x74 0x20  ODO : token not 
0x076A  0x69 0x6D 0x70 0x6C 0x65 0x6D 0x65 0x6E  0x74 0x65 0x64 0x20 0x69 0x6E 0x20 0x54  implemented in T
0x077A  0x6F 0x6B 0x65 0x6E 0x2E 0x48 0x6F 0x70  0x70 0x65 0x72 0x54 0x6F 0x6B 0x65 0x6E  oken.HopperToken
0x078A  0x54 0x6F 0x53 0x74 0x72 0x69 0x6E 0x67                                           ToString


// CODEGEN.hs:113
// ####  CODEGEN.main(..)  ####                                                 0x0000

0x0792  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0794  0x44            PUSHI0
0x0795  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0797  0x1F 0x00       POPGLOBALB 0x00
0x0799  0x44            PUSHI0
0x079A  0x1A 0x04       PUSHIB 0x04
0x079C  0x1A 0x19       PUSHIB 0x19
0x079E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07A0  0x1A 0x04       PUSHIB 0x04
0x07A2  0x1A 0x04       PUSHIB 0x04
0x07A4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07A6  0x1A 0x04       PUSHIB 0x04
0x07A8  0x1A 0x04       PUSHIB 0x04
0x07AA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07AC  0x1A 0x04       PUSHIB 0x04
0x07AE  0x1A 0x0F       PUSHIB 0x0F
0x07B0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07B2  0x1A 0x03       PUSHIB 0x03
0x07B4  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x07B6  0x1A 0x0F       PUSHIB 0x0F
0x07B8  0x1A 0x13       PUSHIB 0x13
0x07BA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07BC  0x1A 0x0F       PUSHIB 0x0F
0x07BE  0x1A 0x13       PUSHIB 0x13
0x07C0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07C2  0x1A 0x04       PUSHIB 0x04
0x07C4  0x1A 0x0F       PUSHIB 0x0F
0x07C6  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07C8  0x24 0x02       SYSCALL0 0x02  // String.New
0x07CA  0x1A 0x0F       PUSHIB 0x0F
0x07CC  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x07CE  0x1A 0x0F       PUSHIB 0x0F
0x07D0  0x1A 0x06       PUSHIB 0x06
0x07D2  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07D4  0x1A 0x0F       PUSHIB 0x0F
0x07D6  0x1A 0x06       PUSHIB 0x06
0x07D8  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07DA  0x1A 0x0F       PUSHIB 0x0F
0x07DC  0x1A 0x06       PUSHIB 0x06
0x07DE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07E0  0x1A 0x0F       PUSHIB 0x0F
0x07E2  0x1A 0x06       PUSHIB 0x06
0x07E4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07E6  0x1A 0x0F       PUSHIB 0x0F
0x07E8  0x1A 0x06       PUSHIB 0x06
0x07EA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07EC  0x1A 0x0F       PUSHIB 0x0F
0x07EE  0x1A 0x07       PUSHIB 0x07
0x07F0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07F2  0x1A 0x07       PUSHIB 0x07
0x07F4  0x1A 0x0F       PUSHIB 0x0F
0x07F6  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x07F8  0x1A 0x0F       PUSHIB 0x0F
0x07FA  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x07FC  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x07FE  0x44            PUSHI0
0x07FF  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0801  0x44            PUSHI0
0x0802  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0804  0x24 0x02       SYSCALL0 0x02  // String.New
0x0806  0x44            PUSHI0
0x0807  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0809  0x44            PUSHI0
0x080A  0x44            PUSHI0
0x080B  0x1A 0x0F       PUSHIB 0x0F
0x080D  0x1A 0x0F       PUSHIB 0x0F
0x080F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0811  0x44            PUSHI0
0x0812  0x44            PUSHI0
0x0813  0x1F 0x3E       POPGLOBALB 0x3E
0x0815  0x1A 0x0F       PUSHIB 0x0F
0x0817  0x1A 0x0F       PUSHIB 0x0F
0x0819  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x081B  0x1A 0x0F       PUSHIB 0x0F
0x081D  0x1A 0x0F       PUSHIB 0x0F
0x081F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0821  0x44            PUSHI0
0x0822  0x44            PUSHI0
0x0823  0x24 0x02       SYSCALL0 0x02  // String.New
0x0825  0x44            PUSHI0
0x0826  0x1A 0x08       PUSHIB 0x08
0x0828  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x082A  0x1F 0x48       POPGLOBALB 0x48
0x082C  0x24 0x60       SYSCALL0 0x60  // File.New
0x082E  0x44            PUSHI0
0x082F  0x44            PUSHI0
0x0830  0x44            PUSHI0

                        // bool doIHex = false;                                 CODEGEN.hs:116

0x0831  0x5F 0x01       ENTERB 0x01

                        // <string> rawArgs = System.Arguments;                 CODEGEN.hs:117

0x0833  0x1A 0x0F       PUSHIB 0x0F
0x0835  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0837  0x24 0x59       SYSCALL0 0x59  // System.Arguments_Get
0x0839  0x5E            POPCOPYLOCALB02

                        // <string> args;                                       CODEGEN.hs:118

0x083A  0x1A 0x0F       PUSHIB 0x0F
0x083C  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // for (uint iArg = 0; iArg < rawArgs.Length; iArg++)

0x083E  0x44            PUSHI0
0x083F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0841  0x4F            PUSHLOCALB02
0x0842  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0844  0x08            LT
0x0845  0x31 0x87 0x00  JZW 0x08CC (+135)

                        // string arg = rawArgs[iArg];                          CODEGEN.hs:121

0x0848  0x24 0x02       SYSCALL0 0x02  // String.New
0x084A  0x4F            PUSHLOCALB02
0x084B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x084D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x084F  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if ((arg.Length >= 2) && (arg[0] == '-'))            CODEGEN.hs:122

0x0851  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0853  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0855  0x1A 0x02       PUSHIB 0x02
0x0857  0x09            GE
0x0858  0x27 0x00       DUP 0x00
0x085A  0x2E 0x0B       JZB 0x0865 (+11)
0x085C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x085E  0x44            PUSHI0
0x085F  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0861  0x1A 0x2D       PUSHIB 0x2D
0x0863  0x05            EQ
0x0864  0x0C            BOOLAND
0x0865  0x2E 0x5B       JZB 0x08C0 (+91)

                        // arg = arg.ToLower();                                 CODEGEN.hs:124

0x0867  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0869  0x2C 0xC4       CALLB 0xC4     // String.ToLower
0x086B  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // switch (arg)                                         CODEGEN.hs:125

0x086D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)

                        // case "-g":                                           CODEGEN.hs:127

0x086F  0x37 0x2D 0x67  PUSHIW 0x672D
0x0872  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0874  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0876  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x0878  0x2F 0x2C       JNZB 0x08A4 (+44)

                        // uint col;                                            CODEGEN.hs:129

0x087A  0x44            PUSHI0

                        // uint row;                                            CODEGEN.hs:130

0x087B  0x44            PUSHI0

                        // iArg++;                                              CODEGEN.hs:131

0x087C  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // if (TryParseUInt(rawArgs[iArg], ref col))            CODEGEN.hs:132

0x087E  0x4F            PUSHLOCALB02
0x087F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0881  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0883  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x0885  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x0887  0x2E 0x02       JZB 0x0889 (+2)

                        // iArg++;                                              CODEGEN.hs:135

0x0889  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // if (TryParseUInt(rawArgs[iArg], ref row))            CODEGEN.hs:136

0x088B  0x4F            PUSHLOCALB02
0x088C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x088E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0890  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x0892  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x0894  0x2E 0x02       JZB 0x0896 (+2)

                        // Parser.SetInteractive(byte(col), byte(row));

0x0896  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x0898  0x51 0x03       CAST 0x03
0x089A  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x089C  0x51 0x03       CAST 0x03
0x089E  0x2C 0x6D       CALLB 0x6D     // Parser.SetInteractive

                        // }                                                    CODEGEN.hs:140

0x08A0  0x28 0x04       DECSP 0x04
0x08A2  0x30 0x1A       JB 0x08BC (+26)

                        // case "-ihex":                                        CODEGEN.hs:141

0x08A4  0x1A 0x08       PUSHIB 0x08
0x08A6  0x1A 0x05       PUSHIB 0x05
0x08A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x08AA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x08AC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x08AE  0x2F 0x06       JNZB 0x08B4 (+6)

                        // doIHex = true;                                       CODEGEN.hs:143

0x08B0  0x45            PUSHI1
0x08B1  0x4C            POPLOCALB00

                        // }                                                    CODEGEN.hs:144

0x08B2  0x30 0x0A       JB 0x08BC (+10)

                        // args.Clear();                                        CODEGEN.hs:147

0x08B4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x08B6  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // break;                                               CODEGEN.hs:148

0x08B8  0x28 0x06       DECSP 0x06
0x08BA  0x30 0x14       JB 0x08CE (+20)

                        // }                                                    CODEGEN.hs:150

0x08BC  0x28 0x02       DECSP 0x02

                        // }                                                    CODEGEN.hs:151

0x08BE  0x30 0x07       JB 0x08C5 (+7)

                        // args.Append(arg);                                    CODEGEN.hs:154

0x08C0  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x08C3  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    CODEGEN.hs:156

0x08C5  0x28 0x02       DECSP 0x02
0x08C7  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x08C9  0x33 0x76 0xFF  JW 0x083F (-138)
0x08CC  0x28 0x02       DECSP 0x02

                        // if (args.Length != 1)                                CODEGEN.hs:158

0x08CE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x08D0  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x08D2  0x45            PUSHI1
0x08D3  0x06            NE
0x08D4  0x2E 0x08       JZB 0x08DC (+8)

                        // BadArguments();                                      CODEGEN.hs:160

0x08D6  0x2C 0x02       CALLB 0x02     // CODEGEN.BadArguments

                        // break;                                               CODEGEN.hs:161

0x08D8  0x28 0x06       DECSP 0x06
0x08DA  0x2A 0x52       RETB 0x52

                        // string ext = ".code";                                CODEGEN.hs:163

0x08DC  0x24 0x02       SYSCALL0 0x02  // String.New
0x08DE  0x1A 0x0D       PUSHIB 0x0D
0x08E0  0x1A 0x05       PUSHIB 0x05
0x08E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x08E4  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string codePath = args[0];                           CODEGEN.hs:164

0x08E6  0x24 0x02       SYSCALL0 0x02  // String.New
0x08E8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x08EA  0x44            PUSHI0
0x08EB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x08ED  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (!File.Exists(ref codePath, ref ext, "/Debug/Obj/"))

0x08EF  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x08F1  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x08F3  0x1A 0x12       PUSHIB 0x12
0x08F5  0x1A 0x0B       PUSHIB 0x0B
0x08F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x08F9  0x2C 0xE8       CALLB 0xE8     // File.Exists
0x08FB  0x2F 0x04       JNZB 0x08FF (+4)

                        // BadArguments();                                      CODEGEN.hs:167

0x08FD  0x2C 0x02       CALLB 0x02     // CODEGEN.BadArguments

                        // long startTime = Millis;                             CODEGEN.hs:170

0x08FF  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0901  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x0903  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string extension = Path.GetExtension(codePath);

0x0905  0x24 0x02       SYSCALL0 0x02  // String.New
0x0907  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0909  0x2C 0xED       CALLB 0xED     // Path.GetExtension
0x090B  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string hexePath  = codePath.Replace(extension, ".hexe");

0x090D  0x24 0x02       SYSCALL0 0x02  // String.New
0x090F  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x0912  0x1A 0x1D       PUSHIB 0x1D
0x0914  0x1A 0x05       PUSHIB 0x05
0x0916  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0918  0x24 0x09       SYSCALL0 0x09  // String.Replace
0x091A  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // hexePath = Path.GetFileName(hexePath);               CODEGEN.hs:177

0x091C  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x091E  0x2C 0xEA       CALLB 0xEA     // Path.GetFileName
0x0920  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // hexePath = Path.Combine("/Bin/", hexePath);

0x0922  0x1A 0x22       PUSHIB 0x22
0x0924  0x1A 0x05       PUSHIB 0x05
0x0926  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0928  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x092A  0x2C 0xEC       CALLB 0xEC     // Path.Combine
0x092C  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // File.Delete(hexePath);                               CODEGEN.hs:179

0x092E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0930  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // file hexeFile = File.Create(hexePath);               CODEGEN.hs:181

0x0932  0x24 0x60       SYSCALL0 0x60  // File.New
0x0934  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0936  0x24 0x62       SYSCALL0 0x62  // File.Create
0x0938  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (!hexeFile.IsValid())                             CODEGEN.hs:182

0x093A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x093C  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x093E  0x2F 0x19       JNZB 0x0957 (+25)

                        // PrintLn("Failed to create '" + hexePath + "'");

0x0940  0x1A 0x27       PUSHIB 0x27
0x0942  0x1A 0x12       PUSHIB 0x12
0x0944  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0946  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0948  0x24 0x03       SYSCALL0 0x03  // String.Append
0x094A  0x1A 0x27       PUSHIB 0x27
0x094C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x094E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0950  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // break;                                               CODEGEN.hs:185

0x0952  0x28 0x06       DECSP 0x06
0x0954  0x33 0xD0 0x01  JW 0x0B24 (+464)

                        // if (!ParseCode(codePath, true, false, false))

0x0957  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0959  0x45            PUSHI1
0x095A  0x44            PUSHI0
0x095B  0x44            PUSHI0
0x095C  0x2C 0x45       CALLB 0x45     // Code.ParseCode
0x095E  0x2F 0x07       JNZB 0x0965 (+7)

                        // break;                                               CODEGEN.hs:190

0x0960  0x28 0x06       DECSP 0x06
0x0962  0x33 0xC2 0x01  JW 0x0B24 (+450)

                        // hexeFile.Append(byte(0));                            CODEGEN.hs:195

0x0965  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0967  0x44            PUSHI0
0x0968  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // hexeFile.Append(byte(0));                            CODEGEN.hs:196

0x096A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x096C  0x44            PUSHI0
0x096D  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // uint methodCount = Code.GetMethodCount();            CODEGEN.hs:199

0x096F  0x44            PUSHI0
0x0970  0x2C 0x38       CALLB 0x38     // Code.GetMethodCount
0x0972  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // uint tableSize = ((methodCount-1) * 4);              CODEGEN.hs:200

0x0974  0x44            PUSHI0
0x0975  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x0977  0x45            PUSHI1
0x0978  0x01            SUB
0x0979  0x1A 0x04       PUSHIB 0x04
0x097B  0x03            MUL
0x097C  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // uint constOffset = tableSize+6;                      CODEGEN.hs:202

0x097E  0x44            PUSHI0
0x097F  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x0981  0x1A 0x06       PUSHIB 0x06
0x0983  0x00            ADD
0x0984  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // uint lsb = (constOffset & 0xFF);                     CODEGEN.hs:203

0x0986  0x44            PUSHI0
0x0987  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x0989  0x1A 0xFF       PUSHIB 0xFF
0x098B  0x0E            BITAND
0x098C  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // uint msb = (constOffset >> 8);                       CODEGEN.hs:204

0x098E  0x44            PUSHI0
0x098F  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x0991  0x1A 0x08       PUSHIB 0x08
0x0993  0x10            BITSHR
0x0994  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // hexeFile.Append(byte(lsb));                          CODEGEN.hs:207

0x0996  0x56 0x10 0x18  PUSHLOCALBB 0x1810
0x0999  0x51 0x03       CAST 0x03
0x099B  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // hexeFile.Append(byte(msb));                          CODEGEN.hs:208

0x099D  0x56 0x10 0x1A  PUSHLOCALBB 0x1A10
0x09A0  0x51 0x03       CAST 0x03
0x09A2  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // <byte> constantData = Code.GetConstantData();

0x09A4  0x1A 0x03       PUSHIB 0x03
0x09A6  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x09A8  0x2C 0x36       CALLB 0x36     // Code.GetConstantData
0x09AA  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // uint mainOffset = constOffset + constantData.Length;

0x09AC  0x44            PUSHI0
0x09AD  0x56 0x16 0x1C  PUSHLOCALBB 0x1C16
0x09B0  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x09B2  0x00            ADD
0x09B3  0x1B 0x1E       POPLOCALB 0x1E (BP+30)

                        // lsb = (mainOffset & 0xFF);                           CODEGEN.hs:214

0x09B5  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x09B7  0x1A 0xFF       PUSHIB 0xFF
0x09B9  0x0E            BITAND
0x09BA  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // msb = (mainOffset >> 8);                             CODEGEN.hs:215

0x09BC  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x09BE  0x1A 0x08       PUSHIB 0x08
0x09C0  0x10            BITSHR
0x09C1  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // hexeFile.Append(byte(lsb));                          CODEGEN.hs:218

0x09C3  0x56 0x10 0x18  PUSHLOCALBB 0x1810
0x09C6  0x51 0x03       CAST 0x03
0x09C8  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // hexeFile.Append(byte(msb));                          CODEGEN.hs:219

0x09CA  0x56 0x10 0x1A  PUSHLOCALBB 0x1A10
0x09CD  0x51 0x03       CAST 0x03
0x09CF  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // uint entryIndex = Code.GetEntryIndex();              CODEGEN.hs:221

0x09D1  0x44            PUSHI0
0x09D2  0x2C 0x37       CALLB 0x37     // Code.GetEntryIndex
0x09D4  0x1B 0x20       POPLOCALB 0x20 (BP+32)

                        // uint offset = mainOffset + Code.GetMethodSize(entryIndex);

0x09D6  0x44            PUSHI0
0x09D7  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0x09DA  0x2C 0x39       CALLB 0x39     // Code.GetMethodSize
0x09DC  0x00            ADD
0x09DD  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // <uint, uint> methodSizes = Code.GetMethodSizes();

0x09DF  0x1A 0x04       PUSHIB 0x04
0x09E1  0x1A 0x04       PUSHIB 0x04
0x09E3  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x09E5  0x2C 0x3B       CALLB 0x3B     // Code.GetMethodSizes
0x09E7  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // foreach (var sz in methodSizes)                      CODEGEN.hs:225

0x09E9  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x09EB  0x1A 0x04       PUSHIB 0x04
0x09ED  0x1A 0x04       PUSHIB 0x04
0x09EF  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x09F1  0x44            PUSHI0
0x09F2  0x56 0x26 0x2A  PUSHLOCALBB 0x2A26
0x09F5  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x09F7  0x1B 0x2A       POPLOCALB 0x2A (BP+42)
0x09F9  0x1B 0x28       POPLOCALB 0x28 (BP+40)
0x09FB  0x2E 0x57       JZB 0x0A52 (+87)

                        // uint index = sz.key;                                 CODEGEN.hs:227

0x09FD  0x44            PUSHI0
0x09FE  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0x0A00  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x0A02  0x1B 0x2C       POPLOCALB 0x2C (BP+44)

                        // if (index == entryIndex)                             CODEGEN.hs:228

0x0A04  0x56 0x2C 0x20  PUSHLOCALBB 0x202C
0x0A07  0x05            EQ
0x0A08  0x2E 0x06       JZB 0x0A0E (+6)

                        // continue;                                            CODEGEN.hs:230

0x0A0A  0x28 0x02       DECSP 0x02
0x0A0C  0x30 0xE6       JB 0x09F2 (-26)

                        // lsb = (index & 0xFF);                                CODEGEN.hs:233

0x0A0E  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x0A10  0x1A 0xFF       PUSHIB 0xFF
0x0A12  0x0E            BITAND
0x0A13  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // msb = (index >> 8);                                  CODEGEN.hs:234

0x0A15  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x0A17  0x1A 0x08       PUSHIB 0x08
0x0A19  0x10            BITSHR
0x0A1A  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // hexeFile.Append(byte(lsb));                          CODEGEN.hs:235

0x0A1C  0x56 0x10 0x18  PUSHLOCALBB 0x1810
0x0A1F  0x51 0x03       CAST 0x03
0x0A21  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // hexeFile.Append(byte(msb));                          CODEGEN.hs:236

0x0A23  0x56 0x10 0x1A  PUSHLOCALBB 0x1A10
0x0A26  0x51 0x03       CAST 0x03
0x0A28  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // lsb = (offset & 0xFF);                               CODEGEN.hs:238

0x0A2A  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0A2C  0x1A 0xFF       PUSHIB 0xFF
0x0A2E  0x0E            BITAND
0x0A2F  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // msb = (offset >> 8);                                 CODEGEN.hs:239

0x0A31  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x0A33  0x1A 0x08       PUSHIB 0x08
0x0A35  0x10            BITSHR
0x0A36  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // hexeFile.Append(byte(lsb));                          CODEGEN.hs:240

0x0A38  0x56 0x10 0x18  PUSHLOCALBB 0x1810
0x0A3B  0x51 0x03       CAST 0x03
0x0A3D  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // hexeFile.Append(byte(msb));                          CODEGEN.hs:241

0x0A3F  0x56 0x10 0x1A  PUSHLOCALBB 0x1A10
0x0A42  0x51 0x03       CAST 0x03
0x0A44  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // offset = offset + sz.value;                          CODEGEN.hs:243

0x0A46  0x56 0x22 0x28  PUSHLOCALBB 0x2822
0x0A49  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x0A4B  0x00            ADD
0x0A4C  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // }                                                    CODEGEN.hs:244

0x0A4E  0x28 0x02       DECSP 0x02
0x0A50  0x30 0xA2       JB 0x09F2 (-94)
0x0A52  0x28 0x06       DECSP 0x06

                        // Parser.ProgressTick(".");                            CODEGEN.hs:245

0x0A54  0x1A 0x2E       PUSHIB 0x2E
0x0A56  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0A58  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // WriteCode(hexeFile, constantData);                   CODEGEN.hs:248

0x0A5A  0x56 0x10 0x1C  PUSHLOCALBB 0x1C10
0x0A5D  0x2C 0x01       CALLB 0x01     // CODEGEN.WriteCode

                        // Parser.ProgressTick(".");                            CODEGEN.hs:249

0x0A5F  0x1A 0x2E       PUSHIB 0x2E
0x0A61  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0A63  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // <byte> methodCode = Code.GetMethodCode(entryIndex);

0x0A65  0x1A 0x03       PUSHIB 0x03
0x0A67  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x0A69  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x0A6B  0x2C 0x3C       CALLB 0x3C     // Code.GetMethodCode
0x0A6D  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // WriteCode(hexeFile, methodCode);                     CODEGEN.hs:251

0x0A6F  0x56 0x10 0x26  PUSHLOCALBB 0x2610
0x0A72  0x2C 0x01       CALLB 0x01     // CODEGEN.WriteCode

                        // Parser.ProgressTick(".");                            CODEGEN.hs:252

0x0A74  0x1A 0x2E       PUSHIB 0x2E
0x0A76  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0A78  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // foreach (var sz in methodSizes)                      CODEGEN.hs:253

0x0A7A  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x0A7C  0x1A 0x04       PUSHIB 0x04
0x0A7E  0x1A 0x04       PUSHIB 0x04
0x0A80  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x0A82  0x44            PUSHI0
0x0A83  0x56 0x28 0x2C  PUSHLOCALBB 0x2C28
0x0A86  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x0A88  0x1B 0x2C       POPLOCALB 0x2C (BP+44)
0x0A8A  0x1B 0x2A       POPLOCALB 0x2A (BP+42)
0x0A8C  0x2E 0x28       JZB 0x0AB4 (+40)

                        // uint index = sz.key;                                 CODEGEN.hs:255

0x0A8E  0x44            PUSHI0
0x0A8F  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0A91  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x0A93  0x1B 0x2E       POPLOCALB 0x2E (BP+46)

                        // if (index == entryIndex)                             CODEGEN.hs:256

0x0A95  0x56 0x2E 0x20  PUSHLOCALBB 0x202E
0x0A98  0x05            EQ
0x0A99  0x2E 0x06       JZB 0x0A9F (+6)

                        // continue;                                            CODEGEN.hs:258

0x0A9B  0x28 0x02       DECSP 0x02
0x0A9D  0x30 0xE6       JB 0x0A83 (-26)

                        // methodCode = Code.GetMethodCode(index);              CODEGEN.hs:260

0x0A9F  0x1C 0x2E       PUSHLOCALB 0x2E (BP+46)
0x0AA1  0x2C 0x3C       CALLB 0x3C     // Code.GetMethodCode
0x0AA3  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // WriteCode(hexeFile, methodCode);                     CODEGEN.hs:261

0x0AA5  0x56 0x10 0x26  PUSHLOCALBB 0x2610
0x0AA8  0x2C 0x01       CALLB 0x01     // CODEGEN.WriteCode

                        // Parser.ProgressTick(".");                            CODEGEN.hs:262

0x0AAA  0x1A 0x2E       PUSHIB 0x2E
0x0AAC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0AAE  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // }                                                    CODEGEN.hs:263

0x0AB0  0x28 0x02       DECSP 0x02
0x0AB2  0x30 0xD1       JB 0x0A83 (-47)
0x0AB4  0x28 0x06       DECSP 0x06

                        // hexeFile.Flush();                                    CODEGEN.hs:265

0x0AB6  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0AB8  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // if (doIHex)                                          CODEGEN.hs:267

0x0ABA  0x4E            PUSHLOCALB00
0x0ABB  0x2E 0x06       JZB 0x0AC1 (+6)

                        // ConvertToIHex(hexePath);                             CODEGEN.hs:269

0x0ABD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0ABF  0x2C 0x05       CALLB 0x05     // CODEGEN.ConvertToIHex

                        // if (!Parser.IsInteractive())                         CODEGEN.hs:272

0x0AC1  0x2C 0x6E       CALLB 0x6E     // Parser.IsInteractive
0x0AC3  0x2F 0x5D       JNZB 0x0B20 (+93)

                        // codeSize = File.GetSize(hexePath);                   CODEGEN.hs:274

0x0AC5  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0AC7  0x24 0x69       SYSCALL0 0x69  // File.GetSize
0x0AC9  0x59 0x00       POPCOPYGLOBALB 0x00

                        // PrintLn();                                           CODEGEN.hs:275

0x0ACB  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // Print("Success, " + codeSize.ToString() + " bytes, ", Color.ProgressText, Color.ProgressFace);

0x0ACD  0x1A 0x39       PUSHIB 0x39
0x0ACF  0x1A 0x09       PUSHIB 0x09
0x0AD1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0AD3  0x20 0x00       PUSHGLOBALB 0x00
0x0AD5  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x0AD7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0AD9  0x1A 0x42       PUSHIB 0x42
0x0ADB  0x1A 0x08       PUSHIB 0x08
0x0ADD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0ADF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0AE1  0x34 0x15 0x01  CALLW 0x0115   // Color.ProgressText_Get
0x0AE4  0x34 0x16 0x01  CALLW 0x0116   // Color.ProgressFace_Get
0x0AE7  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // long elapsedTime = Millis - startTime;               CODEGEN.hs:277

0x0AE9  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x0AEB  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x0AED  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x0AEF  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x0AF1  0x57 0x28       POPCOPYLOCALB 0x28 (BP+40)

                        // float seconds = elapsedTime / 1000.0;                CODEGEN.hs:278

0x0AF3  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x0AF5  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0x0AF7  0x1A 0x4A       PUSHIB 0x4A
0x0AF9  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0x0AFB  0x43            SWAP
0x0AFC  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x0AFE  0x43            SWAP
0x0AFF  0x24 0x50       SYSCALL0 0x50  // Float.Div
0x0B01  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // PrintLn("  " + seconds.ToString() +"s", Color.ProgressHighlight, Color.ProgressFace);

0x0B03  0x37 0x20 0x20  PUSHIW 0x2020
0x0B06  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0B08  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x0B0A  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x0B0C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0B0E  0x1A 0x73       PUSHIB 0x73
0x0B10  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0B12  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0B14  0x34 0x17 0x01  CALLW 0x0117   // Color.ProgressHighlight_Get
0x0B17  0x34 0x16 0x01  CALLW 0x0116   // Color.ProgressFace_Get
0x0B1A  0x2C 0x1C       CALLB 0x1C     // Screen.PrintLn

                        // }                                                    CODEGEN.hs:280

0x0B1C  0x28 0x04       DECSP 0x04
0x0B1E  0x30 0x04       JB 0x0B22 (+4)

                        // Parser.ProgressDone();                               CODEGEN.hs:283

0x0B20  0x2C 0x71       CALLB 0x71     // Parser.ProgressDone

                        // break;                                               CODEGEN.hs:285

0x0B22  0x28 0x1C       DECSP 0x1C

                        // break;                                               CODEGEN.hs:287

0x0B24  0x28 0x0C       DECSP 0x0C
0x0B26  0x2A 0x52       RETB 0x52


// CODEGEN.hs:27
// ####  CODEGEN.BadArguments(..)  ####                                         0x0002

0x0B28  0x49            ENTER

                        // PrintLn("Invalid arguments for CODEGEN:");           CODEGEN.hs:28

0x0B29  0x1A 0x4E       PUSHIB 0x4E
0x0B2B  0x1A 0x1E       PUSHIB 0x1E
0x0B2D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0B2F  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // PrintLn("  CODEGEN <code file>");                    CODEGEN.hs:29

0x0B31  0x1A 0x6C       PUSHIB 0x6C
0x0B33  0x1A 0x15       PUSHIB 0x15
0x0B35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0B37  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // PrintLn("    -g <c> <r> : called from GUI, not console");

0x0B39  0x1A 0x81       PUSHIB 0x81
0x0B3B  0x1A 0x2D       PUSHIB 0x2D
0x0B3D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0B3F  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // PrintLn("    -ihex : generate an Intel HEX file from the .hexe");

0x0B41  0x1A 0xAE       PUSHIB 0xAE
0x0B43  0x1A 0x35       PUSHIB 0x35
0x0B45  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0B47  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // }                                                    CODEGEN.hs:32

0x0B49  0x4A            RET0


// CODEGEN.hs:18
// ####  CODEGEN.WriteCode(..)  ####                                            0x0001

0x0B4A  0x49            ENTER

                        // foreach (var b in code)                              CODEGEN.hs:19

0x0B4B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0B4D  0x44            PUSHI0
0x0B4E  0x44            PUSHI0
0x0B4F  0x4E            PUSHLOCALB00
0x0B50  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x0B52  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0B54  0x05            EQ
0x0B55  0x2F 0x17       JNZB 0x0B6C (+23)
0x0B57  0x4E            PUSHLOCALB00
0x0B58  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0B5A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x0B5C  0x4D            POPLOCALB02

                        // byte c = b;                                          CODEGEN.hs:21

0x0B5D  0x44            PUSHI0
0x0B5E  0x4F            PUSHLOCALB02
0x0B5F  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // hexeFile.Append(c);                                  CODEGEN.hs:22

0x0B61  0x56 0xFC 0x06  PUSHLOCALBB 0x06FC
0x0B64  0x24 0x66       SYSCALL0 0x66  // File.Append

                        // }                                                    CODEGEN.hs:23

0x0B66  0x28 0x02       DECSP 0x02
0x0B68  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x0B6A  0x30 0xE5       JB 0x0B4F (-27)
0x0B6C  0x28 0x06       DECSP 0x06

                        // }                                                    CODEGEN.hs:24

0x0B6E  0x2A 0x04       RETB 0x04


// CODEGEN.hs:62
// ####  CODEGEN.ConvertToIHex(..)  ####                                        0x0005

0x0B70  0x49            ENTER

                        // string extension = Path.GetExtension(hexePath);

0x0B71  0x24 0x02       SYSCALL0 0x02  // String.New
0x0B73  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0B75  0x2C 0xED       CALLB 0xED     // Path.GetExtension
0x0B77  0x5D            POPCOPYLOCALB00

                        // string ihexPath = hexePath.Replace(extension, ".hex");

0x0B78  0x24 0x02       SYSCALL0 0x02  // String.New
0x0B7A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0B7C  0x4E            PUSHLOCALB00
0x0B7D  0x1A 0x1D       PUSHIB 0x1D
0x0B7F  0x1A 0x04       PUSHIB 0x04
0x0B81  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0B83  0x24 0x09       SYSCALL0 0x09  // String.Replace
0x0B85  0x5E            POPCOPYLOCALB02

                        // if (File.Exists(ihexPath))                           CODEGEN.hs:67

0x0B86  0x4F            PUSHLOCALB02
0x0B87  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x0B89  0x2E 0x05       JZB 0x0B8E (+5)

                        // File.Delete(ihexPath);                               CODEGEN.hs:69

0x0B8B  0x4F            PUSHLOCALB02
0x0B8C  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // File.Delete(ihexPath);                               CODEGEN.hs:72

0x0B8E  0x4F            PUSHLOCALB02
0x0B8F  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // file ihexFile = File.Create(ihexPath);               CODEGEN.hs:73

0x0B91  0x24 0x60       SYSCALL0 0x60  // File.New
0x0B93  0x4F            PUSHLOCALB02
0x0B94  0x24 0x62       SYSCALL0 0x62  // File.Create
0x0B96  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // file binFile = File.Open(hexePath);                  CODEGEN.hs:74

0x0B98  0x24 0x60       SYSCALL0 0x60  // File.New
0x0B9A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0B9C  0x24 0x61       SYSCALL0 0x61  // File.Open
0x0B9E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint byteCount = 0;                                  CODEGEN.hs:75

0x0BA0  0x44            PUSHI0

                        // byte currentTick = 0;                                CODEGEN.hs:77

0x0BA1  0x44            PUSHI0

                        // string progressTicks = "-\\|/-\\|/";                 CODEGEN.hs:78

0x0BA2  0x24 0x02       SYSCALL0 0x02  // String.New
0x0BA4  0x44            PUSHI0
0x0BA5  0x1A 0x08       PUSHIB 0x08
0x0BA7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0BA9  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string buffer;                                       CODEGEN.hs:80

0x0BAB  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint emitAddress = 0x0000;                           CODEGEN.hs:81

0x0BAD  0x44            PUSHI0

                        // byte cb = binFile.Read();                            CODEGEN.hs:84

0x0BAE  0x44            PUSHI0
0x0BAF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0BB1  0x24 0x64       SYSCALL0 0x64  // File.Read
0x0BB3  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // if (!binFile.IsValid())                              CODEGEN.hs:86

0x0BB5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0BB7  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x0BB9  0x2F 0x06       JNZB 0x0BBF (+6)

                        // break;                                               CODEGEN.hs:89

0x0BBB  0x28 0x02       DECSP 0x02
0x0BBD  0x30 0x3B       JB 0x0BF8 (+59)

                        // buffer = buffer + cb.ToHexString(2);                 CODEGEN.hs:91

0x0BBF  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x0BC2  0x1A 0x02       PUSHIB 0x02
0x0BC4  0x2C 0x93       CALLB 0x93     // Byte.ToHexString
0x0BC6  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0BC8  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (buffer.Length == 32)                             CODEGEN.hs:92

0x0BCA  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0BCC  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0BCE  0x1A 0x20       PUSHIB 0x20
0x0BD0  0x05            EQ
0x0BD1  0x2E 0x14       JZB 0x0BE5 (+20)

                        // emitBuffer(ihexFile, emitAddress, buffer);           CODEGEN.hs:94

0x0BD3  0x56 0x04 0x10  PUSHLOCALBB 0x1004
0x0BD6  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0BD8  0x2C 0x04       CALLB 0x04     // CODEGEN.emitBuffer

                        // emitAddress = emitAddress + 16;                      CODEGEN.hs:95

0x0BDA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x0BDC  0x1A 0x10       PUSHIB 0x10
0x0BDE  0x00            ADD
0x0BDF  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // buffer = "";                                         CODEGEN.hs:96

0x0BE1  0x24 0x02       SYSCALL0 0x02  // String.New
0x0BE3  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // byteCount++;                                         CODEGEN.hs:99

0x0BE5  0x22 0x08       INCLOCALB 0x08 (BP+8)

                        // if (byteCount % 32 == 0)                             CODEGEN.hs:100

0x0BE7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0BE9  0x1A 0x20       PUSHIB 0x20
0x0BEB  0x04            MOD
0x0BEC  0x2F 0x08       JNZB 0x0BF4 (+8)

                        // Parser.ProgressTick("x");                            CODEGEN.hs:102

0x0BEE  0x1A 0x78       PUSHIB 0x78
0x0BF0  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0BF2  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // }                                                    CODEGEN.hs:104

0x0BF4  0x28 0x02       DECSP 0x02
0x0BF6  0x30 0xB8       JB 0x0BAE (-72)

                        // if (buffer.Length > 0)                               CODEGEN.hs:105

0x0BF8  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0BFA  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0BFC  0x44            PUSHI0
0x0BFD  0x07            GT
0x0BFE  0x2E 0x09       JZB 0x0C07 (+9)

                        // emitBuffer(ihexFile, emitAddress, buffer);           CODEGEN.hs:107

0x0C00  0x56 0x04 0x10  PUSHLOCALBB 0x1004
0x0C03  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x0C05  0x2C 0x04       CALLB 0x04     // CODEGEN.emitBuffer

                        // ihexFile.Append(":00000001FF" + char(0x0A)); // eof

0x0C07  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0C09  0x1A 0xE3       PUSHIB 0xE3
0x0C0B  0x1A 0x0B       PUSHIB 0x0B
0x0C0D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0C0F  0x1A 0x0A       PUSHIB 0x0A
0x0C11  0x25 0x03       SYSCALL1 0x03  // String.Append
0x0C13  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // ihexFile.Flush();                                    CODEGEN.hs:110

0x0C15  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0C17  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // }                                                    CODEGEN.hs:111

0x0C19  0x2A 0x14       RETB 0x14


// CODEGEN.hs:54
// ####  CODEGEN.emitBuffer(..)  ####                                           0x0004


                        // uint bytes = buffer.Length / 2;                      CODEGEN.hs:55

0x0C1B  0x5F 0x01       ENTERB 0x01

                        // uint bytes = buffer.Length / 2;                      CODEGEN.hs:55

0x0C1D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0C1F  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0C21  0x1A 0x02       PUSHIB 0x02
0x0C23  0x02            DIV
0x0C24  0x4C            POPLOCALB00

                        // string ln = bytes.ToHexString(2) + address.ToHexString(4) + "00" + buffer;

0x0C25  0x24 0x02       SYSCALL0 0x02  // String.New
0x0C27  0x4E            PUSHLOCALB00
0x0C28  0x1A 0x02       PUSHIB 0x02
0x0C2A  0x2C 0x9B       CALLB 0x9B     // UInt.ToHexString
0x0C2C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0C2E  0x1A 0x04       PUSHIB 0x04
0x0C30  0x2C 0x9B       CALLB 0x9B     // UInt.ToHexString
0x0C32  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C34  0x37 0x30 0x30  PUSHIW 0x3030
0x0C37  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0C39  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C3B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0C3D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C3F  0x5E            POPCOPYLOCALB02

                        // byte chk = hexCheckSum(ln);                          CODEGEN.hs:57

0x0C40  0x44            PUSHI0
0x0C41  0x4F            PUSHLOCALB02
0x0C42  0x2C 0x03       CALLB 0x03     // CODEGEN.hexCheckSum
0x0C44  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // ihexFile.Append(":" + ln + chk.ToHexString(2) + char(0x0A));

0x0C46  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x0C48  0x1A 0x3A       PUSHIB 0x3A
0x0C4A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0C4C  0x4F            PUSHLOCALB02
0x0C4D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C4F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0C51  0x1A 0x02       PUSHIB 0x02
0x0C53  0x2C 0x93       CALLB 0x93     // Byte.ToHexString
0x0C55  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C57  0x1A 0x0A       PUSHIB 0x0A
0x0C59  0x25 0x03       SYSCALL1 0x03  // String.Append
0x0C5B  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    CODEGEN.hs:59

0x0C5D  0x2A 0x0C       RETB 0x0C


// CODEGEN.hs:35
// ####  CODEGEN.hexCheckSum(..)  ####                                          0x0003


                        // uint sum = 0;                                        CODEGEN.hs:36

0x0C5F  0x5F 0x02       ENTERB 0x02

                        // for (uint i = 0; i < values.Length / 2; i++)

0x0C61  0x4F            PUSHLOCALB02
0x0C62  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0C64  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0C66  0x1A 0x02       PUSHIB 0x02
0x0C68  0x02            DIV
0x0C69  0x08            LT
0x0C6A  0x2E 0x29       JZB 0x0C93 (+41)

                        // string substr = values.Substring(i * 2, 2);

0x0C6C  0x24 0x02       SYSCALL0 0x02  // String.New
0x0C6E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0C70  0x4F            PUSHLOCALB02
0x0C71  0x1A 0x02       PUSHIB 0x02
0x0C73  0x03            MUL
0x0C74  0x1A 0x02       PUSHIB 0x02
0x0C76  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x0C78  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint b = 0;                                          CODEGEN.hs:40

0x0C7A  0x44            PUSHI0

                        // if (Token.TryParseHex("0x" + substr, ref b))

0x0C7B  0x37 0x30 0x78  PUSHIW 0x7830
0x0C7E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0C80  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0C82  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0C84  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x0C86  0x2C 0x54       CALLB 0x54     // Token.TryParseHex
0x0C88  0x2E 0x02       JZB 0x0C8A (+2)

                        // sum = sum + b;                                       CODEGEN.hs:44

0x0C8A  0x3F 0x00 0x06  INCLOCALBB 0x0600

                        // }                                                    CODEGEN.hs:45

0x0C8D  0x28 0x04       DECSP 0x04
0x0C8F  0x22 0x02       INCLOCALB 0x02 (BP+2)
0x0C91  0x30 0xD0       JB 0x0C61 (-48)
0x0C93  0x28 0x02       DECSP 0x02

                        // sum = sum % 256;                                     CODEGEN.hs:46

0x0C95  0x4E            PUSHLOCALB00
0x0C96  0x37 0x00 0x01  PUSHIW 0x0100
0x0C99  0x04            MOD
0x0C9A  0x4C            POPLOCALB00

                        // byte chk = byte(sum);                                CODEGEN.hs:47

0x0C9B  0x44            PUSHI0
0x0C9C  0x4E            PUSHLOCALB00
0x0C9D  0x51 0x03       CAST 0x03
0x0C9F  0x4D            POPLOCALB02

                        // chk = ~chk;                                          CODEGEN.hs:48

0x0CA0  0x4F            PUSHLOCALB02
0x0CA1  0x42            BITNOT
0x0CA2  0x4D            POPLOCALB02

                        // chk++;                                               CODEGEN.hs:49

0x0CA3  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // return chk;                                          CODEGEN.hs:50

0x0CA5  0x4F            PUSHLOCALB02
0x0CA6  0x2B 0x06       RETRETB 0x06


// /source/system/string.hs:489
// ####  String.ToLower(..)  ####                                               0x00C4


                        // uint i;                                              string.hs:490

0x0CA8  0x5F 0x03       ENTERB 0x03

                        // string result;                                       string.hs:493

0x0CAA  0x24 0x02       SYSCALL0 0x02  // String.New

                        // length = this.Length;                                string.hs:494

0x0CAC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0CAE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0CB0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (; i < length; i++)                              string.hs:495

0x0CB2  0x4E            PUSHLOCALB00
0x0CB3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0CB5  0x08            LT
0x0CB6  0x2E 0x13       JZB 0x0CC9 (+19)

                        // c = this[i];                                         string.hs:497

0x0CB8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0CBA  0x4E            PUSHLOCALB00
0x0CBB  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0CBD  0x4D            POPLOCALB02

                        // Build(ref result, c.ToLower());                      string.hs:498

0x0CBE  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x0CC0  0x4F            PUSHLOCALB02
0x0CC1  0x2C 0x8D       CALLB 0x8D     // Char.ToLower
0x0CC3  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    string.hs:499

0x0CC5  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x0CC7  0x30 0xEB       JB 0x0CB2 (-21)

                        // return result;                                       string.hs:500

0x0CC9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0CCB  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:320
// ####  Token.TryParseUInt(..)  ####                                           0x0053


                        // bool success;                                        token.hs:321

0x0CCD  0x5F 0x01       ENTERB 0x01

                        // long rv;                                             token.hs:322

0x0CCF  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (TryParseLong(content, ref rv))                   token.hs:323

0x0CD1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0CD3  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0CD5  0x2C 0x51       CALLB 0x51     // Token.TryParseLong
0x0CD7  0x2E 0x1E       JZB 0x0CF5 (+30)

                        // if ((rv >= 0) && (rv <= 65535))                      token.hs:325

0x0CD9  0x4F            PUSHLOCALB02
0x0CDA  0x44            PUSHI0
0x0CDB  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0CDD  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x0CDF  0x27 0x00       DUP 0x00
0x0CE1  0x2E 0x0B       JZB 0x0CEC (+11)
0x0CE3  0x4F            PUSHLOCALB02
0x0CE4  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0x0CE7  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0CE9  0x24 0x46       SYSCALL0 0x46  // Long.LE
0x0CEB  0x0C            BOOLAND
0x0CEC  0x2E 0x09       JZB 0x0CF5 (+9)

                        // returnValue = uint(rv);                              token.hs:327

0x0CEE  0x4F            PUSHLOCALB02
0x0CEF  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x0CF1  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // success = true;                                      token.hs:328

0x0CF3  0x45            PUSHI1
0x0CF4  0x4C            POPLOCALB00

                        // return success;                                      token.hs:331

0x0CF5  0x4E            PUSHLOCALB00
0x0CF6  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:334
// ####  Token.TryParseHex(..)  ####                                            0x0054


                        // bool success;                                        token.hs:335

0x0CF8  0x5F 0x03       ENTERB 0x03

                        // returnValue = 0;                                     token.hs:339

0x0CFA  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0x"))                       token.hs:340

0x0CFC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0CFE  0x37 0x30 0x78  PUSHIW 0x7830
0x0D01  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0D03  0x2C 0xB7       CALLB 0xB7     // String.StartsWith
0x0D05  0x2E 0x5F       JZB 0x0D64 (+95)

                        // length = content.Length;                             token.hs:344

0x0D07  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D09  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0D0B  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:345

0x0D0C  0x4F            PUSHLOCALB02
0x0D0D  0x1A 0x03       PUSHIB 0x03
0x0D0F  0x08            LT
0x0D10  0x2F 0x54       JNZB 0x0D64 (+84)

                        // success = true;                                      token.hs:349

0x0D12  0x45            PUSHI1
0x0D13  0x4C            POPLOCALB00

                        // for (uint i=0; i < length-2; i++)                    token.hs:350

0x0D14  0x44            PUSHI0
0x0D15  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0D17  0x4F            PUSHLOCALB02
0x0D18  0x1A 0x02       PUSHIB 0x02
0x0D1A  0x01            SUB
0x0D1B  0x08            LT
0x0D1C  0x2E 0x46       JZB 0x0D62 (+70)

                        // returnValue = returnValue * 16;                      token.hs:352

0x0D1E  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0D20  0x1A 0x10       PUSHIB 0x10
0x0D22  0x03            MUL
0x0D23  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // char c = content.GetChar(i+2);                       token.hs:353

0x0D25  0x44            PUSHI0
0x0D26  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x0D29  0x1A 0x02       PUSHIB 0x02
0x0D2B  0x00            ADD
0x0D2C  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0D2E  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (c.IsDigit())                                     token.hs:354

0x0D30  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0D32  0x2C 0x8A       CALLB 0x8A     // Char.IsDigit
0x0D34  0x2E 0x0E       JZB 0x0D42 (+14)

                        // returnValue = returnValue + (byte(c) - 48); // 48 is ASCII for '0'

0x0D36  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0D38  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0D3A  0x1A 0x30       PUSHIB 0x30
0x0D3C  0x01            SUB
0x0D3D  0x00            ADD
0x0D3E  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:357

0x0D40  0x30 0x1C       JB 0x0D5C (+28)

                        // else if (c.IsHexDigit())                             token.hs:358

0x0D42  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0D44  0x2C 0x8E       CALLB 0x8E     // Char.IsHexDigit
0x0D46  0x2E 0x10       JZB 0x0D56 (+16)

                        // returnValue = returnValue + (byte(c.ToLower()) - 87); // 97 is ASCII for 'a', -97+10 = -87

0x0D48  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x0D4A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0D4C  0x2C 0x8D       CALLB 0x8D     // Char.ToLower
0x0D4E  0x1A 0x57       PUSHIB 0x57
0x0D50  0x01            SUB
0x0D51  0x00            ADD
0x0D52  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:361

0x0D54  0x30 0x08       JB 0x0D5C (+8)

                        // success = false;                                     token.hs:364

0x0D56  0x44            PUSHI0
0x0D57  0x4C            POPLOCALB00

                        // break;                                               token.hs:365

0x0D58  0x28 0x04       DECSP 0x04
0x0D5A  0x30 0x0A       JB 0x0D64 (+10)

                        // }                                                    token.hs:367

0x0D5C  0x28 0x02       DECSP 0x02
0x0D5E  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x0D60  0x30 0xB5       JB 0x0D15 (-75)
0x0D62  0x28 0x02       DECSP 0x02

                        // return success;                                      token.hs:370

0x0D64  0x4E            PUSHLOCALB00
0x0D65  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:273
// ####  Token.TryParseLong(..)  ####                                           0x0051

0x0D67  0x49            ENTER

                        // long result;                                         token.hs:274

0x0D68  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // bool makeNegative;                                   token.hs:275

0x0D6A  0x44            PUSHI0

                        // if (content.Length < 1)                              token.hs:276

0x0D6B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D6D  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0D6F  0x45            PUSHI1
0x0D70  0x08            LT
0x0D71  0x2E 0x05       JZB 0x0D76 (+5)

                        // return false;                                        token.hs:278

0x0D73  0x44            PUSHI0
0x0D74  0x2B 0x08       RETRETB 0x08

                        // if (content.StartsWith('+'))                         token.hs:280

0x0D76  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D78  0x1A 0x2B       PUSHIB 0x2B
0x0D7A  0x2C 0xB6       CALLB 0xB6     // String.StartsWith
0x0D7C  0x2E 0x0B       JZB 0x0D87 (+11)

                        // content = content.Substring(1);                      token.hs:282

0x0D7E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D80  0x45            PUSHI1
0x0D81  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x0D83  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    token.hs:283

0x0D85  0x30 0x13       JB 0x0D98 (+19)

                        // else if (content.StartsWith('-'))                    token.hs:284

0x0D87  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D89  0x1A 0x2D       PUSHIB 0x2D
0x0D8B  0x2C 0xB6       CALLB 0xB6     // String.StartsWith
0x0D8D  0x2E 0x0B       JZB 0x0D98 (+11)

                        // content = content.Substring(1);                      token.hs:286

0x0D8F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D91  0x45            PUSHI1
0x0D92  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x0D94  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // makeNegative = true;                                 token.hs:287

0x0D96  0x45            PUSHI1
0x0D97  0x4D            POPLOCALB02

                        // foreach (var c in content)                           token.hs:289

0x0D98  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0D9A  0x44            PUSHI0
0x0D9B  0x44            PUSHI0
0x0D9C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0D9E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0DA0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0DA2  0x05            EQ
0x0DA3  0x2F 0x29       JNZB 0x0DCC (+41)
0x0DA5  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x0DA8  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0DAA  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // result = result * 10;                                token.hs:291

0x0DAC  0x4E            PUSHLOCALB00
0x0DAD  0x1A 0x0A       PUSHIB 0x0A
0x0DAF  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0DB1  0x24 0x42       SYSCALL0 0x42  // Long.Mul
0x0DB3  0x5D            POPCOPYLOCALB00

                        // if (!c.IsDigit())                                    token.hs:292

0x0DB4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0DB6  0x2C 0x8A       CALLB 0x8A     // Char.IsDigit
0x0DB8  0x2F 0x05       JNZB 0x0DBD (+5)

                        // return false;                                        token.hs:294

0x0DBA  0x44            PUSHI0
0x0DBB  0x2B 0x0E       RETRETB 0x0E

                        // result = result + (byte(c) - 48); // 48 is ASCII for '0'

0x0DBD  0x4E            PUSHLOCALB00
0x0DBE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0DC0  0x1A 0x30       PUSHIB 0x30
0x0DC2  0x01            SUB
0x0DC3  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x0DC5  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x0DC7  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:297

0x0DC8  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x0DCA  0x30 0xD2       JB 0x0D9C (-46)
0x0DCC  0x28 0x06       DECSP 0x06

                        // if (makeNegative)                                    token.hs:298

0x0DCE  0x4F            PUSHLOCALB02
0x0DCF  0x2E 0x06       JZB 0x0DD5 (+6)

                        // result = -result;                                    token.hs:300

0x0DD1  0x4E            PUSHLOCALB00
0x0DD2  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0x0DD4  0x5D            POPCOPYLOCALB00

                        // returnValue = result;                                token.hs:302

0x0DD5  0x4E            PUSHLOCALB00
0x0DD6  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return true;                                         token.hs:303

0x0DD8  0x45            PUSHI1
0x0DD9  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/parser.hs:27
// ####  Parser.SetInteractive(..)  ####                                        0x006D

0x0DDB  0x49            ENTER

                        // tickColumn = column;                                 parser.hs:28

0x0DDC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0DDE  0x1F 0x50       POPGLOBALB 0x50

                        // tickRow = row;                                       parser.hs:29

0x0DE0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0DE2  0x1F 0x4E       POPGLOBALB 0x4E

                        // interactive = true;                                  parser.hs:30

0x0DE4  0x45            PUSHI1
0x0DE5  0x1F 0x46       POPGLOBALB 0x46

                        // File.Delete(errorPath);                              parser.hs:31

0x0DE7  0x1A 0xEE       PUSHIB 0xEE
0x0DE9  0x1A 0x10       PUSHIB 0x10
0x0DEB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0DED  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // errorFile = File.Create(errorPath);                  parser.hs:32

0x0DEF  0x1A 0xEE       PUSHIB 0xEE
0x0DF1  0x1A 0x10       PUSHIB 0x10
0x0DF3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0DF5  0x24 0x62       SYSCALL0 0x62  // File.Create
0x0DF7  0x59 0x4A       POPCOPYGLOBALB 0x4A

                        // currentTick = 0;                                     parser.hs:33

0x0DF9  0x44            PUSHI0
0x0DFA  0x1F 0x4C       POPGLOBALB 0x4C

                        // Diagnostics.SetError(0x00);                          parser.hs:34

0x0DFC  0x44            PUSHI0
0x0DFD  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:35

0x0DFF  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:57
// ####  Parser.ProgressTick(..)  ####                                          0x0070

0x0E01  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:58

0x0E02  0x2C 0x6E       CALLB 0x6E     // Parser.IsInteractive
0x0E04  0x2E 0x26       JZB 0x0E2A (+38)

                        // char c = progressTicks[currentTick];                 parser.hs:60

0x0E06  0x44            PUSHI0
0x0E07  0x52 0x48 0x4C  PUSHGLOBALBB 0x4C48
0x0E0A  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0E0C  0x4C            POPLOCALB00

                        // DrawChar(tickColumn, tickRow, c, Color.StatusText, Color.StatusFace);

0x0E0D  0x52 0x50 0x4E  PUSHGLOBALBB 0x4E50
0x0E10  0x4E            PUSHLOCALB00
0x0E11  0x34 0x27 0x01  CALLW 0x0127   // Color.StatusText_Get
0x0E14  0x34 0x26 0x01  CALLW 0x0126   // Color.StatusFace_Get
0x0E17  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // currentTick++;                                       parser.hs:62

0x0E19  0x53 0x4C       INCGLOBALB 0x4C

                        // if (currentTick == progressTicks.Length)             parser.hs:63

0x0E1B  0x52 0x4C 0x48  PUSHGLOBALBB 0x484C
0x0E1E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0E20  0x05            EQ
0x0E21  0x2E 0x05       JZB 0x0E26 (+5)

                        // currentTick = 0;                                     parser.hs:65

0x0E23  0x44            PUSHI0
0x0E24  0x1F 0x4C       POPGLOBALB 0x4C

                        // }                                                    parser.hs:67

0x0E26  0x28 0x02       DECSP 0x02
0x0E28  0x2A 0x02       RETB 0x02

                        // Print(str, Color.ProgressTick, Color.ProgressBackground);

0x0E2A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0E2C  0x34 0x13 0x01  CALLW 0x0113   // Color.ProgressTick_Get
0x0E2F  0x34 0x14 0x01  CALLW 0x0114   // Color.ProgressBackground_Get
0x0E32  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // }                                                    parser.hs:72

0x0E34  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:37
// ####  Parser.IsInteractive(..)  ####                                         0x006E

0x0E36  0x49            ENTER

                        // return interactive;                                  parser.hs:38

0x0E37  0x20 0x46       PUSHGLOBALB 0x46
0x0E39  0x4A            RET0


// /source/compiler/tokens/parser.hs:74
// ####  Parser.ProgressDone(..)  ####                                          0x0071

0x0E3A  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:75

0x0E3B  0x2C 0x6E       CALLB 0x6E     // Parser.IsInteractive
0x0E3D  0x2E 0x0F       JZB 0x0E4C (+15)

                        // DrawChar(tickColumn, tickRow, ' ', Color.ProgressText, Color.ProgressFace);

0x0E3F  0x52 0x50 0x4E  PUSHGLOBALBB 0x4E50
0x0E42  0x1A 0x20       PUSHIB 0x20
0x0E44  0x34 0x15 0x01  CALLW 0x0115   // Color.ProgressText_Get
0x0E47  0x34 0x16 0x01  CALLW 0x0116   // Color.ProgressFace_Get
0x0E4A  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // }                                                    parser.hs:79

0x0E4C  0x4A            RET0


// /source/system/file.hs:18
// ####  File.Exists(..)  ####                                                  0x00E8

0x0E4D  0x49            ENTER

                        // if (!File.Exists(filePath))                          file.hs:19

0x0E4E  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E50  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x0E52  0x2F 0x49       JNZB 0x0E9B (+73)

                        // string rawPath = filePath;                           file.hs:21

0x0E54  0x24 0x02       SYSCALL0 0x02  // String.New
0x0E56  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E58  0x5D            POPCOPYLOCALB00

                        // string ext = Path.GetExtension(rawPath);             file.hs:22

0x0E59  0x24 0x02       SYSCALL0 0x02  // String.New
0x0E5B  0x4E            PUSHLOCALB00
0x0E5C  0x2C 0xED       CALLB 0xED     // Path.GetExtension
0x0E5E  0x5E            POPCOPYLOCALB02

                        // if (ext == ".")                                      file.hs:23

0x0E5F  0x4F            PUSHLOCALB02
0x0E60  0x1A 0x2E       PUSHIB 0x2E
0x0E62  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0E64  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x0E66  0x2F 0x23       JNZB 0x0E89 (+35)

                        // filePath = rawPath + extension;                      file.hs:26

0x0E68  0x4E            PUSHLOCALB00
0x0E69  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0E6B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0E6D  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:27

0x0E6F  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E71  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x0E73  0x2F 0x26       JNZB 0x0E99 (+38)

                        // filePath = Path.Combine(searchFolder, rawPath + extension);

0x0E75  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0E77  0x4E            PUSHLOCALB00
0x0E78  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x0E7A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0E7C  0x2C 0xEC       CALLB 0xEC     // Path.Combine
0x0E7E  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:31

0x0E80  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E82  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x0E84  0x2F 0x15       JNZB 0x0E99 (+21)

                        // return false;                                        file.hs:33

0x0E86  0x44            PUSHI0
0x0E87  0x2B 0x0A       RETRETB 0x0A

                        // filePath = Path.Combine(searchFolder, rawPath);

0x0E89  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0E8B  0x4E            PUSHLOCALB00
0x0E8C  0x2C 0xEC       CALLB 0xEC     // Path.Combine
0x0E8E  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:41

0x0E90  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E92  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x0E94  0x2F 0x05       JNZB 0x0E99 (+5)

                        // return false;                                        file.hs:43

0x0E96  0x44            PUSHI0
0x0E97  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    file.hs:46

0x0E99  0x28 0x04       DECSP 0x04

                        // extension = Path.GetExtension(filePath);             file.hs:47

0x0E9B  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x0E9D  0x2C 0xED       CALLB 0xED     // Path.GetExtension
0x0E9F  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // return true;                                         file.hs:48

0x0EA1  0x45            PUSHI1
0x0EA2  0x2B 0x06       RETRETB 0x06


// /source/system/path.hs:94
// ####  Path.GetExtension(..)  ####                                            0x00ED


                        // uint iDot;                                           path.hs:95

0x0EA4  0x5F 0x02       ENTERB 0x02

                        // string extension;                                    path.hs:98

0x0EA6  0x24 0x02       SYSCALL0 0x02  // String.New

                        // extension = "."; // empty "."                        path.hs:101

0x0EA8  0x1A 0x2E       PUSHIB 0x2E
0x0EAA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x0EAC  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (path.LastIndexOf('.', ref iDot))                 path.hs:102

0x0EAE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0EB0  0x1A 0x2E       PUSHIB 0x2E
0x0EB2  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x0EB4  0x2C 0xBF       CALLB 0xBF     // String.LastIndexOf
0x0EB6  0x2E 0x18       JZB 0x0ECE (+24)

                        // if (path.LastIndexOf('/', ref iSlash))               path.hs:104

0x0EB8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0EBA  0x1A 0x2F       PUSHIB 0x2F
0x0EBC  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x0EBE  0x2C 0xBF       CALLB 0xBF     // String.LastIndexOf
0x0EC0  0x2E 0x07       JZB 0x0EC7 (+7)

                        // if (iSlash > iDot)                                   path.hs:106

0x0EC2  0x4F            PUSHLOCALB02
0x0EC3  0x4E            PUSHLOCALB00
0x0EC4  0x07            GT
0x0EC5  0x2F 0x09       JNZB 0x0ECE (+9)

                        // extension = path.Substring(iDot);                    path.hs:111

0x0EC7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0EC9  0x4E            PUSHLOCALB00
0x0ECA  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x0ECC  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // return extension;                                    path.hs:115

0x0ECE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0ED0  0x2B 0x08       RETRETB 0x08


// /source/system/path.hs:24
// ####  Path.GetFileName(..)  ####                                             0x00EA


                        // uint iSlash;                                         path.hs:25

0x0ED2  0x5F 0x01       ENTERB 0x01

                        // if (path.LastIndexOf('/', ref iSlash))               path.hs:26

0x0ED4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0ED6  0x1A 0x2F       PUSHIB 0x2F
0x0ED8  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x0EDA  0x2C 0xBF       CALLB 0xBF     // String.LastIndexOf
0x0EDC  0x2E 0x0B       JZB 0x0EE7 (+11)

                        // path = path.Substring(iSlash+1);                     path.hs:28

0x0EDE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0EE0  0x4E            PUSHLOCALB00
0x0EE1  0x45            PUSHI1
0x0EE2  0x00            ADD
0x0EE3  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x0EE5  0x57 0xFE       POPCOPYLOCALB 0xFE (BP-2)

                        // return path;                                         path.hs:30

0x0EE7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0EE9  0x2B 0x04       RETRETB 0x04


// /source/system/path.hs:66
// ####  Path.Combine(..)  ####                                                 0x00EC


                        // uint length;                                         path.hs:67

0x0EEB  0x5F 0x01       ENTERB 0x01

                        // string resultPath;                                   path.hs:68

0x0EED  0x24 0x02       SYSCALL0 0x02  // String.New

                        // resultPath = partOne;                                path.hs:69

0x0EEF  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x0EF1  0x5E            POPCOPYLOCALB02

                        // length = resultPath.Length;                          path.hs:70

0x0EF2  0x4F            PUSHLOCALB02
0x0EF3  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0EF5  0x4C            POPLOCALB00

                        // if ((length > 0) && (resultPath[length - 1] == '/'))

0x0EF6  0x4E            PUSHLOCALB00
0x0EF7  0x44            PUSHI0
0x0EF8  0x07            GT
0x0EF9  0x27 0x00       DUP 0x00
0x0EFB  0x2E 0x0C       JZB 0x0F07 (+12)
0x0EFD  0x4F            PUSHLOCALB02
0x0EFE  0x4E            PUSHLOCALB00
0x0EFF  0x45            PUSHI1
0x0F00  0x01            SUB
0x0F01  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0F03  0x1A 0x2F       PUSHIB 0x2F
0x0F05  0x05            EQ
0x0F06  0x0C            BOOLAND
0x0F07  0x2F 0x08       JNZB 0x0F0F (+8)

                        // resultPath = resultPath + '/'; // append trailing slash

0x0F09  0x4F            PUSHLOCALB02
0x0F0A  0x1A 0x2F       PUSHIB 0x2F
0x0F0C  0x25 0x03       SYSCALL1 0x03  // String.Append
0x0F0E  0x5E            POPCOPYLOCALB02

                        // if ((0 != partTwo.Length) && (partTwo[0] == '/'))

0x0F0F  0x44            PUSHI0
0x0F10  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F12  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0F14  0x06            NE
0x0F15  0x27 0x00       DUP 0x00
0x0F17  0x2E 0x0B       JZB 0x0F22 (+11)
0x0F19  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F1B  0x44            PUSHI0
0x0F1C  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x0F1E  0x1A 0x2F       PUSHIB 0x2F
0x0F20  0x05            EQ
0x0F21  0x0C            BOOLAND
0x0F22  0x2E 0x15       JZB 0x0F37 (+21)

                        // if (partTwo.Length > 1)                              path.hs:82

0x0F24  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F26  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x0F28  0x45            PUSHI1
0x0F29  0x07            GT
0x0F2A  0x2E 0x13       JZB 0x0F3D (+19)

                        // resultPath = resultPath + partTwo.Substring(1);

0x0F2C  0x4F            PUSHLOCALB02
0x0F2D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F2F  0x45            PUSHI1
0x0F30  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x0F32  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0F34  0x5E            POPCOPYLOCALB02

                        // }                                                    path.hs:86

0x0F35  0x30 0x08       JB 0x0F3D (+8)

                        // resultPath = resultPath + partTwo;                   path.hs:89

0x0F37  0x4F            PUSHLOCALB02
0x0F38  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F3A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x0F3C  0x5E            POPCOPYLOCALB02

                        // return resultPath;                                   path.hs:91

0x0F3D  0x4F            PUSHLOCALB02
0x0F3E  0x2B 0x08       RETRETB 0x08


// /source/system/screen.hs:60
// ####  Screen.PrintLn(..)  ####                                               0x0020

0x0F40  0x49            ENTER

                        // Print(s, Color.MatrixGreen, Color.Black);            screen.hs:61

0x0F41  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F43  0x34 0x0F 0x01  CALLW 0x010F   // Color.MatrixGreen_Get
0x0F46  0x2C 0xF7       CALLB 0xF7     // Color.Black_Get
0x0F48  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:62

0x0F4A  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:63

0x0F4C  0x2A 0x02       RETB 0x02


// /source/system/screen.hs:39
// ####  Screen.PrintLn(..)  ####                                               0x001C

0x0F4E  0x49            ENTER

                        // Print(s, foreColour, backColour);                    screen.hs:40

0x0F4F  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x0F52  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x0F54  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:41

0x0F56  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:42

0x0F58  0x2A 0x06       RETB 0x06


// /source/compiler/json/code.hs:943
// ####  Code.ParseCode(..)  ####                                               0x0045


                        // bool success;                                        code.hs:944

0x0F5A  0x5F 0x01       ENTERB 0x01

                        // long pos;                                            code.hs:945

0x0F5C  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // bool first;                                          code.hs:946

0x0F5E  0x44            PUSHI0

                        // Scanner.New();                                       code.hs:949

0x0F5F  0x2C 0x5A       CALLB 0x5A     // Scanner.New

                        // Parser.Reset();                                      code.hs:950

0x0F61  0x2C 0x77       CALLB 0x77     // Parser.Reset

                        // Scanner.Load(codePath);                              code.hs:951

0x0F63  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x0F65  0x2C 0x5B       CALLB 0x5B     // Scanner.Load

                        // Scanner.Reset(pos, 1, codePath);                     code.hs:952

0x0F67  0x4F            PUSHLOCALB02
0x0F68  0x45            PUSHI1
0x0F69  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x0F6B  0x2C 0x5C       CALLB 0x5C     // Scanner.Reset

                        // Parser.Advance(); // load up first token             code.hs:954

0x0F6D  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:955

0x0F6F  0x1A 0x12       PUSHIB 0x12
0x0F71  0x1A 0x7B       PUSHIB 0x7B
0x0F73  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // first = true;                                        code.hs:956

0x0F75  0x45            PUSHI1
0x0F76  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Parser.HadError)                                 code.hs:959

0x0F78  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x0F7A  0x32 0x3C 0x02  JNZW 0x11B6 (+572)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:963

0x0F7D  0x1A 0x13       PUSHIB 0x13
0x0F7F  0x2C 0x82       CALLB 0x82     // Parser.Check
0x0F81  0x32 0x35 0x02  JNZW 0x11B6 (+565)

                        // if (!first)                                          code.hs:967

0x0F84  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x0F86  0x2F 0x08       JNZB 0x0F8E (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              code.hs:969

0x0F88  0x1A 0x0D       PUSHIB 0x0D
0x0F8A  0x1A 0x2C       PUSHIB 0x2C
0x0F8C  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // first = false;                                       code.hs:971

0x0F8E  0x44            PUSHI0
0x0F8F  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // Parser.Consume(HopperToken.StringConstant, "method index expected");

0x0F91  0x1A 0x0B       PUSHIB 0x0B
0x0F93  0x1A 0xFE       PUSHIB 0xFE
0x0F95  0x1A 0x15       PUSHIB 0x15
0x0F97  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0F99  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:973

0x0F9B  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x0F9D  0x32 0x19 0x02  JNZW 0x11B6 (+537)

                        // <string,string> previousToken = PreviousToken;

0x0FA0  0x1A 0x0F       PUSHIB 0x0F
0x0FA2  0x1A 0x0F       PUSHIB 0x0F
0x0FA4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x0FA6  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x0FA8  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string methodIndex = previousToken["lexeme"];

0x0FAA  0x24 0x02       SYSCALL0 0x02  // String.New
0x0FAC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x0FAE  0x37 0x13 0x01  PUSHIW 0x0113
0x0FB1  0x1A 0x06       PUSHIB 0x06
0x0FB3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0FB5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x0FB7  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:979

0x0FB9  0x1A 0x0E       PUSHIB 0x0E
0x0FBB  0x1A 0x3A       PUSHIB 0x3A
0x0FBD  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:980

0x0FBF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x0FC1  0x2E 0x07       JZB 0x0FC8 (+7)

                        // break;                                               code.hs:982

0x0FC3  0x28 0x04       DECSP 0x04
0x0FC5  0x33 0xF1 0x01  JW 0x11B6 (+497)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:984

0x0FC8  0x1A 0x12       PUSHIB 0x12
0x0FCA  0x1A 0x7B       PUSHIB 0x7B
0x0FCC  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:985

0x0FCE  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x0FD0  0x2E 0x07       JZB 0x0FD7 (+7)

                        // break;                                               code.hs:987

0x0FD2  0x28 0x04       DECSP 0x04
0x0FD4  0x33 0xE2 0x01  JW 0x11B6 (+482)

                        // if (methodIndex == "globals")                        code.hs:990

0x0FD7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x0FD9  0x37 0x19 0x01  PUSHIW 0x0119
0x0FDC  0x1A 0x07       PUSHIB 0x07
0x0FDE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x0FE0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x0FE2  0x32 0x52 0x01  JNZW 0x1134 (+338)

                        // <string, variant > globalLists;                      code.hs:992

0x0FE5  0x1A 0x0F       PUSHIB 0x0F
0x0FE7  0x1A 0x14       PUSHIB 0x14
0x0FE9  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // bool fc = true;                                      code.hs:993

0x0FEB  0x44            PUSHI0
0x0FEC  0x45            PUSHI1
0x0FED  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 code.hs:996

0x0FEF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x0FF1  0x32 0x2D 0x01  JNZW 0x111E (+301)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:1000

0x0FF4  0x1A 0x13       PUSHIB 0x13
0x0FF6  0x2C 0x82       CALLB 0x82     // Parser.Check
0x0FF8  0x2E 0x07       JZB 0x0FFF (+7)

                        // Parser.Advance(); // }                               code.hs:1002

0x0FFA  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:1003

0x0FFC  0x33 0x22 0x01  JW 0x111E (+290)

                        // if (!fc)                                             code.hs:1005

0x0FFF  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1001  0x2F 0x12       JNZB 0x1013 (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x1003  0x1A 0x0D       PUSHIB 0x0D
0x1005  0x37 0x20 0x01  PUSHIW 0x0120
0x1008  0x1A 0x12       PUSHIB 0x12
0x100A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x100C  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1008

0x100E  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1010  0x32 0x0E 0x01  JNZW 0x111E (+270)

                        // Parser.Consume(HopperToken.StringConstant, "global offset expected");

0x1013  0x1A 0x0B       PUSHIB 0x0B
0x1015  0x37 0x32 0x01  PUSHIW 0x0132
0x1018  0x1A 0x16       PUSHIB 0x16
0x101A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x101C  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1015

0x101E  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1020  0x32 0xFE 0x00  JNZW 0x111E (+254)

                        // previousToken = PreviousToken;                       code.hs:1019

0x1023  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1025  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:1020

0x1027  0x24 0x02       SYSCALL0 0x02  // String.New
0x1029  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x102B  0x37 0x13 0x01  PUSHIW 0x0113
0x102E  0x1A 0x06       PUSHIB 0x06
0x1030  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1032  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1034  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:1022

0x1036  0x1A 0x0E       PUSHIB 0x0E
0x1038  0x1A 0x3A       PUSHIB 0x3A
0x103A  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1023

0x103C  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x103E  0x2E 0x07       JZB 0x1045 (+7)

                        // break;                                               code.hs:1025

0x1040  0x28 0x02       DECSP 0x02
0x1042  0x33 0xDC 0x00  JW 0x111E (+220)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:1028

0x1045  0x1A 0x12       PUSHIB 0x12
0x1047  0x1A 0x7B       PUSHIB 0x7B
0x1049  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1029

0x104B  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x104D  0x2E 0x07       JZB 0x1054 (+7)

                        // break;                                               code.hs:1031

0x104F  0x28 0x02       DECSP 0x02
0x1051  0x33 0xCD 0x00  JW 0x111E (+205)

                        // bool fg = true;                                      code.hs:1033

0x1054  0x44            PUSHI0
0x1055  0x45            PUSHI1
0x1056  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // string globalName;                                   code.hs:1034

0x1058  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string globalType;                                   code.hs:1035

0x105A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:1038

0x105C  0x1A 0x13       PUSHIB 0x13
0x105E  0x2C 0x82       CALLB 0x82     // Parser.Check
0x1060  0x2E 0x07       JZB 0x1067 (+7)

                        // Parser.Advance(); // }                               code.hs:1040

0x1062  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:1041

0x1064  0x33 0x9D 0x00  JW 0x1101 (+157)

                        // if (!fg)                                             code.hs:1043

0x1067  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1069  0x2F 0x12       JNZB 0x107B (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x106B  0x1A 0x0D       PUSHIB 0x0D
0x106D  0x37 0x20 0x01  PUSHIW 0x0120
0x1070  0x1A 0x12       PUSHIB 0x12
0x1072  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1074  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1046

0x1076  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1078  0x32 0x89 0x00  JNZW 0x1101 (+137)

                        // Parser.Consume(HopperToken.StringConstant, "global member name expected");

0x107B  0x1A 0x0B       PUSHIB 0x0B
0x107D  0x37 0x48 0x01  PUSHIW 0x0148
0x1080  0x1A 0x1B       PUSHIB 0x1B
0x1082  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1084  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1052

0x1086  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1088  0x2F 0x79       JNZB 0x1101 (+121)

                        // previousToken = PreviousToken;                       code.hs:1056

0x108A  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x108C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x108E  0x24 0x02       SYSCALL0 0x02  // String.New
0x1090  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1092  0x37 0x13 0x01  PUSHIW 0x0113
0x1095  0x1A 0x06       PUSHIB 0x06
0x1097  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1099  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x109B  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:1059

0x109D  0x1A 0x0E       PUSHIB 0x0E
0x109F  0x1A 0x3A       PUSHIB 0x3A
0x10A1  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1060

0x10A3  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x10A5  0x2E 0x06       JZB 0x10AB (+6)

                        // break;                                               code.hs:1062

0x10A7  0x28 0x02       DECSP 0x02
0x10A9  0x30 0x58       JB 0x1101 (+88)

                        // Parser.Consume(HopperToken.StringConstant, "global member value expected");

0x10AB  0x1A 0x0B       PUSHIB 0x0B
0x10AD  0x37 0x63 0x01  PUSHIW 0x0163
0x10B0  0x1A 0x1C       PUSHIB 0x1C
0x10B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x10B4  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // previousToken = PreviousToken;                       code.hs:1065

0x10B6  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x10B8  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x10BA  0x24 0x02       SYSCALL0 0x02  // String.New
0x10BC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x10BE  0x37 0x13 0x01  PUSHIW 0x0113
0x10C1  0x1A 0x06       PUSHIB 0x06
0x10C3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x10C5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x10C7  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // if (Parser.HadError)                                 code.hs:1067

0x10C9  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x10CB  0x2E 0x06       JZB 0x10D1 (+6)

                        // break;                                               code.hs:1069

0x10CD  0x28 0x04       DECSP 0x04
0x10CF  0x30 0x32       JB 0x1101 (+50)

                        // switch (membername)                                  code.hs:1071

0x10D1  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)

                        // case "name":                                         code.hs:1073

0x10D3  0x37 0x56 0x01  PUSHIW 0x0156
0x10D6  0x1A 0x04       PUSHIB 0x04
0x10D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x10DA  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x10DC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x10DE  0x2F 0x08       JNZB 0x10E6 (+8)

                        // globalName = membervalue;                            code.hs:1075

0x10E0  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x10E2  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:1076

0x10E4  0x30 0x13       JB 0x10F7 (+19)

                        // case "type":                                         code.hs:1077

0x10E6  0x37 0x7F 0x01  PUSHIW 0x017F
0x10E9  0x1A 0x04       PUSHIB 0x04
0x10EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x10ED  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x10EF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x10F1  0x2F 0x06       JNZB 0x10F7 (+6)

                        // globalType = membervalue;                            code.hs:1079

0x10F3  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x10F5  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:1081

0x10F7  0x28 0x02       DECSP 0x02

                        // fg = false;                                          code.hs:1082

0x10F9  0x44            PUSHI0
0x10FA  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // }                                                    code.hs:1083

0x10FC  0x28 0x04       DECSP 0x04
0x10FE  0x33 0x5E 0xFF  JW 0x105C (-162)

                        // <string> globalList;                                 code.hs:1084

0x1101  0x1A 0x0F       PUSHIB 0x0F
0x1103  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // globalList.Append(globalType);                       code.hs:1085

0x1105  0x56 0x16 0x14  PUSHLOCALBB 0x1416
0x1108  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // globalList.Append(globalName);                       code.hs:1086

0x110A  0x56 0x16 0x12  PUSHLOCALBB 0x1216
0x110D  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // globalLists[offset] = globalList;                    code.hs:1087

0x110F  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0x1112  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x1114  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:1089

0x1116  0x44            PUSHI0
0x1117  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // } // loop                                            code.hs:1090

0x1119  0x28 0x0A       DECSP 0x0A
0x111B  0x33 0xD4 0xFE  JW 0x0FEF (-300)

                        // if (keepSymbols)                                     code.hs:1091

0x111E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1120  0x2E 0x0F       JZB 0x112F (+15)

                        // debugSymbols["globals"] = globalLists;               code.hs:1093

0x1122  0x20 0x0E       PUSHGLOBALB 0x0E
0x1124  0x37 0x19 0x01  PUSHIW 0x0119
0x1127  0x1A 0x07       PUSHIB 0x07
0x1129  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x112B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x112D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1095

0x112F  0x28 0x04       DECSP 0x04
0x1131  0x33 0x7A 0x00  JW 0x11AB (+122)

                        // string name;                                         code.hs:1098

0x1134  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <byte> code;                                         code.hs:1099

0x1136  0x1A 0x03       PUSHIB 0x03
0x1138  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint codeLength;                                     code.hs:1100

0x113A  0x44            PUSHI0

                        // if (!ParseMethod(methodIndex, keepCode, keepSymbols, experimental, ref name, ref code, ref codeLength))

0x113B  0x56 0x08 0xFA  PUSHLOCALBB 0xFA08
0x113E  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x1141  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x1143  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x1145  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x1147  0x2C 0x44       CALLB 0x44     // Code.ParseMethod
0x1149  0x2F 0x06       JNZB 0x114F (+6)

                        // break;                                               code.hs:1103

0x114B  0x28 0x0A       DECSP 0x0A
0x114D  0x30 0x69       JB 0x11B6 (+105)

                        // if (methodIndex == "const")                          code.hs:1105

0x114F  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1151  0x37 0x83 0x01  PUSHIW 0x0183
0x1154  0x1A 0x05       PUSHIB 0x05
0x1156  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1158  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x115A  0x2F 0x0C       JNZB 0x1166 (+12)

                        // if (keepCode)                                        code.hs:1107

0x115C  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x115E  0x2E 0x3D       JZB 0x119B (+61)

                        // constantData = code;                                 code.hs:1109

0x1160  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1162  0x59 0x0C       POPCOPYGLOBALB 0x0C

                        // }                                                    code.hs:1111

0x1164  0x30 0x37       JB 0x119B (+55)

                        // uint index;                                          code.hs:1114

0x1166  0x44            PUSHI0

                        // if (Token.TryParseUInt(methodIndex, ref index))

0x1167  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1169  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0x116B  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x116D  0x2E 0x02       JZB 0x116F (+2)

                        // if (name.EndsWith(".main"))                          code.hs:1118

0x116F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1171  0x37 0x88 0x01  PUSHIW 0x0188
0x1174  0x1A 0x05       PUSHIB 0x05
0x1176  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1178  0x25 0x07       SYSCALL1 0x07  // String.EndsWith
0x117A  0x2E 0x06       JZB 0x1180 (+6)

                        // entryIndex = index;                                  code.hs:1120

0x117C  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x117E  0x1F 0x02       POPGLOBALB 0x02

                        // if (keepCode)                                        code.hs:1122

0x1180  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1182  0x2E 0x09       JZB 0x118B (+9)

                        // methodCode[index] = code;                            code.hs:1124

0x1184  0x20 0x04       PUSHGLOBALB 0x04
0x1186  0x56 0x10 0x0C  PUSHLOCALBB 0x0C10
0x1189  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // methodSize[index] = codeLength;                      code.hs:1126

0x118B  0x20 0x06       PUSHGLOBALB 0x06
0x118D  0x56 0x10 0x0E  PUSHLOCALBB 0x0E10
0x1190  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // methodName[index] = name;                            code.hs:1127

0x1192  0x20 0x0A       PUSHGLOBALB 0x0A
0x1194  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x1197  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:1128

0x1199  0x28 0x02       DECSP 0x02

                        // Parser.Consume(HopperToken.RBrace, '}');             code.hs:1129

0x119B  0x1A 0x13       PUSHIB 0x13
0x119D  0x1A 0x7D       PUSHIB 0x7D
0x119F  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:1130

0x11A1  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x11A3  0x2E 0x06       JZB 0x11A9 (+6)

                        // break;                                               code.hs:1132

0x11A5  0x28 0x0A       DECSP 0x0A
0x11A7  0x30 0x0F       JB 0x11B6 (+15)

                        // }                                                    code.hs:1134

0x11A9  0x28 0x06       DECSP 0x06

                        // Parser.ProgressTick(".");                            code.hs:1135

0x11AB  0x1A 0x2E       PUSHIB 0x2E
0x11AD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x11AF  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // } // loop                                            code.hs:1136

0x11B1  0x28 0x04       DECSP 0x04
0x11B3  0x33 0xC5 0xFD  JW 0x0F78 (-571)

                        // if (Parser.HadError)                                 code.hs:1137

0x11B6  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x11B8  0x2F 0x04       JNZB 0x11BC (+4)

                        // success = true;                                      code.hs:1141

0x11BA  0x45            PUSHI1
0x11BB  0x4C            POPLOCALB00

                        // if (keepSymbols && (methodStart.Count > 0))

0x11BC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x11BE  0x27 0x00       DUP 0x00
0x11C0  0x2E 0x09       JZB 0x11C9 (+9)
0x11C2  0x20 0x08       PUSHGLOBALB 0x08
0x11C4  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x11C6  0x44            PUSHI0
0x11C7  0x07            GT
0x11C8  0x0C            BOOLAND
0x11C9  0x2E 0x04       JZB 0x11CD (+4)

                        // MapSource();                                         code.hs:1146

0x11CB  0x2C 0x34       CALLB 0x34     // Code.MapSource

                        // return success;                                      code.hs:1148

0x11CD  0x4E            PUSHLOCALB00
0x11CE  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/json/code.hs:408
// ####  Code.GetMethodCount(..)  ####                                          0x0038

0x11D0  0x49            ENTER

                        // return methodCode.Count;                             code.hs:409

0x11D1  0x20 0x04       PUSHGLOBALB 0x04
0x11D3  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x11D5  0x4A            RET0


// /source/compiler/json/code.hs:399
// ####  Code.GetConstantData(..)  ####                                         0x0036

0x11D6  0x49            ENTER

                        // return constantData;                                 code.hs:400

0x11D7  0x20 0x0C       PUSHGLOBALB 0x0C
0x11D9  0x4A            RET0


// /source/compiler/json/code.hs:403
// ####  Code.GetEntryIndex(..)  ####                                           0x0037

0x11DA  0x49            ENTER

                        // return entryIndex;                                   code.hs:404

0x11DB  0x20 0x02       PUSHGLOBALB 0x02
0x11DD  0x4A            RET0


// /source/compiler/json/code.hs:412
// ####  Code.GetMethodSize(..)  ####                                           0x0039

0x11DE  0x49            ENTER

                        // return methodSize[methodIndex];                      code.hs:413

0x11DF  0x20 0x06       PUSHGLOBALB 0x06
0x11E1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x11E3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x11E5  0x2B 0x02       RETRETB 0x02


// /source/compiler/json/code.hs:420
// ####  Code.GetMethodSizes(..)  ####                                          0x003B

0x11E7  0x49            ENTER

                        // return methodSize;                                   code.hs:421

0x11E8  0x20 0x06       PUSHGLOBALB 0x06
0x11EA  0x4A            RET0


// /source/compiler/json/code.hs:424
// ####  Code.GetMethodCode(..)  ####                                           0x003C

0x11EB  0x49            ENTER

                        // return methodCode[methodIndex];                      code.hs:425

0x11EC  0x20 0x04       PUSHGLOBALB 0x04
0x11EE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x11F0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x11F2  0x2B 0x02       RETRETB 0x02


// /source/compiler/json/code.hs:482
// ####  Code.ParseMethod(..)  ####                                             0x0044

0x11F4  0x49            ENTER

                        // <string,variant> methodDictionary;                   code.hs:483

0x11F5  0x1A 0x0F       PUSHIB 0x0F
0x11F7  0x1A 0x14       PUSHIB 0x14
0x11F9  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // bool first = true;                                   code.hs:485

0x11FB  0x44            PUSHI0
0x11FC  0x45            PUSHI1
0x11FD  0x4D            POPLOCALB02

                        // bool isData;                                         code.hs:486

0x11FE  0x44            PUSHI0

                        // if (Parser.HadError)                                 code.hs:489

0x11FF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1201  0x32 0x11 0x06  JNZW 0x1812 (+1553)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:493

0x1204  0x1A 0x13       PUSHIB 0x13
0x1206  0x2C 0x82       CALLB 0x82     // Parser.Check
0x1208  0x32 0x0A 0x06  JNZW 0x1812 (+1546)

                        // if (!first)                                          code.hs:497

0x120B  0x4F            PUSHLOCALB02
0x120C  0x2F 0x12       JNZB 0x121E (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x120E  0x1A 0x0D       PUSHIB 0x0D
0x1210  0x37 0x20 0x01  PUSHIW 0x0120
0x1213  0x1A 0x12       PUSHIB 0x12
0x1215  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1217  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:500

0x1219  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x121B  0x32 0xF7 0x05  JNZW 0x1812 (+1527)

                        // Parser.Consume(HopperToken.StringConstant, "key name expected");

0x121E  0x1A 0x0B       PUSHIB 0x0B
0x1220  0x37 0x8D 0x01  PUSHIW 0x018D
0x1223  0x1A 0x11       PUSHIB 0x11
0x1225  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1227  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:506

0x1229  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x122B  0x32 0xE7 0x05  JNZW 0x1812 (+1511)

                        // <string,string> previousToken = PreviousToken;

0x122E  0x1A 0x0F       PUSHIB 0x0F
0x1230  0x1A 0x0F       PUSHIB 0x0F
0x1232  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1234  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1236  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string keyName = previousToken["lexeme"];            code.hs:511

0x1238  0x24 0x02       SYSCALL0 0x02  // String.New
0x123A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x123C  0x37 0x13 0x01  PUSHIW 0x0113
0x123F  0x1A 0x06       PUSHIB 0x06
0x1241  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1243  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1245  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:512

0x1247  0x1A 0x0E       PUSHIB 0x0E
0x1249  0x1A 0x3A       PUSHIB 0x3A
0x124B  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:513

0x124D  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x124F  0x2E 0x07       JZB 0x1256 (+7)

                        // break;                                               code.hs:515

0x1251  0x28 0x04       DECSP 0x04
0x1253  0x33 0xBF 0x05  JW 0x1812 (+1471)

                        // if (keyName == "data")                               code.hs:517

0x1256  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1258  0x37 0x9E 0x01  PUSHIW 0x019E
0x125B  0x1A 0x04       PUSHIB 0x04
0x125D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x125F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1261  0x2F 0x16       JNZB 0x1277 (+22)

                        // isData = true;                                       code.hs:519

0x1263  0x45            PUSHI1
0x1264  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // keyName = "code";                                    code.hs:520

0x1266  0x1A 0x0E       PUSHIB 0x0E
0x1268  0x1A 0x04       PUSHIB 0x04
0x126A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x126C  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // methodName = "const";                                code.hs:521

0x126E  0x37 0x83 0x01  PUSHIW 0x0183
0x1271  0x1A 0x05       PUSHIB 0x05
0x1273  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1275  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // switch (keyName)                                     code.hs:523

0x1277  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)

                        // case "name":                                         code.hs:525

0x1279  0x37 0x56 0x01  PUSHIW 0x0156
0x127C  0x1A 0x04       PUSHIB 0x04
0x127E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1280  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1282  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1284  0x2F 0x3F       JNZB 0x12C3 (+63)

                        // Parser.Consume(HopperToken.StringConstant, "method name expected");

0x1286  0x1A 0x0B       PUSHIB 0x0B
0x1288  0x37 0xA2 0x01  PUSHIW 0x01A2
0x128B  0x1A 0x14       PUSHIB 0x14
0x128D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x128F  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:528

0x1291  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1293  0x2E 0x07       JZB 0x129A (+7)

                        // break;                                               code.hs:530

0x1295  0x28 0x06       DECSP 0x06
0x1297  0x33 0x7B 0x05  JW 0x1812 (+1403)

                        // previousToken = PreviousToken;                       code.hs:532

0x129A  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x129C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodName = previousToken["lexeme"];                code.hs:533

0x129E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x12A0  0x37 0x13 0x01  PUSHIW 0x0113
0x12A3  0x1A 0x06       PUSHIB 0x06
0x12A5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12A7  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x12A9  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // methodDictionary["name"] = previousToken["lexeme"];

0x12AB  0x4E            PUSHLOCALB00
0x12AC  0x37 0x56 0x01  PUSHIW 0x0156
0x12AF  0x1A 0x04       PUSHIB 0x04
0x12B1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12B3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x12B5  0x37 0x13 0x01  PUSHIW 0x0113
0x12B8  0x1A 0x06       PUSHIB 0x06
0x12BA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12BC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x12BE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:535

0x12C0  0x33 0x49 0x05  JW 0x1809 (+1353)

                        // case "source":                                       code.hs:536

0x12C3  0x37 0xB6 0x01  PUSHIW 0x01B6
0x12C6  0x1A 0x06       PUSHIB 0x06
0x12C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12CA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x12CC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x12CE  0x2F 0x32       JNZB 0x1300 (+50)

                        // Parser.Consume(HopperToken.StringConstant, "source path expected");

0x12D0  0x1A 0x0B       PUSHIB 0x0B
0x12D2  0x37 0xBC 0x01  PUSHIW 0x01BC
0x12D5  0x1A 0x14       PUSHIB 0x14
0x12D7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12D9  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:539

0x12DB  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x12DD  0x2E 0x07       JZB 0x12E4 (+7)

                        // break;                                               code.hs:541

0x12DF  0x28 0x06       DECSP 0x06
0x12E1  0x33 0x31 0x05  JW 0x1812 (+1329)

                        // previousToken = PreviousToken;                       code.hs:543

0x12E4  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x12E6  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodDictionary["source"] = previousToken["lexeme"];

0x12E8  0x4E            PUSHLOCALB00
0x12E9  0x37 0xB6 0x01  PUSHIW 0x01B6
0x12EC  0x1A 0x06       PUSHIB 0x06
0x12EE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12F0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x12F2  0x37 0x13 0x01  PUSHIW 0x0113
0x12F5  0x1A 0x06       PUSHIB 0x06
0x12F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x12F9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x12FB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:545

0x12FD  0x33 0x0C 0x05  JW 0x1809 (+1292)

                        // case "line":                                         code.hs:546

0x1300  0x37 0xD0 0x01  PUSHIW 0x01D0
0x1303  0x1A 0x04       PUSHIB 0x04
0x1305  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1307  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1309  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x130B  0x2F 0x32       JNZB 0x133D (+50)

                        // Parser.Consume(HopperToken.Integer, "line number expected");

0x130D  0x1A 0x09       PUSHIB 0x09
0x130F  0x37 0xD4 0x01  PUSHIW 0x01D4
0x1312  0x1A 0x14       PUSHIB 0x14
0x1314  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1316  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:549

0x1318  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x131A  0x2E 0x07       JZB 0x1321 (+7)

                        // break;                                               code.hs:551

0x131C  0x28 0x06       DECSP 0x06
0x131E  0x33 0xF4 0x04  JW 0x1812 (+1268)

                        // previousToken = PreviousToken;                       code.hs:553

0x1321  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1323  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // methodDictionary["line"] = previousToken["lexeme"];

0x1325  0x4E            PUSHLOCALB00
0x1326  0x37 0xD0 0x01  PUSHIW 0x01D0
0x1329  0x1A 0x04       PUSHIB 0x04
0x132B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x132D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x132F  0x37 0x13 0x01  PUSHIW 0x0113
0x1332  0x1A 0x06       PUSHIB 0x06
0x1334  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1336  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1338  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:555

0x133A  0x33 0xCF 0x04  JW 0x1809 (+1231)

                        // case "hits":                                         code.hs:556

0x133D  0x37 0xE8 0x01  PUSHIW 0x01E8
0x1340  0x1A 0x04       PUSHIB 0x04
0x1342  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1344  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1346  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1348  0x2F 0x41       JNZB 0x1389 (+65)

                        // Parser.Consume(HopperToken.Integer, "hits expected");

0x134A  0x1A 0x09       PUSHIB 0x09
0x134C  0x37 0xEC 0x01  PUSHIW 0x01EC
0x134F  0x1A 0x0D       PUSHIB 0x0D
0x1351  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1353  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:559

0x1355  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1357  0x2E 0x07       JZB 0x135E (+7)

                        // break;                                               code.hs:561

0x1359  0x28 0x06       DECSP 0x06
0x135B  0x33 0xB7 0x04  JW 0x1812 (+1207)

                        // previousToken = PreviousToken;                       code.hs:563

0x135E  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1360  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint hits;                                           code.hs:564

0x1362  0x44            PUSHI0

                        // if (TryParseUInt(previousToken["lexeme"], ref hits))

0x1363  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1365  0x37 0x13 0x01  PUSHIW 0x0113
0x1368  0x1A 0x06       PUSHIB 0x06
0x136A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x136C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x136E  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x1370  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x1372  0x2E 0x02       JZB 0x1374 (+2)

                        // methodDictionary["hits"] = hits;                     code.hs:568

0x1374  0x4E            PUSHLOCALB00
0x1375  0x37 0xE8 0x01  PUSHIW 0x01E8
0x1378  0x1A 0x04       PUSHIB 0x04
0x137A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x137C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x137E  0x1A 0x04       PUSHIB 0x04
0x1380  0x24 0x27       SYSCALL0 0x27  // Variant.Box
0x1382  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:569

0x1384  0x28 0x02       DECSP 0x02
0x1386  0x33 0x83 0x04  JW 0x1809 (+1155)

                        // case "locals":                                       code.hs:570

0x1389  0x37 0xF9 0x01  PUSHIW 0x01F9
0x138C  0x1A 0x06       PUSHIB 0x06
0x138E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1390  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1392  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1394  0x32 0x84 0x01  JNZW 0x1518 (+388)

                        // <string, <string> > localLists;                      code.hs:572

0x1397  0x1A 0x0F       PUSHIB 0x0F
0x1399  0x1A 0x19       PUSHIB 0x19
0x139B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:573

0x139D  0x1A 0x12       PUSHIB 0x12
0x139F  0x1A 0x7B       PUSHIB 0x7B
0x13A1  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:574

0x13A3  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x13A5  0x2E 0x07       JZB 0x13AC (+7)

                        // break;                                               code.hs:576

0x13A7  0x28 0x08       DECSP 0x08
0x13A9  0x33 0x69 0x04  JW 0x1812 (+1129)

                        // bool fc = true;                                      code.hs:578

0x13AC  0x44            PUSHI0
0x13AD  0x45            PUSHI1
0x13AE  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:581

0x13B0  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x13B2  0x32 0x51 0x01  JNZW 0x1503 (+337)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:585

0x13B5  0x1A 0x13       PUSHIB 0x13
0x13B7  0x2C 0x82       CALLB 0x82     // Parser.Check
0x13B9  0x2E 0x07       JZB 0x13C0 (+7)

                        // Parser.Advance(); // }                               code.hs:587

0x13BB  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:588

0x13BD  0x33 0x46 0x01  JW 0x1503 (+326)

                        // if (!fc)                                             code.hs:590

0x13C0  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x13C2  0x2F 0x12       JNZB 0x13D4 (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x13C4  0x1A 0x0D       PUSHIB 0x0D
0x13C6  0x37 0x20 0x01  PUSHIW 0x0120
0x13C9  0x1A 0x12       PUSHIB 0x12
0x13CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x13CD  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:593

0x13CF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x13D1  0x32 0x32 0x01  JNZW 0x1503 (+306)

                        // Parser.Consume(HopperToken.StringConstant, "active range expected");

0x13D4  0x1A 0x0B       PUSHIB 0x0B
0x13D6  0x37 0xFF 0x01  PUSHIW 0x01FF
0x13D9  0x1A 0x15       PUSHIB 0x15
0x13DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x13DD  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:600

0x13DF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x13E1  0x32 0x22 0x01  JNZW 0x1503 (+290)

                        // previousToken = PreviousToken;                       code.hs:604

0x13E4  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x13E6  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string range = previousToken["lexeme"];              code.hs:605

0x13E8  0x24 0x02       SYSCALL0 0x02  // String.New
0x13EA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x13EC  0x37 0x13 0x01  PUSHIW 0x0113
0x13EF  0x1A 0x06       PUSHIB 0x06
0x13F1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x13F3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x13F5  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:607

0x13F7  0x1A 0x0E       PUSHIB 0x0E
0x13F9  0x1A 0x3A       PUSHIB 0x3A
0x13FB  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:608

0x13FD  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x13FF  0x2E 0x07       JZB 0x1406 (+7)

                        // break;                                               code.hs:610

0x1401  0x28 0x02       DECSP 0x02
0x1403  0x33 0x00 0x01  JW 0x1503 (+256)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:613

0x1406  0x1A 0x12       PUSHIB 0x12
0x1408  0x1A 0x7B       PUSHIB 0x7B
0x140A  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:614

0x140C  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x140E  0x2E 0x07       JZB 0x1415 (+7)

                        // break;                                               code.hs:616

0x1410  0x28 0x02       DECSP 0x02
0x1412  0x33 0xF1 0x00  JW 0x1503 (+241)

                        // bool fa = true;                                      code.hs:618

0x1415  0x44            PUSHI0
0x1416  0x45            PUSHI1
0x1417  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // string localName;                                    code.hs:619

0x1419  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string localType;                                    code.hs:620

0x141B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string localOffset;                                  code.hs:621

0x141D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:625

0x141F  0x1A 0x13       PUSHIB 0x13
0x1421  0x2C 0x82       CALLB 0x82     // Parser.Check
0x1423  0x2E 0x07       JZB 0x142A (+7)

                        // Parser.Advance(); // }                               code.hs:627

0x1425  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:628

0x1427  0x33 0xB2 0x00  JW 0x14D9 (+178)

                        // if (!fa)                                             code.hs:630

0x142A  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x142C  0x2F 0x12       JNZB 0x143E (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x142E  0x1A 0x0D       PUSHIB 0x0D
0x1430  0x37 0x20 0x01  PUSHIW 0x0120
0x1433  0x1A 0x12       PUSHIB 0x12
0x1435  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1437  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:633

0x1439  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x143B  0x32 0x9E 0x00  JNZW 0x14D9 (+158)

                        // Parser.Consume(HopperToken.StringConstant, "local member name expected");

0x143E  0x1A 0x0B       PUSHIB 0x0B
0x1440  0x37 0x14 0x02  PUSHIW 0x0214
0x1443  0x1A 0x1A       PUSHIB 0x1A
0x1445  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1447  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:639

0x1449  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x144B  0x32 0x8E 0x00  JNZW 0x14D9 (+142)

                        // previousToken = PreviousToken;                       code.hs:643

0x144E  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1450  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x1452  0x24 0x02       SYSCALL0 0x02  // String.New
0x1454  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1456  0x37 0x13 0x01  PUSHIW 0x0113
0x1459  0x1A 0x06       PUSHIB 0x06
0x145B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x145D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x145F  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:646

0x1461  0x1A 0x0E       PUSHIB 0x0E
0x1463  0x1A 0x3A       PUSHIB 0x3A
0x1465  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:647

0x1467  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1469  0x2E 0x07       JZB 0x1470 (+7)

                        // break;                                               code.hs:649

0x146B  0x28 0x02       DECSP 0x02
0x146D  0x33 0x6C 0x00  JW 0x14D9 (+108)

                        // Parser.Consume(HopperToken.StringConstant, "local member value expected");

0x1470  0x1A 0x0B       PUSHIB 0x0B
0x1472  0x37 0x2E 0x02  PUSHIW 0x022E
0x1475  0x1A 0x1B       PUSHIB 0x1B
0x1477  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1479  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:652

0x147B  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x147D  0x2E 0x06       JZB 0x1483 (+6)

                        // break;                                               code.hs:654

0x147F  0x28 0x02       DECSP 0x02
0x1481  0x30 0x58       JB 0x14D9 (+88)

                        // previousToken = PreviousToken;                       code.hs:656

0x1483  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1485  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x1487  0x24 0x02       SYSCALL0 0x02  // String.New
0x1489  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x148B  0x37 0x13 0x01  PUSHIW 0x0113
0x148E  0x1A 0x06       PUSHIB 0x06
0x1490  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1492  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1494  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // switch (membername)                                  code.hs:658

0x1496  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)

                        // case "name":                                         code.hs:660

0x1498  0x37 0x56 0x01  PUSHIW 0x0156
0x149B  0x1A 0x04       PUSHIB 0x04
0x149D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x149F  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x14A1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x14A3  0x2F 0x08       JNZB 0x14AB (+8)

                        // localName = membervalue;                             code.hs:662

0x14A5  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x14A7  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:663

0x14A9  0x30 0x26       JB 0x14CF (+38)

                        // case "type":                                         code.hs:664

0x14AB  0x37 0x7F 0x01  PUSHIW 0x017F
0x14AE  0x1A 0x04       PUSHIB 0x04
0x14B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x14B2  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x14B4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x14B6  0x2F 0x08       JNZB 0x14BE (+8)

                        // localType = membervalue;                             code.hs:666

0x14B8  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x14BA  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // }                                                    code.hs:667

0x14BC  0x30 0x13       JB 0x14CF (+19)

                        // case "offset":                                       code.hs:668

0x14BE  0x37 0x39 0x01  PUSHIW 0x0139
0x14C1  0x1A 0x06       PUSHIB 0x06
0x14C3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x14C5  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x14C7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x14C9  0x2F 0x06       JNZB 0x14CF (+6)

                        // localOffset = membervalue;                           code.hs:670

0x14CB  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x14CD  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // }                                                    code.hs:672

0x14CF  0x28 0x02       DECSP 0x02

                        // fa = false;                                          code.hs:673

0x14D1  0x44            PUSHI0
0x14D2  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:674

0x14D4  0x28 0x04       DECSP 0x04
0x14D6  0x33 0x49 0xFF  JW 0x141F (-183)

                        // if (Parser.HadError)                                 code.hs:675

0x14D9  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x14DB  0x2E 0x06       JZB 0x14E1 (+6)

                        // break;                                               code.hs:677

0x14DD  0x28 0x0A       DECSP 0x0A
0x14DF  0x30 0x24       JB 0x1503 (+36)

                        // <string> localList;                                  code.hs:679

0x14E1  0x1A 0x0F       PUSHIB 0x0F
0x14E3  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // localList.Append(localName);                         code.hs:680

0x14E5  0x56 0x1A 0x14  PUSHLOCALBB 0x141A
0x14E8  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localList.Append(localType);                         code.hs:681

0x14EA  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x14ED  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localList.Append(localOffset);                       code.hs:682

0x14EF  0x56 0x1A 0x18  PUSHLOCALBB 0x181A
0x14F2  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localLists[range] = localList;                       code.hs:683

0x14F4  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x14F7  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x14F9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:684

0x14FB  0x44            PUSHI0
0x14FC  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:685

0x14FE  0x28 0x0C       DECSP 0x0C
0x1500  0x33 0xB0 0xFE  JW 0x13B0 (-336)

                        // if (keepSymbols)                                     code.hs:686

0x1503  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x1505  0x2E 0x0E       JZB 0x1513 (+14)

                        // methodDictionary["locals"] = localLists;             code.hs:688

0x1507  0x4E            PUSHLOCALB00
0x1508  0x37 0xF9 0x01  PUSHIW 0x01F9
0x150B  0x1A 0x06       PUSHIB 0x06
0x150D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x150F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1511  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:690

0x1513  0x28 0x04       DECSP 0x04
0x1515  0x33 0xF4 0x02  JW 0x1809 (+756)

                        // case "arguments":                                    code.hs:691

0x1518  0x1A 0x56       PUSHIB 0x56
0x151A  0x1A 0x09       PUSHIB 0x09
0x151C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x151E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1520  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1522  0x32 0x83 0x01  JNZW 0x16A5 (+387)

                        // <string, <string> > argumentLists;                   code.hs:693

0x1525  0x1A 0x0F       PUSHIB 0x0F
0x1527  0x1A 0x19       PUSHIB 0x19
0x1529  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:695

0x152B  0x1A 0x12       PUSHIB 0x12
0x152D  0x1A 0x7B       PUSHIB 0x7B
0x152F  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:696

0x1531  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1533  0x2E 0x07       JZB 0x153A (+7)

                        // break;                                               code.hs:698

0x1535  0x28 0x08       DECSP 0x08
0x1537  0x33 0xDB 0x02  JW 0x1812 (+731)

                        // bool fc = true;                                      code.hs:700

0x153A  0x44            PUSHI0
0x153B  0x45            PUSHI1
0x153C  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:703

0x153E  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1540  0x32 0x51 0x01  JNZW 0x1691 (+337)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:707

0x1543  0x1A 0x13       PUSHIB 0x13
0x1545  0x2C 0x82       CALLB 0x82     // Parser.Check
0x1547  0x2E 0x07       JZB 0x154E (+7)

                        // Parser.Advance(); // }                               code.hs:709

0x1549  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:710

0x154B  0x33 0x46 0x01  JW 0x1691 (+326)

                        // if (!fc)                                             code.hs:712

0x154E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1550  0x2F 0x12       JNZB 0x1562 (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x1552  0x1A 0x0D       PUSHIB 0x0D
0x1554  0x37 0x20 0x01  PUSHIW 0x0120
0x1557  0x1A 0x12       PUSHIB 0x12
0x1559  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x155B  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:715

0x155D  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x155F  0x32 0x32 0x01  JNZW 0x1691 (+306)

                        // Parser.Consume(HopperToken.StringConstant, "BP offset expected");

0x1562  0x1A 0x0B       PUSHIB 0x0B
0x1564  0x37 0x49 0x02  PUSHIW 0x0249
0x1567  0x1A 0x12       PUSHIB 0x12
0x1569  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x156B  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:722

0x156D  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x156F  0x32 0x22 0x01  JNZW 0x1691 (+290)

                        // previousToken = PreviousToken;                       code.hs:726

0x1572  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1574  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:727

0x1576  0x24 0x02       SYSCALL0 0x02  // String.New
0x1578  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x157A  0x37 0x13 0x01  PUSHIW 0x0113
0x157D  0x1A 0x06       PUSHIB 0x06
0x157F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1581  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1583  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:729

0x1585  0x1A 0x0E       PUSHIB 0x0E
0x1587  0x1A 0x3A       PUSHIB 0x3A
0x1589  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:730

0x158B  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x158D  0x2E 0x07       JZB 0x1594 (+7)

                        // break;                                               code.hs:732

0x158F  0x28 0x02       DECSP 0x02
0x1591  0x33 0x00 0x01  JW 0x1691 (+256)

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:735

0x1594  0x1A 0x12       PUSHIB 0x12
0x1596  0x1A 0x7B       PUSHIB 0x7B
0x1598  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:736

0x159A  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x159C  0x2E 0x07       JZB 0x15A3 (+7)

                        // break;                                               code.hs:738

0x159E  0x28 0x02       DECSP 0x02
0x15A0  0x33 0xF1 0x00  JW 0x1691 (+241)

                        // bool fa = true;                                      code.hs:740

0x15A3  0x44            PUSHI0
0x15A4  0x45            PUSHI1
0x15A5  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // string argumentName;                                 code.hs:741

0x15A7  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string argumentRef;                                  code.hs:742

0x15A9  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string argumentType;                                 code.hs:743

0x15AB  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:747

0x15AD  0x1A 0x13       PUSHIB 0x13
0x15AF  0x2C 0x82       CALLB 0x82     // Parser.Check
0x15B1  0x2E 0x07       JZB 0x15B8 (+7)

                        // Parser.Advance(); // }                               code.hs:749

0x15B3  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:750

0x15B5  0x33 0xB2 0x00  JW 0x1667 (+178)

                        // if (!fa)                                             code.hs:752

0x15B8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x15BA  0x2F 0x12       JNZB 0x15CC (+18)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x15BC  0x1A 0x0D       PUSHIB 0x0D
0x15BE  0x37 0x20 0x01  PUSHIW 0x0120
0x15C1  0x1A 0x12       PUSHIB 0x12
0x15C3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x15C5  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:755

0x15C7  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x15C9  0x32 0x9E 0x00  JNZW 0x1667 (+158)

                        // Parser.Consume(HopperToken.StringConstant, "argument member name expected");

0x15CC  0x1A 0x0B       PUSHIB 0x0B
0x15CE  0x37 0x5B 0x02  PUSHIW 0x025B
0x15D1  0x1A 0x1D       PUSHIB 0x1D
0x15D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x15D5  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:761

0x15D7  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x15D9  0x32 0x8E 0x00  JNZW 0x1667 (+142)

                        // previousToken = PreviousToken;                       code.hs:765

0x15DC  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x15DE  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membername = previousToken["lexeme"];

0x15E0  0x24 0x02       SYSCALL0 0x02  // String.New
0x15E2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x15E4  0x37 0x13 0x01  PUSHIW 0x0113
0x15E7  0x1A 0x06       PUSHIB 0x06
0x15E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x15EB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x15ED  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:768

0x15EF  0x1A 0x0E       PUSHIB 0x0E
0x15F1  0x1A 0x3A       PUSHIB 0x3A
0x15F3  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:769

0x15F5  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x15F7  0x2E 0x07       JZB 0x15FE (+7)

                        // break;                                               code.hs:771

0x15F9  0x28 0x02       DECSP 0x02
0x15FB  0x33 0x6C 0x00  JW 0x1667 (+108)

                        // Parser.Consume(HopperToken.StringConstant, "argument member value expected");

0x15FE  0x1A 0x0B       PUSHIB 0x0B
0x1600  0x37 0x78 0x02  PUSHIW 0x0278
0x1603  0x1A 0x1E       PUSHIB 0x1E
0x1605  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1607  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:774

0x1609  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x160B  0x2E 0x06       JZB 0x1611 (+6)

                        // break;                                               code.hs:776

0x160D  0x28 0x02       DECSP 0x02
0x160F  0x30 0x58       JB 0x1667 (+88)

                        // previousToken = PreviousToken;                       code.hs:778

0x1611  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1613  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string membervalue = previousToken["lexeme"];

0x1615  0x24 0x02       SYSCALL0 0x02  // String.New
0x1617  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1619  0x37 0x13 0x01  PUSHIW 0x0113
0x161C  0x1A 0x06       PUSHIB 0x06
0x161E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1620  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1622  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // switch (membername)                                  code.hs:780

0x1624  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)

                        // case "name":                                         code.hs:782

0x1626  0x37 0x56 0x01  PUSHIW 0x0156
0x1629  0x1A 0x04       PUSHIB 0x04
0x162B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x162D  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x162F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1631  0x2F 0x08       JNZB 0x1639 (+8)

                        // argumentName = membervalue;                          code.hs:784

0x1633  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x1635  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // }                                                    code.hs:785

0x1637  0x30 0x26       JB 0x165D (+38)

                        // case "type":                                         code.hs:786

0x1639  0x37 0x7F 0x01  PUSHIW 0x017F
0x163C  0x1A 0x04       PUSHIB 0x04
0x163E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1640  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x1642  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1644  0x2F 0x08       JNZB 0x164C (+8)

                        // argumentType = membervalue;                          code.hs:788

0x1646  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x1648  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // }                                                    code.hs:789

0x164A  0x30 0x13       JB 0x165D (+19)

                        // case "ref":                                          code.hs:790

0x164C  0x37 0x96 0x02  PUSHIW 0x0296
0x164F  0x1A 0x03       PUSHIB 0x03
0x1651  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1653  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x1655  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1657  0x2F 0x06       JNZB 0x165D (+6)

                        // argumentRef = membervalue;                           code.hs:792

0x1659  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x165B  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // }                                                    code.hs:794

0x165D  0x28 0x02       DECSP 0x02

                        // fa = false;                                          code.hs:795

0x165F  0x44            PUSHI0
0x1660  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // }                                                    code.hs:796

0x1662  0x28 0x04       DECSP 0x04
0x1664  0x33 0x49 0xFF  JW 0x15AD (-183)

                        // if (Parser.HadError)                                 code.hs:797

0x1667  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1669  0x2E 0x06       JZB 0x166F (+6)

                        // break;                                               code.hs:799

0x166B  0x28 0x0A       DECSP 0x0A
0x166D  0x30 0x24       JB 0x1691 (+36)

                        // <string> argumentList;                               code.hs:801

0x166F  0x1A 0x0F       PUSHIB 0x0F
0x1671  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // argumentList.Append(argumentRef);                    code.hs:802

0x1673  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x1676  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentList.Append(argumentType);                   code.hs:803

0x1678  0x56 0x1A 0x18  PUSHLOCALBB 0x181A
0x167B  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentList.Append(argumentName);                   code.hs:804

0x167D  0x56 0x1A 0x14  PUSHLOCALBB 0x141A
0x1680  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argumentLists[offset] = argumentList;                code.hs:805

0x1682  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x1685  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x1687  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:808

0x1689  0x44            PUSHI0
0x168A  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:809

0x168C  0x28 0x0C       DECSP 0x0C
0x168E  0x33 0xB0 0xFE  JW 0x153E (-336)

                        // if (keepSymbols)                                     code.hs:810

0x1691  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x1693  0x2E 0x0D       JZB 0x16A0 (+13)

                        // methodDictionary["arguments"] = argumentLists;

0x1695  0x4E            PUSHLOCALB00
0x1696  0x1A 0x56       PUSHIB 0x56
0x1698  0x1A 0x09       PUSHIB 0x09
0x169A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x169C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x169E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:814

0x16A0  0x28 0x04       DECSP 0x04
0x16A2  0x33 0x67 0x01  JW 0x1809 (+359)

                        // case "debug":                                        code.hs:815

0x16A5  0x37 0x99 0x02  PUSHIW 0x0299
0x16A8  0x1A 0x05       PUSHIB 0x05
0x16AA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x16AC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x16AE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x16B0  0x32 0xB9 0x00  JNZW 0x1769 (+185)

                        // <string,string> debugInfo;                           code.hs:817

0x16B3  0x1A 0x0F       PUSHIB 0x0F
0x16B5  0x1A 0x0F       PUSHIB 0x0F
0x16B7  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             code.hs:818

0x16B9  0x1A 0x12       PUSHIB 0x12
0x16BB  0x1A 0x7B       PUSHIB 0x7B
0x16BD  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:819

0x16BF  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x16C1  0x2E 0x07       JZB 0x16C8 (+7)

                        // break;                                               code.hs:821

0x16C3  0x28 0x08       DECSP 0x08
0x16C5  0x33 0x4D 0x01  JW 0x1812 (+333)

                        // bool fc = true;                                      code.hs:823

0x16C8  0x44            PUSHI0
0x16C9  0x45            PUSHI1
0x16CA  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 code.hs:826

0x16CC  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x16CE  0x32 0x86 0x00  JNZW 0x1754 (+134)

                        // if (Parser.Check(HopperToken.RBrace))                code.hs:830

0x16D1  0x1A 0x13       PUSHIB 0x13
0x16D3  0x2C 0x82       CALLB 0x82     // Parser.Check
0x16D5  0x2E 0x07       JZB 0x16DC (+7)

                        // Parser.Advance(); // }                               code.hs:832

0x16D7  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:833

0x16D9  0x33 0x7B 0x00  JW 0x1754 (+123)

                        // if (!fc)                                             code.hs:835

0x16DC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x16DE  0x2F 0x11       JNZB 0x16EF (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x16E0  0x1A 0x0D       PUSHIB 0x0D
0x16E2  0x37 0x20 0x01  PUSHIW 0x0120
0x16E5  0x1A 0x12       PUSHIB 0x12
0x16E7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x16E9  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:838

0x16EB  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x16ED  0x2F 0x67       JNZB 0x1754 (+103)

                        // Parser.Consume(HopperToken.StringConstant, "offset key expected");

0x16EF  0x1A 0x0B       PUSHIB 0x0B
0x16F1  0x37 0x9E 0x02  PUSHIW 0x029E
0x16F4  0x1A 0x13       PUSHIB 0x13
0x16F6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x16F8  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:845

0x16FA  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x16FC  0x2F 0x58       JNZB 0x1754 (+88)

                        // previousToken = PreviousToken;                       code.hs:849

0x16FE  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1700  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string offset = previousToken["lexeme"];             code.hs:850

0x1702  0x24 0x02       SYSCALL0 0x02  // String.New
0x1704  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1706  0x37 0x13 0x01  PUSHIW 0x0113
0x1709  0x1A 0x06       PUSHIB 0x06
0x170B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x170D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x170F  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // Parser.Consume(HopperToken.Colon, ':');              code.hs:852

0x1711  0x1A 0x0E       PUSHIB 0x0E
0x1713  0x1A 0x3A       PUSHIB 0x3A
0x1715  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:853

0x1717  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1719  0x2E 0x06       JZB 0x171F (+6)

                        // break;                                               code.hs:855

0x171B  0x28 0x02       DECSP 0x02
0x171D  0x30 0x37       JB 0x1754 (+55)

                        // Parser.Consume(HopperToken.StringConstant, "line value expected");

0x171F  0x1A 0x0B       PUSHIB 0x0B
0x1721  0x37 0xB1 0x02  PUSHIW 0x02B1
0x1724  0x1A 0x13       PUSHIB 0x13
0x1726  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1728  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:859

0x172A  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x172C  0x2E 0x06       JZB 0x1732 (+6)

                        // break;                                               code.hs:861

0x172E  0x28 0x02       DECSP 0x02
0x1730  0x30 0x24       JB 0x1754 (+36)

                        // previousToken = PreviousToken;                       code.hs:863

0x1732  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x1734  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string ln = previousToken["lexeme"];                 code.hs:864

0x1736  0x24 0x02       SYSCALL0 0x02  // String.New
0x1738  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x173A  0x37 0x13 0x01  PUSHIW 0x0113
0x173D  0x1A 0x06       PUSHIB 0x06
0x173F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1741  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1743  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // debugInfo[offset] = ln;                              code.hs:866

0x1745  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x1748  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x174A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fc = false;                                          code.hs:868

0x174C  0x44            PUSHI0
0x174D  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // } // loop                                            code.hs:869

0x174F  0x28 0x04       DECSP 0x04
0x1751  0x33 0x7B 0xFF  JW 0x16CC (-133)

                        // if (keepSymbols)                                     code.hs:870

0x1754  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x1756  0x2E 0x0E       JZB 0x1764 (+14)

                        // methodDictionary["debug"] = debugInfo;               code.hs:872

0x1758  0x4E            PUSHLOCALB00
0x1759  0x37 0x99 0x02  PUSHIW 0x0299
0x175C  0x1A 0x05       PUSHIB 0x05
0x175E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1760  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1762  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:874

0x1764  0x28 0x04       DECSP 0x04
0x1766  0x33 0xA3 0x00  JW 0x1809 (+163)

                        // case "code":                                         code.hs:875

0x1769  0x1A 0x0E       PUSHIB 0x0E
0x176B  0x1A 0x04       PUSHIB 0x04
0x176D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x176F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1771  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1773  0x32 0x7F 0x00  JNZW 0x17F2 (+127)

                        // Parser.Consume(HopperToken.LBracket, '[');           code.hs:877

0x1776  0x1A 0x14       PUSHIB 0x14
0x1778  0x1A 0x5B       PUSHIB 0x5B
0x177A  0x2C 0x7F       CALLB 0x7F     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:878

0x177C  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x177E  0x2E 0x07       JZB 0x1785 (+7)

                        // break;                                               code.hs:880

0x1780  0x28 0x06       DECSP 0x06
0x1782  0x33 0x90 0x00  JW 0x1812 (+144)

                        // bool fc = true;                                      code.hs:882

0x1785  0x44            PUSHI0
0x1786  0x45            PUSHI1
0x1787  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 code.hs:885

0x1789  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x178B  0x2F 0x63       JNZB 0x17EE (+99)

                        // if (Parser.Check(HopperToken.RBracket))              code.hs:889

0x178D  0x1A 0x15       PUSHIB 0x15
0x178F  0x2C 0x82       CALLB 0x82     // Parser.Check
0x1791  0x2E 0x06       JZB 0x1797 (+6)

                        // Parser.Advance(); // ]                               code.hs:891

0x1793  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               code.hs:892

0x1795  0x30 0x59       JB 0x17EE (+89)

                        // if (!fc)                                             code.hs:894

0x1797  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1799  0x2F 0x11       JNZB 0x17AA (+17)

                        // Parser.Consume(HopperToken.Comma, "',' comma expected");

0x179B  0x1A 0x0D       PUSHIB 0x0D
0x179D  0x37 0x20 0x01  PUSHIW 0x0120
0x17A0  0x1A 0x12       PUSHIB 0x12
0x17A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x17A4  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:897

0x17A6  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x17A8  0x2F 0x46       JNZB 0x17EE (+70)

                        // Parser.Consume(HopperToken.Integer, "code expected");

0x17AA  0x1A 0x09       PUSHIB 0x09
0x17AC  0x37 0xC4 0x02  PUSHIW 0x02C4
0x17AF  0x1A 0x0D       PUSHIB 0x0D
0x17B1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x17B3  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 code.hs:903

0x17B5  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x17B7  0x2F 0x37       JNZB 0x17EE (+55)

                        // if (keepCode)                                        code.hs:907

0x17B9  0x1C 0xF4       PUSHLOCALB 0xF4 (BP-12)
0x17BB  0x2E 0x28       JZB 0x17E3 (+40)

                        // uint hc;                                             code.hs:909

0x17BD  0x44            PUSHI0

                        // previousToken = PreviousToken;                       code.hs:910

0x17BE  0x2C 0x74       CALLB 0x74     // Parser.PreviousToken_Get
0x17C0  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string hexcode = previousToken["lexeme"];            code.hs:911

0x17C2  0x24 0x02       SYSCALL0 0x02  // String.New
0x17C4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x17C6  0x37 0x13 0x01  PUSHIW 0x0113
0x17C9  0x1A 0x06       PUSHIB 0x06
0x17CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x17CD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x17CF  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Token.TryParseUInt(hexcode, ref hc))             code.hs:912

0x17D1  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x17D3  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x17D5  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x17D7  0x2E 0x02       JZB 0x17D9 (+2)

                        // code.Append(byte(hc));                               code.hs:915

0x17D9  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x17DB  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x17DD  0x51 0x03       CAST 0x03
0x17DF  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    code.hs:916

0x17E1  0x28 0x04       DECSP 0x04

                        // codeLength++;                                        code.hs:917

0x17E3  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x17E5  0x45            PUSHI1
0x17E6  0x00            ADD
0x17E7  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // fc = false;                                          code.hs:918

0x17E9  0x44            PUSHI0
0x17EA  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // } // loop                                            code.hs:919

0x17EC  0x30 0x9D       JB 0x1789 (-99)

                        // }                                                    code.hs:920

0x17EE  0x28 0x02       DECSP 0x02
0x17F0  0x30 0x19       JB 0x1809 (+25)

                        // Parser.Error("unexpected key '" + keyName + "'");

0x17F2  0x37 0xD1 0x02  PUSHIW 0x02D1
0x17F5  0x1A 0x10       PUSHIB 0x10
0x17F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x17F9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x17FB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x17FD  0x1A 0x27       PUSHIB 0x27
0x17FF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1801  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1803  0x2C 0x7B       CALLB 0x7B     // Parser.Error

                        // break;                                               code.hs:924

0x1805  0x28 0x06       DECSP 0x06
0x1807  0x30 0x0B       JB 0x1812 (+11)

                        // }                                                    code.hs:926

0x1809  0x28 0x02       DECSP 0x02

                        // first = false;                                       code.hs:927

0x180B  0x44            PUSHI0
0x180C  0x4D            POPLOCALB02

                        // } // loop                                            code.hs:928

0x180D  0x28 0x04       DECSP 0x04
0x180F  0x33 0xF0 0xF9  JW 0x11FF (-1552)

                        // if (!isData && keepSymbols)                          code.hs:930

0x1812  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1814  0x41            BOOLNOT
0x1815  0x27 0x00       DUP 0x00
0x1817  0x2E 0x05       JZB 0x181C (+5)
0x1819  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x181B  0x0C            BOOLAND
0x181C  0x2E 0x25       JZB 0x1841 (+37)

                        // uint iMethod;                                        code.hs:932

0x181E  0x44            PUSHI0

                        // if (Token.TryParseUInt(methodIndex, ref iMethod))

0x181F  0x1C 0xF2       PUSHLOCALB 0xF2 (BP-14)
0x1821  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x1823  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x1825  0x2E 0x02       JZB 0x1827 (+2)

                        // string name = "0x" + iMethod.ToHexString(4);

0x1827  0x24 0x02       SYSCALL0 0x02  // String.New
0x1829  0x37 0x30 0x78  PUSHIW 0x7830
0x182C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x182E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1830  0x1A 0x04       PUSHIB 0x04
0x1832  0x2C 0x9B       CALLB 0x9B     // UInt.ToHexString
0x1834  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1836  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // debugSymbols[name] = methodDictionary;               code.hs:937

0x1838  0x20 0x0E       PUSHGLOBALB 0x0E
0x183A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x183C  0x4E            PUSHLOCALB00
0x183D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:938

0x183F  0x28 0x04       DECSP 0x04

                        // return !Parser.HadError;                             code.hs:939

0x1841  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1843  0x41            BOOLNOT
0x1844  0x2B 0x14       RETRETB 0x14


// /source/compiler/json/code.hs:344
// ####  Code.MapSource(..)  ####                                               0x0034

0x1846  0x49            ENTER

                        // foreach (var kv in debugSymbols)                     code.hs:345

0x1847  0x20 0x0E       PUSHGLOBALB 0x0E
0x1849  0x1A 0x0F       PUSHIB 0x0F
0x184B  0x1A 0x0F       PUSHIB 0x0F
0x184D  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x184F  0x44            PUSHI0
0x1850  0x4E            PUSHLOCALB00
0x1851  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1853  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x1855  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x1857  0x4D            POPLOCALB02
0x1858  0x31 0xD6 0x00  JZW 0x192E (+214)

                        // if (kv.key == "globals")                             code.hs:347

0x185B  0x4F            PUSHLOCALB02
0x185C  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x185E  0x37 0x19 0x01  PUSHIW 0x0119
0x1861  0x1A 0x07       PUSHIB 0x07
0x1863  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1865  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1867  0x2E 0xE9       JZB 0x1850 (-23)

                        // string hex = kv.key;                                 code.hs:352

0x1869  0x24 0x02       SYSCALL0 0x02  // String.New
0x186B  0x4F            PUSHLOCALB02
0x186C  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x186E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint index;                                          code.hs:353

0x1870  0x44            PUSHI0

                        // if (!TryParseHex(hex, ref index))                    code.hs:354

0x1871  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1873  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x1875  0x2C 0x54       CALLB 0x54     // Token.TryParseHex
0x1877  0x2F 0x06       JNZB 0x187D (+6)

                        // Diagnostics.Die(0x03);                               code.hs:356

0x1879  0x1A 0x03       PUSHIB 0x03
0x187B  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // uint start = methodStart[index];                     code.hs:358

0x187D  0x44            PUSHI0
0x187E  0x20 0x08       PUSHGLOBALB 0x08
0x1880  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1882  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1884  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // <string,variant> methodSymbols = kv.value;           code.hs:359

0x1886  0x1A 0x0F       PUSHIB 0x0F
0x1888  0x1A 0x14       PUSHIB 0x14
0x188A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x188C  0x4F            PUSHLOCALB02
0x188D  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x188F  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string path = methodSymbols["source"];               code.hs:360

0x1891  0x24 0x02       SYSCALL0 0x02  // String.New
0x1893  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1895  0x37 0xB6 0x01  PUSHIW 0x01B6
0x1898  0x1A 0x06       PUSHIB 0x06
0x189A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x189C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x189E  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string lpath = path.ToLower();                       code.hs:361

0x18A0  0x24 0x02       SYSCALL0 0x02  // String.New
0x18A2  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x18A4  0x2C 0xC4       CALLB 0xC4     // String.ToLower
0x18A6  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // <uint,uint> map;                                     code.hs:362

0x18A8  0x1A 0x04       PUSHIB 0x04
0x18AA  0x1A 0x04       PUSHIB 0x04
0x18AC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (lineMap.Contains(lpath))                         code.hs:363

0x18AE  0x20 0x10       PUSHGLOBALB 0x10
0x18B0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x18B2  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x18B4  0x2E 0x0A       JZB 0x18BE (+10)

                        // map = lineMap[lpath];                                code.hs:365

0x18B6  0x20 0x10       PUSHGLOBALB 0x10
0x18B8  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x18BA  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x18BC  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // <string,string> smap = methodSymbols["debug"];

0x18BE  0x1A 0x0F       PUSHIB 0x0F
0x18C0  0x1A 0x0F       PUSHIB 0x0F
0x18C2  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x18C4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x18C6  0x37 0x99 0x02  PUSHIW 0x0299
0x18C9  0x1A 0x05       PUSHIB 0x05
0x18CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x18CD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x18CF  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // foreach (var kv2 in smap)                            code.hs:368

0x18D1  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x18D3  0x1A 0x0F       PUSHIB 0x0F
0x18D5  0x1A 0x0F       PUSHIB 0x0F
0x18D7  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x18D9  0x44            PUSHI0
0x18DA  0x56 0x16 0x1A  PUSHLOCALBB 0x1A16
0x18DD  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x18DF  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x18E1  0x1B 0x18       POPLOCALB 0x18 (BP+24)
0x18E3  0x2E 0x3D       JZB 0x1920 (+61)

                        // uint offset;                                         code.hs:370

0x18E5  0x44            PUSHI0

                        // uint ln;                                             code.hs:371

0x18E6  0x44            PUSHI0

                        // if (Token.TryParseUInt(kv2.key, ref offset))

0x18E7  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x18E9  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x18EB  0x21 0x1C       PUSHSTACKADDRB 0x1C (BP+28)
0x18ED  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x18EF  0x2E 0x02       JZB 0x18F1 (+2)

                        // if (Token.TryParseUInt(kv2.value, ref ln))           code.hs:375

0x18F1  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x18F3  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x18F5  0x21 0x1E       PUSHSTACKADDRB 0x1E (BP+30)
0x18F7  0x2C 0x53       CALLB 0x53     // Token.TryParseUInt
0x18F9  0x2E 0x02       JZB 0x18FB (+2)

                        // uint address = start + offset;                       code.hs:378

0x18FB  0x44            PUSHI0
0x18FC  0x56 0x0A 0x1C  PUSHLOCALBB 0x1C0A
0x18FF  0x00            ADD
0x1900  0x1B 0x20       POPLOCALB 0x20 (BP+32)

                        // map[ln] = address;                                   code.hs:379

0x1902  0x56 0x12 0x1E  PUSHLOCALBB 0x1E12
0x1905  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x1907  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // codeMap[address] = path + ":" + kv2.value;           code.hs:380

0x1909  0x20 0x12       PUSHGLOBALB 0x12
0x190B  0x56 0x20 0x0E  PUSHLOCALBB 0x0E20
0x190E  0x1A 0x3A       PUSHIB 0x3A
0x1910  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1912  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1914  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x1916  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x1918  0x24 0x03       SYSCALL0 0x03  // String.Append
0x191A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:381

0x191C  0x28 0x06       DECSP 0x06
0x191E  0x30 0xBC       JB 0x18DA (-68)
0x1920  0x28 0x06       DECSP 0x06

                        // lineMap[lpath] = map;                                code.hs:382

0x1922  0x20 0x10       PUSHGLOBALB 0x10
0x1924  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x1927  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    code.hs:383

0x1929  0x28 0x10       DECSP 0x10
0x192B  0x33 0x25 0xFF  JW 0x1850 (-219)
0x192E  0x28 0x06       DECSP 0x06

                        // }                                                    code.hs:384

0x1930  0x4A            RET0


// /source/system/color.hs:42
// ####  Color.ProgressText_Get(..)  ####                                       0x0115

0x1931  0x49            ENTER

                        // uint ProgressText        { get { return 0x006; } }

0x1932  0x1A 0x06       PUSHIB 0x06
0x1934  0x4A            RET0


// /source/system/color.hs:43
// ####  Color.ProgressFace_Get(..)  ####                                       0x0116

0x1935  0x49            ENTER

                        // uint ProgressFace        { get { return 0xDCB; } }

0x1936  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x1939  0x4A            RET0


// /source/system/color.hs:44
// ####  Color.ProgressHighlight_Get(..)  ####                                  0x0117

0x193A  0x49            ENTER

                        // uint ProgressHighlight   { get { return 0x3A8; }}

0x193B  0x37 0xA8 0x03  PUSHIW 0x03A8
0x193E  0x4A            RET0


// /source/system/color.hs:66
// ####  Color.StatusText_Get(..)  ####                                         0x0127

0x193F  0x49            ENTER

                        // uint StatusText   { get { return 0x006; } }

0x1940  0x1A 0x06       PUSHIB 0x06
0x1942  0x4A            RET0


// /source/system/color.hs:65
// ####  Color.StatusFace_Get(..)  ####                                         0x0126

0x1943  0x49            ENTER

                        // uint StatusFace   { get { return 0xDCB; } }

0x1944  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x1947  0x4A            RET0


// /source/system/color.hs:40
// ####  Color.ProgressTick_Get(..)  ####                                       0x0113

0x1948  0x49            ENTER

                        // uint ProgressTick        { get { return 0x258; } }

0x1949  0x37 0x58 0x02  PUSHIW 0x0258
0x194C  0x4A            RET0


// /source/system/color.hs:41
// ####  Color.ProgressBackground_Get(..)  ####                                 0x0114

0x194D  0x49            ENTER

                        // uint ProgressBackground  { get { return 0x68A; } }

0x194E  0x37 0x8A 0x06  PUSHIW 0x068A
0x1951  0x4A            RET0


// /source/system/color.hs:34
// ####  Color.MatrixGreen_Get(..)  ####                                        0x010F

0x1952  0x49            ENTER

                        // uint MatrixGreen         { get { return 0x7F7; } }

0x1953  0x37 0xF7 0x07  PUSHIW 0x07F7
0x1956  0x4A            RET0


// /source/system/color.hs:4
// ####  Color.Black_Get(..)  ####                                              0x00F7


                        // uint Black        { get { return 0x000; } }

0x1957  0x5F 0x01       ENTERB 0x01

                        // uint Black        { get { return 0x000; } }

0x1959  0x4A            RET0


// /source/system/byte.hs:10
// ####  Byte.ToHexString(..)  ####                                             0x0093


                        // int digit;                                           byte.hs:11

0x195A  0x5F 0x03       ENTERB 0x03

                        // string result;                                       byte.hs:14

0x195C  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         byte.hs:15

0x195E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1960  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x1962  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1964  0x44            PUSHI0
0x1965  0x16            GTI
0x1966  0x2E 0x1E       JZB 0x1984 (+30)

                        // digit = this % 16;                                   byte.hs:17

0x1968  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x196A  0x1A 0x10       PUSHIB 0x10
0x196C  0x04            MOD
0x196D  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         byte.hs:18

0x196E  0x4E            PUSHLOCALB00
0x196F  0x51 0x03       CAST 0x03
0x1971  0x2C 0x8C       CALLB 0x8C     // Char.ToHex
0x1973  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    byte.hs:19

0x1974  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x1976  0x4F            PUSHLOCALB02
0x1977  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    byte.hs:20

0x1979  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x197B  0x1A 0x10       PUSHIB 0x10
0x197D  0x02            DIV
0x197E  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    byte.hs:21

0x1980  0x23 0x04       DECLOCALB 0x04 (BP+4)
0x1982  0x30 0xE0       JB 0x1962 (-32)

                        // return result;                                       byte.hs:22

0x1984  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1986  0x2B 0x0C       RETRETB 0x0C


// /source/system/uint.hs:43
// ####  UInt.ToHexString(..)  ####                                             0x009B


                        // uint digit;                                          uint.hs:44

0x1988  0x5F 0x03       ENTERB 0x03

                        // string result;                                       uint.hs:47

0x198A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         uint.hs:48

0x198C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x198E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x1990  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1992  0x44            PUSHI0
0x1993  0x07            GT
0x1994  0x2E 0x1E       JZB 0x19B2 (+30)

                        // digit = this % 16;                                   uint.hs:50

0x1996  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1998  0x1A 0x10       PUSHIB 0x10
0x199A  0x04            MOD
0x199B  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         uint.hs:51

0x199C  0x4E            PUSHLOCALB00
0x199D  0x51 0x03       CAST 0x03
0x199F  0x2C 0x8C       CALLB 0x8C     // Char.ToHex
0x19A1  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:52

0x19A2  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x19A4  0x4F            PUSHLOCALB02
0x19A5  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    uint.hs:53

0x19A7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x19A9  0x1A 0x10       PUSHIB 0x10
0x19AB  0x02            DIV
0x19AC  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    uint.hs:54

0x19AE  0x23 0x04       DECLOCALB 0x04 (BP+4)
0x19B0  0x30 0xE0       JB 0x1990 (-32)

                        // return result;                                       uint.hs:55

0x19B2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x19B4  0x2B 0x0C       RETRETB 0x0C


// /source/system/char.hs:68
// ####  Char.ToLower(..)  ####                                                 0x008D


                        // byte b;                                              char.hs:69

0x19B6  0x5F 0x01       ENTERB 0x01

                        // if (IsUpper(this))                                   char.hs:70

0x19B8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19BA  0x2C 0x86       CALLB 0x86     // Char.IsUpper
0x19BC  0x2E 0x0E       JZB 0x19CA (+14)

                        // b = byte(this) - 65 + 97; // -A + a;                 char.hs:72

0x19BE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19C0  0x1A 0x41       PUSHIB 0x41
0x19C2  0x01            SUB
0x19C3  0x1A 0x61       PUSHIB 0x61
0x19C5  0x00            ADD
0x19C6  0x4C            POPLOCALB00

                        // this = char(b);                                      char.hs:73

0x19C7  0x4E            PUSHLOCALB00
0x19C8  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return this;                                         char.hs:75

0x19CA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19CC  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:42
// ####  Char.IsDigit(..)  ####                                                 0x008A


                        // byte b;                                              char.hs:43

0x19CE  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:44

0x19D0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19D2  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)); // 0..9             char.hs:45

0x19D3  0x4E            PUSHLOCALB00
0x19D4  0x1A 0x30       PUSHIB 0x30
0x19D6  0x09            GE
0x19D7  0x27 0x00       DUP 0x00
0x19D9  0x2E 0x07       JZB 0x19E0 (+7)
0x19DB  0x4E            PUSHLOCALB00
0x19DC  0x1A 0x39       PUSHIB 0x39
0x19DE  0x0A            LE
0x19DF  0x0C            BOOLAND
0x19E0  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:78
// ####  Char.IsHexDigit(..)  ####                                              0x008E


                        // byte b;                                              char.hs:79

0x19E2  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:80

0x19E4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x19E6  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)) || // 0..9           char.hs:81

0x19E7  0x4E            PUSHLOCALB00
0x19E8  0x1A 0x30       PUSHIB 0x30
0x19EA  0x09            GE
0x19EB  0x27 0x00       DUP 0x00
0x19ED  0x2E 0x07       JZB 0x19F4 (+7)
0x19EF  0x4E            PUSHLOCALB00
0x19F0  0x1A 0x39       PUSHIB 0x39
0x19F2  0x0A            LE
0x19F3  0x0C            BOOLAND
0x19F4  0x27 0x00       DUP 0x00
0x19F6  0x2F 0x22       JNZB 0x1A18 (+34)
0x19F8  0x4E            PUSHLOCALB00
0x19F9  0x1A 0x41       PUSHIB 0x41
0x19FB  0x09            GE
0x19FC  0x27 0x00       DUP 0x00
0x19FE  0x2E 0x07       JZB 0x1A05 (+7)
0x1A00  0x4E            PUSHLOCALB00
0x1A01  0x1A 0x46       PUSHIB 0x46
0x1A03  0x0A            LE
0x1A04  0x0C            BOOLAND
0x1A05  0x0B            BOOLOR
0x1A06  0x27 0x00       DUP 0x00
0x1A08  0x2F 0x10       JNZB 0x1A18 (+16)
0x1A0A  0x4E            PUSHLOCALB00
0x1A0B  0x1A 0x61       PUSHIB 0x61
0x1A0D  0x09            GE
0x1A0E  0x27 0x00       DUP 0x00
0x1A10  0x2E 0x07       JZB 0x1A17 (+7)
0x1A12  0x4E            PUSHLOCALB00
0x1A13  0x1A 0x66       PUSHIB 0x66
0x1A15  0x0A            LE
0x1A16  0x0C            BOOLAND
0x1A17  0x0B            BOOLOR
0x1A18  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:56
// ####  Char.ToHex(..)  ####                                                   0x008C

0x1A1A  0x49            ENTER

                        // if (h < 10)                                          char.hs:57

0x1A1B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A1D  0x1A 0x0A       PUSHIB 0x0A
0x1A1F  0x08            LT
0x1A20  0x2E 0x0B       JZB 0x1A2B (+11)

                        // h = h + 48; // +0                                    char.hs:59

0x1A22  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A24  0x1A 0x30       PUSHIB 0x30
0x1A26  0x00            ADD
0x1A27  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    char.hs:60

0x1A29  0x30 0x09       JB 0x1A32 (+9)

                        // h = h + 55; // +A - 10                               char.hs:63

0x1A2B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A2D  0x1A 0x37       PUSHIB 0x37
0x1A2F  0x00            ADD
0x1A30  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return char(h);                                      char.hs:65

0x1A32  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A34  0x2B 0x02       RETRETB 0x02


// /source/system/char.hs:15
// ####  Char.IsUpper(..)  ####                                                 0x0086


                        // byte b;                                              char.hs:16

0x1A36  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:17

0x1A38  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A3A  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90));  // A..Z            char.hs:18

0x1A3B  0x4E            PUSHLOCALB00
0x1A3C  0x1A 0x41       PUSHIB 0x41
0x1A3E  0x09            GE
0x1A3F  0x27 0x00       DUP 0x00
0x1A41  0x2E 0x07       JZB 0x1A48 (+7)
0x1A43  0x4E            PUSHLOCALB00
0x1A44  0x1A 0x5A       PUSHIB 0x5A
0x1A46  0x0A            LE
0x1A47  0x0C            BOOLAND
0x1A48  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:263
// ####  String.StartsWith(..)  ####                                            0x00B7


                        // uint i;                                              string.hs:264

0x1A4A  0x5F 0x02       ENTERB 0x02

                        // length = pattern.Length;                             string.hs:266

0x1A4C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A4E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1A50  0x4D            POPLOCALB02

                        // if (length <= this.Length)                           string.hs:267

0x1A51  0x4F            PUSHLOCALB02
0x1A52  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1A54  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1A56  0x0A            LE
0x1A57  0x2E 0x1E       JZB 0x1A75 (+30)

                        // for ( ; i < length; i++)                             string.hs:269

0x1A59  0x4E            PUSHLOCALB00
0x1A5A  0x4F            PUSHLOCALB02
0x1A5B  0x08            LT
0x1A5C  0x2E 0x16       JZB 0x1A72 (+22)

                        // if (pattern[i] != this[i])                           string.hs:271

0x1A5E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A60  0x4E            PUSHLOCALB00
0x1A61  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1A63  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1A65  0x4E            PUSHLOCALB00
0x1A66  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1A68  0x06            NE
0x1A69  0x2E 0x05       JZB 0x1A6E (+5)

                        // return false;                                        string.hs:273

0x1A6B  0x44            PUSHI0
0x1A6C  0x2B 0x08       RETRETB 0x08

                        // }                                                    string.hs:275

0x1A6E  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x1A70  0x30 0xE9       JB 0x1A59 (-23)

                        // return true;                                         string.hs:276

0x1A72  0x45            PUSHI1
0x1A73  0x2B 0x08       RETRETB 0x08

                        // return false;                                        string.hs:278

0x1A75  0x44            PUSHI0
0x1A76  0x2B 0x08       RETRETB 0x08


// /source/system/string.hs:259
// ####  String.StartsWith(..)  ####                                            0x00B6

0x1A78  0x49            ENTER

                        // return (this.Length > 0) && (this[0] == pattern);

0x1A79  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1A7B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1A7D  0x44            PUSHI0
0x1A7E  0x07            GT
0x1A7F  0x27 0x00       DUP 0x00
0x1A81  0x2E 0x0B       JZB 0x1A8C (+11)
0x1A83  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1A85  0x44            PUSHI0
0x1A86  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1A88  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1A8A  0x05            EQ
0x1A8B  0x0C            BOOLAND
0x1A8C  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:383
// ####  String.LastIndexOf(..)  ####                                           0x00BF


                        // uint length;                                         string.hs:384

0x1A8E  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:388

0x1A90  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1A92  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1A94  0x4C            POPLOCALB00

                        // if (length == 0)                                     string.hs:389

0x1A95  0x4E            PUSHLOCALB00
0x1A96  0x2E 0x1D       JZB 0x1AB3 (+29)

                        // i = length-1;                                        string.hs:393

0x1A98  0x4E            PUSHLOCALB00
0x1A99  0x45            PUSHI1
0x1A9A  0x01            SUB
0x1A9B  0x4D            POPLOCALB02

                        // if (this[i] == pattern)                              string.hs:396

0x1A9C  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1A9E  0x4F            PUSHLOCALB02
0x1A9F  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1AA1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1AA3  0x05            EQ
0x1AA4  0x2E 0x08       JZB 0x1AAC (+8)

                        // index = i;                                           string.hs:398

0x1AA6  0x4F            PUSHLOCALB02
0x1AA7  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:399

0x1AA9  0x45            PUSHI1
0x1AAA  0x2B 0x0A       RETRETB 0x0A

                        // if (i == 0)                                          string.hs:401

0x1AAC  0x4F            PUSHLOCALB02
0x1AAD  0x2E 0x06       JZB 0x1AB3 (+6)

                        // i--;                                                 string.hs:405

0x1AAF  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:406

0x1AB1  0x30 0xEB       JB 0x1A9C (-21)

                        // return false;                                        string.hs:409

0x1AB3  0x44            PUSHI0
0x1AB4  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/scanner.hs:32
// ####  Scanner.New(..)  ####                                                  0x005A

0x1AB6  0x49            ENTER

                        // sourceLines.Clear();                                 scanner.hs:33

0x1AB7  0x20 0x26       PUSHGLOBALB 0x26
0x1AB9  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // Token.Initialize();                                  scanner.hs:34

0x1ABB  0x2C 0x49       CALLB 0x49     // Token.Initialize

                        // }                                                    scanner.hs:35

0x1ABD  0x4A            RET0


// /source/compiler/tokens/scanner.hs:38
// ####  Scanner.Load(..)  ####                                                 0x005B


                        // byte b;                                              scanner.hs:39

0x1ABE  0x5F 0x01       ENTERB 0x01

                        // string ln;                                           scanner.hs:40

0x1AC0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // sourceLines.Clear();                                 scanner.hs:42

0x1AC2  0x20 0x26       PUSHGLOBALB 0x26
0x1AC4  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // sourceLength = 0;                                    scanner.hs:43

0x1AC6  0x44            PUSHI0
0x1AC7  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1AC9  0x59 0x2C       POPCOPYGLOBALB 0x2C

                        // file sourceFile = File.Open(sourcePath);             scanner.hs:44

0x1ACB  0x24 0x60       SYSCALL0 0x60  // File.New
0x1ACD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1ACF  0x24 0x61       SYSCALL0 0x61  // File.Open
0x1AD1  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint progress = 0;                                   scanner.hs:45

0x1AD3  0x44            PUSHI0

                        // if (sourceFile.IsValid())                            scanner.hs:46

0x1AD4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1AD6  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x1AD8  0x2E 0x65       JZB 0x1B3D (+101)

                        // String.Build(ref ln); // clear                       scanner.hs:50

0x1ADA  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x1ADC  0x1A 0x02       PUSHIB 0x02
0x1ADE  0x26 0x83       SYSCALL 0x83  // String.Build

                        // b = sourceFile.Read();                               scanner.hs:53

0x1AE0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1AE2  0x24 0x64       SYSCALL0 0x64  // File.Read
0x1AE4  0x4C            POPLOCALB00

                        // if (b == 0)                                          scanner.hs:54

0x1AE5  0x4E            PUSHLOCALB00
0x1AE6  0x2E 0x0D       JZB 0x1AF3 (+13)

                        // Build(ref ln, char(b));                              scanner.hs:58

0x1AE8  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x1AEA  0x4E            PUSHLOCALB00
0x1AEB  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // if (b == 0x0A)                                       scanner.hs:59

0x1AED  0x4E            PUSHLOCALB00
0x1AEE  0x1A 0x0A       PUSHIB 0x0A
0x1AF0  0x05            EQ
0x1AF1  0x2E 0xEF       JZB 0x1AE0 (-17)

                        // if ((ln.Length == 0) && !sourceFile.IsValid())

0x1AF3  0x4F            PUSHLOCALB02
0x1AF4  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1AF6  0x44            PUSHI0
0x1AF7  0x05            EQ
0x1AF8  0x27 0x00       DUP 0x00
0x1AFA  0x2E 0x08       JZB 0x1B02 (+8)
0x1AFC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1AFE  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x1B00  0x41            BOOLNOT
0x1B01  0x0C            BOOLAND
0x1B02  0x2F 0x2D       JNZB 0x1B2F (+45)

                        // sourceLength = sourceLength + ln.Length;             scanner.hs:68

0x1B04  0x20 0x2C       PUSHGLOBALB 0x2C
0x1B06  0x4F            PUSHLOCALB02
0x1B07  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1B09  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1B0B  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x1B0D  0x59 0x2C       POPCOPYGLOBALB 0x2C

                        // sourceLines.Append(ln);                              scanner.hs:69

0x1B0F  0x20 0x26       PUSHGLOBALB 0x26
0x1B11  0x4F            PUSHLOCALB02
0x1B12  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // progress = progress + ln.Length;                     scanner.hs:71

0x1B14  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1B16  0x4F            PUSHLOCALB02
0x1B17  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1B19  0x00            ADD
0x1B1A  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (progress > 10240)                                scanner.hs:72

0x1B1C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1B1E  0x37 0x00 0x28  PUSHIW 0x2800
0x1B21  0x07            GT
0x1B22  0x2E 0xB8       JZB 0x1ADA (-72)

                        // Parser.ProgressTick("+");                            scanner.hs:74

0x1B24  0x1A 0x2B       PUSHIB 0x2B
0x1B26  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1B28  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // progress = 0;                                        scanner.hs:75

0x1B2A  0x44            PUSHI0
0x1B2B  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // } // loop                                            scanner.hs:77

0x1B2D  0x30 0xAD       JB 0x1ADA (-83)

                        // if (progress > 2560)                                 scanner.hs:78

0x1B2F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1B31  0x37 0x00 0x0A  PUSHIW 0x0A00
0x1B34  0x07            GT
0x1B35  0x2E 0x08       JZB 0x1B3D (+8)

                        // Parser.ProgressTick("+");                            scanner.hs:80

0x1B37  0x1A 0x2B       PUSHIB 0x2B
0x1B39  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1B3B  0x2C 0x70       CALLB 0x70     // Parser.ProgressTick

                        // currentSourcePath = sourcePath;                      scanner.hs:83

0x1B3D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B3F  0x59 0x32       POPCOPYGLOBALB 0x32

                        // }                                                    scanner.hs:84

0x1B41  0x2A 0x0A       RETB 0x0A


// /source/compiler/tokens/scanner.hs:86
// ####  Scanner.Reset(..)  ####                                                0x005C

0x1B43  0x49            ENTER

                        // if (sourcePath != currentSourcePath)                 scanner.hs:87

0x1B44  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B46  0x20 0x32       PUSHGLOBALB 0x32
0x1B48  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1B4A  0x2E 0x06       JZB 0x1B50 (+6)

                        // Load(sourcePath);                                    scanner.hs:89

0x1B4C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1B4E  0x2C 0x5B       CALLB 0x5B     // Scanner.Load

                        // currentPos = pos;                                    scanner.hs:91

0x1B50  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1B52  0x59 0x28       POPCOPYGLOBALB 0x28

                        // currentLine = ln;                                    scanner.hs:92

0x1B54  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1B56  0x1F 0x2A       POPGLOBALB 0x2A

                        // <string,string> empty;                               scanner.hs:93

0x1B58  0x1A 0x0F       PUSHIB 0x0F
0x1B5A  0x1A 0x0F       PUSHIB 0x0F
0x1B5C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // peekedToken = empty;                                 scanner.hs:94

0x1B5E  0x4E            PUSHLOCALB00
0x1B5F  0x59 0x3C       POPCOPYGLOBALB 0x3C

                        // isPeekedToken = false;                               scanner.hs:95

0x1B61  0x44            PUSHI0
0x1B62  0x1F 0x3E       POPGLOBALB 0x3E

                        // iCurrentSourceLine = 0;                              scanner.hs:98

0x1B64  0x44            PUSHI0
0x1B65  0x1F 0x2E       POPGLOBALB 0x2E

                        // currentStartPos = 0;                                 scanner.hs:99

0x1B67  0x44            PUSHI0
0x1B68  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1B6A  0x59 0x30       POPCOPYGLOBALB 0x30

                        // lastPos = 0;                                         scanner.hs:100

0x1B6C  0x44            PUSHI0
0x1B6D  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x1B6F  0x59 0x36       POPCOPYGLOBALB 0x36

                        // lastPosSet = false;                                  scanner.hs:101

0x1B71  0x44            PUSHI0
0x1B72  0x1F 0x38       POPGLOBALB 0x38

                        // }                                                    scanner.hs:102

0x1B74  0x2A 0x08       RETB 0x08


// /source/compiler/tokens/parser.hs:103
// ####  Parser.Reset(..)  ####                                                 0x0077

0x1B76  0x49            ENTER

                        // <string, string> empty;                              parser.hs:104

0x1B77  0x1A 0x0F       PUSHIB 0x0F
0x1B79  0x1A 0x0F       PUSHIB 0x0F
0x1B7B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // previousToken = empty;                               parser.hs:105

0x1B7D  0x4E            PUSHLOCALB00
0x1B7E  0x59 0x40       POPCOPYGLOBALB 0x40

                        // currentToken = empty;                                parser.hs:106

0x1B80  0x4E            PUSHLOCALB00
0x1B81  0x59 0x42       POPCOPYGLOBALB 0x42

                        // hadError = false;                                    parser.hs:107

0x1B83  0x44            PUSHI0
0x1B84  0x1F 0x44       POPGLOBALB 0x44

                        // }                                                    parser.hs:108

0x1B86  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:162
// ####  Parser.Advance(..)  ####                                               0x007E

0x1B88  0x49            ENTER

                        // previousToken = currentToken;                        parser.hs:163

0x1B89  0x20 0x42       PUSHGLOBALB 0x42
0x1B8B  0x59 0x40       POPCOPYGLOBALB 0x40

                        // nextToken();                                         parser.hs:166

0x1B8D  0x2C 0x78       CALLB 0x78     // Parser.nextToken

                        // HopperToken ttype = Token.GetType(currentToken);

0x1B8F  0x44            PUSHI0
0x1B90  0x20 0x42       PUSHGLOBALB 0x42
0x1B92  0x2C 0x48       CALLB 0x48     // Token.GetType
0x1B94  0x4C            POPLOCALB00

                        // if (ttype != HopperToken.Error)                      parser.hs:168

0x1B95  0x4E            PUSHLOCALB00
0x1B96  0x45            PUSHI1
0x1B97  0x06            NE
0x1B98  0x2E 0x05       JZB 0x1B9D (+5)

                        // break;                                               parser.hs:170

0x1B9A  0x28 0x02       DECSP 0x02
0x1B9C  0x4A            RET0

                        // ErrorAtCurrent(currentToken["lexeme"]);              parser.hs:172

0x1B9D  0x20 0x42       PUSHGLOBALB 0x42
0x1B9F  0x37 0x13 0x01  PUSHIW 0x0113
0x1BA2  0x1A 0x06       PUSHIB 0x06
0x1BA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1BA6  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1BA8  0x2C 0x7D       CALLB 0x7D     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:173

0x1BAA  0x28 0x02       DECSP 0x02
0x1BAC  0x4A            RET0


// /source/compiler/tokens/parser.hs:177
// ####  Parser.Consume(..)  ####                                               0x007F

0x1BAD  0x49            ENTER

                        // Consume(consumeType, "", "'" + ch + "' expected");

0x1BAE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1BB0  0x24 0x02       SYSCALL0 0x02  // String.New
0x1BB2  0x1A 0x27       PUSHIB 0x27
0x1BB4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1BB6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1BB8  0x25 0x03       SYSCALL1 0x03  // String.Append
0x1BBA  0x37 0xE1 0x02  PUSHIW 0x02E1
0x1BBD  0x1A 0x0A       PUSHIB 0x0A
0x1BBF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1BC1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1BC3  0x2C 0x81       CALLB 0x81     // Parser.Consume

                        // }                                                    parser.hs:179

0x1BC5  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:81
// ####  Parser.HadError_Get(..)  ####                                          0x0072

0x1BC7  0x49            ENTER

                        // bool HadError { get { return hadError; } }           parser.hs:81

0x1BC8  0x20 0x44       PUSHGLOBALB 0x44
0x1BCA  0x4A            RET0


// /source/compiler/tokens/parser.hs:216
// ####  Parser.Check(..)  ####                                                 0x0082

0x1BCB  0x49            ENTER

                        // return Check(checkType, "");                         parser.hs:217

0x1BCC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1BCE  0x24 0x02       SYSCALL0 0x02  // String.New
0x1BD0  0x2C 0x83       CALLB 0x83     // Parser.Check
0x1BD2  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/parser.hs:181
// ####  Parser.Consume(..)  ####                                               0x0080

0x1BD4  0x49            ENTER

                        // Consume(consumeType, "", message);                   parser.hs:182

0x1BD5  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1BD7  0x24 0x02       SYSCALL0 0x02  // String.New
0x1BD9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1BDB  0x2C 0x81       CALLB 0x81     // Parser.Consume

                        // }                                                    parser.hs:183

0x1BDD  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:84
// ####  Parser.PreviousToken_Get(..)  ####                                     0x0074

0x1BDF  0x49            ENTER

                        // <string, string> PreviousToken { get { return previousToken; }}

0x1BE0  0x20 0x40       PUSHGLOBALB 0x40
0x1BE2  0x4A            RET0


// /source/compiler/tokens/parser.hs:149
// ####  Parser.Error(..)  ####                                                 0x007B

0x1BE3  0x49            ENTER

                        // ErrorAt(previousToken, message);                     parser.hs:150

0x1BE4  0x20 0x40       PUSHGLOBALB 0x40
0x1BE6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1BE8  0x2C 0x79       CALLB 0x79     // Parser.ErrorAt

                        // }                                                    parser.hs:151

0x1BEA  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:111
// ####  Parser.nextToken(..)  ####                                             0x0078

0x1BEC  0x49            ENTER

                        // currentToken = Scanner.Next();                       parser.hs:112

0x1BED  0x2C 0x6B       CALLB 0x6B     // Scanner.Next
0x1BEF  0x59 0x42       POPCOPYGLOBALB 0x42

                        // }                                                    parser.hs:113

0x1BF1  0x4A            RET0


// /source/compiler/tokens/parser.hs:157
// ####  Parser.ErrorAtCurrent(..)  ####                                        0x007D

0x1BF2  0x49            ENTER

                        // ErrorAt(currentToken, message);                      parser.hs:158

0x1BF3  0x20 0x42       PUSHGLOBALB 0x42
0x1BF5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1BF7  0x2C 0x79       CALLB 0x79     // Parser.ErrorAt

                        // }                                                    parser.hs:159

0x1BF9  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:185
// ####  Parser.Consume(..)  ####                                               0x0081

0x1BFB  0x49            ENTER

                        // if (HadError)                                        parser.hs:188

0x1BFC  0x2C 0x72       CALLB 0x72     // Parser.HadError_Get
0x1BFE  0x2E 0x04       JZB 0x1C02 (+4)

                        // break;                                               parser.hs:190

0x1C00  0x2A 0x06       RETB 0x06

                        // HopperToken ttype = Token.GetType(currentToken);

0x1C02  0x44            PUSHI0
0x1C03  0x20 0x42       PUSHGLOBALB 0x42
0x1C05  0x2C 0x48       CALLB 0x48     // Token.GetType
0x1C07  0x4C            POPLOCALB00

                        // if (ttype == consumeType)                            parser.hs:193

0x1C08  0x4E            PUSHLOCALB00
0x1C09  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x1C0B  0x05            EQ
0x1C0C  0x2E 0x49       JZB 0x1C55 (+73)

                        // if (ttype == HopperToken.Keyword)                    parser.hs:195

0x1C0E  0x4E            PUSHLOCALB00
0x1C0F  0x1A 0x05       PUSHIB 0x05
0x1C11  0x05            EQ
0x1C12  0x2E 0x3D       JZB 0x1C4F (+61)

                        // keyword = "|" + keyword + "|";                       parser.hs:197

0x1C14  0x1A 0x7C       PUSHIB 0x7C
0x1C16  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C18  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C1A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C1C  0x1A 0x7C       PUSHIB 0x7C
0x1C1E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C20  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C22  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x1C24  0x24 0x02       SYSCALL0 0x02  // String.New
0x1C26  0x1A 0x7C       PUSHIB 0x7C
0x1C28  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C2A  0x20 0x42       PUSHGLOBALB 0x42
0x1C2C  0x37 0x13 0x01  PUSHIW 0x0113
0x1C2F  0x1A 0x06       PUSHIB 0x06
0x1C31  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1C33  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1C35  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C37  0x1A 0x7C       PUSHIB 0x7C
0x1C39  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C3B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C3D  0x5E            POPCOPYLOCALB02

                        // if (keyword.Contains(search))                        parser.hs:199

0x1C3E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C40  0x4F            PUSHLOCALB02
0x1C41  0x2C 0xB5       CALLB 0xB5     // String.Contains
0x1C43  0x2E 0x08       JZB 0x1C4B (+8)

                        // Advance();                                           parser.hs:201

0x1C45  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               parser.hs:202

0x1C47  0x28 0x04       DECSP 0x04
0x1C49  0x2A 0x06       RETB 0x06

                        // }                                                    parser.hs:204

0x1C4B  0x28 0x02       DECSP 0x02
0x1C4D  0x30 0x08       JB 0x1C55 (+8)

                        // Advance();                                           parser.hs:207

0x1C4F  0x2C 0x7E       CALLB 0x7E     // Parser.Advance

                        // break;                                               parser.hs:208

0x1C51  0x28 0x02       DECSP 0x02
0x1C53  0x2A 0x06       RETB 0x06

                        // ErrorAtCurrent(message);                             parser.hs:211

0x1C55  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1C57  0x2C 0x7D       CALLB 0x7D     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:212

0x1C59  0x28 0x02       DECSP 0x02
0x1C5B  0x2A 0x06       RETB 0x06


// /source/compiler/tokens/parser.hs:220
// ####  Parser.Check(..)  ####                                                 0x0083


                        // bool result = false;                                 parser.hs:221

0x1C5D  0x5F 0x02       ENTERB 0x02

                        // HopperToken ttype = Token.GetType(currentToken);

0x1C5F  0x20 0x42       PUSHGLOBALB 0x42
0x1C61  0x2C 0x48       CALLB 0x48     // Token.GetType
0x1C63  0x4D            POPLOCALB02

                        // result = (checkType == ttype);                       parser.hs:225

0x1C64  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C66  0x4F            PUSHLOCALB02
0x1C67  0x05            EQ
0x1C68  0x4C            POPLOCALB00

                        // if (!result)                                         parser.hs:226

0x1C69  0x4E            PUSHLOCALB00
0x1C6A  0x2F 0x07       JNZB 0x1C71 (+7)

                        // break;                                               parser.hs:228

0x1C6C  0x28 0x02       DECSP 0x02
0x1C6E  0x33 0x8B 0x00  JW 0x1CF9 (+139)

                        // if (checkType == HopperToken.Keyword)                parser.hs:230

0x1C71  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1C73  0x1A 0x05       PUSHIB 0x05
0x1C75  0x05            EQ
0x1C76  0x2E 0x37       JZB 0x1CAD (+55)

                        // keyword = "|" + keyword + "|";                       parser.hs:232

0x1C78  0x1A 0x7C       PUSHIB 0x7C
0x1C7A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C7C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1C7E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C80  0x1A 0x7C       PUSHIB 0x7C
0x1C82  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C84  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C86  0x57 0xFE       POPCOPYLOCALB 0xFE (BP-2)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x1C88  0x24 0x02       SYSCALL0 0x02  // String.New
0x1C8A  0x1A 0x7C       PUSHIB 0x7C
0x1C8C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C8E  0x20 0x42       PUSHGLOBALB 0x42
0x1C90  0x37 0x13 0x01  PUSHIW 0x0113
0x1C93  0x1A 0x06       PUSHIB 0x06
0x1C95  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1C97  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1C99  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1C9B  0x1A 0x7C       PUSHIB 0x7C
0x1C9D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1C9F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1CA1  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // result = keyword.Contains(search);                   parser.hs:234

0x1CA3  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0x1CA6  0x2C 0xB5       CALLB 0xB5     // String.Contains
0x1CA8  0x4C            POPLOCALB00

                        // }                                                    parser.hs:235

0x1CA9  0x28 0x02       DECSP 0x02
0x1CAB  0x30 0x4C       JB 0x1CF7 (+76)

                        // else if ((checkType == HopperToken.Identifier) && (keyword.Length != 0))

0x1CAD  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CAF  0x1A 0x03       PUSHIB 0x03
0x1CB1  0x05            EQ
0x1CB2  0x27 0x00       DUP 0x00
0x1CB4  0x2E 0x09       JZB 0x1CBD (+9)
0x1CB6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1CB8  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1CBA  0x44            PUSHI0
0x1CBB  0x06            NE
0x1CBC  0x0C            BOOLAND
0x1CBD  0x2E 0x16       JZB 0x1CD3 (+22)

                        // result = keyword == currentToken["lexeme"];

0x1CBF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1CC1  0x20 0x42       PUSHGLOBALB 0x42
0x1CC3  0x37 0x13 0x01  PUSHIW 0x0113
0x1CC6  0x1A 0x06       PUSHIB 0x06
0x1CC8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1CCA  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1CCC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1CCE  0x44            PUSHI0
0x1CCF  0x05            EQ
0x1CD0  0x4C            POPLOCALB00

                        // }                                                    parser.hs:239

0x1CD1  0x30 0x26       JB 0x1CF7 (+38)

                        // else if ((checkType == HopperToken.Directive) && (keyword.Length != 0))

0x1CD3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1CD5  0x1A 0x06       PUSHIB 0x06
0x1CD7  0x05            EQ
0x1CD8  0x27 0x00       DUP 0x00
0x1CDA  0x2E 0x09       JZB 0x1CE3 (+9)
0x1CDC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1CDE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1CE0  0x44            PUSHI0
0x1CE1  0x06            NE
0x1CE2  0x0C            BOOLAND
0x1CE3  0x2E 0x14       JZB 0x1CF7 (+20)

                        // result = keyword == currentToken["lexeme"];

0x1CE5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1CE7  0x20 0x42       PUSHGLOBALB 0x42
0x1CE9  0x37 0x13 0x01  PUSHIW 0x0113
0x1CEC  0x1A 0x06       PUSHIB 0x06
0x1CEE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1CF0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1CF2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1CF4  0x44            PUSHI0
0x1CF5  0x05            EQ
0x1CF6  0x4C            POPLOCALB00

                        // break;                                               parser.hs:244

0x1CF7  0x28 0x02       DECSP 0x02

                        // return result;                                       parser.hs:246

0x1CF9  0x4E            PUSHLOCALB00
0x1CFA  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/parser.hs:115
// ####  Parser.ErrorAt(..)  ####                                               0x0079

0x1CFC  0x49            ENTER

                        // if (!hadError)                                       parser.hs:116

0x1CFD  0x20 0x44       PUSHGLOBALB 0x44
0x1CFF  0x32 0xA7 0x00  JNZW 0x1DA6 (+167)

                        // string errorMessage;                                 parser.hs:118

0x1D02  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string lexeme = token["lexeme"];                     parser.hs:119

0x1D04  0x24 0x02       SYSCALL0 0x02  // String.New
0x1D06  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1D08  0x37 0x13 0x01  PUSHIW 0x0113
0x1D0B  0x1A 0x06       PUSHIB 0x06
0x1D0D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D0F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1D11  0x5E            POPCOPYLOCALB02

                        // if (token.Contains("line"))                          parser.hs:120

0x1D12  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1D14  0x37 0xD0 0x01  PUSHIW 0x01D0
0x1D17  0x1A 0x04       PUSHIB 0x04
0x1D19  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D1B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x1D1D  0x2E 0x3B       JZB 0x1D58 (+59)

                        // string ln = token["line"];                           parser.hs:122

0x1D1F  0x24 0x02       SYSCALL0 0x02  // String.New
0x1D21  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1D23  0x37 0xD0 0x01  PUSHIW 0x01D0
0x1D26  0x1A 0x04       PUSHIB 0x04
0x1D28  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D2A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1D2C  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string path = token["source"];                       parser.hs:123

0x1D2E  0x24 0x02       SYSCALL0 0x02  // String.New
0x1D30  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1D32  0x37 0xB6 0x01  PUSHIW 0x01B6
0x1D35  0x1A 0x06       PUSHIB 0x06
0x1D37  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D39  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x1D3B  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // errorMessage = "[" + path + ":" + ln + "]";

0x1D3D  0x1A 0x5B       PUSHIB 0x5B
0x1D3F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D41  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x1D43  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D45  0x1A 0x3A       PUSHIB 0x3A
0x1D47  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D49  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D4B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1D4D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D4F  0x1A 0x5D       PUSHIB 0x5D
0x1D51  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D53  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D55  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:125

0x1D56  0x28 0x04       DECSP 0x04

                        // HopperToken ttype = Token.GetType(token);            parser.hs:126

0x1D58  0x44            PUSHI0
0x1D59  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x1D5B  0x2C 0x48       CALLB 0x48     // Token.GetType
0x1D5D  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (ttype == HopperToken.EOF)                        parser.hs:127

0x1D5F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1D61  0x1A 0x2D       PUSHIB 0x2D
0x1D63  0x05            EQ
0x1D64  0x2E 0x0F       JZB 0x1D73 (+15)

                        // errorMessage = errorMessage + " Error at end";

0x1D66  0x4E            PUSHLOCALB00
0x1D67  0x37 0xEB 0x02  PUSHIW 0x02EB
0x1D6A  0x1A 0x0D       PUSHIB 0x0D
0x1D6C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D6E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D70  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:130

0x1D71  0x30 0x23       JB 0x1D94 (+35)

                        // else if (ttype == HopperToken.Error)                 parser.hs:131

0x1D73  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x1D75  0x45            PUSHI1
0x1D76  0x05            EQ
0x1D77  0x2F 0x1D       JNZB 0x1D94 (+29)

                        // else if (lexeme.Length > 0)                          parser.hs:135

0x1D79  0x4F            PUSHLOCALB02
0x1D7A  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1D7C  0x44            PUSHI0
0x1D7D  0x07            GT
0x1D7E  0x2E 0x16       JZB 0x1D94 (+22)

                        // errorMessage = errorMessage + " Error at '" + lexeme + "'";

0x1D80  0x4E            PUSHLOCALB00
0x1D81  0x37 0xF8 0x02  PUSHIW 0x02F8
0x1D84  0x1A 0x0B       PUSHIB 0x0B
0x1D86  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1D88  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D8A  0x4F            PUSHLOCALB02
0x1D8B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D8D  0x1A 0x27       PUSHIB 0x27
0x1D8F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D91  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D93  0x5D            POPCOPYLOCALB00

                        // errorMessage = errorMessage + ": " + message;

0x1D94  0x4E            PUSHLOCALB00
0x1D95  0x37 0x3A 0x20  PUSHIW 0x203A
0x1D98  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1D9A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1D9C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1D9E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1DA0  0x5D            POPCOPYLOCALB00

                        // EmitError(errorMessage);                             parser.hs:140

0x1DA1  0x4E            PUSHLOCALB00
0x1DA2  0x2C 0x6F       CALLB 0x6F     // Parser.EmitError

                        // }                                                    parser.hs:141

0x1DA4  0x28 0x06       DECSP 0x06

                        // hadError = true;                                     parser.hs:142

0x1DA6  0x45            PUSHI1
0x1DA7  0x1F 0x44       POPGLOBALB 0x44

                        // }                                                    parser.hs:143

0x1DA9  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:42
// ####  Parser.EmitError(..)  ####                                             0x006F

0x1DAB  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:43

0x1DAC  0x2C 0x6E       CALLB 0x6E     // Parser.IsInteractive
0x1DAE  0x2E 0x22       JZB 0x1DD0 (+34)

                        // ProgressDone();                                      parser.hs:45

0x1DB0  0x2C 0x71       CALLB 0x71     // Parser.ProgressDone

                        // string eol = "" + char(0x0A);                        parser.hs:46

0x1DB2  0x24 0x02       SYSCALL0 0x02  // String.New
0x1DB4  0x24 0x02       SYSCALL0 0x02  // String.New
0x1DB6  0x1A 0x0A       PUSHIB 0x0A
0x1DB8  0x25 0x03       SYSCALL1 0x03  // String.Append
0x1DBA  0x5D            POPCOPYLOCALB00

                        // errorFile.Append(errorMessage + eol);                parser.hs:47

0x1DBB  0x20 0x4A       PUSHGLOBALB 0x4A
0x1DBD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DBF  0x4E            PUSHLOCALB00
0x1DC0  0x24 0x03       SYSCALL0 0x03  // String.Append
0x1DC2  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // errorFile.Flush();                                   parser.hs:48

0x1DC4  0x20 0x4A       PUSHGLOBALB 0x4A
0x1DC6  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // Diagnostics.SetError(0x0E);                          parser.hs:49

0x1DC8  0x1A 0x0E       PUSHIB 0x0E
0x1DCA  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:50

0x1DCC  0x28 0x02       DECSP 0x02
0x1DCE  0x2A 0x02       RETB 0x02

                        // PrintLn(errorMessage);                               parser.hs:53

0x1DD0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x1DD2  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // }                                                    parser.hs:55

0x1DD4  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/token.hs:113
// ####  Token.Initialize(..)  ####                                             0x0049

0x1DD6  0x49            ENTER

                        // reservedIdentifiers.Clear();                         token.hs:114

0x1DD7  0x20 0x18       PUSHGLOBALB 0x18
0x1DD9  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // reservedZopperIdentifiers.Clear();                   token.hs:115

0x1DDB  0x20 0x1A       PUSHGLOBALB 0x1A
0x1DDD  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // typeKeywords.Clear();                                token.hs:116

0x1DDF  0x20 0x1C       PUSHGLOBALB 0x1C
0x1DE1  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // statementKeywords.Clear();                           token.hs:117

0x1DE3  0x20 0x1E       PUSHGLOBALB 0x1E
0x1DE5  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes.Clear();                            token.hs:119

0x1DE7  0x20 0x22       PUSHGLOBALB 0x22
0x1DE9  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes["EOF"] = HopperToken.EOF;           token.hs:121

0x1DEB  0x20 0x22       PUSHGLOBALB 0x22
0x1DED  0x37 0x03 0x03  PUSHIW 0x0303
0x1DF0  0x1A 0x03       PUSHIB 0x03
0x1DF2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1DF4  0x1A 0x2D       PUSHIB 0x2D
0x1DF6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Undefined"] = HopperToken.Undefined;

0x1DF8  0x20 0x22       PUSHGLOBALB 0x22
0x1DFA  0x37 0x06 0x03  PUSHIW 0x0306
0x1DFD  0x1A 0x09       PUSHIB 0x09
0x1DFF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E01  0x44            PUSHI0
0x1E02  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Error"] = HopperToken.Error;

0x1E04  0x20 0x22       PUSHGLOBALB 0x22
0x1E06  0x1A 0xF4       PUSHIB 0xF4
0x1E08  0x1A 0x05       PUSHIB 0x05
0x1E0A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E0C  0x45            PUSHI1
0x1E0D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Char"] = HopperToken.Char;

0x1E0F  0x20 0x22       PUSHGLOBALB 0x22
0x1E11  0x37 0x0F 0x03  PUSHIW 0x030F
0x1E14  0x1A 0x04       PUSHIB 0x04
0x1E16  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E18  0x1A 0x08       PUSHIB 0x08
0x1E1A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Bool"] = HopperToken.Bool;

0x1E1C  0x20 0x22       PUSHGLOBALB 0x22
0x1E1E  0x37 0x13 0x03  PUSHIW 0x0313
0x1E21  0x1A 0x04       PUSHIB 0x04
0x1E23  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E25  0x1A 0x07       PUSHIB 0x07
0x1E27  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Keyword"] = HopperToken.Keyword;

0x1E29  0x20 0x22       PUSHGLOBALB 0x22
0x1E2B  0x37 0x17 0x03  PUSHIW 0x0317
0x1E2E  0x1A 0x07       PUSHIB 0x07
0x1E30  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E32  0x1A 0x05       PUSHIB 0x05
0x1E34  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Directive"] = HopperToken.Directive;

0x1E36  0x20 0x22       PUSHGLOBALB 0x22
0x1E38  0x37 0x1E 0x03  PUSHIW 0x031E
0x1E3B  0x1A 0x09       PUSHIB 0x09
0x1E3D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E3F  0x1A 0x06       PUSHIB 0x06
0x1E41  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Identifier"] = HopperToken.Identifier;

0x1E43  0x20 0x22       PUSHGLOBALB 0x22
0x1E45  0x37 0x27 0x03  PUSHIW 0x0327
0x1E48  0x1A 0x0A       PUSHIB 0x0A
0x1E4A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E4C  0x1A 0x03       PUSHIB 0x03
0x1E4E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["DottedIdentifier"] = HopperToken.DottedIdentifier;

0x1E50  0x20 0x22       PUSHGLOBALB 0x22
0x1E52  0x37 0x31 0x03  PUSHIW 0x0331
0x1E55  0x1A 0x10       PUSHIB 0x10
0x1E57  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E59  0x1A 0x02       PUSHIB 0x02
0x1E5B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Integer"] = HopperToken.Integer;

0x1E5D  0x20 0x22       PUSHGLOBALB 0x22
0x1E5F  0x37 0x41 0x03  PUSHIW 0x0341
0x1E62  0x1A 0x07       PUSHIB 0x07
0x1E64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E66  0x1A 0x09       PUSHIB 0x09
0x1E68  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Float"] = HopperToken.Float;

0x1E6A  0x20 0x22       PUSHGLOBALB 0x22
0x1E6C  0x37 0x48 0x03  PUSHIW 0x0348
0x1E6F  0x1A 0x05       PUSHIB 0x05
0x1E71  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E73  0x1A 0x0A       PUSHIB 0x0A
0x1E75  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["StringConstant"] = HopperToken.StringConstant;

0x1E77  0x20 0x22       PUSHGLOBALB 0x22
0x1E79  0x37 0x4D 0x03  PUSHIW 0x034D
0x1E7C  0x1A 0x0E       PUSHIB 0x0E
0x1E7E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E80  0x1A 0x0B       PUSHIB 0x0B
0x1E82  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Assign"] = HopperToken.Assign;

0x1E84  0x20 0x22       PUSHGLOBALB 0x22
0x1E86  0x37 0x5B 0x03  PUSHIW 0x035B
0x1E89  0x1A 0x06       PUSHIB 0x06
0x1E8B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E8D  0x1A 0x2C       PUSHIB 0x2C
0x1E8F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0x1E91  0x20 0x22       PUSHGLOBALB 0x22
0x1E93  0x37 0x61 0x03  PUSHIW 0x0361
0x1E96  0x1A 0x06       PUSHIB 0x06
0x1E98  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E9A  0x1A 0x21       PUSHIB 0x21
0x1E9C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0x1E9E  0x20 0x22       PUSHGLOBALB 0x22
0x1EA0  0x37 0x67 0x03  PUSHIW 0x0367
0x1EA3  0x1A 0x05       PUSHIB 0x05
0x1EA5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EA7  0x1A 0x22       PUSHIB 0x22
0x1EA9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LParen"] = HopperToken.LParen;

0x1EAB  0x20 0x22       PUSHGLOBALB 0x22
0x1EAD  0x37 0x6C 0x03  PUSHIW 0x036C
0x1EB0  0x1A 0x06       PUSHIB 0x06
0x1EB2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EB4  0x1A 0x10       PUSHIB 0x10
0x1EB6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RParen"] = HopperToken.RParen;

0x1EB8  0x20 0x22       PUSHGLOBALB 0x22
0x1EBA  0x37 0x72 0x03  PUSHIW 0x0372
0x1EBD  0x1A 0x06       PUSHIB 0x06
0x1EBF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EC1  0x1A 0x11       PUSHIB 0x11
0x1EC3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBrace"] = HopperToken.LBrace;

0x1EC5  0x20 0x22       PUSHGLOBALB 0x22
0x1EC7  0x37 0x78 0x03  PUSHIW 0x0378
0x1ECA  0x1A 0x06       PUSHIB 0x06
0x1ECC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1ECE  0x1A 0x12       PUSHIB 0x12
0x1ED0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBrace"] = HopperToken.RBrace;

0x1ED2  0x20 0x22       PUSHGLOBALB 0x22
0x1ED4  0x37 0x7E 0x03  PUSHIW 0x037E
0x1ED7  0x1A 0x06       PUSHIB 0x06
0x1ED9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EDB  0x1A 0x13       PUSHIB 0x13
0x1EDD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBracket"] = HopperToken.LBracket;

0x1EDF  0x20 0x22       PUSHGLOBALB 0x22
0x1EE1  0x37 0x84 0x03  PUSHIW 0x0384
0x1EE4  0x1A 0x08       PUSHIB 0x08
0x1EE6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EE8  0x1A 0x14       PUSHIB 0x14
0x1EEA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBracket"] = HopperToken.RBracket;

0x1EEC  0x20 0x22       PUSHGLOBALB 0x22
0x1EEE  0x37 0x8C 0x03  PUSHIW 0x038C
0x1EF1  0x1A 0x08       PUSHIB 0x08
0x1EF3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1EF5  0x1A 0x15       PUSHIB 0x15
0x1EF7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["SemiColon"] = HopperToken.SemiColon;

0x1EF9  0x20 0x22       PUSHGLOBALB 0x22
0x1EFB  0x37 0x94 0x03  PUSHIW 0x0394
0x1EFE  0x1A 0x09       PUSHIB 0x09
0x1F00  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F02  0x1A 0x0C       PUSHIB 0x0C
0x1F04  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Colon"] = HopperToken.Colon;

0x1F06  0x20 0x22       PUSHGLOBALB 0x22
0x1F08  0x37 0x98 0x03  PUSHIW 0x0398
0x1F0B  0x1A 0x05       PUSHIB 0x05
0x1F0D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F0F  0x1A 0x0E       PUSHIB 0x0E
0x1F11  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Comma"] = HopperToken.Comma;

0x1F13  0x20 0x22       PUSHGLOBALB 0x22
0x1F15  0x37 0x9D 0x03  PUSHIW 0x039D
0x1F18  0x1A 0x05       PUSHIB 0x05
0x1F1A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F1C  0x1A 0x0D       PUSHIB 0x0D
0x1F1E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Dot"] = HopperToken.Dot;           token.hs:145

0x1F20  0x20 0x22       PUSHGLOBALB 0x22
0x1F22  0x37 0x31 0x03  PUSHIW 0x0331
0x1F25  0x1A 0x03       PUSHIB 0x03
0x1F27  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F29  0x1A 0x04       PUSHIB 0x04
0x1F2B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Add"] = HopperToken.Add;           token.hs:146

0x1F2D  0x20 0x22       PUSHGLOBALB 0x22
0x1F2F  0x37 0xA2 0x03  PUSHIW 0x03A2
0x1F32  0x1A 0x03       PUSHIB 0x03
0x1F34  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F36  0x1A 0x25       PUSHIB 0x25
0x1F38  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Subtract"] = HopperToken.Subtract;

0x1F3A  0x20 0x22       PUSHGLOBALB 0x22
0x1F3C  0x37 0xA5 0x03  PUSHIW 0x03A5
0x1F3F  0x1A 0x08       PUSHIB 0x08
0x1F41  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F43  0x1A 0x26       PUSHIB 0x26
0x1F45  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Multiply"] = HopperToken.Multiply;

0x1F47  0x20 0x22       PUSHGLOBALB 0x22
0x1F49  0x37 0xAD 0x03  PUSHIW 0x03AD
0x1F4C  0x1A 0x08       PUSHIB 0x08
0x1F4E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F50  0x1A 0x27       PUSHIB 0x27
0x1F52  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Divide"] = HopperToken.Divide;

0x1F54  0x20 0x22       PUSHGLOBALB 0x22
0x1F56  0x37 0xB5 0x03  PUSHIW 0x03B5
0x1F59  0x1A 0x06       PUSHIB 0x06
0x1F5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F5D  0x1A 0x28       PUSHIB 0x28
0x1F5F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Modulus"] = HopperToken.Modulus;

0x1F61  0x20 0x22       PUSHGLOBALB 0x22
0x1F63  0x37 0xBB 0x03  PUSHIW 0x03BB
0x1F66  0x1A 0x07       PUSHIB 0x07
0x1F68  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F6A  0x1A 0x29       PUSHIB 0x29
0x1F6C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Increment"] = HopperToken.Increment;

0x1F6E  0x20 0x22       PUSHGLOBALB 0x22
0x1F70  0x37 0xC2 0x03  PUSHIW 0x03C2
0x1F73  0x1A 0x09       PUSHIB 0x09
0x1F75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F77  0x1A 0x2A       PUSHIB 0x2A
0x1F79  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Decrement"] = HopperToken.Decrement;

0x1F7B  0x20 0x22       PUSHGLOBALB 0x22
0x1F7D  0x37 0xCB 0x03  PUSHIW 0x03CB
0x1F80  0x1A 0x09       PUSHIB 0x09
0x1F82  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1F84  0x1A 0x2B       PUSHIB 0x2B
0x1F86  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["NE"] = HopperToken.NE;             token.hs:153

0x1F88  0x20 0x22       PUSHGLOBALB 0x22
0x1F8A  0x37 0x4E 0x45  PUSHIW 0x454E
0x1F8D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1F8F  0x1A 0x1B       PUSHIB 0x1B
0x1F91  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["EQ"] = HopperToken.EQ;             token.hs:154

0x1F93  0x20 0x22       PUSHGLOBALB 0x22
0x1F95  0x37 0x45 0x51  PUSHIW 0x5145
0x1F98  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1F9A  0x1A 0x18       PUSHIB 0x18
0x1F9C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GT"] = HopperToken.GT;             token.hs:155

0x1F9E  0x20 0x22       PUSHGLOBALB 0x22
0x1FA0  0x37 0x47 0x54  PUSHIW 0x5447
0x1FA3  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1FA5  0x1A 0x17       PUSHIB 0x17
0x1FA7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LT"] = HopperToken.LT;             token.hs:156

0x1FA9  0x20 0x22       PUSHGLOBALB 0x22
0x1FAB  0x37 0x4C 0x54  PUSHIW 0x544C
0x1FAE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1FB0  0x1A 0x16       PUSHIB 0x16
0x1FB2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LE"] = HopperToken.LE;             token.hs:157

0x1FB4  0x20 0x22       PUSHGLOBALB 0x22
0x1FB6  0x37 0x4C 0x45  PUSHIW 0x454C
0x1FB9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1FBB  0x1A 0x19       PUSHIB 0x19
0x1FBD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GE"] = HopperToken.GE;             token.hs:158

0x1FBF  0x20 0x22       PUSHGLOBALB 0x22
0x1FC1  0x37 0x47 0x45  PUSHIW 0x4547
0x1FC4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1FC6  0x1A 0x1A       PUSHIB 0x1A
0x1FC8  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftLeft"] = HopperToken.ShiftLeft;

0x1FCA  0x20 0x22       PUSHGLOBALB 0x22
0x1FCC  0x37 0xD4 0x03  PUSHIW 0x03D4
0x1FCF  0x1A 0x09       PUSHIB 0x09
0x1FD1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FD3  0x1A 0x1C       PUSHIB 0x1C
0x1FD5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftRight"] = HopperToken.ShiftRight;

0x1FD7  0x20 0x22       PUSHGLOBALB 0x22
0x1FD9  0x37 0xDD 0x03  PUSHIW 0x03DD
0x1FDC  0x1A 0x0A       PUSHIB 0x0A
0x1FDE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FE0  0x1A 0x1D       PUSHIB 0x1D
0x1FE2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanNot"] = HopperToken.BooleanNot;

0x1FE4  0x20 0x22       PUSHGLOBALB 0x22
0x1FE6  0x37 0xE7 0x03  PUSHIW 0x03E7
0x1FE9  0x1A 0x0A       PUSHIB 0x0A
0x1FEB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FED  0x1A 0x20       PUSHIB 0x20
0x1FEF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanOr"] = HopperToken.BooleanOr;

0x1FF1  0x20 0x22       PUSHGLOBALB 0x22
0x1FF3  0x37 0xF1 0x03  PUSHIW 0x03F1
0x1FF6  0x1A 0x09       PUSHIB 0x09
0x1FF8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1FFA  0x1A 0x1F       PUSHIB 0x1F
0x1FFC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanAnd"] = HopperToken.BooleanAnd;

0x1FFE  0x20 0x22       PUSHGLOBALB 0x22
0x2000  0x37 0xFA 0x03  PUSHIW 0x03FA
0x2003  0x1A 0x0A       PUSHIB 0x0A
0x2005  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2007  0x1A 0x1E       PUSHIB 0x1E
0x2009  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0x200B  0x20 0x22       PUSHGLOBALB 0x22
0x200D  0x37 0x61 0x03  PUSHIW 0x0361
0x2010  0x1A 0x06       PUSHIB 0x06
0x2012  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2014  0x1A 0x21       PUSHIB 0x21
0x2016  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0x2018  0x20 0x22       PUSHGLOBALB 0x22
0x201A  0x37 0x67 0x03  PUSHIW 0x0367
0x201D  0x1A 0x05       PUSHIB 0x05
0x201F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2021  0x1A 0x22       PUSHIB 0x22
0x2023  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitNot"] = HopperToken.BitNot;

0x2025  0x20 0x22       PUSHGLOBALB 0x22
0x2027  0x37 0x04 0x04  PUSHIW 0x0404
0x202A  0x1A 0x06       PUSHIB 0x06
0x202C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x202E  0x1A 0x23       PUSHIB 0x23
0x2030  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitXor"] = HopperToken.BitXor;

0x2032  0x20 0x22       PUSHGLOBALB 0x22
0x2034  0x37 0x0A 0x04  PUSHIW 0x040A
0x2037  0x1A 0x06       PUSHIB 0x06
0x2039  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x203B  0x1A 0x24       PUSHIB 0x24
0x203D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // foreach (var kv in hopperTokenTypes)                 token.hs:170

0x203F  0x20 0x22       PUSHGLOBALB 0x22
0x2041  0x1A 0x0F       PUSHIB 0x0F
0x2043  0x1A 0x0F       PUSHIB 0x0F
0x2045  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x2047  0x44            PUSHI0
0x2048  0x4E            PUSHLOCALB00
0x2049  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x204B  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x204D  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x204F  0x4D            POPLOCALB02
0x2050  0x2E 0x0E       JZB 0x205E (+14)

                        // hopperTokenNames[kv.value] = kv.key;                 token.hs:172

0x2052  0x20 0x24       PUSHGLOBALB 0x24
0x2054  0x4F            PUSHLOCALB02
0x2055  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x2057  0x4F            PUSHLOCALB02
0x2058  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x205A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:173

0x205C  0x30 0xEC       JB 0x2048 (-20)
0x205E  0x28 0x06       DECSP 0x06

                        // reservedIdentifiers["line"] = true;                  token.hs:175

0x2060  0x20 0x18       PUSHGLOBALB 0x18
0x2062  0x37 0xD0 0x01  PUSHIW 0x01D0
0x2065  0x1A 0x04       PUSHIB 0x04
0x2067  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2069  0x45            PUSHI1
0x206A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedIdentifiers["source"] = true;                token.hs:176

0x206C  0x20 0x18       PUSHGLOBALB 0x18
0x206E  0x37 0xB6 0x01  PUSHIW 0x01B6
0x2071  0x1A 0x06       PUSHIB 0x06
0x2073  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2075  0x45            PUSHI1
0x2076  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["port"] = true;            token.hs:178

0x2078  0x20 0x1A       PUSHGLOBALB 0x1A
0x207A  0x37 0x10 0x04  PUSHIW 0x0410
0x207D  0x1A 0x04       PUSHIB 0x04
0x207F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2081  0x45            PUSHI1
0x2082  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memory"] = true;

0x2084  0x20 0x1A       PUSHGLOBALB 0x1A
0x2086  0x37 0x14 0x04  PUSHIW 0x0414
0x2089  0x1A 0x06       PUSHIB 0x06
0x208B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x208D  0x45            PUSHI1
0x208E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memoryword"] = true;

0x2090  0x20 0x1A       PUSHGLOBALB 0x1A
0x2092  0x37 0x1A 0x04  PUSHIW 0x041A
0x2095  0x1A 0x0A       PUSHIB 0x0A
0x2097  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2099  0x45            PUSHI1
0x209A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["sp"] = true;              token.hs:181

0x209C  0x20 0x1A       PUSHGLOBALB 0x1A
0x209E  0x37 0x73 0x70  PUSHIW 0x7073
0x20A1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x20A3  0x45            PUSHI1
0x20A4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["pc"] = true;              token.hs:182

0x20A6  0x20 0x1A       PUSHGLOBALB 0x1A
0x20A8  0x37 0x70 0x63  PUSHIW 0x6370
0x20AB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x20AD  0x45            PUSHI1
0x20AE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["iy"] = true;              token.hs:183

0x20B0  0x20 0x1A       PUSHGLOBALB 0x1A
0x20B2  0x37 0x69 0x79  PUSHIW 0x7969
0x20B5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x20B7  0x45            PUSHI1
0x20B8  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["array"] = true;                        token.hs:186

0x20BA  0x20 0x1C       PUSHGLOBALB 0x1C
0x20BC  0x37 0x24 0x04  PUSHIW 0x0424
0x20BF  0x1A 0x05       PUSHIB 0x05
0x20C1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20C3  0x45            PUSHI1
0x20C4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["bool"] = true;                         token.hs:187

0x20C6  0x20 0x1C       PUSHGLOBALB 0x1C
0x20C8  0x37 0x29 0x04  PUSHIW 0x0429
0x20CB  0x1A 0x04       PUSHIB 0x04
0x20CD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20CF  0x45            PUSHI1
0x20D0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["byte"] = true;                         token.hs:188

0x20D2  0x20 0x1C       PUSHGLOBALB 0x1C
0x20D4  0x1A 0x43       PUSHIB 0x43
0x20D6  0x1A 0x04       PUSHIB 0x04
0x20D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20DA  0x45            PUSHI1
0x20DB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["char"] = true;                         token.hs:189

0x20DD  0x20 0x1C       PUSHGLOBALB 0x1C
0x20DF  0x37 0x2D 0x04  PUSHIW 0x042D
0x20E2  0x1A 0x04       PUSHIB 0x04
0x20E4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20E6  0x45            PUSHI1
0x20E7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["delegate"] = true;                     token.hs:190

0x20E9  0x20 0x1C       PUSHGLOBALB 0x1C
0x20EB  0x37 0x31 0x04  PUSHIW 0x0431
0x20EE  0x1A 0x08       PUSHIB 0x08
0x20F0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20F2  0x45            PUSHI1
0x20F3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["dictionary"] = true;                   token.hs:191

0x20F5  0x20 0x1C       PUSHGLOBALB 0x1C
0x20F7  0x37 0x39 0x04  PUSHIW 0x0439
0x20FA  0x1A 0x0A       PUSHIB 0x0A
0x20FC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20FE  0x45            PUSHI1
0x20FF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["directory"] = true;                    token.hs:192

0x2101  0x20 0x1C       PUSHGLOBALB 0x1C
0x2103  0x37 0x43 0x04  PUSHIW 0x0443
0x2106  0x1A 0x09       PUSHIB 0x09
0x2108  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x210A  0x45            PUSHI1
0x210B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["enum"] = true;                         token.hs:193

0x210D  0x20 0x1C       PUSHGLOBALB 0x1C
0x210F  0x37 0x4C 0x04  PUSHIW 0x044C
0x2112  0x1A 0x04       PUSHIB 0x04
0x2114  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2116  0x45            PUSHI1
0x2117  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["file"] = true;                         token.hs:194

0x2119  0x20 0x1C       PUSHGLOBALB 0x1C
0x211B  0x1A 0x7C       PUSHIB 0x7C
0x211D  0x1A 0x04       PUSHIB 0x04
0x211F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2121  0x45            PUSHI1
0x2122  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["flags"] = true;                        token.hs:195

0x2124  0x20 0x1C       PUSHGLOBALB 0x1C
0x2126  0x37 0x50 0x04  PUSHIW 0x0450
0x2129  0x1A 0x05       PUSHIB 0x05
0x212B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x212D  0x45            PUSHI1
0x212E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["float"] = true;                        token.hs:196

0x2130  0x20 0x1C       PUSHGLOBALB 0x1C
0x2132  0x37 0x55 0x04  PUSHIW 0x0455
0x2135  0x1A 0x05       PUSHIB 0x05
0x2137  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2139  0x45            PUSHI1
0x213A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["int"] = true;                          token.hs:197

0x213C  0x20 0x1C       PUSHGLOBALB 0x1C
0x213E  0x37 0x5A 0x04  PUSHIW 0x045A
0x2141  0x1A 0x03       PUSHIB 0x03
0x2143  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2145  0x45            PUSHI1
0x2146  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["uint"] = true;                         token.hs:198

0x2148  0x20 0x1C       PUSHGLOBALB 0x1C
0x214A  0x37 0x5D 0x04  PUSHIW 0x045D
0x214D  0x1A 0x04       PUSHIB 0x04
0x214F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2151  0x45            PUSHI1
0x2152  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["list"] = true;                         token.hs:199

0x2154  0x20 0x1C       PUSHGLOBALB 0x1C
0x2156  0x37 0x61 0x04  PUSHIW 0x0461
0x2159  0x1A 0x04       PUSHIB 0x04
0x215B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x215D  0x45            PUSHI1
0x215E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["long"] = true;                         token.hs:200

0x2160  0x20 0x1C       PUSHGLOBALB 0x1C
0x2162  0x37 0x65 0x04  PUSHIW 0x0465
0x2165  0x1A 0x04       PUSHIB 0x04
0x2167  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2169  0x45            PUSHI1
0x216A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["pair"] = true;                         token.hs:201

0x216C  0x20 0x1C       PUSHGLOBALB 0x1C
0x216E  0x37 0x69 0x04  PUSHIW 0x0469
0x2171  0x1A 0x04       PUSHIB 0x04
0x2173  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2175  0x45            PUSHI1
0x2176  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["string"] = true;                       token.hs:202

0x2178  0x20 0x1C       PUSHGLOBALB 0x1C
0x217A  0x37 0x6D 0x04  PUSHIW 0x046D
0x217D  0x1A 0x06       PUSHIB 0x06
0x217F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2181  0x45            PUSHI1
0x2182  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["type"] = true;                         token.hs:203

0x2184  0x20 0x1C       PUSHGLOBALB 0x1C
0x2186  0x37 0x7F 0x01  PUSHIW 0x017F
0x2189  0x1A 0x04       PUSHIB 0x04
0x218B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x218D  0x45            PUSHI1
0x218E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["variant"] = true;                      token.hs:204

0x2190  0x20 0x1C       PUSHGLOBALB 0x1C
0x2192  0x37 0x73 0x04  PUSHIW 0x0473
0x2195  0x1A 0x07       PUSHIB 0x07
0x2197  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2199  0x45            PUSHI1
0x219A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["const"] = true;                        token.hs:206

0x219C  0x20 0x1C       PUSHGLOBALB 0x1C
0x219E  0x37 0x83 0x01  PUSHIW 0x0183
0x21A1  0x1A 0x05       PUSHIB 0x05
0x21A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21A5  0x45            PUSHI1
0x21A6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["false"] = true;                        token.hs:207

0x21A8  0x20 0x1C       PUSHGLOBALB 0x1C
0x21AA  0x37 0x7A 0x04  PUSHIW 0x047A
0x21AD  0x1A 0x05       PUSHIB 0x05
0x21AF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21B1  0x45            PUSHI1
0x21B2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["ref"] = true;                          token.hs:208

0x21B4  0x20 0x1C       PUSHGLOBALB 0x1C
0x21B6  0x37 0x96 0x02  PUSHIW 0x0296
0x21B9  0x1A 0x03       PUSHIB 0x03
0x21BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21BD  0x45            PUSHI1
0x21BE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["true"] = true;                         token.hs:209

0x21C0  0x20 0x1C       PUSHGLOBALB 0x1C
0x21C2  0x37 0x7F 0x04  PUSHIW 0x047F
0x21C5  0x1A 0x04       PUSHIB 0x04
0x21C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21C9  0x45            PUSHI1
0x21CA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["var"] = true;                          token.hs:210

0x21CC  0x20 0x1C       PUSHGLOBALB 0x1C
0x21CE  0x37 0x73 0x04  PUSHIW 0x0473
0x21D1  0x1A 0x03       PUSHIB 0x03
0x21D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21D5  0x45            PUSHI1
0x21D6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#if"] = true;                     token.hs:212

0x21D8  0x20 0x20       PUSHGLOBALB 0x20
0x21DA  0x37 0x83 0x04  PUSHIW 0x0483
0x21DD  0x1A 0x03       PUSHIB 0x03
0x21DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21E1  0x45            PUSHI1
0x21E2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifdef"] = true;                  token.hs:213

0x21E4  0x20 0x20       PUSHGLOBALB 0x20
0x21E6  0x37 0x86 0x04  PUSHIW 0x0486
0x21E9  0x1A 0x06       PUSHIB 0x06
0x21EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21ED  0x45            PUSHI1
0x21EE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifndef"] = true;                 token.hs:214

0x21F0  0x20 0x20       PUSHGLOBALB 0x20
0x21F2  0x37 0x8C 0x04  PUSHIW 0x048C
0x21F5  0x1A 0x07       PUSHIB 0x07
0x21F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21F9  0x45            PUSHI1
0x21FA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#else"] = true;                   token.hs:215

0x21FC  0x20 0x20       PUSHGLOBALB 0x20
0x21FE  0x37 0x93 0x04  PUSHIW 0x0493
0x2201  0x1A 0x05       PUSHIB 0x05
0x2203  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2205  0x45            PUSHI1
0x2206  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#endif"] = true;                  token.hs:216

0x2208  0x20 0x20       PUSHGLOBALB 0x20
0x220A  0x37 0x98 0x04  PUSHIW 0x0498
0x220D  0x1A 0x06       PUSHIB 0x06
0x220F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2211  0x45            PUSHI1
0x2212  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#define"] = true;                 token.hs:217

0x2214  0x20 0x20       PUSHGLOBALB 0x20
0x2216  0x37 0x9E 0x04  PUSHIW 0x049E
0x2219  0x1A 0x07       PUSHIB 0x07
0x221B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x221D  0x45            PUSHI1
0x221E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["break"] = true;                   token.hs:219

0x2220  0x20 0x1E       PUSHGLOBALB 0x1E
0x2222  0x37 0xA5 0x04  PUSHIW 0x04A5
0x2225  0x1A 0x05       PUSHIB 0x05
0x2227  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2229  0x45            PUSHI1
0x222A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["case"] = true;                    token.hs:220

0x222C  0x20 0x1E       PUSHGLOBALB 0x1E
0x222E  0x37 0xAA 0x04  PUSHIW 0x04AA
0x2231  0x1A 0x04       PUSHIB 0x04
0x2233  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2235  0x45            PUSHI1
0x2236  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["continue"] = true;                token.hs:221

0x2238  0x20 0x1E       PUSHGLOBALB 0x1E
0x223A  0x37 0xAE 0x04  PUSHIW 0x04AE
0x223D  0x1A 0x08       PUSHIB 0x08
0x223F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2241  0x45            PUSHI1
0x2242  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["default"] = true;                 token.hs:222

0x2244  0x20 0x1E       PUSHGLOBALB 0x1E
0x2246  0x37 0xB6 0x04  PUSHIW 0x04B6
0x2249  0x1A 0x07       PUSHIB 0x07
0x224B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x224D  0x45            PUSHI1
0x224E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["embed"] = true;                   token.hs:223

0x2250  0x20 0x1E       PUSHGLOBALB 0x1E
0x2252  0x37 0xBD 0x04  PUSHIW 0x04BD
0x2255  0x1A 0x05       PUSHIB 0x05
0x2257  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2259  0x45            PUSHI1
0x225A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["else"] = true;                    token.hs:224

0x225C  0x20 0x1E       PUSHGLOBALB 0x1E
0x225E  0x37 0x94 0x04  PUSHIW 0x0494
0x2261  0x1A 0x04       PUSHIB 0x04
0x2263  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2265  0x45            PUSHI1
0x2266  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["for"] = true;                     token.hs:225

0x2268  0x20 0x1E       PUSHGLOBALB 0x1E
0x226A  0x1A 0x60       PUSHIB 0x60
0x226C  0x1A 0x03       PUSHIB 0x03
0x226E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2270  0x45            PUSHI1
0x2271  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["foreach"] = true;                 token.hs:226

0x2273  0x20 0x1E       PUSHGLOBALB 0x1E
0x2275  0x37 0xC2 0x04  PUSHIW 0x04C2
0x2278  0x1A 0x07       PUSHIB 0x07
0x227A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x227C  0x45            PUSHI1
0x227D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["get"] = true;                     token.hs:227

0x227F  0x20 0x1E       PUSHGLOBALB 0x1E
0x2281  0x37 0xC9 0x04  PUSHIW 0x04C9
0x2284  0x1A 0x03       PUSHIB 0x03
0x2286  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2288  0x45            PUSHI1
0x2289  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["if"] = true;                      token.hs:228

0x228B  0x20 0x1E       PUSHGLOBALB 0x1E
0x228D  0x37 0x69 0x66  PUSHIW 0x6669
0x2290  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2292  0x45            PUSHI1
0x2293  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["in"] = true;                      token.hs:229

0x2295  0x20 0x1E       PUSHGLOBALB 0x1E
0x2297  0x37 0x69 0x6E  PUSHIW 0x6E69
0x229A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x229C  0x45            PUSHI1
0x229D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["loop"] = true;                    token.hs:230

0x229F  0x20 0x1E       PUSHGLOBALB 0x1E
0x22A1  0x37 0xCC 0x04  PUSHIW 0x04CC
0x22A4  0x1A 0x04       PUSHIB 0x04
0x22A6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22A8  0x45            PUSHI1
0x22A9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["program"] = true;                 token.hs:231

0x22AB  0x20 0x1E       PUSHGLOBALB 0x1E
0x22AD  0x37 0xD0 0x04  PUSHIW 0x04D0
0x22B0  0x1A 0x07       PUSHIB 0x07
0x22B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22B4  0x45            PUSHI1
0x22B5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["return"] = true;                  token.hs:232

0x22B7  0x20 0x1E       PUSHGLOBALB 0x1E
0x22B9  0x37 0xD7 0x04  PUSHIW 0x04D7
0x22BC  0x1A 0x06       PUSHIB 0x06
0x22BE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22C0  0x45            PUSHI1
0x22C1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["set"] = true;                     token.hs:233

0x22C3  0x20 0x1E       PUSHGLOBALB 0x1E
0x22C5  0x37 0x3C 0x01  PUSHIW 0x013C
0x22C8  0x1A 0x03       PUSHIB 0x03
0x22CA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22CC  0x45            PUSHI1
0x22CD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["switch"] = true;                  token.hs:234

0x22CF  0x20 0x1E       PUSHGLOBALB 0x1E
0x22D1  0x37 0xDD 0x04  PUSHIW 0x04DD
0x22D4  0x1A 0x06       PUSHIB 0x06
0x22D6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22D8  0x45            PUSHI1
0x22D9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["system"] = true;                  token.hs:235

0x22DB  0x20 0x1E       PUSHGLOBALB 0x1E
0x22DD  0x37 0xE3 0x04  PUSHIW 0x04E3
0x22E0  0x1A 0x06       PUSHIB 0x06
0x22E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22E4  0x45            PUSHI1
0x22E5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["typeof"] = true;                  token.hs:236

0x22E7  0x20 0x1E       PUSHGLOBALB 0x1E
0x22E9  0x37 0xE9 0x04  PUSHIW 0x04E9
0x22EC  0x1A 0x06       PUSHIB 0x06
0x22EE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22F0  0x45            PUSHI1
0x22F1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["unit"] = true;                    token.hs:237

0x22F3  0x20 0x1E       PUSHGLOBALB 0x1E
0x22F5  0x37 0xEF 0x04  PUSHIW 0x04EF
0x22F8  0x1A 0x04       PUSHIB 0x04
0x22FA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22FC  0x45            PUSHI1
0x22FD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["uses"] = true;                    token.hs:238

0x22FF  0x20 0x1E       PUSHGLOBALB 0x1E
0x2301  0x37 0xF3 0x04  PUSHIW 0x04F3
0x2304  0x1A 0x04       PUSHIB 0x04
0x2306  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2308  0x45            PUSHI1
0x2309  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["while"] = true;                   token.hs:239

0x230B  0x20 0x1E       PUSHGLOBALB 0x1E
0x230D  0x37 0xF7 0x04  PUSHIW 0x04F7
0x2310  0x1A 0x05       PUSHIB 0x05
0x2312  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2314  0x45            PUSHI1
0x2315  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:240

0x2317  0x4A            RET0


// /source/compiler/tokens/token.hs:87
// ####  Token.GetType(..)  ####                                                0x0048

0x2318  0x49            ENTER

                        // string name = token["type"];                         token.hs:89

0x2319  0x24 0x02       SYSCALL0 0x02  // String.New
0x231B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x231D  0x37 0x7F 0x01  PUSHIW 0x017F
0x2320  0x1A 0x04       PUSHIB 0x04
0x2322  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2324  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2326  0x5D            POPCOPYLOCALB00

                        // HopperToken tokenType = HopperToken.Undefined;

0x2327  0x44            PUSHI0
0x2328  0x44            PUSHI0
0x2329  0x4D            POPLOCALB02

                        // if (hopperTokenTypes.Contains(name))                 token.hs:91

0x232A  0x20 0x22       PUSHGLOBALB 0x22
0x232C  0x4E            PUSHLOCALB00
0x232D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x232F  0x2E 0x0A       JZB 0x2339 (+10)

                        // tokenType = hopperTokenTypes[name];                  token.hs:93

0x2331  0x20 0x22       PUSHGLOBALB 0x22
0x2333  0x4E            PUSHLOCALB00
0x2334  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2336  0x4D            POPLOCALB02

                        // }                                                    token.hs:94

0x2337  0x30 0x0B       JB 0x2342 (+11)

                        // PrintLn("TODO : token not implemented in Token.GetType");

0x2339  0x37 0xFC 0x04  PUSHIW 0x04FC
0x233C  0x1A 0x2D       PUSHIB 0x2D
0x233E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2340  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // return tokenType;                                    token.hs:99

0x2342  0x4F            PUSHLOCALB02
0x2343  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/scanner.hs:505
// ####  Scanner.Next(..)  ####                                                 0x006B

0x2345  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Undefined, "", currentLine, currentPos, currentSourcePath);

0x2346  0x1A 0x0F       PUSHIB 0x0F
0x2348  0x1A 0x0F       PUSHIB 0x0F
0x234A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x234C  0x44            PUSHI0
0x234D  0x24 0x02       SYSCALL0 0x02  // String.New
0x234F  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x2352  0x20 0x32       PUSHGLOBALB 0x32
0x2354  0x2C 0x58       CALLB 0x58     // Token.New
0x2356  0x5D            POPCOPYLOCALB00

                        // if (isPeekedToken)                                   scanner.hs:509

0x2357  0x20 0x3E       PUSHGLOBALB 0x3E
0x2359  0x2E 0x0B       JZB 0x2364 (+11)

                        // token = peekedToken;                                 scanner.hs:511

0x235B  0x20 0x3C       PUSHGLOBALB 0x3C
0x235D  0x5D            POPCOPYLOCALB00

                        // isPeekedToken = false;                               scanner.hs:512

0x235E  0x44            PUSHI0
0x235F  0x1F 0x3E       POPGLOBALB 0x3E

                        // break;                                               scanner.hs:513

0x2361  0x33 0x46 0x02  JW 0x25A7 (+582)

                        // if (isAtEnd())                                       scanner.hs:515

0x2364  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x2366  0x2E 0x11       JZB 0x2377 (+17)

                        // token = Token.New(HopperToken.EOF, "", currentLine, currentPos, currentSourcePath);

0x2368  0x1A 0x2D       PUSHIB 0x2D
0x236A  0x24 0x02       SYSCALL0 0x02  // String.New
0x236C  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x236F  0x20 0x32       PUSHGLOBALB 0x32
0x2371  0x2C 0x58       CALLB 0x58     // Token.New
0x2373  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:518

0x2374  0x33 0x33 0x02  JW 0x25A7 (+563)

                        // skipWhitespace();                                    scanner.hs:522

0x2377  0x2C 0x66       CALLB 0x66     // Scanner.skipWhitespace

                        // char c = advance();                                  scanner.hs:523

0x2379  0x44            PUSHI0
0x237A  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x237C  0x4D            POPLOCALB02

                        // if (c.IsDigit())                                     scanner.hs:524

0x237D  0x4F            PUSHLOCALB02
0x237E  0x2C 0x8A       CALLB 0x8A     // Char.IsDigit
0x2380  0x2E 0x0B       JZB 0x238B (+11)

                        // token = scanNumber(c);                               scanner.hs:526

0x2382  0x4F            PUSHLOCALB02
0x2383  0x2C 0x69       CALLB 0x69     // Scanner.scanNumber
0x2385  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:527

0x2386  0x28 0x02       DECSP 0x02
0x2388  0x33 0x1F 0x02  JW 0x25A7 (+543)

                        // if (c.IsLetter() || (c == '#'))                      scanner.hs:529

0x238B  0x4F            PUSHLOCALB02
0x238C  0x2C 0x8F       CALLB 0x8F     // Char.IsLetter
0x238E  0x27 0x00       DUP 0x00
0x2390  0x2F 0x07       JNZB 0x2397 (+7)
0x2392  0x4F            PUSHLOCALB02
0x2393  0x1A 0x23       PUSHIB 0x23
0x2395  0x05            EQ
0x2396  0x0B            BOOLOR
0x2397  0x2E 0x0B       JZB 0x23A2 (+11)

                        // token = scanIdentifier(c);                           scanner.hs:531

0x2399  0x4F            PUSHLOCALB02
0x239A  0x2C 0x6A       CALLB 0x6A     // Scanner.scanIdentifier
0x239C  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:532

0x239D  0x28 0x02       DECSP 0x02
0x239F  0x33 0x08 0x02  JW 0x25A7 (+520)

                        // HopperToken htoken = HopperToken.Undefined;

0x23A2  0x44            PUSHI0
0x23A3  0x44            PUSHI0
0x23A4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // switch (c)                                           scanner.hs:535

0x23A6  0x4F            PUSHLOCALB02

                        // case '(': { htoken = HopperToken.LParen; }           scanner.hs:537

0x23A7  0x1A 0x28       PUSHIB 0x28
0x23A9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23AB  0x05            EQ
0x23AC  0x2E 0x09       JZB 0x23B5 (+9)
0x23AE  0x1A 0x10       PUSHIB 0x10
0x23B0  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23B2  0x33 0xE1 0x01  JW 0x2593 (+481)

                        // case ')': { htoken = HopperToken.RParen; }           scanner.hs:538

0x23B5  0x1A 0x29       PUSHIB 0x29
0x23B7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23B9  0x05            EQ
0x23BA  0x2E 0x09       JZB 0x23C3 (+9)
0x23BC  0x1A 0x11       PUSHIB 0x11
0x23BE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23C0  0x33 0xD3 0x01  JW 0x2593 (+467)

                        // case '{': { htoken = HopperToken.LBrace; }           scanner.hs:539

0x23C3  0x1A 0x7B       PUSHIB 0x7B
0x23C5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23C7  0x05            EQ
0x23C8  0x2E 0x09       JZB 0x23D1 (+9)
0x23CA  0x1A 0x12       PUSHIB 0x12
0x23CC  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23CE  0x33 0xC5 0x01  JW 0x2593 (+453)

                        // case '}': { htoken = HopperToken.RBrace; }           scanner.hs:540

0x23D1  0x1A 0x7D       PUSHIB 0x7D
0x23D3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23D5  0x05            EQ
0x23D6  0x2E 0x09       JZB 0x23DF (+9)
0x23D8  0x1A 0x13       PUSHIB 0x13
0x23DA  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23DC  0x33 0xB7 0x01  JW 0x2593 (+439)

                        // case '[': { htoken = HopperToken.LBracket; }

0x23DF  0x1A 0x5B       PUSHIB 0x5B
0x23E1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23E3  0x05            EQ
0x23E4  0x2E 0x09       JZB 0x23ED (+9)
0x23E6  0x1A 0x14       PUSHIB 0x14
0x23E8  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23EA  0x33 0xA9 0x01  JW 0x2593 (+425)

                        // case ']': { htoken = HopperToken.RBracket; }

0x23ED  0x1A 0x5D       PUSHIB 0x5D
0x23EF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23F1  0x05            EQ
0x23F2  0x2E 0x09       JZB 0x23FB (+9)
0x23F4  0x1A 0x15       PUSHIB 0x15
0x23F6  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x23F8  0x33 0x9B 0x01  JW 0x2593 (+411)

                        // case ';': { htoken = HopperToken.SemiColon; }

0x23FB  0x1A 0x3B       PUSHIB 0x3B
0x23FD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23FF  0x05            EQ
0x2400  0x2E 0x09       JZB 0x2409 (+9)
0x2402  0x1A 0x0C       PUSHIB 0x0C
0x2404  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2406  0x33 0x8D 0x01  JW 0x2593 (+397)

                        // case ':': { htoken = HopperToken.Colon; }            scanner.hs:544

0x2409  0x1A 0x3A       PUSHIB 0x3A
0x240B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x240D  0x05            EQ
0x240E  0x2E 0x09       JZB 0x2417 (+9)
0x2410  0x1A 0x0E       PUSHIB 0x0E
0x2412  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2414  0x33 0x7F 0x01  JW 0x2593 (+383)

                        // case ',': { htoken = HopperToken.Comma; }            scanner.hs:545

0x2417  0x1A 0x2C       PUSHIB 0x2C
0x2419  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x241B  0x05            EQ
0x241C  0x2E 0x09       JZB 0x2425 (+9)
0x241E  0x1A 0x0D       PUSHIB 0x0D
0x2420  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2422  0x33 0x71 0x01  JW 0x2593 (+369)

                        // case '.': { htoken = HopperToken.Dot; }              scanner.hs:546

0x2425  0x1A 0x2E       PUSHIB 0x2E
0x2427  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2429  0x05            EQ
0x242A  0x2E 0x09       JZB 0x2433 (+9)
0x242C  0x1A 0x04       PUSHIB 0x04
0x242E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2430  0x33 0x63 0x01  JW 0x2593 (+355)

                        // case '*': { htoken = HopperToken.Multiply; }

0x2433  0x1A 0x2A       PUSHIB 0x2A
0x2435  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2437  0x05            EQ
0x2438  0x2E 0x09       JZB 0x2441 (+9)
0x243A  0x1A 0x27       PUSHIB 0x27
0x243C  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x243E  0x33 0x55 0x01  JW 0x2593 (+341)

                        // case '/': { htoken = HopperToken.Divide; }           scanner.hs:548

0x2441  0x1A 0x2F       PUSHIB 0x2F
0x2443  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2445  0x05            EQ
0x2446  0x2E 0x09       JZB 0x244F (+9)
0x2448  0x1A 0x28       PUSHIB 0x28
0x244A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x244C  0x33 0x47 0x01  JW 0x2593 (+327)

                        // case '%': { htoken = HopperToken.Modulus; }

0x244F  0x1A 0x25       PUSHIB 0x25
0x2451  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2453  0x05            EQ
0x2454  0x2E 0x09       JZB 0x245D (+9)
0x2456  0x1A 0x29       PUSHIB 0x29
0x2458  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x245A  0x33 0x39 0x01  JW 0x2593 (+313)

                        // case '~': { htoken = HopperToken.BitNot; }           scanner.hs:550

0x245D  0x1A 0x7E       PUSHIB 0x7E
0x245F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2461  0x05            EQ
0x2462  0x2E 0x09       JZB 0x246B (+9)
0x2464  0x1A 0x23       PUSHIB 0x23
0x2466  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2468  0x33 0x2B 0x01  JW 0x2593 (+299)

                        // case '-':                                            scanner.hs:552

0x246B  0x1A 0x2D       PUSHIB 0x2D
0x246D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x246F  0x05            EQ
0x2470  0x2E 0x15       JZB 0x2485 (+21)

                        // if (match('-'))                                      scanner.hs:554

0x2472  0x1A 0x2D       PUSHIB 0x2D
0x2474  0x2C 0x65       CALLB 0x65     // Scanner.match
0x2476  0x2E 0x08       JZB 0x247E (+8)

                        // { htoken = HopperToken.Decrement; }                  scanner.hs:555

0x2478  0x1A 0x2B       PUSHIB 0x2B
0x247A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x247C  0x30 0x06       JB 0x2482 (+6)

                        // { htoken = HopperToken.Subtract; }                   scanner.hs:557

0x247E  0x1A 0x26       PUSHIB 0x26
0x2480  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:558

0x2482  0x33 0x11 0x01  JW 0x2593 (+273)

                        // case '+':                                            scanner.hs:559

0x2485  0x1A 0x2B       PUSHIB 0x2B
0x2487  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2489  0x05            EQ
0x248A  0x2E 0x15       JZB 0x249F (+21)

                        // if (match('+'))                                      scanner.hs:561

0x248C  0x1A 0x2B       PUSHIB 0x2B
0x248E  0x2C 0x65       CALLB 0x65     // Scanner.match
0x2490  0x2E 0x08       JZB 0x2498 (+8)

                        // { htoken = HopperToken.Increment; }                  scanner.hs:562

0x2492  0x1A 0x2A       PUSHIB 0x2A
0x2494  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2496  0x30 0x06       JB 0x249C (+6)

                        // { htoken = HopperToken.Add; }                        scanner.hs:564

0x2498  0x1A 0x25       PUSHIB 0x25
0x249A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:565

0x249C  0x33 0xF7 0x00  JW 0x2593 (+247)

                        // case '!':                                            scanner.hs:566

0x249F  0x1A 0x21       PUSHIB 0x21
0x24A1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24A3  0x05            EQ
0x24A4  0x2E 0x15       JZB 0x24B9 (+21)

                        // if (match('='))                                      scanner.hs:568

0x24A6  0x1A 0x3D       PUSHIB 0x3D
0x24A8  0x2C 0x65       CALLB 0x65     // Scanner.match
0x24AA  0x2E 0x08       JZB 0x24B2 (+8)

                        // { htoken = HopperToken.NE; }                         scanner.hs:569

0x24AC  0x1A 0x1B       PUSHIB 0x1B
0x24AE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x24B0  0x30 0x06       JB 0x24B6 (+6)

                        // { htoken = HopperToken.BooleanNot; }                 scanner.hs:571

0x24B2  0x1A 0x20       PUSHIB 0x20
0x24B4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:572

0x24B6  0x33 0xDD 0x00  JW 0x2593 (+221)

                        // case '=':                                            scanner.hs:573

0x24B9  0x1A 0x3D       PUSHIB 0x3D
0x24BB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24BD  0x05            EQ
0x24BE  0x2E 0x15       JZB 0x24D3 (+21)

                        // if (match('='))                                      scanner.hs:575

0x24C0  0x1A 0x3D       PUSHIB 0x3D
0x24C2  0x2C 0x65       CALLB 0x65     // Scanner.match
0x24C4  0x2E 0x08       JZB 0x24CC (+8)

                        // { htoken = HopperToken.EQ; }                         scanner.hs:576

0x24C6  0x1A 0x18       PUSHIB 0x18
0x24C8  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x24CA  0x30 0x06       JB 0x24D0 (+6)

                        // { htoken = HopperToken.Assign; }                     scanner.hs:578

0x24CC  0x1A 0x2C       PUSHIB 0x2C
0x24CE  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:579

0x24D0  0x33 0xC3 0x00  JW 0x2593 (+195)

                        // case '<':                                            scanner.hs:580

0x24D3  0x1A 0x3C       PUSHIB 0x3C
0x24D5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24D7  0x05            EQ
0x24D8  0x2E 0x21       JZB 0x24F9 (+33)

                        // if (match('='))                                      scanner.hs:582

0x24DA  0x1A 0x3D       PUSHIB 0x3D
0x24DC  0x2C 0x65       CALLB 0x65     // Scanner.match
0x24DE  0x2E 0x08       JZB 0x24E6 (+8)

                        // { htoken = HopperToken.LE; }                         scanner.hs:583

0x24E0  0x1A 0x19       PUSHIB 0x19
0x24E2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x24E4  0x30 0x12       JB 0x24F6 (+18)

                        // else if (match('<'))                                 scanner.hs:584

0x24E6  0x1A 0x3C       PUSHIB 0x3C
0x24E8  0x2C 0x65       CALLB 0x65     // Scanner.match
0x24EA  0x2E 0x08       JZB 0x24F2 (+8)

                        // { htoken = HopperToken.ShiftLeft; }                  scanner.hs:585

0x24EC  0x1A 0x1C       PUSHIB 0x1C
0x24EE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x24F0  0x30 0x06       JB 0x24F6 (+6)

                        // { htoken = HopperToken.LT; }                         scanner.hs:587

0x24F2  0x1A 0x16       PUSHIB 0x16
0x24F4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:588

0x24F6  0x33 0x9D 0x00  JW 0x2593 (+157)

                        // case '>':                                            scanner.hs:589

0x24F9  0x1A 0x3E       PUSHIB 0x3E
0x24FB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24FD  0x05            EQ
0x24FE  0x2E 0x21       JZB 0x251F (+33)

                        // if (match('='))                                      scanner.hs:591

0x2500  0x1A 0x3D       PUSHIB 0x3D
0x2502  0x2C 0x65       CALLB 0x65     // Scanner.match
0x2504  0x2E 0x08       JZB 0x250C (+8)

                        // { htoken = HopperToken.GE; }                         scanner.hs:592

0x2506  0x1A 0x1A       PUSHIB 0x1A
0x2508  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x250A  0x30 0x12       JB 0x251C (+18)

                        // else if (match('>'))                                 scanner.hs:593

0x250C  0x1A 0x3E       PUSHIB 0x3E
0x250E  0x2C 0x65       CALLB 0x65     // Scanner.match
0x2510  0x2E 0x08       JZB 0x2518 (+8)

                        // { htoken = HopperToken.ShiftRight; }                 scanner.hs:594

0x2512  0x1A 0x1D       PUSHIB 0x1D
0x2514  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2516  0x30 0x7D       JB 0x2593 (+125)

                        // { htoken = HopperToken.GT; }                         scanner.hs:596

0x2518  0x1A 0x17       PUSHIB 0x17
0x251A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:597

0x251C  0x33 0x77 0x00  JW 0x2593 (+119)

                        // case '|':                                            scanner.hs:598

0x251F  0x1A 0x7C       PUSHIB 0x7C
0x2521  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2523  0x05            EQ
0x2524  0x2E 0x14       JZB 0x2538 (+20)

                        // if (match('|'))                                      scanner.hs:600

0x2526  0x1A 0x7C       PUSHIB 0x7C
0x2528  0x2C 0x65       CALLB 0x65     // Scanner.match
0x252A  0x2E 0x08       JZB 0x2532 (+8)

                        // { htoken = HopperToken.BooleanOr; }                  scanner.hs:601

0x252C  0x1A 0x1F       PUSHIB 0x1F
0x252E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2530  0x30 0x63       JB 0x2593 (+99)

                        // { htoken = HopperToken.BitOr; }                      scanner.hs:603

0x2532  0x1A 0x22       PUSHIB 0x22
0x2534  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:604

0x2536  0x30 0x5D       JB 0x2593 (+93)

                        // case '&':                                            scanner.hs:605

0x2538  0x1A 0x26       PUSHIB 0x26
0x253A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x253C  0x05            EQ
0x253D  0x2E 0x14       JZB 0x2551 (+20)

                        // if (match('&'))                                      scanner.hs:607

0x253F  0x1A 0x26       PUSHIB 0x26
0x2541  0x2C 0x65       CALLB 0x65     // Scanner.match
0x2543  0x2E 0x08       JZB 0x254B (+8)

                        // { htoken = HopperToken.BooleanAnd; }                 scanner.hs:608

0x2545  0x1A 0x1E       PUSHIB 0x1E
0x2547  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x2549  0x30 0x4A       JB 0x2593 (+74)

                        // { htoken = HopperToken.BitAnd; }                     scanner.hs:610

0x254B  0x1A 0x21       PUSHIB 0x21
0x254D  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:611

0x254F  0x30 0x44       JB 0x2593 (+68)

                        // case '"':                                            scanner.hs:612

0x2551  0x1A 0x22       PUSHIB 0x22
0x2553  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2555  0x05            EQ
0x2556  0x2E 0x07       JZB 0x255D (+7)

                        // token = scanString();                                scanner.hs:614

0x2558  0x2C 0x67       CALLB 0x67     // Scanner.scanString
0x255A  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:615

0x255B  0x30 0x38       JB 0x2593 (+56)

                        // case '\'':                                           scanner.hs:616

0x255D  0x1A 0x27       PUSHIB 0x27
0x255F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2561  0x05            EQ
0x2562  0x2E 0x07       JZB 0x2569 (+7)

                        // token = scanChar();                                  scanner.hs:618

0x2564  0x2C 0x68       CALLB 0x68     // Scanner.scanChar
0x2566  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:619

0x2567  0x30 0x2C       JB 0x2593 (+44)

                        // uint ui = uint(c);                                   scanner.hs:622

0x2569  0x44            PUSHI0
0x256A  0x4F            PUSHLOCALB02
0x256B  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // token = errorToken("unexpected character: '" + c + "' (0x" + ui.ToHexString(2) + ")");

0x256D  0x37 0x29 0x05  PUSHIW 0x0529
0x2570  0x1A 0x17       PUSHIB 0x17
0x2572  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2574  0x4F            PUSHLOCALB02
0x2575  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2577  0x37 0x40 0x05  PUSHIW 0x0540
0x257A  0x1A 0x05       PUSHIB 0x05
0x257C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x257E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2580  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2582  0x1A 0x02       PUSHIB 0x02
0x2584  0x2C 0x9B       CALLB 0x9B     // UInt.ToHexString
0x2586  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2588  0x1A 0x29       PUSHIB 0x29
0x258A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x258C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x258E  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x2590  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:624

0x2591  0x28 0x02       DECSP 0x02

                        // }                                                    scanner.hs:625

0x2593  0x28 0x02       DECSP 0x02

                        // if (htoken != HopperToken.Undefined)                 scanner.hs:626

0x2595  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2597  0x2E 0x0E       JZB 0x25A5 (+14)

                        // token = Token.New(htoken, "", currentLine, currentPos, currentSourcePath);

0x2599  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x259B  0x24 0x02       SYSCALL0 0x02  // String.New
0x259D  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x25A0  0x20 0x32       PUSHGLOBALB 0x32
0x25A2  0x2C 0x58       CALLB 0x58     // Token.New
0x25A4  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:630

0x25A5  0x28 0x04       DECSP 0x04

                        // if (dumpTokens)                                      scanner.hs:634

0x25A7  0x20 0x3A       PUSHGLOBALB 0x3A
0x25A9  0x2E 0x13       JZB 0x25BC (+19)

                        // PrintLn("  " + Token.ToString(token), Color.Red, Color.Black);

0x25AB  0x37 0x20 0x20  PUSHIW 0x2020
0x25AE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x25B0  0x4E            PUSHLOCALB00
0x25B1  0x2C 0x59       CALLB 0x59     // Token.ToString
0x25B3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x25B5  0x34 0x06 0x01  CALLW 0x0106   // Color.Red_Get
0x25B8  0x2C 0xF7       CALLB 0xF7     // Color.Black_Get
0x25BA  0x2C 0x1C       CALLB 0x1C     // Screen.PrintLn

                        // return token;                                        scanner.hs:638

0x25BC  0x4E            PUSHLOCALB00
0x25BD  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:127
// ####  Scanner.isAtEnd(..)  ####                                              0x005F

0x25BF  0x49            ENTER

                        // return (currentPos == sourceLength);                 scanner.hs:129

0x25C0  0x52 0x28 0x2C  PUSHGLOBALBB 0x2C28
0x25C3  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x25C5  0x4A            RET0


// /source/compiler/tokens/scanner.hs:231
// ####  Scanner.skipWhitespace(..)  ####                                       0x0066

0x25C6  0x49            ENTER

                        // char c = peek();                                     scanner.hs:234

0x25C7  0x44            PUSHI0
0x25C8  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x25CA  0x4C            POPLOCALB00

                        // if ((c == ' ') || (c == char(0x0D)) || (c == char(0x09)))

0x25CB  0x4E            PUSHLOCALB00
0x25CC  0x1A 0x20       PUSHIB 0x20
0x25CE  0x05            EQ
0x25CF  0x27 0x00       DUP 0x00
0x25D1  0x2F 0x10       JNZB 0x25E1 (+16)
0x25D3  0x4E            PUSHLOCALB00
0x25D4  0x1A 0x0D       PUSHIB 0x0D
0x25D6  0x05            EQ
0x25D7  0x0B            BOOLOR
0x25D8  0x27 0x00       DUP 0x00
0x25DA  0x2F 0x07       JNZB 0x25E1 (+7)
0x25DC  0x4E            PUSHLOCALB00
0x25DD  0x1A 0x09       PUSHIB 0x09
0x25DF  0x05            EQ
0x25E0  0x0B            BOOLOR
0x25E1  0x2E 0x08       JZB 0x25E9 (+8)

                        // c = advance();                                       scanner.hs:237

0x25E3  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x25E5  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:238

0x25E6  0x33 0x97 0x00  JW 0x267D (+151)

                        // else if (c == char(0x0A))                            scanner.hs:239

0x25E9  0x4E            PUSHLOCALB00
0x25EA  0x1A 0x0A       PUSHIB 0x0A
0x25EC  0x05            EQ
0x25ED  0x2E 0x0A       JZB 0x25F7 (+10)

                        // currentLine++;                                       scanner.hs:241

0x25EF  0x53 0x2A       INCGLOBALB 0x2A

                        // c = advance();                                       scanner.hs:242

0x25F1  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x25F3  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:243

0x25F4  0x33 0x89 0x00  JW 0x267D (+137)

                        // else if (c == '/')                                   scanner.hs:244

0x25F7  0x4E            PUSHLOCALB00
0x25F8  0x1A 0x2F       PUSHIB 0x2F
0x25FA  0x05            EQ
0x25FB  0x31 0x7F 0x00  JZW 0x267A (+127)

                        // char n = peekNext();                                 scanner.hs:246

0x25FE  0x44            PUSHI0
0x25FF  0x2C 0x64       CALLB 0x64     // Scanner.peekNext
0x2601  0x4D            POPLOCALB02

                        // if (n == '/')                                        scanner.hs:247

0x2602  0x4F            PUSHLOCALB02
0x2603  0x1A 0x2F       PUSHIB 0x2F
0x2605  0x05            EQ
0x2606  0x2E 0x1F       JZB 0x2625 (+31)

                        // c = peek();                                          scanner.hs:252

0x2608  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x260A  0x4C            POPLOCALB00

                        // if ((c == char(0)) || (c == char(0x0A)) || isAtEnd())

0x260B  0x4E            PUSHLOCALB00
0x260C  0x44            PUSHI0
0x260D  0x05            EQ
0x260E  0x27 0x00       DUP 0x00
0x2610  0x2F 0x0E       JNZB 0x261E (+14)
0x2612  0x4E            PUSHLOCALB00
0x2613  0x1A 0x0A       PUSHIB 0x0A
0x2615  0x05            EQ
0x2616  0x0B            BOOLOR
0x2617  0x27 0x00       DUP 0x00
0x2619  0x2F 0x05       JNZB 0x261E (+5)
0x261B  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x261D  0x0B            BOOLOR
0x261E  0x2F 0x58       JNZB 0x2676 (+88)

                        // c = advance(); // gobble gobble                      scanner.hs:257

0x2620  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2622  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:258

0x2623  0x30 0xE5       JB 0x2608 (-27)

                        // else if (n == '*')                                   scanner.hs:260

0x2625  0x4F            PUSHLOCALB02
0x2626  0x1A 0x2A       PUSHIB 0x2A
0x2628  0x05            EQ
0x2629  0x2E 0x4A       JZB 0x2673 (+74)

                        // c = advance();                                       scanner.hs:264

0x262B  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x262D  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:265

0x262E  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2630  0x4C            POPLOCALB00

                        // c = peek();                                          scanner.hs:268

0x2631  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x2633  0x4C            POPLOCALB00

                        // if ((c == char(0)) || isAtEnd())                     scanner.hs:269

0x2634  0x4E            PUSHLOCALB00
0x2635  0x44            PUSHI0
0x2636  0x05            EQ
0x2637  0x27 0x00       DUP 0x00
0x2639  0x2F 0x05       JNZB 0x263E (+5)
0x263B  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x263D  0x0B            BOOLOR
0x263E  0x2F 0x38       JNZB 0x2676 (+56)

                        // n = peekNext();                                      scanner.hs:273

0x2640  0x2C 0x64       CALLB 0x64     // Scanner.peekNext
0x2642  0x4D            POPLOCALB02

                        // if ((n == char(0)) || isAtEnd())                     scanner.hs:274

0x2643  0x4F            PUSHLOCALB02
0x2644  0x44            PUSHI0
0x2645  0x05            EQ
0x2646  0x27 0x00       DUP 0x00
0x2648  0x2F 0x05       JNZB 0x264D (+5)
0x264A  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x264C  0x0B            BOOLOR
0x264D  0x2F 0x29       JNZB 0x2676 (+41)

                        // if ((c == '*') && (n == '/'))                        scanner.hs:278

0x264F  0x4E            PUSHLOCALB00
0x2650  0x1A 0x2A       PUSHIB 0x2A
0x2652  0x05            EQ
0x2653  0x27 0x00       DUP 0x00
0x2655  0x2E 0x07       JZB 0x265C (+7)
0x2657  0x4F            PUSHLOCALB02
0x2658  0x1A 0x2F       PUSHIB 0x2F
0x265A  0x05            EQ
0x265B  0x0C            BOOLAND
0x265C  0x2E 0x0A       JZB 0x2666 (+10)

                        // c = advance();                                       scanner.hs:281

0x265E  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2660  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:282

0x2661  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2663  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:283

0x2664  0x30 0x12       JB 0x2676 (+18)

                        // c = advance(); // gobble gobble                      scanner.hs:285

0x2666  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2668  0x4C            POPLOCALB00

                        // if (c == char(0x0A))                                 scanner.hs:286

0x2669  0x4E            PUSHLOCALB00
0x266A  0x1A 0x0A       PUSHIB 0x0A
0x266C  0x05            EQ
0x266D  0x2E 0xC4       JZB 0x2631 (-60)

                        // currentLine++;                                       scanner.hs:288

0x266F  0x53 0x2A       INCGLOBALB 0x2A

                        // }                                                    scanner.hs:290

0x2671  0x30 0xC0       JB 0x2631 (-64)

                        // break; // just a single '/'                          scanner.hs:294

0x2673  0x28 0x04       DECSP 0x04
0x2675  0x4A            RET0

                        // }                                                    scanner.hs:296

0x2676  0x28 0x02       DECSP 0x02
0x2678  0x30 0x05       JB 0x267D (+5)

                        // break;                                               scanner.hs:299

0x267A  0x28 0x02       DECSP 0x02
0x267C  0x4A            RET0

                        // }                                                    scanner.hs:301

0x267D  0x28 0x02       DECSP 0x02
0x267F  0x33 0x48 0xFF  JW 0x25C7 (-184)


// /source/compiler/tokens/scanner.hs:199
// ####  Scanner.advance(..)  ####                                              0x0062


                        // char c = sourceGetFromPos(currentPos, true);

0x2682  0x5F 0x01       ENTERB 0x01

                        // char c = sourceGetFromPos(currentPos, true);

0x2684  0x20 0x28       PUSHGLOBALB 0x28
0x2686  0x45            PUSHI1
0x2687  0x2C 0x61       CALLB 0x61     // Scanner.sourceGetFromPos
0x2689  0x4C            POPLOCALB00

                        // currentPos = currentPos + 1;                         scanner.hs:201

0x268A  0x20 0x28       PUSHGLOBALB 0x28
0x268C  0x45            PUSHI1
0x268D  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x268F  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x2691  0x59 0x28       POPCOPYGLOBALB 0x28

                        // return c;                                            scanner.hs:202

0x2693  0x4E            PUSHLOCALB00
0x2694  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:355
// ####  Scanner.scanNumber(..)  ####                                           0x0069

0x2696  0x49            ENTER

                        // <string,string> token;                               scanner.hs:356

0x2697  0x1A 0x0F       PUSHIB 0x0F
0x2699  0x1A 0x0F       PUSHIB 0x0F
0x269B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // string value = c.ToString();                         scanner.hs:357

0x269D  0x24 0x02       SYSCALL0 0x02  // String.New
0x269F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x26A1  0x2C 0x90       CALLB 0x90     // Char.ToString
0x26A3  0x5E            POPCOPYLOCALB02

                        // bool hexOk = false;                                  scanner.hs:358

0x26A4  0x44            PUSHI0

                        // bool binaryOk = false;                               scanner.hs:359

0x26A5  0x44            PUSHI0

                        // bool floatOk = false;                                scanner.hs:360

0x26A6  0x44            PUSHI0

                        // HopperToken ttype = HopperToken.Integer;             scanner.hs:362

0x26A7  0x44            PUSHI0
0x26A8  0x1A 0x09       PUSHIB 0x09
0x26AA  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // c = peek();                                          scanner.hs:367

0x26AC  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x26AE  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if ((c == 'x') && (value == "0"))                    scanner.hs:368

0x26B0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x26B2  0x1A 0x78       PUSHIB 0x78
0x26B4  0x05            EQ
0x26B5  0x27 0x00       DUP 0x00
0x26B7  0x2E 0x0C       JZB 0x26C3 (+12)
0x26B9  0x4F            PUSHLOCALB02
0x26BA  0x1A 0x30       PUSHIB 0x30
0x26BC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x26BE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x26C0  0x44            PUSHI0
0x26C1  0x05            EQ
0x26C2  0x0C            BOOLAND
0x26C3  0x2E 0x0D       JZB 0x26D0 (+13)

                        // hexOk = true;                                        scanner.hs:370

0x26C5  0x45            PUSHI1
0x26C6  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // value = value + advance();                           scanner.hs:371

0x26C8  0x4F            PUSHLOCALB02
0x26C9  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x26CB  0x25 0x03       SYSCALL1 0x03  // String.Append
0x26CD  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:372

0x26CE  0x30 0xDE       JB 0x26AC (-34)

                        // if ((c == 'b') && (value == "0"))                    scanner.hs:374

0x26D0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x26D2  0x1A 0x62       PUSHIB 0x62
0x26D4  0x05            EQ
0x26D5  0x27 0x00       DUP 0x00
0x26D7  0x2E 0x0C       JZB 0x26E3 (+12)
0x26D9  0x4F            PUSHLOCALB02
0x26DA  0x1A 0x30       PUSHIB 0x30
0x26DC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x26DE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x26E0  0x44            PUSHI0
0x26E1  0x05            EQ
0x26E2  0x0C            BOOLAND
0x26E3  0x2E 0x0D       JZB 0x26F0 (+13)

                        // binaryOk = true;                                     scanner.hs:376

0x26E5  0x45            PUSHI1
0x26E6  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // value = value + advance();                           scanner.hs:377

0x26E8  0x4F            PUSHLOCALB02
0x26E9  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x26EB  0x25 0x03       SYSCALL1 0x03  // String.Append
0x26ED  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:378

0x26EE  0x30 0xBE       JB 0x26AC (-66)

                        // if (hexOk && c.IsHexDigit())                         scanner.hs:380

0x26F0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x26F2  0x27 0x00       DUP 0x00
0x26F4  0x2E 0x07       JZB 0x26FB (+7)
0x26F6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x26F8  0x2C 0x8E       CALLB 0x8E     // Char.IsHexDigit
0x26FA  0x0C            BOOLAND
0x26FB  0x2F 0x3E       JNZB 0x2739 (+62)

                        // else if (binaryOk && ((c == '0') || (c == '1')))

0x26FD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x26FF  0x27 0x00       DUP 0x00
0x2701  0x2E 0x12       JZB 0x2713 (+18)
0x2703  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2705  0x1A 0x30       PUSHIB 0x30
0x2707  0x05            EQ
0x2708  0x27 0x00       DUP 0x00
0x270A  0x2F 0x08       JNZB 0x2712 (+8)
0x270C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x270E  0x1A 0x31       PUSHIB 0x31
0x2710  0x05            EQ
0x2711  0x0B            BOOLOR
0x2712  0x0C            BOOLAND
0x2713  0x2F 0x26       JNZB 0x2739 (+38)

                        // else if ((c == '.') && !floatOk && (value.Length > 0))

0x2715  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2717  0x1A 0x2E       PUSHIB 0x2E
0x2719  0x05            EQ
0x271A  0x27 0x00       DUP 0x00
0x271C  0x2E 0x10       JZB 0x272C (+16)
0x271E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2720  0x41            BOOLNOT
0x2721  0x0C            BOOLAND
0x2722  0x27 0x00       DUP 0x00
0x2724  0x2E 0x08       JZB 0x272C (+8)
0x2726  0x4F            PUSHLOCALB02
0x2727  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2729  0x44            PUSHI0
0x272A  0x07            GT
0x272B  0x0C            BOOLAND
0x272C  0x2E 0x07       JZB 0x2733 (+7)

                        // floatOk = true;                                      scanner.hs:390

0x272E  0x45            PUSHI1
0x272F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    scanner.hs:391

0x2731  0x30 0x08       JB 0x2739 (+8)

                        // else if (!c.IsDigit())                               scanner.hs:392

0x2733  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2735  0x2C 0x8A       CALLB 0x8A     // Char.IsDigit
0x2737  0x2E 0x0B       JZB 0x2742 (+11)

                        // value = value + advance();                           scanner.hs:396

0x2739  0x4F            PUSHLOCALB02
0x273A  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x273C  0x25 0x03       SYSCALL1 0x03  // String.Append
0x273E  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:397

0x273F  0x33 0x6D 0xFF  JW 0x26AC (-147)

                        // if (hexOk)                                           scanner.hs:398

0x2742  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2744  0x2E 0x38       JZB 0x277C (+56)

                        // if (value.Length < 3)                                scanner.hs:400

0x2746  0x4F            PUSHLOCALB02
0x2747  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2749  0x1A 0x03       PUSHIB 0x03
0x274B  0x08            LT
0x274C  0x2E 0x0F       JZB 0x275B (+15)

                        // token = errorToken("invalid hex integer literal");

0x274E  0x37 0x45 0x05  PUSHIW 0x0545
0x2751  0x1A 0x1B       PUSHIB 0x1B
0x2753  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2755  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x2757  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:403

0x2758  0x33 0xAD 0x00  JW 0x2805 (+173)

                        // uint hexValue = 0;                                   scanner.hs:405

0x275B  0x44            PUSHI0

                        // if (!Token.TryParseHex(value, ref hexValue))

0x275C  0x4F            PUSHLOCALB02
0x275D  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x275F  0x2C 0x54       CALLB 0x54     // Token.TryParseHex
0x2761  0x2F 0x11       JNZB 0x2772 (+17)

                        // token = errorToken("invalid hex integer literal");

0x2763  0x37 0x45 0x05  PUSHIW 0x0545
0x2766  0x1A 0x1B       PUSHIB 0x1B
0x2768  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x276A  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x276C  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:409

0x276D  0x28 0x02       DECSP 0x02
0x276F  0x33 0x96 0x00  JW 0x2805 (+150)

                        // value = hexValue.ToString();                         scanner.hs:411

0x2772  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2774  0x2C 0x98       CALLB 0x98     // UInt.ToString
0x2776  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:412

0x2777  0x28 0x02       DECSP 0x02
0x2779  0x33 0x81 0x00  JW 0x27FA (+129)

                        // else if (binaryOk)                                   scanner.hs:413

0x277C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x277E  0x2E 0x36       JZB 0x27B4 (+54)

                        // if (value.Length < 3)                                scanner.hs:415

0x2780  0x4F            PUSHLOCALB02
0x2781  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2783  0x1A 0x03       PUSHIB 0x03
0x2785  0x08            LT
0x2786  0x2E 0x0F       JZB 0x2795 (+15)

                        // token = errorToken("invalid binary integer literal");

0x2788  0x37 0x60 0x05  PUSHIW 0x0560
0x278B  0x1A 0x1E       PUSHIB 0x1E
0x278D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x278F  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x2791  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:418

0x2792  0x33 0x73 0x00  JW 0x2805 (+115)

                        // uint binaryValue = 0;                                scanner.hs:420

0x2795  0x44            PUSHI0

                        // if (!Token.TryParseBinary(value, ref binaryValue))

0x2796  0x4F            PUSHLOCALB02
0x2797  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x2799  0x2C 0x56       CALLB 0x56     // Token.TryParseBinary
0x279B  0x2F 0x10       JNZB 0x27AB (+16)

                        // token = errorToken("invalid binary integer literal");

0x279D  0x37 0x60 0x05  PUSHIW 0x0560
0x27A0  0x1A 0x1E       PUSHIB 0x1E
0x27A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27A4  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x27A6  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:424

0x27A7  0x28 0x02       DECSP 0x02
0x27A9  0x30 0x5C       JB 0x2805 (+92)

                        // value = binaryValue.ToString();                      scanner.hs:426

0x27AB  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x27AD  0x2C 0x98       CALLB 0x98     // UInt.ToString
0x27AF  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:427

0x27B0  0x28 0x02       DECSP 0x02
0x27B2  0x30 0x48       JB 0x27FA (+72)

                        // else if (floatOk)                                    scanner.hs:428

0x27B4  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x27B6  0x2E 0x26       JZB 0x27DC (+38)

                        // float f;                                             scanner.hs:430

0x27B8  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (!Token.TryParseFloat(value, ref f))              scanner.hs:431

0x27BA  0x4F            PUSHLOCALB02
0x27BB  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x27BD  0x2C 0x57       CALLB 0x57     // Token.TryParseFloat
0x27BF  0x2F 0x10       JNZB 0x27CF (+16)

                        // token = errorToken("invalid float literal");

0x27C1  0x37 0x7E 0x05  PUSHIW 0x057E
0x27C4  0x1A 0x15       PUSHIB 0x15
0x27C6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27C8  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x27CA  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:434

0x27CB  0x28 0x02       DECSP 0x02
0x27CD  0x30 0x38       JB 0x2805 (+56)

                        // value = f.ToString();                                scanner.hs:436

0x27CF  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x27D1  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x27D3  0x5E            POPCOPYLOCALB02

                        // ttype = HopperToken.Float;                           scanner.hs:437

0x27D4  0x1A 0x0A       PUSHIB 0x0A
0x27D6  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // }                                                    scanner.hs:438

0x27D8  0x28 0x02       DECSP 0x02
0x27DA  0x30 0x20       JB 0x27FA (+32)

                        // long l;                                              scanner.hs:441

0x27DC  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(value, ref l))               scanner.hs:442

0x27DE  0x4F            PUSHLOCALB02
0x27DF  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x27E1  0x2C 0x51       CALLB 0x51     // Token.TryParseLong
0x27E3  0x2F 0x10       JNZB 0x27F3 (+16)

                        // token = errorToken("invalid integer literal");

0x27E5  0x37 0x93 0x05  PUSHIW 0x0593
0x27E8  0x1A 0x17       PUSHIB 0x17
0x27EA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27EC  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x27EE  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:445

0x27EF  0x28 0x02       DECSP 0x02
0x27F1  0x30 0x14       JB 0x2805 (+20)

                        // value = l.ToString();                                scanner.hs:447

0x27F3  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x27F5  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x27F7  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:448

0x27F8  0x28 0x02       DECSP 0x02

                        // token = Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x27FA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x27FC  0x4F            PUSHLOCALB02
0x27FD  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x2800  0x20 0x32       PUSHGLOBALB 0x32
0x2802  0x2C 0x58       CALLB 0x58     // Token.New
0x2804  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:453

0x2805  0x4E            PUSHLOCALB00
0x2806  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/scanner.hs:456
// ####  Scanner.scanIdentifier(..)  ####                                       0x006A


                        // uint dotSeen = 0;                                    scanner.hs:457

0x2808  0x5F 0x01       ENTERB 0x01

                        // string value = c.ToString();                         scanner.hs:458

0x280A  0x24 0x02       SYSCALL0 0x02  // String.New
0x280C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x280E  0x2C 0x90       CALLB 0x90     // Char.ToString
0x2810  0x5E            POPCOPYLOCALB02

                        // HopperToken ttype = HopperToken.Identifier;

0x2811  0x44            PUSHI0
0x2812  0x1A 0x03       PUSHIB 0x03
0x2814  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // c = peek();                                          scanner.hs:462

0x2816  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x2818  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if (!c.IsLetter() && !c.IsDigit())                   scanner.hs:463

0x281A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x281C  0x2C 0x8F       CALLB 0x8F     // Char.IsLetter
0x281E  0x41            BOOLNOT
0x281F  0x27 0x00       DUP 0x00
0x2821  0x2E 0x08       JZB 0x2829 (+8)
0x2823  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2825  0x2C 0x8A       CALLB 0x8A     // Char.IsDigit
0x2827  0x41            BOOLNOT
0x2828  0x0C            BOOLAND
0x2829  0x2E 0x0B       JZB 0x2834 (+11)

                        // if (c == '.')                                        scanner.hs:465

0x282B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x282D  0x1A 0x2E       PUSHIB 0x2E
0x282F  0x05            EQ
0x2830  0x2E 0x0C       JZB 0x283C (+12)

                        // dotSeen++;                                           scanner.hs:467

0x2832  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // value = value + advance();                           scanner.hs:474

0x2834  0x4F            PUSHLOCALB02
0x2835  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2837  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2839  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:475

0x283A  0x30 0xDC       JB 0x2816 (-36)

                        // if (dotSeen > 0)                                     scanner.hs:476

0x283C  0x4E            PUSHLOCALB00
0x283D  0x44            PUSHI0
0x283E  0x07            GT
0x283F  0x2E 0x06       JZB 0x2845 (+6)

                        // ttype = HopperToken.DottedIdentifier;                scanner.hs:478

0x2841  0x1A 0x02       PUSHIB 0x02
0x2843  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Token.IsKeyword(value))                          scanner.hs:480

0x2845  0x4F            PUSHLOCALB02
0x2846  0x2C 0x50       CALLB 0x50     // Token.IsKeyword
0x2848  0x2E 0x2F       JZB 0x2877 (+47)

                        // switch (value)                                       scanner.hs:482

0x284A  0x4F            PUSHLOCALB02

                        // case "true":                                         scanner.hs:484

0x284B  0x37 0x7F 0x04  PUSHIW 0x047F
0x284E  0x1A 0x04       PUSHIB 0x04
0x2850  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2852  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2854  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2856  0x2F 0x08       JNZB 0x285E (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:486

0x2858  0x1A 0x07       PUSHIB 0x07
0x285A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:487

0x285C  0x30 0x19       JB 0x2875 (+25)

                        // case "false":                                        scanner.hs:488

0x285E  0x37 0x7A 0x04  PUSHIW 0x047A
0x2861  0x1A 0x05       PUSHIB 0x05
0x2863  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2865  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2867  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2869  0x2F 0x08       JNZB 0x2871 (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:490

0x286B  0x1A 0x07       PUSHIB 0x07
0x286D  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:491

0x286F  0x30 0x06       JB 0x2875 (+6)

                        // ttype = HopperToken.Keyword;                         scanner.hs:494

0x2871  0x1A 0x05       PUSHIB 0x05
0x2873  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:496

0x2875  0x28 0x02       DECSP 0x02

                        // if (Token.IsDirectiveKeyword(value))                 scanner.hs:498

0x2877  0x4F            PUSHLOCALB02
0x2878  0x2C 0x4A       CALLB 0x4A     // Token.IsDirectiveKeyword
0x287A  0x2E 0x06       JZB 0x2880 (+6)

                        // ttype = HopperToken.Directive;                       scanner.hs:500

0x287C  0x1A 0x06       PUSHIB 0x06
0x287E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // return Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x2880  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2882  0x4F            PUSHLOCALB02
0x2883  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x2886  0x20 0x32       PUSHGLOBALB 0x32
0x2888  0x2C 0x58       CALLB 0x58     // Token.New
0x288A  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/scanner.hs:218
// ####  Scanner.match(..)  ####                                                0x0065

0x288C  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:219

0x288D  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x288F  0x2E 0x05       JZB 0x2894 (+5)

                        // return false;                                        scanner.hs:221

0x2891  0x44            PUSHI0
0x2892  0x2B 0x02       RETRETB 0x02

                        // if (sourceGetFromPos(currentPos, true) != expected)

0x2894  0x20 0x28       PUSHGLOBALB 0x28
0x2896  0x45            PUSHI1
0x2897  0x2C 0x61       CALLB 0x61     // Scanner.sourceGetFromPos
0x2899  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x289B  0x06            NE
0x289C  0x2E 0x05       JZB 0x28A1 (+5)

                        // return false;                                        scanner.hs:225

0x289E  0x44            PUSHI0
0x289F  0x2B 0x02       RETRETB 0x02

                        // currentPos = currentPos + 1;                         scanner.hs:227

0x28A1  0x20 0x28       PUSHGLOBALB 0x28
0x28A3  0x45            PUSHI1
0x28A4  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x28A6  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x28A8  0x59 0x28       POPCOPYGLOBALB 0x28

                        // return true;                                         scanner.hs:228

0x28AA  0x45            PUSHI1
0x28AB  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:304
// ####  Scanner.scanString(..)  ####                                           0x0067

0x28AD  0x49            ENTER

                        // string value;                                        scanner.hs:305

0x28AE  0x24 0x02       SYSCALL0 0x02  // String.New

                        // while ((peek() != '"') && (peek() != char(0)))

0x28B0  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x28B2  0x1A 0x22       PUSHIB 0x22
0x28B4  0x06            NE
0x28B5  0x27 0x00       DUP 0x00
0x28B7  0x2E 0x07       JZB 0x28BE (+7)
0x28B9  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x28BB  0x44            PUSHI0
0x28BC  0x06            NE
0x28BD  0x0C            BOOLAND
0x28BE  0x2E 0x3B       JZB 0x28F9 (+59)

                        // if (peek() == char(0x0A))                            scanner.hs:308

0x28C0  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x28C2  0x1A 0x0A       PUSHIB 0x0A
0x28C4  0x05            EQ
0x28C5  0x2E 0x0D       JZB 0x28D2 (+13)

                        // return errorToken("unexpected EOL in string");

0x28C7  0x37 0xAA 0x05  PUSHIW 0x05AA
0x28CA  0x1A 0x18       PUSHIB 0x18
0x28CC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28CE  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x28D0  0x2B 0x02       RETRETB 0x02

                        // char c = advance();                                  scanner.hs:312

0x28D2  0x44            PUSHI0
0x28D3  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x28D5  0x4D            POPLOCALB02

                        // if (c == char(0x5C)) // \                            scanner.hs:313

0x28D6  0x4F            PUSHLOCALB02
0x28D7  0x1A 0x5C       PUSHIB 0x5C
0x28D9  0x05            EQ
0x28DA  0x2E 0x16       JZB 0x28F0 (+22)

                        // if (   (peek() == '"') // \"                         scanner.hs:315

0x28DC  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x28DE  0x1A 0x22       PUSHIB 0x22
0x28E0  0x05            EQ
0x28E1  0x27 0x00       DUP 0x00
0x28E3  0x2F 0x08       JNZB 0x28EB (+8)
0x28E5  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x28E7  0x1A 0x5C       PUSHIB 0x5C
0x28E9  0x05            EQ
0x28EA  0x0B            BOOLOR
0x28EB  0x2E 0x05       JZB 0x28F0 (+5)

                        // c = advance(); // gooble the \                       scanner.hs:319

0x28ED  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x28EF  0x4D            POPLOCALB02

                        // value = value + c;                                   scanner.hs:322

0x28F0  0x4E            PUSHLOCALB00
0x28F1  0x4F            PUSHLOCALB02
0x28F2  0x25 0x03       SYSCALL1 0x03  // String.Append
0x28F4  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:323

0x28F5  0x28 0x02       DECSP 0x02
0x28F7  0x30 0xB9       JB 0x28B0 (-71)

                        // if (isAtEnd())                                       scanner.hs:324

0x28F9  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x28FB  0x2E 0x25       JZB 0x2920 (+37)

                        // if (value.Length > 80)                               scanner.hs:326

0x28FD  0x4E            PUSHLOCALB00
0x28FE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2900  0x1A 0x50       PUSHIB 0x50
0x2902  0x07            GT
0x2903  0x2E 0x09       JZB 0x290C (+9)

                        // value = value.Substring(0, 80);                      scanner.hs:328

0x2905  0x4E            PUSHLOCALB00
0x2906  0x44            PUSHI0
0x2907  0x1A 0x50       PUSHIB 0x50
0x2909  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x290B  0x5D            POPCOPYLOCALB00

                        // return errorToken("unterminated string: '" + value + "'");

0x290C  0x37 0xC2 0x05  PUSHIW 0x05C2
0x290F  0x1A 0x16       PUSHIB 0x16
0x2911  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2913  0x4E            PUSHLOCALB00
0x2914  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2916  0x1A 0x27       PUSHIB 0x27
0x2918  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x291A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x291C  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x291E  0x2B 0x02       RETRETB 0x02

                        // char c = advance(); // consume the '"'               scanner.hs:332

0x2920  0x44            PUSHI0
0x2921  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2923  0x4D            POPLOCALB02

                        // return Token.New(HopperToken.StringConstant, value, currentLine, currentPos, currentSourcePath);

0x2924  0x1A 0x0B       PUSHIB 0x0B
0x2926  0x4E            PUSHLOCALB00
0x2927  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x292A  0x20 0x32       PUSHGLOBALB 0x32
0x292C  0x2C 0x58       CALLB 0x58     // Token.New
0x292E  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:336
// ####  Scanner.scanChar(..)  ####                                             0x0068


                        // char c = advance();                                  scanner.hs:337

0x2930  0x5F 0x01       ENTERB 0x01

                        // char c = advance();                                  scanner.hs:337

0x2932  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2934  0x4C            POPLOCALB00

                        // if (c == char(0x5C))                                 scanner.hs:338

0x2935  0x4E            PUSHLOCALB00
0x2936  0x1A 0x5C       PUSHIB 0x5C
0x2938  0x05            EQ
0x2939  0x2E 0x16       JZB 0x294F (+22)

                        // if (   (peek() == char(0x27)) // \'                  scanner.hs:340

0x293B  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x293D  0x1A 0x27       PUSHIB 0x27
0x293F  0x05            EQ
0x2940  0x27 0x00       DUP 0x00
0x2942  0x2F 0x08       JNZB 0x294A (+8)
0x2944  0x2C 0x63       CALLB 0x63     // Scanner.peek
0x2946  0x1A 0x5C       PUSHIB 0x5C
0x2948  0x05            EQ
0x2949  0x0B            BOOLOR
0x294A  0x2E 0x05       JZB 0x294F (+5)

                        // c = advance();         // gobble the \               scanner.hs:344

0x294C  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x294E  0x4C            POPLOCALB00

                        // char d = advance();                                  scanner.hs:347

0x294F  0x44            PUSHI0
0x2950  0x2C 0x62       CALLB 0x62     // Scanner.advance
0x2952  0x4D            POPLOCALB02

                        // if (isAtEnd() || (d != char(0x27))) // '             scanner.hs:348

0x2953  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x2955  0x27 0x00       DUP 0x00
0x2957  0x2F 0x07       JNZB 0x295E (+7)
0x2959  0x4F            PUSHLOCALB02
0x295A  0x1A 0x27       PUSHIB 0x27
0x295C  0x06            NE
0x295D  0x0B            BOOLOR
0x295E  0x2E 0x0D       JZB 0x296B (+13)

                        // return errorToken("' expected");                     scanner.hs:350

0x2960  0x37 0xE1 0x02  PUSHIW 0x02E1
0x2963  0x1A 0x0A       PUSHIB 0x0A
0x2965  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2967  0x2C 0x60       CALLB 0x60     // Scanner.errorToken
0x2969  0x2B 0x04       RETRETB 0x04

                        // return Token.New(HopperToken.Char, c.ToString(), currentLine, currentPos, currentSourcePath);

0x296B  0x1A 0x08       PUSHIB 0x08
0x296D  0x4E            PUSHLOCALB00
0x296E  0x2C 0x90       CALLB 0x90     // Char.ToString
0x2970  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x2973  0x20 0x32       PUSHGLOBALB 0x32
0x2975  0x2C 0x58       CALLB 0x58     // Token.New
0x2977  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:132
// ####  Scanner.errorToken(..)  ####                                           0x0060

0x2979  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Error, message, currentLine, currentPos, currentSourcePath);

0x297A  0x1A 0x0F       PUSHIB 0x0F
0x297C  0x1A 0x0F       PUSHIB 0x0F
0x297E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2980  0x45            PUSHI1
0x2981  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2983  0x52 0x2A 0x28  PUSHGLOBALBB 0x282A
0x2986  0x20 0x32       PUSHGLOBALB 0x32
0x2988  0x2C 0x58       CALLB 0x58     // Token.New
0x298A  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:134

0x298B  0x4E            PUSHLOCALB00
0x298C  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:205
// ####  Scanner.peek(..)  ####                                                 0x0063

0x298E  0x49            ENTER

                        // return sourceGetFromPos(currentPos, true);           scanner.hs:206

0x298F  0x20 0x28       PUSHGLOBALB 0x28
0x2991  0x45            PUSHI1
0x2992  0x2C 0x61       CALLB 0x61     // Scanner.sourceGetFromPos
0x2994  0x4A            RET0


// /source/compiler/tokens/scanner.hs:209
// ####  Scanner.peekNext(..)  ####                                             0x0064

0x2995  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:210

0x2996  0x2C 0x5F       CALLB 0x5F     // Scanner.isAtEnd
0x2998  0x2E 0x04       JZB 0x299C (+4)

                        // return char(0);                                      scanner.hs:212

0x299A  0x44            PUSHI0
0x299B  0x4A            RET0

                        // long currentPlusOne = currentPos+1;                  scanner.hs:214

0x299C  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x299E  0x20 0x28       PUSHGLOBALB 0x28
0x29A0  0x45            PUSHI1
0x29A1  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x29A3  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x29A5  0x5D            POPCOPYLOCALB00

                        // return sourceGetFromPos(currentPlusOne, false);

0x29A6  0x4E            PUSHLOCALB00
0x29A7  0x44            PUSHI0
0x29A8  0x2C 0x61       CALLB 0x61     // Scanner.sourceGetFromPos
0x29AA  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:137
// ####  Scanner.sourceGetFromPos(..)  ####                                     0x0061


                        // char c;                                              scanner.hs:138

0x29AC  0x5F 0x05       ENTERB 0x05

                        // string ln;                                           scanner.hs:143

0x29AE  0x24 0x02       SYSCALL0 0x02  // String.New

                        // long current;                                        scanner.hs:144

0x29B0  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long limit;                                          scanner.hs:145

0x29B2  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long index;                                          scanner.hs:146

0x29B4  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (lastPosSet)                                      scanner.hs:150

0x29B6  0x20 0x38       PUSHGLOBALB 0x38
0x29B8  0x2E 0x10       JZB 0x29C8 (+16)

                        // if (pos == lastPos)                                  scanner.hs:152

0x29BA  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x29BC  0x20 0x36       PUSHGLOBALB 0x36
0x29BE  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x29C0  0x2E 0x08       JZB 0x29C8 (+8)

                        // c = lastChar;                                        scanner.hs:154

0x29C2  0x20 0x34       PUSHGLOBALB 0x34
0x29C4  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:155

0x29C5  0x33 0x84 0x00  JW 0x2A49 (+132)

                        // if (pos < currentStartPos)                           scanner.hs:158

0x29C8  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x29CA  0x20 0x30       PUSHGLOBALB 0x30
0x29CC  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x29CE  0x2E 0x0A       JZB 0x29D8 (+10)

                        // currentStartPos = 0;                                 scanner.hs:160

0x29D0  0x44            PUSHI0
0x29D1  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x29D3  0x59 0x30       POPCOPYGLOBALB 0x30

                        // iCurrentSourceLine = 0;                              scanner.hs:161

0x29D5  0x44            PUSHI0
0x29D6  0x1F 0x2E       POPGLOBALB 0x2E

                        // current = currentStartPos;                           scanner.hs:164

0x29D8  0x20 0x30       PUSHGLOBALB 0x30
0x29DA  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iCurrentSourceLine;                          scanner.hs:165

0x29DC  0x20 0x2E       PUSHGLOBALB 0x2E
0x29DE  0x4D            POPLOCALB02

                        // maxLines = sourceLines.Length;                       scanner.hs:166

0x29DF  0x20 0x26       PUSHGLOBALB 0x26
0x29E1  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x29E3  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // ln = sourceLines[iLine];                             scanner.hs:169

0x29E5  0x20 0x26       PUSHGLOBALB 0x26
0x29E7  0x4F            PUSHLOCALB02
0x29E8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x29EA  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // length = ln.Length;                                  scanner.hs:170

0x29EC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x29EE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x29F0  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // limit = current+length;                              scanner.hs:171

0x29F2  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x29F5  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x29F7  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x29F9  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if ((pos >= current) && (pos < limit))               scanner.hs:172

0x29FB  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x29FE  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x2A00  0x27 0x00       DUP 0x00
0x2A02  0x2E 0x08       JZB 0x2A0A (+8)
0x2A04  0x56 0xFC 0x0E  PUSHLOCALBB 0x0EFC
0x2A07  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x2A09  0x0C            BOOLAND
0x2A0A  0x2E 0x17       JZB 0x2A21 (+23)

                        // index = pos - current;                               scanner.hs:174

0x2A0C  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x2A0F  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x2A11  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // uindex = uint(index);                                scanner.hs:175

0x2A13  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2A15  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x2A17  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // c = ln[uindex];                                      scanner.hs:176

0x2A19  0x56 0x0A 0x08  PUSHLOCALBB 0x080A
0x2A1C  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x2A1E  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:177

0x2A1F  0x30 0x20       JB 0x2A3F (+32)

                        // current = current + length;                          scanner.hs:179

0x2A21  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x2A24  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x2A26  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x2A28  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iLine + 1;                                   scanner.hs:180

0x2A2A  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (iLine == maxLines)                               scanner.hs:181

0x2A2C  0x4F            PUSHLOCALB02
0x2A2D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2A2F  0x05            EQ
0x2A30  0x2F 0x0F       JNZB 0x2A3F (+15)

                        // if (updateCache)                                     scanner.hs:185

0x2A32  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2A34  0x2E 0xB1       JZB 0x29E5 (-79)

                        // currentStartPos = current;                           scanner.hs:187

0x2A36  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2A38  0x59 0x30       POPCOPYGLOBALB 0x30

                        // iCurrentSourceLine = iLine;                          scanner.hs:188

0x2A3A  0x4F            PUSHLOCALB02
0x2A3B  0x1F 0x2E       POPGLOBALB 0x2E

                        // }                                                    scanner.hs:190

0x2A3D  0x30 0xA8       JB 0x29E5 (-88)

                        // lastPos = pos;                                       scanner.hs:191

0x2A3F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2A41  0x59 0x36       POPCOPYGLOBALB 0x36

                        // lastChar = c;                                        scanner.hs:192

0x2A43  0x4E            PUSHLOCALB00
0x2A44  0x1F 0x34       POPGLOBALB 0x34

                        // lastPosSet = true;                                   scanner.hs:193

0x2A46  0x45            PUSHI1
0x2A47  0x1F 0x38       POPGLOBALB 0x38

                        // return c;                                            scanner.hs:196

0x2A49  0x4E            PUSHLOCALB00
0x2A4A  0x2B 0x16       RETRETB 0x16


// /source/system/string.hs:254
// ####  String.Contains(..)  ####                                              0x00B5


                        // uint index;                                          string.hs:255

0x2A4C  0x5F 0x01       ENTERB 0x01

                        // return IndexOf(this, needle, ref index);             string.hs:256

0x2A4E  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x2A51  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x2A53  0x2C 0xBD       CALLB 0xBD     // String.IndexOf
0x2A55  0x2B 0x06       RETRETB 0x06


// /source/system/string.hs:326
// ####  String.IndexOf(..)  ####                                               0x00BD


                        // bool found;                                          string.hs:327

0x2A57  0x5F 0x05       ENTERB 0x05

                        // length = this.Length;                                string.hs:332

0x2A59  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2A5B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2A5D  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // pLength = pattern.Length;                            string.hs:333

0x2A5F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2A61  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2A63  0x4D            POPLOCALB02

                        // if (pIndex + pLength > length)                       string.hs:336

0x2A64  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2A66  0x4F            PUSHLOCALB02
0x2A67  0x00            ADD
0x2A68  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2A6A  0x07            GT
0x2A6B  0x2F 0x32       JNZB 0x2A9D (+50)

                        // found = true;                                        string.hs:340

0x2A6D  0x45            PUSHI1
0x2A6E  0x4C            POPLOCALB00

                        // for (i=0; i < pLength; i++)                          string.hs:341

0x2A6F  0x44            PUSHI0
0x2A70  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x2A72  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2A74  0x4F            PUSHLOCALB02
0x2A75  0x08            LT
0x2A76  0x2E 0x1A       JZB 0x2A90 (+26)

                        // if (this[i+pIndex] != pattern[i])                    string.hs:343

0x2A78  0x56 0xFA 0x08  PUSHLOCALBB 0x08FA
0x2A7B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2A7D  0x00            ADD
0x2A7E  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x2A80  0x56 0xFC 0x08  PUSHLOCALBB 0x08FC
0x2A83  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x2A85  0x06            NE
0x2A86  0x2E 0x06       JZB 0x2A8C (+6)

                        // found = false;                                       string.hs:345

0x2A88  0x44            PUSHI0
0x2A89  0x4C            POPLOCALB00

                        // break;                                               string.hs:346

0x2A8A  0x30 0x06       JB 0x2A90 (+6)

                        // }                                                    string.hs:348

0x2A8C  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x2A8E  0x30 0xE4       JB 0x2A72 (-28)

                        // if (found)                                           string.hs:349

0x2A90  0x4E            PUSHLOCALB00
0x2A91  0x2E 0x08       JZB 0x2A99 (+8)

                        // index = pIndex;                                      string.hs:351

0x2A93  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2A95  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // break;                                               string.hs:352

0x2A97  0x30 0x06       JB 0x2A9D (+6)

                        // pIndex++;                                            string.hs:354

0x2A99  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    string.hs:355

0x2A9B  0x30 0xC9       JB 0x2A64 (-55)

                        // return found;                                        string.hs:356

0x2A9D  0x4E            PUSHLOCALB00
0x2A9E  0x2B 0x10       RETRETB 0x10


// /source/compiler/tokens/token.hs:506
// ####  Token.New(..)  ####                                                    0x0058

0x2AA0  0x49            ENTER

                        // <string,string> token;                               token.hs:507

0x2AA1  0x1A 0x0F       PUSHIB 0x0F
0x2AA3  0x1A 0x0F       PUSHIB 0x0F
0x2AA5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // token["type"] = HopperTokenToString(tokenType);

0x2AA7  0x4E            PUSHLOCALB00
0x2AA8  0x37 0x7F 0x01  PUSHIW 0x017F
0x2AAB  0x1A 0x04       PUSHIB 0x04
0x2AAD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AAF  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0x2AB1  0x2C 0x47       CALLB 0x47     // Token.HopperTokenToString
0x2AB3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["lexeme"] = lexeme;                            token.hs:509

0x2AB5  0x4E            PUSHLOCALB00
0x2AB6  0x37 0x13 0x01  PUSHIW 0x0113
0x2AB9  0x1A 0x06       PUSHIB 0x06
0x2ABB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2ABD  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x2ABF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["line"] = ln.ToString();                       token.hs:510

0x2AC1  0x4E            PUSHLOCALB00
0x2AC2  0x37 0xD0 0x01  PUSHIW 0x01D0
0x2AC5  0x1A 0x04       PUSHIB 0x04
0x2AC7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AC9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2ACB  0x2C 0x98       CALLB 0x98     // UInt.ToString
0x2ACD  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["source"] = sourcePath;                        token.hs:511

0x2ACF  0x4E            PUSHLOCALB00
0x2AD0  0x37 0xB6 0x01  PUSHIW 0x01B6
0x2AD3  0x1A 0x06       PUSHIB 0x06
0x2AD5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AD7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2AD9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["pos"] = pos.ToString();                       token.hs:512

0x2ADB  0x4E            PUSHLOCALB00
0x2ADC  0x37 0xD8 0x05  PUSHIW 0x05D8
0x2ADF  0x1A 0x03       PUSHIB 0x03
0x2AE1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AE3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2AE5  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x2AE7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // return token;                                        token.hs:513

0x2AE9  0x4E            PUSHLOCALB00
0x2AEA  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/tokens/token.hs:516
// ####  Token.ToString(..)  ####                                               0x0059


                        // HopperToken tokenType;                               token.hs:517

0x2AEC  0x5F 0x01       ENTERB 0x01

                        // string content = "Undefined";                        token.hs:518

0x2AEE  0x24 0x02       SYSCALL0 0x02  // String.New
0x2AF0  0x37 0x06 0x03  PUSHIW 0x0306
0x2AF3  0x1A 0x09       PUSHIB 0x09
0x2AF5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AF7  0x5E            POPCOPYLOCALB02

                        // if (token.Count > 0)                                 token.hs:519

0x2AF8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2AFA  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x2AFC  0x44            PUSHI0
0x2AFD  0x07            GT
0x2AFE  0x31 0x20 0x01  JZW 0x2C1E (+288)

                        // content = token["type"];                             token.hs:521

0x2B01  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B03  0x37 0x7F 0x01  PUSHIW 0x017F
0x2B06  0x1A 0x04       PUSHIB 0x04
0x2B08  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B0A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B0C  0x5E            POPCOPYLOCALB02

                        // tokenType = Token.GetType(token);                    token.hs:522

0x2B0D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B0F  0x2C 0x48       CALLB 0x48     // Token.GetType
0x2B11  0x4C            POPLOCALB00

                        // switch (tokenType)                                   token.hs:523

0x2B12  0x4E            PUSHLOCALB00

                        // case HopperToken.Identifier:                         token.hs:525

0x2B13  0x1A 0x03       PUSHIB 0x03
0x2B15  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B17  0x05            EQ
0x2B18  0x2E 0x21       JZB 0x2B39 (+33)

                        // content = content + " '" + token["lexeme"] + "'";

0x2B1A  0x4F            PUSHLOCALB02
0x2B1B  0x37 0x20 0x27  PUSHIW 0x2720
0x2B1E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B20  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B22  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B24  0x37 0x13 0x01  PUSHIW 0x0113
0x2B27  0x1A 0x06       PUSHIB 0x06
0x2B29  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B2B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B2D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B2F  0x1A 0x27       PUSHIB 0x27
0x2B31  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B33  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B35  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:528

0x2B36  0x33 0xA4 0x00  JW 0x2BDA (+164)

                        // case HopperToken.StringConstant:                     token.hs:529

0x2B39  0x1A 0x0B       PUSHIB 0x0B
0x2B3B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B3D  0x05            EQ
0x2B3E  0x2E 0x1F       JZB 0x2B5D (+31)

                        // content = content + " \"" + token["lexeme"] + '"';

0x2B40  0x4F            PUSHLOCALB02
0x2B41  0x37 0x20 0x22  PUSHIW 0x2220
0x2B44  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B46  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B48  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B4A  0x37 0x13 0x01  PUSHIW 0x0113
0x2B4D  0x1A 0x06       PUSHIB 0x06
0x2B4F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B51  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B53  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B55  0x1A 0x22       PUSHIB 0x22
0x2B57  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2B59  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:532

0x2B5A  0x33 0x80 0x00  JW 0x2BDA (+128)

                        // case HopperToken.Char:                               token.hs:533

0x2B5D  0x1A 0x08       PUSHIB 0x08
0x2B5F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B61  0x05            EQ
0x2B62  0x2E 0x20       JZB 0x2B82 (+32)

                        // content = content + " '" + token["lexeme"] + "'";

0x2B64  0x4F            PUSHLOCALB02
0x2B65  0x37 0x20 0x27  PUSHIW 0x2720
0x2B68  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B6A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B6C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B6E  0x37 0x13 0x01  PUSHIW 0x0113
0x2B71  0x1A 0x06       PUSHIB 0x06
0x2B73  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B75  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B77  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B79  0x1A 0x27       PUSHIB 0x27
0x2B7B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B7D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B7F  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:536

0x2B80  0x30 0x5A       JB 0x2BDA (+90)

                        // case HopperToken.Keyword:                            token.hs:537

0x2B82  0x1A 0x05       PUSHIB 0x05
0x2B84  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B86  0x05            EQ
0x2B87  0x2E 0x19       JZB 0x2BA0 (+25)

                        // content = content + " " + token["lexeme"];           token.hs:539

0x2B89  0x4F            PUSHLOCALB02
0x2B8A  0x1A 0x20       PUSHIB 0x20
0x2B8C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B8E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B90  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2B92  0x37 0x13 0x01  PUSHIW 0x0113
0x2B95  0x1A 0x06       PUSHIB 0x06
0x2B97  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B99  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B9B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B9D  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:540

0x2B9E  0x30 0x3C       JB 0x2BDA (+60)

                        // case HopperToken.Integer:                            token.hs:541

0x2BA0  0x1A 0x09       PUSHIB 0x09
0x2BA2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2BA4  0x05            EQ
0x2BA5  0x2E 0x19       JZB 0x2BBE (+25)

                        // content = content + " " + token["lexeme"];           token.hs:543

0x2BA7  0x4F            PUSHLOCALB02
0x2BA8  0x1A 0x20       PUSHIB 0x20
0x2BAA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2BAC  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BAE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2BB0  0x37 0x13 0x01  PUSHIW 0x0113
0x2BB3  0x1A 0x06       PUSHIB 0x06
0x2BB5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2BB7  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2BB9  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BBB  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:544

0x2BBC  0x30 0x1E       JB 0x2BDA (+30)

                        // case HopperToken.Bool:                               token.hs:545

0x2BBE  0x1A 0x07       PUSHIB 0x07
0x2BC0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2BC2  0x05            EQ
0x2BC3  0x2E 0x17       JZB 0x2BDA (+23)

                        // content = content + " " + token["lexeme"];           token.hs:547

0x2BC5  0x4F            PUSHLOCALB02
0x2BC6  0x1A 0x20       PUSHIB 0x20
0x2BC8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2BCA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BCC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2BCE  0x37 0x13 0x01  PUSHIW 0x0113
0x2BD1  0x1A 0x06       PUSHIB 0x06
0x2BD3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2BD5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2BD7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BD9  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:549

0x2BDA  0x28 0x02       DECSP 0x02

                        // content = content + "[" + token["source"] + ":" + token["line"] + "->" + token["pos"] + "]";

0x2BDC  0x4F            PUSHLOCALB02
0x2BDD  0x1A 0x5B       PUSHIB 0x5B
0x2BDF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2BE1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BE3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2BE5  0x37 0xB6 0x01  PUSHIW 0x01B6
0x2BE8  0x1A 0x06       PUSHIB 0x06
0x2BEA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2BEC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2BEE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BF0  0x1A 0x3A       PUSHIB 0x3A
0x2BF2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2BF4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2BF6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2BF8  0x37 0xD0 0x01  PUSHIW 0x01D0
0x2BFB  0x1A 0x04       PUSHIB 0x04
0x2BFD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2BFF  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2C01  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C03  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0x2C06  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2C08  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C0A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2C0C  0x37 0xD8 0x05  PUSHIW 0x05D8
0x2C0F  0x1A 0x03       PUSHIB 0x03
0x2C11  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C13  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2C15  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C17  0x1A 0x5D       PUSHIB 0x5D
0x2C19  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2C1B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C1D  0x5E            POPCOPYLOCALB02

                        // return content;                                      token.hs:552

0x2C1E  0x4F            PUSHLOCALB02
0x2C1F  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/token.hs:414
// ####  Token.TryParseBinary(..)  ####                                         0x0056


                        // char c;                                              token.hs:415

0x2C21  0x5F 0x04       ENTERB 0x04

                        // returnValue = 0;                                     token.hs:418

0x2C23  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0b"))                       token.hs:419

0x2C25  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2C27  0x37 0x30 0x62  PUSHIW 0x6230
0x2C2A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2C2C  0x2C 0xB7       CALLB 0xB7     // String.StartsWith
0x2C2E  0x2F 0x05       JNZB 0x2C33 (+5)

                        // return false;                                        token.hs:421

0x2C30  0x44            PUSHI0
0x2C31  0x2B 0x0A       RETRETB 0x0A

                        // length = content.Length;                             token.hs:423

0x2C33  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2C35  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2C37  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:424

0x2C38  0x4F            PUSHLOCALB02
0x2C39  0x1A 0x03       PUSHIB 0x03
0x2C3B  0x08            LT
0x2C3C  0x2E 0x05       JZB 0x2C41 (+5)

                        // return false;                                        token.hs:426

0x2C3E  0x44            PUSHI0
0x2C3F  0x2B 0x0A       RETRETB 0x0A

                        // for ( ; i < length-2; i++)                           token.hs:428

0x2C41  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C43  0x4F            PUSHLOCALB02
0x2C44  0x1A 0x02       PUSHIB 0x02
0x2C46  0x01            SUB
0x2C47  0x08            LT
0x2C48  0x2E 0x22       JZB 0x2C6A (+34)

                        // returnValue = returnValue * 2;                       token.hs:430

0x2C4A  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x2C4C  0x1A 0x02       PUSHIB 0x02
0x2C4E  0x03            MUL
0x2C4F  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // c = content.GetChar(i+2);                            token.hs:431

0x2C51  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x2C54  0x1A 0x02       PUSHIB 0x02
0x2C56  0x00            ADD
0x2C57  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x2C59  0x4C            POPLOCALB00

                        // if (c == '1')                                        token.hs:432

0x2C5A  0x4E            PUSHLOCALB00
0x2C5B  0x1A 0x31       PUSHIB 0x31
0x2C5D  0x05            EQ
0x2C5E  0x2E 0x08       JZB 0x2C66 (+8)

                        // returnValue = returnValue + 1;                       token.hs:434

0x2C60  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x2C62  0x45            PUSHI1
0x2C63  0x00            ADD
0x2C64  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:436

0x2C66  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x2C68  0x30 0xD9       JB 0x2C41 (-39)

                        // return true;                                         token.hs:437

0x2C6A  0x45            PUSHI1
0x2C6B  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:440
// ####  Token.TryParseFloat(..)  ####                                          0x0057


                        // bool success;                                        token.hs:441

0x2C6D  0x5F 0x02       ENTERB 0x02

                        // long longValue;                                      token.hs:443

0x2C6F  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // float floatValue;                                    token.hs:444

0x2C71  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // string digits;                                       token.hs:445

0x2C73  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (content.IndexOf('.', ref iDot))                  token.hs:448

0x2C75  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2C77  0x1A 0x2E       PUSHIB 0x2E
0x2C79  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x2C7B  0x2C 0xB8       CALLB 0xB8     // String.IndexOf
0x2C7D  0x31 0x79 0x00  JZW 0x2CF6 (+121)

                        // digits = content.Substring(0, iDot);                 token.hs:450

0x2C80  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2C82  0x44            PUSHI0
0x2C83  0x4F            PUSHLOCALB02
0x2C84  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x2C86  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:451

0x2C88  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2C8A  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x2C8C  0x2C 0x51       CALLB 0x51     // Token.TryParseLong
0x2C8E  0x2E 0x78       JZB 0x2D06 (+120)

                        // floatValue = longValue.ToFloat();                    token.hs:455

0x2C90  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C92  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x2C94  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // digits = content.Substring(iDot+1);                  token.hs:456

0x2C96  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2C98  0x4F            PUSHLOCALB02
0x2C99  0x45            PUSHI1
0x2C9A  0x00            ADD
0x2C9B  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x2C9D  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // uint length = digits.Length;                         token.hs:457

0x2C9F  0x44            PUSHI0
0x2CA0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2CA2  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2CA4  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (length > 0)                                      token.hs:458

0x2CA6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2CA8  0x44            PUSHI0
0x2CA9  0x07            GT
0x2CAA  0x2E 0x46       JZB 0x2CF0 (+70)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:460

0x2CAC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2CAE  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x2CB0  0x2C 0x51       CALLB 0x51     // Token.TryParseLong
0x2CB2  0x2F 0x06       JNZB 0x2CB8 (+6)

                        // break;                                               token.hs:462

0x2CB4  0x28 0x02       DECSP 0x02
0x2CB6  0x30 0x50       JB 0x2D06 (+80)

                        // float decimalValue = longValue.ToFloat();            token.hs:464

0x2CB8  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x2CBA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2CBC  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x2CBE  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // while (length > 0)                                   token.hs:465

0x2CC0  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2CC2  0x44            PUSHI0
0x2CC3  0x07            GT
0x2CC4  0x2E 0x11       JZB 0x2CD5 (+17)

                        // decimalValue = decimalValue / 10.0;                  token.hs:467

0x2CC6  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2CC8  0x37 0xDB 0x05  PUSHIW 0x05DB
0x2CCB  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0x2CCD  0x24 0x50       SYSCALL0 0x50  // Float.Div
0x2CCF  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // length--;                                            token.hs:468

0x2CD1  0x23 0x0A       DECLOCALB 0x0A (BP+10)

                        // }                                                    token.hs:469

0x2CD3  0x30 0xED       JB 0x2CC0 (-19)

                        // if (floatValue > 0)                                  token.hs:470

0x2CD5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2CD7  0x44            PUSHI0
0x2CD8  0x24 0x34       SYSCALL0 0x34  // Int.ToFloat
0x2CDA  0x24 0x55       SYSCALL0 0x55  // Float.GT
0x2CDC  0x2E 0x0B       JZB 0x2CE7 (+11)

                        // floatValue = floatValue + decimalValue;              token.hs:472

0x2CDE  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x2CE1  0x24 0x4E       SYSCALL0 0x4E  // Float.Add
0x2CE3  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:473

0x2CE5  0x30 0x09       JB 0x2CEE (+9)

                        // floatValue = floatValue - decimalValue;              token.hs:476

0x2CE7  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x2CEA  0x24 0x4F       SYSCALL0 0x4F  // Float.Sub
0x2CEC  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:478

0x2CEE  0x28 0x02       DECSP 0x02

                        // success = true;                                      token.hs:479

0x2CF0  0x45            PUSHI1
0x2CF1  0x4C            POPLOCALB00

                        // }                                                    token.hs:480

0x2CF2  0x28 0x02       DECSP 0x02
0x2CF4  0x30 0x12       JB 0x2D06 (+18)

                        // if (TryParseLong(content, ref longValue))            token.hs:483

0x2CF6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2CF8  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x2CFA  0x2C 0x51       CALLB 0x51     // Token.TryParseLong
0x2CFC  0x2E 0x0A       JZB 0x2D06 (+10)

                        // floatValue = longValue.ToFloat();                    token.hs:485

0x2CFE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2D00  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x2D02  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // success = true;                                      token.hs:486

0x2D04  0x45            PUSHI1
0x2D05  0x4C            POPLOCALB00

                        // if (success)                                         token.hs:491

0x2D06  0x4E            PUSHLOCALB00
0x2D07  0x2E 0x06       JZB 0x2D0D (+6)

                        // returnValue = floatValue;                            token.hs:493

0x2D09  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2D0B  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return success;                                      token.hs:495

0x2D0D  0x4E            PUSHLOCALB00
0x2D0E  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/token.hs:268
// ####  Token.IsKeyword(..)  ####                                              0x0050

0x2D10  0x49            ENTER

                        // return typeKeywords.Contains(candidate) || statementKeywords.Contains(candidate);

0x2D11  0x20 0x1C       PUSHGLOBALB 0x1C
0x2D13  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D15  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2D17  0x27 0x00       DUP 0x00
0x2D19  0x2F 0x09       JNZB 0x2D22 (+9)
0x2D1B  0x20 0x1E       PUSHGLOBALB 0x1E
0x2D1D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D1F  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2D21  0x0B            BOOLOR
0x2D22  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:242
// ####  Token.IsDirectiveKeyword(..)  ####                                     0x004A

0x2D24  0x49            ENTER

                        // return directiveKeywords.Contains(candidate);

0x2D25  0x20 0x20       PUSHGLOBALB 0x20
0x2D27  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D29  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2D2B  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:69
// ####  Token.HopperTokenToString(..)  ####                                    0x0047

0x2D2D  0x49            ENTER

                        // string content;                                      token.hs:71

0x2D2E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint i;                                              token.hs:72

0x2D30  0x44            PUSHI0

                        // if (hopperTokenNames.Contains(tokenType))            token.hs:73

0x2D31  0x20 0x24       PUSHGLOBALB 0x24
0x2D33  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D35  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2D37  0x2E 0x0B       JZB 0x2D42 (+11)

                        // content = hopperTokenNames[tokenType];               token.hs:75

0x2D39  0x20 0x24       PUSHGLOBALB 0x24
0x2D3B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D3D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2D3F  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:76

0x2D40  0x30 0x1B       JB 0x2D5B (+27)

                        // i = uint(tokenType);                                 token.hs:79

0x2D42  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D44  0x4D            POPLOCALB02

                        // content = "0x" + i.ToHexString(4);                   token.hs:80

0x2D45  0x37 0x30 0x78  PUSHIW 0x7830
0x2D48  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2D4A  0x4F            PUSHLOCALB02
0x2D4B  0x1A 0x04       PUSHIB 0x04
0x2D4D  0x2C 0x9B       CALLB 0x9B     // UInt.ToHexString
0x2D4F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2D51  0x5D            POPCOPYLOCALB00

                        // PrintLn("TODO : token not implemented in Token.HopperTokenToString");

0x2D52  0x37 0xDF 0x05  PUSHIW 0x05DF
0x2D55  0x1A 0x39       PUSHIB 0x39
0x2D57  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2D59  0x2C 0x20       CALLB 0x20     // Screen.PrintLn

                        // return content;                                      token.hs:83

0x2D5B  0x4E            PUSHLOCALB00
0x2D5C  0x2B 0x06       RETRETB 0x06


// /source/system/char.hs:89
// ####  Char.IsLetter(..)  ####                                                0x008F


                        // byte b;                                              char.hs:90

0x2D5E  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:91

0x2D60  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D62  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90))   // A..Z            char.hs:92

0x2D63  0x4E            PUSHLOCALB00
0x2D64  0x1A 0x41       PUSHIB 0x41
0x2D66  0x09            GE
0x2D67  0x27 0x00       DUP 0x00
0x2D69  0x2E 0x07       JZB 0x2D70 (+7)
0x2D6B  0x4E            PUSHLOCALB00
0x2D6C  0x1A 0x5A       PUSHIB 0x5A
0x2D6E  0x0A            LE
0x2D6F  0x0C            BOOLAND
0x2D70  0x27 0x00       DUP 0x00
0x2D72  0x2F 0x10       JNZB 0x2D82 (+16)
0x2D74  0x4E            PUSHLOCALB00
0x2D75  0x1A 0x61       PUSHIB 0x61
0x2D77  0x09            GE
0x2D78  0x27 0x00       DUP 0x00
0x2D7A  0x2E 0x07       JZB 0x2D81 (+7)
0x2D7C  0x4E            PUSHLOCALB00
0x2D7D  0x1A 0x7A       PUSHIB 0x7A
0x2D7F  0x0A            LE
0x2D80  0x0C            BOOLAND
0x2D81  0x0B            BOOLOR
0x2D82  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:99
// ####  Char.ToString(..)  ####                                                0x0090

0x2D84  0x49            ENTER

                        // string result;                                       char.hs:100

0x2D85  0x24 0x02       SYSCALL0 0x02  // String.New

                        // return result.Append(this);                          char.hs:101

0x2D87  0x4E            PUSHLOCALB00
0x2D88  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D8A  0x25 0x03       SYSCALL1 0x03  // String.Append
0x2D8C  0x2B 0x04       RETRETB 0x04


// /source/system/color.hs:21
// ####  Color.Red_Get(..)  ####                                                0x0106

0x2D8E  0x49            ENTER

                        // uint Red         { get { return 0xF00; }}            color.hs:21

0x2D8F  0x37 0x00 0x0F  PUSHIW 0x0F00
0x2D92  0x4A            RET0


// /source/system/uint.hs:4
// ####  UInt.ToString(..)  ####                                                0x0098


                        // uint digit;                                          uint.hs:5

0x2D93  0x5F 0x02       ENTERB 0x02

                        // string result;                                       uint.hs:7

0x2D95  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (this == 0)                                       uint.hs:8

0x2D97  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2D99  0x2F 0x08       JNZB 0x2DA1 (+8)

                        // String.Build(ref result, '0');                       uint.hs:10

0x2D9B  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x2D9D  0x1A 0x30       PUSHIB 0x30
0x2D9F  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // while (this != 0)                                    uint.hs:12

0x2DA1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2DA3  0x2E 0x1F       JZB 0x2DC2 (+31)

                        // digit = this % 10;                                   uint.hs:14

0x2DA5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2DA7  0x1A 0x0A       PUSHIB 0x0A
0x2DA9  0x04            MOD
0x2DAA  0x4C            POPLOCALB00

                        // digit = digit + 48;                                  uint.hs:15

0x2DAB  0x4E            PUSHLOCALB00
0x2DAC  0x1A 0x30       PUSHIB 0x30
0x2DAE  0x00            ADD
0x2DAF  0x4C            POPLOCALB00

                        // c = char(digit);                                     uint.hs:16

0x2DB0  0x4E            PUSHLOCALB00
0x2DB1  0x51 0x03       CAST 0x03
0x2DB3  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:17

0x2DB4  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x2DB6  0x4F            PUSHLOCALB02
0x2DB7  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 10;                                    uint.hs:18

0x2DB9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2DBB  0x1A 0x0A       PUSHIB 0x0A
0x2DBD  0x02            DIV
0x2DBE  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    uint.hs:19

0x2DC0  0x30 0xE1       JB 0x2DA1 (-31)

                        // return result;                                       uint.hs:20

0x2DC2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2DC4  0x2B 0x08       RETRETB 0x08


// /source/system/string.hs:281
// ####  String.IndexOf(..)  ####                                               0x00B8


                        // uint i;                                              string.hs:282

0x2DC6  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:284

0x2DC8  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2DCA  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x2DCC  0x4D            POPLOCALB02

                        // for ( ; i < length; i++)                             string.hs:285

0x2DCD  0x4E            PUSHLOCALB00
0x2DCE  0x4F            PUSHLOCALB02
0x2DCF  0x08            LT
0x2DD0  0x2E 0x16       JZB 0x2DE6 (+22)

                        // if (this[i] == pattern)                              string.hs:287

0x2DD2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x2DD4  0x4E            PUSHLOCALB00
0x2DD5  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x2DD7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x2DD9  0x05            EQ
0x2DDA  0x2E 0x08       JZB 0x2DE2 (+8)

                        // index = i;                                           string.hs:289

0x2DDC  0x4E            PUSHLOCALB00
0x2DDD  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:290

0x2DDF  0x45            PUSHI1
0x2DE0  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    string.hs:292

0x2DE2  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x2DE4  0x30 0xE9       JB 0x2DCD (-23)

                        // return false;                                        string.hs:293

0x2DE6  0x44            PUSHI0
0x2DE7  0x2B 0x0A       RETRETB 0x0A
