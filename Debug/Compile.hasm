0x0000 0x0000 // binary version number
0x0002 0x04EA // offset to constant data
0x0004 0x1E11 // 'main' entry point offset

0x0006 0x0016 0x2168
0x000A 0x0014 0x218A
0x000E 0x0015 0x23A0
0x0012 0x0013 0x24A5
0x0016 0x0012 0x2557
0x001A 0x0002 0x29DC
0x001E 0x0003 0x2AD9
0x0022 0x0004 0x2BC4
0x0026 0x0005 0x2C17
0x002A 0x0006 0x2C5B
0x002E 0x0007 0x2CF3
0x0032 0x0008 0x2D2E
0x0036 0x000D 0x2E20
0x003A 0x000E 0x2F1C
0x003E 0x0011 0x31E6
0x0042 0x0010 0x329E
0x0046 0x000F 0x359C
0x004A 0x0009 0x3766
0x004E 0x000A 0x387B
0x0052 0x000B 0x39B3
0x0056 0x000C 0x3ACA
0x005A 0x019A 0x3BDA
0x005E 0x0054 0x3C00
0x0062 0x0049 0x3C2B
0x0066 0x0052 0x3C58
0x006A 0x006E 0x3CCF
0x006E 0x007C 0x3CF7
0x0072 0x006F 0x3D00
0x0076 0x0072 0x3D04
0x007A 0x0078 0x3D17
0x007E 0x007F 0x3D29
0x0082 0x0084 0x3D4E
0x0086 0x0074 0x3DEE
0x008A 0x0073 0x3DF2
0x008E 0x0071 0x3DF6
0x0092 0x007E 0x3E2B
0x0096 0x0075 0x3E34
0x009A 0x007A 0x3E38
0x009E 0x0083 0x3EE7
0x00A2 0x007D 0x3EF0
0x00A6 0x0085 0x3F08
0x00AA 0x0080 0x3F15
0x00AE 0x0077 0x3F2F
0x00B2 0x0076 0x3F69
0x00B6 0x0079 0x3FA3
0x00BA 0x0070 0x3FA9
0x00BE 0x0082 0x3FD4
0x00C2 0x01BE 0x4037
0x00C6 0x011C 0x4092
0x00CA 0x0123 0x4099
0x00CE 0x0120 0x40A2
0x00D2 0x0136 0x40C9
0x00D6 0x011D 0x4104
0x00DA 0x013D 0x4123
0x00DE 0x011B 0x4169
0x00E2 0x0137 0x416D
0x00E6 0x0138 0x4182
0x00EA 0x0126 0x41AD
0x00EE 0x0127 0x41B1
0x00F2 0x0128 0x41B5
0x00F6 0x013A 0x41BF
0x00FA 0x0139 0x4254
0x00FE 0x0131 0x4296
0x0102 0x011F 0x42D6
0x0106 0x0132 0x42DC
0x010A 0x012F 0x4322
0x010E 0x012E 0x442E
0x0112 0x0134 0x444A
0x0116 0x0124 0x44E6
0x011A 0x0121 0x44F0
0x011E 0x013C 0x451F
0x0122 0x013B 0x45C2
0x0126 0x0135 0x4669
0x012A 0x0122 0x4680
0x012E 0x0130 0x46A4
0x0132 0x012C 0x473F
0x0136 0x0129 0x4768
0x013A 0x0088 0x47EE
0x013E 0x0089 0x544E
0x0142 0x0087 0x5465
0x0146 0x008C 0x547C
0x014A 0x00C7 0x5520
0x014E 0x00AE 0x5528
0x0152 0x00AF 0x55A9
0x0156 0x00B1 0x55B8
0x015A 0x00C5 0x55D8
0x015E 0x00CE 0x593C
0x0162 0x00B6 0x59B8
0x0166 0x00CA 0x5A07
0x016A 0x00CB 0x5A11
0x016E 0x00B8 0x5AB8
0x0172 0x00B7 0x5AC7
0x0176 0x00B0 0x5AD4
0x017A 0x009F 0x5AE5
0x017E 0x00A1 0x5AEB
0x0182 0x00A0 0x5AF4
0x0186 0x00A3 0x5AFD
0x018A 0x009E 0x5B54
0x018E 0x00C9 0x5B65
0x0192 0x009C 0x5BE5
0x0196 0x0095 0x5BEE
0x019A 0x00B2 0x5BFD
0x019E 0x00C8 0x5C06
0x01A2 0x008F 0x6238
0x01A6 0x00CD 0x62A5
0x01AA 0x00C0 0x639A
0x01AE 0x00C1 0x63BE
0x01B2 0x00BD 0x6460
0x01B6 0x00C2 0x64CF
0x01BA 0x00BE 0x6566
0x01BE 0x00B5 0x66AD
0x01C2 0x0094 0x66BE
0x01C6 0x00CC 0x66CF
0x01CA 0x00BB 0x673E
0x01CE 0x005B 0x67BF
0x01D2 0x005E 0x67C7
0x01D6 0x006D 0x6838
0x01DA 0x006C 0x6847
0x01DE 0x005D 0x6AC5
0x01E2 0x0060 0x6AF8
0x01E6 0x0067 0x6AFF
0x01EA 0x0063 0x6BBB
0x01EE 0x006A 0x6BCF
0x01F2 0x006B 0x6D46
0x01F6 0x0066 0x6DCD
0x01FA 0x0068 0x6DEE
0x01FE 0x0069 0x6E71
0x0202 0x0061 0x6EBB
0x0206 0x005C 0x6ED0
0x020A 0x0064 0x6F55
0x020E 0x0065 0x6F5C
0x0212 0x0062 0x6F73
0x0216 0x0153 0x7013
0x021A 0x0154 0x706D
0x021E 0x014D 0x7073
0x0222 0x0150 0x708B
0x0226 0x0158 0x709D
0x022A 0x015B 0x7149
0x022E 0x014E 0x7234
0x0232 0x0157 0x726D
0x0236 0x0151 0x7334
0x023A 0x0152 0x7391
0x023E 0x0155 0x73EE
0x0242 0x014F 0x754D
0x0246 0x0159 0x75A6
0x024A 0x0156 0x7726
0x024E 0x01C3 0x772C
0x0252 0x01C2 0x775C
0x0256 0x01EB 0x77B1
0x025A 0x01EC 0x77B5
0x025E 0x01ED 0x77BA
0x0262 0x01FD 0x77BF
0x0266 0x01FC 0x77C3
0x026A 0x01E9 0x77C8
0x026E 0x01EA 0x77CD
0x0272 0x01DC 0x77D2
0x0276 0x01CD 0x77D7
0x027A 0x0037 0x77DA
0x027E 0x003B 0x77E6
0x0282 0x010D 0x77F5
0x0286 0x010E 0x77FB
0x028A 0x0113 0x7803
0x028E 0x010F 0x78F9
0x0292 0x0110 0x792B
0x0296 0x0111 0x796C
0x029A 0x00CF 0x797B
0x029E 0x00D4 0x7988
0x02A2 0x00EB 0x7992
0x02A6 0x00EC 0x799B
0x02AA 0x00F1 0x79A4
0x02AE 0x00E6 0x7A9E
0x02B2 0x00E5 0x7AAE
0x02B6 0x00E4 0x7B1D
0x02BA 0x00E1 0x7B86
0x02BE 0x00E2 0x7BBF
0x02C2 0x00DB 0x7C4C
0x02C6 0x00DD 0x7C8E
0x02CA 0x00E3 0x7E46
0x02CE 0x00DF 0x7EC6
0x02D2 0x00E9 0x7ED2
0x02D6 0x00DC 0x7EDB
0x02DA 0x00F7 0x7F03
0x02DE 0x00F3 0x7F45
0x02E2 0x00D6 0x7FEE
0x02E6 0x00D7 0x800D
0x02EA 0x00EF 0x802C
0x02EE 0x00D0 0x8258
0x02F2 0x00D3 0x825C
0x02F6 0x00ED 0x878F
0x02FA 0x00DE 0x8798
0x02FE 0x016E 0x88D8
0x0302 0x0171 0x890B
0x0306 0x00F9 0x893A
0x030A 0x010A 0x8A6D
0x030E 0x00FC 0x8A79
0x0312 0x00F8 0x8DFC
0x0316 0x0109 0x8E09
0x031A 0x00FB 0x8FAD
0x031E 0x0108 0x90A2
0x0322 0x0107 0x9142
0x0326 0x0106 0x91E2
0x032A 0x0105 0x927A
0x032E 0x0104 0x9312
0x0332 0x0103 0x95C9
0x0336 0x0102 0x97FF
0x033A 0x0101 0x98E2
0x033E 0x0100 0x9A9A
0x0342 0x00FF 0x9CFC
0x0346 0x00FD 0xA861
0x034A 0x00FE 0xA86D
0x034E 0x00FA 0xA9DF
0x0352 0x010C 0xADAB
0x0356 0x010B 0xADB3
0x035A 0x015C 0xB218
0x035E 0x0163 0xB22C
0x0362 0x0160 0xB245
0x0366 0x0165 0xB259
0x036A 0x0166 0xB27F
0x036E 0x0164 0xB289
0x0372 0x015D 0xB2C1
0x0376 0x0162 0xB2D5
0x037A 0x015E 0xB2F1
0x037E 0x018C 0xB30A
0x0382 0x018B 0xB320
0x0386 0x018A 0xB32C
0x038A 0x018D 0xB354
0x038E 0x0197 0xB382
0x0392 0x0198 0xB3AD
0x0396 0x0195 0xB3D2
0x039A 0x018E 0xB3FA
0x039E 0x0199 0xB41D
0x03A2 0x019E 0xB444
0x03A6 0x0193 0xB491
0x03AA 0x013E 0xB4DA
0x03AE 0x013F 0xB4EE
0x03B2 0x0144 0xB500
0x03B6 0x0141 0xB54A
0x03BA 0x0140 0xB54E
0x03BE 0x0142 0xB552
0x03C2 0x014A 0xB569
0x03C6 0x014B 0xB611
0x03CA 0x0149 0xB74D
0x03CE 0x0147 0xB94C
0x03D2 0x0143 0xB991
0x03D6 0x0148 0xB9A8
0x03DA 0x0145 0xB9ED
0x03DE 0x0146 0xBA10
0x03E2 0x012D 0xBA33
0x03E6 0x0133 0xBA37
0x03EA 0x012A 0xBA47
0x03EE 0x012B 0xBA57
0x03F2 0x01CC 0xBA67
0x03F6 0x016A 0xBBBE
0x03FA 0x0210 0xBC0A
0x03FE 0x0213 0xBC29
0x0402 0x020F 0xBCD1
0x0406 0x0212 0xBEF9
0x040A 0x0211 0xBFCD
0x040E 0x020D 0xC01F
0x0412 0x020C 0xC02E
0x0416 0x020E 0xC036
0x041A 0x004A 0xC1C4
0x041E 0x0059 0xC708
0x0422 0x005A 0xC755
0x0426 0x0055 0xC88A
0x042A 0x0057 0xC8FD
0x042E 0x0058 0xC94A
0x0432 0x0051 0xC9EE
0x0436 0x004B 0xCA02
0x043A 0x004E 0xCA0B
0x043E 0x0053 0xCA14
0x0442 0x0048 0xCA43
0x0446 0x00C4 0xCA75
0x044A 0x008E 0xCAB0
0x044E 0x00A4 0xCB2F
0x0452 0x00A5 0xCC1C
0x0456 0x00A2 0xCD09
0x045A 0x00A6 0xCD0D
0x045E 0x00A7 0xCD94
0x0462 0x00AA 0xCE0B
0x0466 0x00B3 0xCEF8
0x046A 0x00B4 0xCF01
0x046E 0x0098 0xCF0A
0x0472 0x00BC 0xCF19
0x0476 0x00BA 0xCF28
0x047A 0x00B9 0xCF37
0x047E 0x0091 0xCF44
0x0482 0x0093 0xCF78
0x0486 0x0099 0xCFAC
0x048A 0x01E5 0xCFBF
0x048E 0x015A 0xCFC4
0x0492 0x00E0 0xD0CF
0x0496 0x00EA 0xD13F
0x049A 0x00F0 0xD148
0x049E 0x00DA 0xD2D2
0x04A2 0x00D5 0xD32A
0x04A6 0x00D9 0xD334
0x04AA 0x00D8 0xD35E
0x04AE 0x00F6 0xD37D
0x04B2 0x00F5 0xD3A9
0x04B6 0x00F4 0xD3D5
0x04BA 0x00F2 0xD401
0x04BE 0x00D1 0xD469
0x04C2 0x00D2 0xD4DB
0x04C6 0x00E7 0xD54D
0x04CA 0x00E8 0xD556
0x04CE 0x0039 0xD55F
0x04D2 0x0168 0xD56C
0x04D6 0x0169 0xD577
0x04DA 0x015F 0xD5A6
0x04DE 0x0081 0xD5B2
0x04E2 0x00A8 0xD5BD
0x04E6 0x00A9 0xD634

// constant data  [6439]

0x04EA  0x2D 0x5C 0x7C 0x2F 0x2D 0x5C 0x7C 0x2F  0x2E 0x6A 0x73 0x6F 0x6E 0x2F 0x44 0x65  -\|/-\|/.json/De
0x04FA  0x62 0x75 0x67 0x2F 0x4F 0x62 0x6A 0x2F  0x6D 0x61 0x69 0x6E 0x77 0x68 0x65 0x72  bug/Obj/mainwher
0x050A  0x65 0x20 0x69 0x73 0x20 0x27 0x6D 0x61  0x69 0x6E 0x27 0x3F 0x27 0x6D 0x61 0x69  e is 'main'?'mai
0x051A  0x6E 0x27 0x20 0x68 0x61 0x73 0x20 0x6F  0x76 0x65 0x72 0x6C 0x6F 0x61 0x64 0x73  n' has overloads
0x052A  0x3F 0x2E 0x63 0x6F 0x64 0x65 0x2E 0x74  0x78 0x74 0x53 0x75 0x63 0x63 0x65 0x73  ?.code.txtSucces
0x053A  0x73 0x2E 0x00 0x00 0x7A 0x44 0x49 0x6E  0x76 0x61 0x6C 0x69 0x64 0x20 0x61 0x72  s...zDInvalid ar
0x054A  0x67 0x75 0x6D 0x65 0x6E 0x74 0x73 0x20  0x66 0x6F 0x72 0x20 0x43 0x4F 0x4D 0x50  guments for COMP
0x055A  0x49 0x4C 0x45 0x3A 0x20 0x20 0x43 0x4F  0x4D 0x50 0x49 0x4C 0x45 0x20 0x3C 0x6F  ILE:  COMPILE <o
0x056A  0x62 0x6A 0x65 0x63 0x74 0x20 0x6A 0x73  0x6F 0x6E 0x3E 0x20 0x20 0x20 0x20 0x2D  bject json>    -
0x057A  0x67 0x20 0x3C 0x63 0x3E 0x20 0x3C 0x72  0x3E 0x20 0x3A 0x20 0x63 0x61 0x6C 0x6C  g <c> <r> : call
0x058A  0x65 0x64 0x20 0x66 0x72 0x6F 0x6D 0x20  0x47 0x55 0x49 0x2C 0x20 0x6E 0x6F 0x74  ed from GUI, not
0x059A  0x20 0x63 0x6F 0x6E 0x73 0x6F 0x6C 0x65  0x20 0x20 0x20 0x20 0x2D 0x6F 0x20 0x3A   console    -o :
0x05AA  0x20 0x6F 0x70 0x74 0x69 0x6D 0x69 0x7A  0x65 0x64 0x20 0x28 0x6C 0x65 0x73 0x73   optimized (less
0x05BA  0x20 0x72 0x75 0x6E 0x74 0x69 0x6D 0x65  0x20 0x63 0x68 0x65 0x63 0x6B 0x73 0x2C   runtime checks,
0x05CA  0x20 0x70 0x65 0x65 0x70 0x68 0x6F 0x6C  0x65 0x20 0x6F 0x70 0x74 0x69 0x6D 0x69   peephole optimi
0x05DA  0x7A 0x61 0x74 0x69 0x6F 0x6E 0x20 0x6F  0x6E 0x29 0x73 0x79 0x73 0x74 0x65 0x6D  zation on)system
0x05EA  0x69 0x4F 0x76 0x65 0x72 0x6C 0x6F 0x61  0x64 0x76 0x6F 0x69 0x64 0x72 0x65 0x74  iOverloadvoidret
0x05FA  0x75 0x72 0x6E 0x74 0x79 0x70 0x65 0x27  0x23 0x65 0x6E 0x64 0x69 0x66 0x27 0x20  urntype'#endif' 
0x060A  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x20 0x62 0x65 0x66 0x6F 0x72 0x65 0x20  expected before 
0x061A  0x65 0x6E 0x64 0x20 0x6F 0x66 0x20 0x6D  0x65 0x74 0x68 0x6F 0x64 0x27 0x72 0x65  end of method're
0x062A  0x74 0x75 0x72 0x6E 0x27 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x27 0x7D  turn' expected'}
0x063A  0x27 0x20 0x65 0x78 0x70 0x65 0x63 0x74  0x65 0x64 0x20 0x69 0x6E 0x20 0x63 0x6F  ' expected in co
0x064A  0x6D 0x70 0x69 0x6C 0x65 0x28 0x29 0x21  0x21 0x6C 0x6F 0x63 0x61 0x6C 0x73 0x67  mpile()!!localsg
0x065A  0x6C 0x6F 0x62 0x61 0x6C 0x73 0x66 0x61  0x69 0x6C 0x75 0x72 0x65 0x20 0x63 0x6F  lobalsfailure co
0x066A  0x6D 0x70 0x69 0x6C 0x69 0x6E 0x67 0x20  0x67 0x6C 0x6F 0x62 0x61 0x6C 0x20 0x69  mpiling global i
0x067A  0x6E 0x69 0x74 0x69 0x61 0x6C 0x69 0x7A  0x65 0x72 0x74 0x79 0x70 0x65 0x20 0x6D  nitializertype m
0x068A  0x69 0x73 0x6D 0x61 0x74 0x63 0x68 0x20  0x66 0x6F 0x72 0x20 0x69 0x6E 0x69 0x74  ismatch for init
0x069A  0x69 0x61 0x6C 0x69 0x7A 0x65 0x72 0x2C  0x20 0x28 0x77 0x61 0x73 0x20 0x27 0x27  ializer, (was ''
0x06AA  0x2C 0x20 0x65 0x78 0x70 0x65 0x63 0x74  0x65 0x64 0x20 0x27 0x62 0x61 0x64 0x20  , expected 'bad 
0x06BA  0x73 0x74 0x61 0x74 0x65 0x6D 0x65 0x6E  0x74 0x3F 0x75 0x6E 0x65 0x78 0x70 0x65  statement?unexpe
0x06CA  0x63 0x74 0x65 0x64 0x20 0x27 0x7B 0x27  0x6B 0x65 0x79 0x77 0x6F 0x72 0x64 0x20  cted '{'keyword 
0x06DA  0x6F 0x72 0x20 0x69 0x64 0x65 0x6E 0x74  0x69 0x66 0x69 0x65 0x72 0x20 0x65 0x78  or identifier ex
0x06EA  0x70 0x65 0x63 0x74 0x65 0x64 0x6C 0x65  0x78 0x65 0x6D 0x65 0x62 0x72 0x65 0x61  pectedlexemebrea
0x06FA  0x6B 0x63 0x6F 0x6E 0x74 0x69 0x6E 0x75  0x65 0x77 0x68 0x69 0x6C 0x65 0x6C 0x6F  kcontinuewhilelo
0x070A  0x6F 0x70 0x66 0x6F 0x72 0x65 0x61 0x63  0x68 0x73 0x77 0x69 0x74 0x63 0x68 0x75  opforeachswitchu
0x071A  0x69 0x6E 0x74 0x61 0x72 0x72 0x61 0x79  0x20 0x69 0x6E 0x64 0x65 0x78 0x20 0x74  intarray index t
0x072A  0x79 0x70 0x65 0x20 0x69 0x6E 0x76 0x61  0x6C 0x69 0x64 0x6C 0x69 0x73 0x74 0x20  ype invalidlist 
0x073A  0x69 0x6E 0x64 0x65 0x78 0x20 0x74 0x79  0x70 0x65 0x20 0x69 0x6E 0x76 0x61 0x6C  index type inval
0x074A  0x69 0x64 0x73 0x74 0x72 0x69 0x6E 0x67  0x64 0x69 0x63 0x74 0x69 0x6F 0x6E 0x61  idstringdictiona
0x075A  0x72 0x79 0x20 0x6B 0x65 0x79 0x20 0x74  0x79 0x70 0x65 0x20 0x73 0x68 0x6F 0x75  ry key type shou
0x076A  0x6C 0x64 0x20 0x62 0x65 0x20 0x27 0x73  0x74 0x72 0x69 0x6E 0x67 0x27 0x2C 0x20  ld be 'string', 
0x077A  0x28 0x6E 0x6F 0x74 0x20 0x27 0x69 0x64  0x65 0x6E 0x74 0x69 0x66 0x69 0x65 0x72  (not 'identifier
0x078A  0x20 0x6E 0x6F 0x74 0x20 0x61 0x72 0x72  0x61 0x79 0x2C 0x20 0x64 0x69 0x63 0x74   not array, dict
0x079A  0x69 0x6F 0x6E 0x61 0x72 0x79 0x20 0x6F  0x72 0x20 0x6C 0x69 0x73 0x74 0x20 0x74  ionary or list t
0x07AA  0x79 0x70 0x65 0x76 0x61 0x72 0x69 0x61  0x6E 0x74 0x56 0x61 0x72 0x69 0x61 0x6E  ypevariantVarian
0x07BA  0x74 0x42 0x6F 0x78 0x74 0x79 0x70 0x65  0x20 0x6D 0x69 0x73 0x6D 0x61 0x74 0x63  tBoxtype mismatc
0x07CA  0x68 0x20 0x69 0x6E 0x20 0x61 0x73 0x73  0x69 0x67 0x6E 0x6D 0x65 0x6E 0x74 0x2C  h in assignment,
0x07DA  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x20  0x27 0x27 0x2C 0x20 0x77 0x61 0x73 0x20   expect '', was 
0x07EA  0x27 0x41 0x72 0x72 0x61 0x79 0x53 0x65  0x74 0x49 0x74 0x65 0x6D 0x44 0x69 0x63  'ArraySetItemDic
0x07FA  0x74 0x69 0x6F 0x6E 0x61 0x72 0x79 0x4C  0x69 0x73 0x74 0x66 0x75 0x6E 0x63 0x74  tionaryListfunct
0x080A  0x69 0x6F 0x6E 0x20 0x63 0x61 0x6E 0x6E  0x6F 0x74 0x20 0x62 0x65 0x20 0x75 0x73  ion cannot be us
0x081A  0x65 0x64 0x20 0x61 0x73 0x20 0x6D 0x65  0x74 0x68 0x6F 0x64 0x20 0x28 0x72 0x65  ed as method (re
0x082A  0x74 0x75 0x72 0x6E 0x20 0x76 0x61 0x6C  0x75 0x65 0x20 0x6D 0x75 0x73 0x74 0x20  turn value must 
0x083A  0x62 0x65 0x20 0x63 0x6F 0x6E 0x73 0x75  0x6D 0x65 0x64 0x29 0x27 0x28 0x27 0x20  be consumed)'(' 
0x084A  0x6F 0x72 0x20 0x27 0x3D 0x27 0x20 0x65  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x62  or '=' expectedb
0x085A  0x6F 0x6F 0x6C 0x62 0x6F 0x6F 0x6C 0x65  0x61 0x6E 0x20 0x65 0x78 0x70 0x72 0x65  oolboolean expre
0x086A  0x73 0x73 0x69 0x6F 0x6E 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x2C 0x20  ssion expected, 
0x087A  0x28 0x77 0x61 0x73 0x20 0x27 0x65 0x6C  0x73 0x65 0x69 0x6E 0x76 0x61 0x6C 0x69  (was 'elseinvali
0x088A  0x64 0x20 0x72 0x65 0x74 0x75 0x72 0x6E  0x20 0x74 0x79 0x70 0x65 0x2C 0x20 0x28  d return type, (
0x089A  0x77 0x61 0x73 0x20 0x27 0x27 0x62 0x72  0x65 0x61 0x6B 0x27 0x20 0x6D 0x75 0x73  was ''break' mus
0x08AA  0x74 0x20 0x62 0x65 0x20 0x69 0x6E 0x73  0x69 0x64 0x65 0x20 0x6C 0x6F 0x6F 0x70  t be inside loop
0x08BA  0x20 0x62 0x6C 0x6F 0x63 0x6B 0x27 0x63  0x6F 0x6E 0x74 0x69 0x6E 0x75 0x65 0x27   block'continue'
0x08CA  0x20 0x6D 0x75 0x73 0x74 0x20 0x62 0x65  0x20 0x69 0x6E 0x73 0x69 0x64 0x65 0x20   must be inside 
0x08DA  0x6C 0x6F 0x6F 0x70 0x20 0x62 0x6C 0x6F  0x63 0x6B 0x27 0x76 0x61 0x72 0x27 0x20  loop block'var' 
0x08EA  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  0x27 0x69 0x6E 0x27 0x20 0x65 0x78 0x70  expected'in' exp
0x08FA  0x65 0x63 0x74 0x65 0x64 0x63 0x68 0x61  0x72 0x73 0x77 0x69 0x74 0x63 0x68 0x5F  ectedcharswitch_
0x090A  0x27 0x73 0x77 0x69 0x74 0x63 0x68 0x27  0x20 0x65 0x78 0x70 0x72 0x65 0x73 0x73  'switch' express
0x091A  0x69 0x6F 0x6E 0x20 0x74 0x79 0x70 0x65  0x20 0x6D 0x75 0x73 0x74 0x20 0x62 0x65  ion type must be
0x092A  0x20 0x76 0x61 0x6C 0x75 0x65 0x20 0x74  0x79 0x70 0x65 0x20 0x6F 0x72 0x20 0x73   value type or s
0x093A  0x74 0x72 0x69 0x6E 0x67 0x75 0x6E 0x65  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x20  tringunexpected 
0x094A  0x45 0x4F 0x46 0x20 0x69 0x6E 0x20 0x27  0x73 0x77 0x69 0x74 0x63 0x68 0x27 0x63  EOF in 'switch'c
0x095A  0x61 0x73 0x65 0x64 0x65 0x66 0x61 0x75  0x6C 0x74 0x27 0x64 0x65 0x66 0x61 0x75  asedefault'defau
0x096A  0x6C 0x74 0x27 0x20 0x63 0x61 0x6E 0x20  0x6F 0x6E 0x6C 0x79 0x20 0x6F 0x63 0x63  lt' can only occ
0x097A  0x75 0x72 0x20 0x6F 0x6E 0x63 0x65 0x27  0x63 0x61 0x73 0x65 0x27 0x20 0x65 0x78  ur once'case' ex
0x098A  0x70 0x65 0x63 0x74 0x65 0x64 0x27 0x64  0x65 0x66 0x61 0x75 0x6C 0x74 0x27 0x20  pected'default' 
0x099A  0x6D 0x75 0x73 0x74 0x20 0x62 0x65 0x20  0x6C 0x61 0x73 0x74 0x20 0x63 0x61 0x73  must be last cas
0x09AA  0x65 0x75 0x6E 0x65 0x78 0x70 0x65 0x63  0x74 0x65 0x64 0x20 0x27 0x63 0x61 0x73  eunexpected 'cas
0x09BA  0x65 0x27 0x20 0x63 0x6F 0x6E 0x73 0x74  0x61 0x6E 0x74 0x20 0x27 0x53 0x74 0x72  e' constant 'Str
0x09CA  0x69 0x6E 0x67 0x43 0x6F 0x6D 0x70 0x61  0x72 0x65 0x70 0x75 0x62 0x6C 0x69 0x63  ingComparepublic
0x09DA  0x20 0x69 0x64 0x65 0x6E 0x74 0x69 0x66  0x69 0x65 0x72 0x20 0x66 0x6F 0x72 0x20   identifier for 
0x09EA  0x6C 0x6F 0x63 0x61 0x6C 0x20 0x64 0x65  0x63 0x6C 0x61 0x72 0x61 0x74 0x69 0x6F  local declaratio
0x09FA  0x6E 0x20 0x69 0x73 0x20 0x69 0x6E 0x76  0x61 0x6C 0x69 0x64 0x27 0x3B 0x27 0x20  n is invalid';' 
0x0A0A  0x6F 0x72 0x20 0x27 0x3D 0x27 0x20 0x65  0x78 0x70 0x65 0x63 0x74 0x65 0x64 0x75  or '=' expectedu
0x0A1A  0x6E 0x69 0x6E 0x69 0x74 0x69 0x61 0x6C  0x69 0x7A 0x65 0x64 0x20 0x76 0x61 0x72  ninitialized var
0x0A2A  0x69 0x61 0x6E 0x74 0x20 0x69 0x6C 0x6C  0x65 0x67 0x61 0x6C 0x66 0x61 0x6C 0x73  iant illegalfals
0x0A3A  0x65 0x62 0x79 0x74 0x65 0x5F 0x53 0x65  0x74 0x75 0x6E 0x64 0x65 0x66 0x69 0x6E  ebyte_Setundefin
0x0A4A  0x65 0x64 0x20 0x69 0x64 0x65 0x6E 0x74  0x69 0x66 0x69 0x65 0x72 0x73 0x65 0x74  ed identifierset
0x0A5A  0x74 0x65 0x72 0x20 0x6D 0x65 0x74 0x68  0x6F 0x64 0x20 0x73 0x68 0x6F 0x75 0x6C  ter method shoul
0x0A6A  0x64 0x20 0x6F 0x6E 0x6C 0x79 0x20 0x68  0x61 0x76 0x65 0x20 0x6F 0x6E 0x65 0x20  d only have one 
0x0A7A  0x6F 0x76 0x65 0x72 0x6C 0x6F 0x61 0x64  0x73 0x65 0x74 0x74 0x65 0x72 0x20 0x6D  overloadsetter m
0x0A8A  0x65 0x74 0x68 0x6F 0x64 0x20 0x73 0x68  0x6F 0x75 0x6C 0x64 0x20 0x6F 0x6E 0x6C  ethod should onl
0x0A9A  0x79 0x20 0x68 0x61 0x76 0x65 0x20 0x6F  0x6E 0x65 0x20 0x61 0x72 0x67 0x75 0x6D  y have one argum
0x0AAA  0x65 0x6E 0x74 0x4B 0x65 0x79 0x2B 0x2B  0x20 0x61 0x6E 0x64 0x20 0x2D 0x2D 0x20  entKey++ and -- 
0x0ABA  0x6F 0x70 0x65 0x72 0x61 0x74 0x69 0x6F  0x6E 0x73 0x20 0x6F 0x6E 0x6C 0x79 0x20  operations only 
0x0ACA  0x6C 0x65 0x67 0x61 0x6C 0x20 0x66 0x6F  0x72 0x20 0x6E 0x75 0x6D 0x65 0x72 0x69  legal for numeri
0x0ADA  0x63 0x20 0x74 0x79 0x70 0x65 0x73 0x6C  0x6F 0x6E 0x67 0x55 0x49 0x6E 0x74 0x54  c typeslongUIntT
0x0AEA  0x6F 0x4C 0x6F 0x6E 0x67 0x41 0x64 0x64  0x66 0x6C 0x6F 0x61 0x74 0x54 0x6F 0x46  oLongAddfloatToF
0x0AFA  0x6C 0x6F 0x61 0x74 0x53 0x75 0x62 0x4C  0x65 0x6E 0x67 0x74 0x68 0x5F 0x47 0x65  loatSubLength_Ge
0x0B0A  0x74 0x47 0x65 0x74 0x43 0x68 0x61 0x72  0x47 0x65 0x74 0x49 0x74 0x65 0x6D 0x41  tGetCharGetItemA
0x0B1A  0x73 0x56 0x61 0x72 0x69 0x61 0x6E 0x74  0x43 0x6F 0x75 0x6E 0x74 0x5F 0x47 0x65  sVariantCount_Ge
0x0B2A  0x74 0x50 0x61 0x69 0x72 0x4E 0x65 0x77  0x4E 0x65 0x78 0x74 0x54 0x4F 0x44 0x4F  tPairNewNextTODO
0x0B3A  0x20 0x3A 0x20 0x74 0x6F 0x6B 0x65 0x6E  0x20 0x6E 0x6F 0x74 0x20 0x69 0x6D 0x70   : token not imp
0x0B4A  0x6C 0x65 0x6D 0x65 0x6E 0x74 0x65 0x64  0x20 0x69 0x6E 0x20 0x54 0x6F 0x6B 0x65  lemented in Toke
0x0B5A  0x6E 0x2E 0x47 0x65 0x74 0x54 0x79 0x70  0x65 0x2F 0x54 0x65 0x6D 0x70 0x2F 0x45  n.GetType/Temp/E
0x0B6A  0x72 0x72 0x6F 0x72 0x73 0x2E 0x74 0x78  0x74 0x6C 0x69 0x6E 0x65 0x73 0x6F 0x75  rrors.txtlinesou
0x0B7A  0x72 0x63 0x65 0x20 0x45 0x72 0x72 0x6F  0x72 0x20 0x61 0x74 0x20 0x65 0x6E 0x64  rce Error at end
0x0B8A  0x20 0x45 0x72 0x72 0x6F 0x72 0x20 0x61  0x74 0x20 0x27 0x50 0x72 0x65 0x76 0x69   Error at 'Previ
0x0B9A  0x6F 0x75 0x73 0x54 0x6F 0x6B 0x65 0x6E  0x3A 0x43 0x75 0x72 0x72 0x65 0x6E 0x74  ousToken:Current
0x0BAA  0x54 0x6F 0x6B 0x65 0x6E 0x3A 0x27 0x20  0x6E 0x6F 0x74 0x20 0x66 0x6F 0x75 0x6E  Token:' not foun
0x0BBA  0x64 0x53 0x74 0x72 0x69 0x6E 0x67 0x2E  0x4E 0x65 0x77 0x46 0x72 0x6F 0x6D 0x43  dString.NewFromC
0x0BCA  0x6F 0x6E 0x73 0x74 0x61 0x6E 0x74 0x00  0x00 0x01 0x00 0x48 0x36 0x35 0x30 0x32  onstant....H6502
0x0BDA  0x48 0x36 0x35 0x30 0x32 0x20 0x68 0x61  0x73 0x20 0x61 0x20 0x6C 0x69 0x6D 0x69  H6502 has a limi
0x0BEA  0x74 0x20 0x6F 0x66 0x20 0x31 0x36 0x33  0x38 0x33 0x20 0x66 0x6F 0x72 0x20 0x66  t of 16383 for f
0x0BFA  0x75 0x6E 0x63 0x74 0x69 0x6F 0x6E 0x20  0x69 0x6E 0x64 0x69 0x63 0x65 0x73 0x2C  unction indices,
0x0C0A  0x20 0x28 0x77 0x61 0x73 0x20 0x27 0x4E  0x65 0x77 0x46 0x72 0x6F 0x6D 0x43 0x68   (was 'NewFromCh
0x0C1A  0x61 0x72 0x41 0x70 0x70 0x65 0x6E 0x64  0x49 0x6E 0x73 0x65 0x72 0x74 0x43 0x68  arAppendInsertCh
0x0C2A  0x61 0x72 0x45 0x6E 0x64 0x73 0x57 0x69  0x74 0x68 0x53 0x75 0x62 0x73 0x74 0x72  arEndsWithSubstr
0x0C3A  0x69 0x6E 0x67 0x52 0x65 0x70 0x6C 0x61  0x63 0x65 0x43 0x6C 0x65 0x61 0x72 0x52  ingReplaceClearR
0x0C4A  0x65 0x6D 0x6F 0x76 0x65 0x43 0x6F 0x6E  0x74 0x61 0x69 0x6E 0x73 0x4B 0x65 0x79  emoveContainsKey
0x0C5A  0x54 0x79 0x70 0x65 0x56 0x61 0x6C 0x75  0x65 0x56 0x61 0x6C 0x75 0x65 0x54 0x79  TypeValueValueTy
0x0C6A  0x70 0x65 0x55 0x6E 0x42 0x6F 0x78 0x53  0x63 0x72 0x65 0x65 0x6E 0x50 0x72 0x69  peUnBoxScreenPri
0x0C7A  0x6E 0x74 0x50 0x72 0x69 0x6E 0x74 0x4C  0x6E 0x53 0x65 0x74 0x43 0x75 0x72 0x73  ntPrintLnSetCurs
0x0C8A  0x6F 0x72 0x43 0x6F 0x6C 0x75 0x6D 0x6E  0x73 0x5F 0x47 0x65 0x74 0x52 0x6F 0x77  orColumns_GetRow
0x0C9A  0x73 0x5F 0x47 0x65 0x74 0x43 0x75 0x72  0x73 0x6F 0x72 0x58 0x5F 0x47 0x65 0x74  s_GetCursorX_Get
0x0CAA  0x43 0x75 0x72 0x73 0x6F 0x72 0x59 0x5F  0x47 0x65 0x74 0x53 0x75 0x73 0x70 0x65  CursorY_GetSuspe
0x0CBA  0x6E 0x64 0x52 0x65 0x73 0x75 0x6D 0x65  0x44 0x72 0x61 0x77 0x43 0x68 0x61 0x72  ndResumeDrawChar
0x0CCA  0x54 0x6F 0x49 0x6E 0x74 0x54 0x6F 0x53  0x74 0x72 0x69 0x6E 0x67 0x54 0x6F 0x42  ToIntToStringToB
0x0CDA  0x79 0x74 0x65 0x73 0x54 0x6F 0x55 0x49  0x6E 0x74 0x44 0x69 0x76 0x4D 0x75 0x6C  ytesToUIntDivMul
0x0CEA  0x4D 0x6F 0x64 0x4E 0x65 0x67 0x61 0x74  0x65 0x54 0x69 0x6D 0x65 0x4D 0x69 0x6C  ModNegateTimeMil
0x0CFA  0x6C 0x69 0x73 0x5F 0x47 0x65 0x74 0x4D  0x69 0x63 0x72 0x6F 0x73 0x5F 0x47 0x65  lis_GetMicros_Ge
0x0D0A  0x74 0x53 0x79 0x73 0x74 0x65 0x6D 0x41  0x72 0x67 0x75 0x6D 0x65 0x6E 0x74 0x73  tSystemArguments
0x0D1A  0x5F 0x47 0x65 0x74 0x43 0x75 0x72 0x72  0x65 0x6E 0x74 0x44 0x69 0x72 0x65 0x63  _GetCurrentDirec
0x0D2A  0x74 0x6F 0x72 0x79 0x5F 0x47 0x65 0x74  0x43 0x75 0x72 0x72 0x65 0x6E 0x74 0x44  tory_GetCurrentD
0x0D3A  0x69 0x72 0x65 0x63 0x74 0x6F 0x72 0x79  0x5F 0x53 0x65 0x74 0x42 0x65 0x65 0x70  irectory_SetBeep
0x0D4A  0x45 0x78 0x65 0x63 0x75 0x74 0x65 0x52  0x65 0x67 0x69 0x73 0x74 0x65 0x72 0x4F  ExecuteRegisterO
0x0D5A  0x62 0x6A 0x65 0x63 0x74 0x46 0x69 0x6C  0x65 0x45 0x78 0x69 0x73 0x74 0x73 0x4F  bjectFileExistsO
0x0D6A  0x70 0x65 0x6E 0x43 0x72 0x65 0x61 0x74  0x65 0x52 0x65 0x61 0x64 0x4C 0x69 0x6E  penCreateReadLin
0x0D7A  0x65 0x49 0x73 0x56 0x61 0x6C 0x69 0x64  0x46 0x6C 0x75 0x73 0x68 0x44 0x65 0x6C  eIsValidFlushDel
0x0D8A  0x65 0x74 0x65 0x47 0x65 0x74 0x53 0x69  0x7A 0x65 0x47 0x65 0x74 0x44 0x69 0x72  eteGetSizeGetDir
0x0D9A  0x65 0x63 0x74 0x6F 0x72 0x79 0x43 0x6F  0x75 0x6E 0x74 0x47 0x65 0x74 0x46 0x69  ectoryCountGetFi
0x0DAA  0x6C 0x65 0x43 0x6F 0x75 0x6E 0x74 0x4B  0x65 0x79 0x62 0x6F 0x61 0x72 0x64 0x52  leCountKeyboardR
0x0DBA  0x65 0x61 0x64 0x4B 0x65 0x79 0x49 0x73  0x41 0x76 0x61 0x69 0x6C 0x61 0x62 0x6C  eadKeyIsAvailabl
0x0DCA  0x65 0x5F 0x47 0x65 0x74 0x54 0x6F 0x4B  0x65 0x79 0x43 0x6C 0x69 0x63 0x6B 0x58  e_GetToKeyClickX
0x0DDA  0x5F 0x47 0x65 0x74 0x43 0x6C 0x69 0x63  0x6B 0x59 0x5F 0x47 0x65 0x74 0x43 0x6C  _GetClickY_GetCl
0x0DEA  0x69 0x63 0x6B 0x55 0x70 0x5F 0x47 0x65  0x74 0x43 0x6C 0x69 0x63 0x6B 0x44 0x6F  ickUp_GetClickDo
0x0DFA  0x75 0x62 0x6C 0x65 0x5F 0x47 0x65 0x74  0x53 0x63 0x72 0x6F 0x6C 0x6C 0x44 0x65  uble_GetScrollDe
0x0E0A  0x6C 0x74 0x61 0x5F 0x47 0x65 0x74 0x44  0x69 0x61 0x67 0x6E 0x6F 0x73 0x74 0x69  lta_GetDiagnosti
0x0E1A  0x63 0x73 0x4F 0x75 0x74 0x70 0x75 0x74  0x44 0x65 0x62 0x75 0x67 0x41 0x73 0x73  csOutputDebugAss
0x0E2A  0x65 0x72 0x74 0x44 0x69 0x65 0x53 0x65  0x74 0x45 0x72 0x72 0x6F 0x72 0x54 0x79  ertDieSetErrorTy
0x0E3A  0x70 0x65 0x73 0x54 0x79 0x70 0x65 0x4F  0x66 0x56 0x61 0x6C 0x75 0x65 0x54 0x79  pesTypeOfValueTy
0x0E4A  0x70 0x65 0x4F 0x66 0x4B 0x65 0x79 0x54  0x79 0x70 0x65 0x4F 0x66 0x42 0x6F 0x78  peOfKeyTypeOfBox
0x0E5A  0x54 0x79 0x70 0x65 0x4F 0x66 0x56 0x65  0x72 0x69 0x66 0x79 0x56 0x61 0x6C 0x75  TypeOfVerifyValu
0x0E6A  0x65 0x54 0x79 0x70 0x65 0x73 0x42 0x75  0x69 0x6C 0x64 0x57 0x65 0x62 0x53 0x65  eTypesBuildWebSe
0x0E7A  0x72 0x76 0x65 0x72 0x4D 0x65 0x74 0x68  0x6F 0x64 0x5F 0x47 0x65 0x74 0x55 0x52  rverMethod_GetUR
0x0E8A  0x4C 0x5F 0x47 0x65 0x74 0x53 0x65 0x6E  0x64 0x43 0x6C 0x65 0x61 0x72 0x48 0x61  L_GetSendClearHa
0x0E9A  0x6E 0x64 0x6C 0x65 0x72 0x73 0x48 0x74  0x74 0x70 0x43 0x6C 0x69 0x65 0x6E 0x74  ndlersHttpClient
0x0EAA  0x47 0x65 0x74 0x52 0x65 0x71 0x75 0x65  0x73 0x74 0x52 0x75 0x6E 0x74 0x69 0x6D  GetRequestRuntim
0x0EBA  0x65 0x48 0x61 0x6C 0x74 0x65 0x64 0x5F  0x47 0x65 0x74 0x48 0x61 0x6C 0x74 0x65  eHalted_GetHalte
0x0ECA  0x64 0x5F 0x53 0x65 0x74 0x4C 0x6F 0x61  0x64 0x42 0x79 0x74 0x65 0x73 0x4C 0x6F  d_SetLoadBytesLo
0x0EDA  0x61 0x64 0x65 0x64 0x5F 0x47 0x65 0x74  0x53 0x65 0x74 0x56 0x69 0x73 0x69 0x62  aded_GetSetVisib
0x0EEA  0x69 0x6C 0x69 0x74 0x79 0x53 0x65 0x74  0x53 0x74 0x65 0x70 0x70 0x69 0x6E 0x67  ilitySetStepping
0x0EFA  0x53 0x74 0x65 0x70 0x49 0x6E 0x74 0x6F  0x53 0x74 0x65 0x70 0x4F 0x76 0x65 0x72  StepIntoStepOver
0x0F0A  0x53 0x74 0x65 0x70 0x52 0x75 0x6E 0x50  0x43 0x5F 0x47 0x65 0x74 0x57 0x61 0x69  StepRunPC_GetWai
0x0F1A  0x74 0x69 0x6E 0x67 0x5F 0x47 0x65 0x74  0x43 0x6C 0x65 0x61 0x72 0x42 0x72 0x65  ting_GetClearBre
0x0F2A  0x61 0x6B 0x70 0x6F 0x69 0x6E 0x74 0x73  0x43 0x6C 0x65 0x61 0x72 0x53 0x74 0x61  akpointsClearSta
0x0F3A  0x74 0x65 0x6D 0x65 0x6E 0x74 0x73 0x53  0x65 0x74 0x42 0x72 0x65 0x61 0x6B 0x70  tementsSetBreakp
0x0F4A  0x6F 0x69 0x6E 0x74 0x53 0x65 0x74 0x53  0x74 0x61 0x74 0x65 0x6D 0x65 0x6E 0x74  ointSetStatement
0x0F5A  0x53 0x50 0x5F 0x47 0x65 0x74 0x42 0x50  0x5F 0x47 0x65 0x74 0x43 0x53 0x50 0x5F  SP_GetBP_GetCSP_
0x0F6A  0x47 0x65 0x74 0x47 0x65 0x74 0x53 0x74  0x61 0x63 0x6B 0x57 0x6F 0x72 0x64 0x47  GetGetStackWordG
0x0F7A  0x65 0x74 0x53 0x74 0x61 0x63 0x6B 0x56  0x61 0x72 0x69 0x61 0x6E 0x74 0x47 0x65  etStackVariantGe
0x0F8A  0x74 0x53 0x74 0x61 0x63 0x6B 0x54 0x79  0x70 0x65 0x47 0x65 0x74 0x43 0x61 0x6C  tStackTypeGetCal
0x0F9A  0x6C 0x53 0x74 0x61 0x63 0x6B 0x57 0x6F  0x72 0x64 0x53 0x65 0x72 0x69 0x61 0x6C  lStackWordSerial
0x0FAA  0x43 0x6F 0x6E 0x6E 0x65 0x63 0x74 0x43  0x6C 0x6F 0x73 0x65 0x52 0x65 0x61 0x64  ConnectCloseRead
0x0FBA  0x43 0x68 0x61 0x72 0x57 0x72 0x69 0x74  0x65 0x43 0x68 0x61 0x72 0x48 0x61 0x72  CharWriteCharHar
0x0FCA  0x64 0x77 0x61 0x72 0x65 0x4C 0x45 0x44  0x5F 0x53 0x65 0x74 0x4D 0x65 0x6D 0x6F  dwareLED_SetMemo
0x0FDA  0x72 0x79 0x52 0x65 0x61 0x64 0x42 0x79  0x74 0x65 0x57 0x72 0x69 0x74 0x65 0x42  ryReadByteWriteB
0x0FEA  0x79 0x74 0x65 0x4D 0x61 0x78 0x69 0x6D  0x75 0x6D 0x41 0x6C 0x6C 0x6F 0x63 0x61  yteMaximumAlloca
0x0FFA  0x74 0x65 0x46 0x72 0x65 0x65 0x54 0x72  0x61 0x63 0x65 0x5F 0x53 0x65 0x74 0x54  teFreeTrace_SetT
0x100A  0x72 0x61 0x63 0x65 0x5F 0x47 0x65 0x74  0x48 0x61 0x73 0x68 0x4B 0x65 0x79 0x43  race_GetHashKeyC
0x101A  0x6C 0x69 0x70 0x62 0x6F 0x61 0x72 0x64  0x48 0x61 0x73 0x54 0x65 0x78 0x74 0x5F  lipboardHasText_
0x102A  0x47 0x65 0x74 0x47 0x65 0x74 0x54 0x65  0x78 0x74 0x53 0x65 0x74 0x54 0x65 0x78  GetGetTextSetTex
0x103A  0x74 0x42 0x75 0x69 0x6C 0x64 0x46 0x72  0x6F 0x6E 0x74 0x52 0x65 0x61 0x64 0x42  tBuildFrontReadB
0x104A  0x69 0x74 0x57 0x72 0x69 0x74 0x65 0x42  0x69 0x74 0x54 0x6F 0x55 0x70 0x70 0x65  itWriteBitToUppe
0x105A  0x72 0x49 0x73 0x55 0x70 0x70 0x65 0x72  0x49 0x73 0x44 0x69 0x67 0x69 0x74 0x49  rIsUpperIsDigitI
0x106A  0x73 0x4C 0x65 0x74 0x74 0x65 0x72 0x4F  0x72 0x44 0x69 0x67 0x69 0x74 0x49 0x73  sLetterOrDigitIs
0x107A  0x4C 0x6F 0x77 0x65 0x72 0x54 0x6F 0x44  0x69 0x67 0x69 0x74 0x54 0x6F 0x48 0x65  LowerToDigitToHe
0x108A  0x78 0x49 0x73 0x48 0x65 0x78 0x44 0x69  0x67 0x69 0x74 0x54 0x6F 0x4C 0x6F 0x77  xIsHexDigitToLow
0x109A  0x65 0x72 0x53 0x74 0x61 0x72 0x74 0x73  0x57 0x69 0x74 0x68 0x49 0x6E 0x64 0x65  erStartsWithInde
0x10AA  0x78 0x4F 0x66 0x57 0x61 0x72 0x70 0x5F  0x53 0x65 0x74 0x57 0x61 0x72 0x70 0x5F  xOfWarp_SetWarp_
0x10BA  0x47 0x65 0x74 0x44 0x65 0x6C 0x61 0x79  0x64 0x61 0x74 0x61 0x6E 0x61 0x6D 0x65  GetDelaydataname
0x10CA  0x68 0x69 0x74 0x73 0x72 0x65 0x66 0x74  0x72 0x75 0x65 0x6F 0x66 0x66 0x73 0x65  hitsreftrueoffse
0x10DA  0x74 0x64 0x65 0x62 0x75 0x67 0x70 0x6F  0x73 0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E  tdebugposconstan
0x10EA  0x74 0x73 0x73 0x79 0x6D 0x62 0x6F 0x6C  0x73 0x65 0x6E 0x75 0x6D 0x73 0x6D 0x65  tssymbolsenumsme
0x10FA  0x6D 0x62 0x65 0x72 0x73 0x66 0x6C 0x61  0x67 0x73 0x64 0x65 0x6C 0x65 0x67 0x61  mbersflagsdelega
0x110A  0x74 0x65 0x73 0x72 0x65 0x66 0x20 0x66  0x75 0x6E 0x63 0x74 0x69 0x6F 0x6E 0x73  tesref functions
0x111A  0x62 0x61 0x64 0x20 0x69 0x4E 0x65 0x78  0x74 0x4F 0x76 0x65 0x72 0x6C 0x6F 0x61  bad iNextOverloa
0x112A  0x64 0x73 0x79 0x73 0x63 0x61 0x6C 0x6C  0x75 0x6E 0x69 0x74 0x73 0x20 0x3C 0x2D  dsyscallunits <-
0x113A  0x64 0x75 0x70 0x6C 0x69 0x63 0x61 0x74  0x65 0x20 0x67 0x6C 0x6F 0x62 0x61 0x6C  duplicate global
0x114A  0x20 0x6D 0x65 0x6D 0x62 0x65 0x72 0x20  0x64 0x65 0x66 0x69 0x6E 0x69 0x74 0x69   member definiti
0x115A  0x6F 0x6E 0x64 0x75 0x70 0x6C 0x69 0x63  0x61 0x74 0x65 0x20 0x64 0x65 0x6C 0x65  onduplicate dele
0x116A  0x67 0x61 0x74 0x65 0x20 0x64 0x65 0x66  0x69 0x6E 0x69 0x74 0x69 0x6F 0x6E 0x64  gate definitiond
0x117A  0x65 0x6C 0x65 0x67 0x61 0x74 0x65 0x20  0x64 0x65 0x66 0x69 0x6E 0x69 0x74 0x69  elegate definiti
0x118A  0x6F 0x6E 0x73 0x20 0x64 0x69 0x66 0x66  0x65 0x72 0x20 0x6F 0x6E 0x6C 0x79 0x20  ons differ only 
0x119A  0x62 0x79 0x20 0x72 0x65 0x74 0x75 0x72  0x6E 0x20 0x74 0x79 0x70 0x65 0x2E 0x6D  by return type.m
0x11AA  0x61 0x69 0x6E 0x64 0x75 0x70 0x6C 0x69  0x63 0x61 0x74 0x65 0x20 0x66 0x75 0x6E  ainduplicate fun
0x11BA  0x63 0x74 0x69 0x6F 0x6E 0x20 0x64 0x65  0x66 0x69 0x6E 0x69 0x74 0x69 0x6F 0x6E  ction definition
0x11CA  0x66 0x75 0x6E 0x63 0x74 0x69 0x6F 0x6E  0x20 0x64 0x65 0x66 0x69 0x6E 0x69 0x74  function definit
0x11DA  0x69 0x6F 0x6E 0x73 0x20 0x64 0x69 0x66  0x66 0x65 0x72 0x20 0x6F 0x6E 0x6C 0x79  ions differ only
0x11EA  0x20 0x62 0x79 0x20 0x72 0x65 0x74 0x75  0x72 0x6E 0x20 0x74 0x79 0x70 0x65 0x75   by return typeu
0x11FA  0x6E 0x64 0x65 0x66 0x69 0x6E 0x65 0x64  0x20 0x27 0x73 0x79 0x73 0x74 0x65 0x6D  ndefined 'system
0x120A  0x27 0x20 0x6D 0x65 0x74 0x68 0x6F 0x64  0x20 0x27 0x69 0x6E 0x76 0x61 0x6C 0x69  ' method 'invali
0x121A  0x64 0x20 0x70 0x6F 0x73 0x3A 0x20 0x27  0x69 0x6E 0x76 0x61 0x6C 0x69 0x64 0x20  d pos: 'invalid 
0x122A  0x6C 0x69 0x6E 0x65 0x3A 0x20 0x27 0x75  0x6E 0x65 0x78 0x70 0x65 0x63 0x74 0x65  line: 'unexpecte
0x123A  0x64 0x20 0x63 0x68 0x61 0x72 0x61 0x63  0x74 0x65 0x72 0x3A 0x20 0x27 0x27 0x20  d character: '' 
0x124A  0x28 0x30 0x78 0x69 0x6E 0x76 0x61 0x6C  0x69 0x64 0x20 0x68 0x65 0x78 0x20 0x69  (0xinvalid hex i
0x125A  0x6E 0x74 0x65 0x67 0x65 0x72 0x20 0x6C  0x69 0x74 0x65 0x72 0x61 0x6C 0x69 0x6E  nteger literalin
0x126A  0x76 0x61 0x6C 0x69 0x64 0x20 0x62 0x69  0x6E 0x61 0x72 0x79 0x20 0x69 0x6E 0x74  valid binary int
0x127A  0x65 0x67 0x65 0x72 0x20 0x6C 0x69 0x74  0x65 0x72 0x61 0x6C 0x69 0x6E 0x76 0x61  eger literalinva
0x128A  0x6C 0x69 0x64 0x20 0x66 0x6C 0x6F 0x61  0x74 0x20 0x6C 0x69 0x74 0x65 0x72 0x61  lid float litera
0x129A  0x6C 0x69 0x6E 0x76 0x61 0x6C 0x69 0x64  0x20 0x69 0x6E 0x74 0x65 0x67 0x65 0x72  linvalid integer
0x12AA  0x20 0x6C 0x69 0x74 0x65 0x72 0x61 0x6C  0x75 0x6E 0x65 0x78 0x70 0x65 0x63 0x74   literalunexpect
0x12BA  0x65 0x64 0x20 0x45 0x4F 0x4C 0x20 0x69  0x6E 0x20 0x73 0x74 0x72 0x69 0x6E 0x67  ed EOL in string
0x12CA  0x75 0x6E 0x74 0x65 0x72 0x6D 0x69 0x6E  0x61 0x74 0x65 0x64 0x20 0x73 0x74 0x72  unterminated str
0x12DA  0x69 0x6E 0x67 0x3A 0x20 0x27 0x62 0x72  0x65 0x61 0x6B 0x73 0x63 0x6F 0x6E 0x74  ing: 'breakscont
0x12EA  0x69 0x6E 0x75 0x65 0x73 0x2D 0x30 0x78  0x27 0x7D 0x27 0x20 0x65 0x78 0x70 0x65  inues-0x'}' expe
0x12FA  0x63 0x74 0x65 0x64 0x20 0x69 0x6E 0x20  0x50 0x6F 0x70 0x42 0x6C 0x6F 0x63 0x6B  cted in PopBlock
0x130A  0x28 0x2E 0x2E 0x29 0x21 0x21 0x6F 0x66  0x66 0x73 0x65 0x74 0x20 0x6E 0x6F 0x74  (..)!!offset not
0x131A  0x20 0x66 0x6F 0x75 0x6E 0x64 0x20 0x66  0x6F 0x72 0x20 0x27 0x23 0x69 0x66 0x64   found for '#ifd
0x132A  0x65 0x66 0x23 0x69 0x66 0x6E 0x64 0x65  0x66 0x70 0x72 0x65 0x70 0x72 0x6F 0x63  ef#ifndefpreproc
0x133A  0x65 0x73 0x73 0x6F 0x72 0x44 0x69 0x72  0x65 0x63 0x74 0x69 0x76 0x65 0x20 0x27  essorDirective '
0x134A  0x27 0x20 0x6E 0x6F 0x74 0x20 0x79 0x65  0x74 0x20 0x69 0x6D 0x70 0x6C 0x65 0x6D  ' not yet implem
0x135A  0x65 0x6E 0x74 0x65 0x64 0x23 0x65 0x6C  0x73 0x65 0x75 0x6E 0x65 0x78 0x70 0x65  ented#elseunexpe
0x136A  0x63 0x74 0x65 0x64 0x20 0x27 0x23 0x65  0x6C 0x73 0x65 0x27 0x75 0x6E 0x65 0x78  cted '#else'unex
0x137A  0x70 0x65 0x63 0x74 0x65 0x64 0x20 0x27  0x23 0x65 0x6E 0x64 0x69 0x66 0x27 0x70  pected '#endif'p
0x138A  0x72 0x65 0x70 0x72 0x6F 0x63 0x65 0x73  0x73 0x6F 0x72 0x20 0x64 0x69 0x72 0x65  reprocessor dire
0x139A  0x63 0x74 0x69 0x76 0x65 0x20 0x6D 0x75  0x73 0x74 0x20 0x62 0x65 0x20 0x6F 0x6E  ctive must be on
0x13AA  0x20 0x6F 0x6E 0x65 0x20 0x6C 0x69 0x6E  0x65 0x70 0x72 0x65 0x70 0x72 0x6F 0x63   one linepreproc
0x13BA  0x65 0x73 0x73 0x6F 0x72 0x45 0x78 0x70  0x72 0x65 0x73 0x73 0x69 0x6F 0x6E 0x20  essorExpression 
0x13CA  0x6E 0x6F 0x74 0x20 0x79 0x65 0x74 0x20  0x69 0x6D 0x70 0x6C 0x65 0x6D 0x65 0x6E  not yet implemen
0x13DA  0x74 0x65 0x64 0x61 0x6D 0x62 0x69 0x67  0x75 0x6F 0x75 0x73 0x20 0x75 0x6E 0x71  tedambiguous unq
0x13EA  0x75 0x61 0x6C 0x69 0x66 0x69 0x65 0x64  0x20 0x69 0x64 0x65 0x6E 0x74 0x69 0x66  ualified identif
0x13FA  0x69 0x65 0x72 0x20 0x27 0x75 0x6E 0x64  0x65 0x66 0x69 0x6E 0x65 0x64 0x20 0x69  ier 'undefined i
0x140A  0x64 0x65 0x6E 0x74 0x69 0x66 0x69 0x65  0x72 0x20 0x27 0x69 0x6E 0x76 0x61 0x6C  dentifier 'inval
0x141A  0x69 0x64 0x20 0x63 0x6F 0x6C 0x6C 0x65  0x63 0x74 0x69 0x6F 0x6E 0x20 0x74 0x79  id collection ty
0x142A  0x70 0x65 0x20 0x66 0x6F 0x72 0x20 0x6B  0x65 0x79 0x20 0x27 0x69 0x6E 0x76 0x61  pe for key 'inva
0x143A  0x6C 0x69 0x64 0x20 0x63 0x6F 0x6C 0x6C  0x65 0x63 0x74 0x69 0x6F 0x6E 0x20 0x74  lid collection t
0x144A  0x79 0x70 0x65 0x20 0x66 0x6F 0x72 0x20  0x76 0x61 0x6C 0x75 0x65 0x20 0x27 0x7C  ype for value '|
0x145A  0x62 0x6F 0x6F 0x6C 0x7C 0x62 0x79 0x74  0x65 0x7C 0x63 0x68 0x61 0x72 0x7C 0x75  bool|byte|char|u
0x146A  0x69 0x6E 0x74 0x7C 0x69 0x6E 0x74 0x7C  0x74 0x79 0x70 0x65 0x7C 0x64 0x65 0x6C  int|int|type|del
0x147A  0x65 0x67 0x61 0x74 0x65 0x7C 0x66 0x69  0x6C 0x65 0x64 0x69 0x72 0x65 0x63 0x74  egate|filedirect
0x148A  0x6F 0x72 0x79 0x70 0x61 0x69 0x72 0x69  0x6E 0x76 0x61 0x6C 0x69 0x64 0x20 0x63  orypairinvalid c
0x149A  0x6F 0x6C 0x6C 0x65 0x63 0x74 0x69 0x6F  0x6E 0x20 0x74 0x79 0x70 0x65 0x20 0x66  ollection type f
0x14AA  0x6F 0x72 0x20 0x69 0x74 0x65 0x72 0x61  0x74 0x6F 0x72 0x20 0x27 0x7C 0x62 0x6F  or iterator '|bo
0x14BA  0x6F 0x6C 0x7C 0x62 0x79 0x74 0x65 0x7C  0x63 0x68 0x61 0x72 0x7C 0x75 0x69 0x6E  ol|byte|char|uin
0x14CA  0x74 0x7C 0x69 0x6E 0x74 0x7C 0x6C 0x6F  0x6E 0x67 0x7C 0x66 0x6C 0x6F 0x61 0x74  t|int|long|float
0x14DA  0x7C 0x73 0x74 0x72 0x69 0x6E 0x67 0x7C  0x74 0x79 0x70 0x65 0x7C 0x66 0x69 0x6C  |string|type|fil
0x14EA  0x65 0x7C 0x64 0x69 0x72 0x65 0x63 0x74  0x6F 0x72 0x79 0x7C 0x64 0x65 0x6C 0x65  e|directory|dele
0x14FA  0x67 0x61 0x74 0x65 0x7C 0x7C 0x62 0x79  0x74 0x65 0x7C 0x75 0x69 0x6E 0x74 0x7C  gate||byte|uint|
0x150A  0x69 0x6E 0x74 0x7C 0x2B 0x69 0x6E 0x74  0x7C 0x2D 0x69 0x6E 0x74 0x7C 0x6C 0x6F  int|+int|-int|lo
0x151A  0x6E 0x67 0x7C 0x66 0x6C 0x6F 0x61 0x74  0x7C 0x3C 0x4B 0x2C 0x56 0x3E 0x3C 0x56  ng|float|<K,V><V
0x152A  0x3E 0x56 0x5B 0x5D 0x20 0x2D 0x3E 0x20  0x7C 0x62 0x6F 0x6F 0x6C 0x7C 0x62 0x79  >V[] -> |bool|by
0x153A  0x74 0x65 0x7C 0x63 0x68 0x61 0x72 0x7C  0x64 0x65 0x6C 0x65 0x67 0x61 0x74 0x65  te|char|delegate
0x154A  0x7C 0x75 0x69 0x6E 0x74 0x7C 0x69 0x6E  0x74 0x7C 0x6C 0x6F 0x6E 0x67 0x7C 0x66  |uint|int|long|f
0x155A  0x6C 0x6F 0x61 0x74 0x7C 0x73 0x74 0x72  0x69 0x6E 0x67 0x7C 0x74 0x79 0x70 0x65  loat|string|type
0x156A  0x7C 0x76 0x61 0x72 0x69 0x61 0x6E 0x74  0x7C 0x66 0x69 0x6C 0x65 0x7C 0x64 0x69  |variant|file|di
0x157A  0x72 0x65 0x63 0x74 0x6F 0x72 0x79 0x7C  0x61 0x72 0x72 0x61 0x79 0x73 0x20 0x63  rectory|arrays c
0x158A  0x61 0x6E 0x20 0x6F 0x6E 0x6C 0x79 0x20  0x63 0x6F 0x6E 0x74 0x61 0x69 0x6E 0x20  an only contain 
0x159A  0x76 0x61 0x6C 0x75 0x65 0x20 0x74 0x79  0x70 0x65 0x73 0x67 0x65 0x74 0x74 0x65  value typesgette
0x15AA  0x72 0x20 0x6D 0x65 0x74 0x68 0x6F 0x64  0x20 0x6E 0x6F 0x74 0x20 0x66 0x6F 0x75  r method not fou
0x15BA  0x6E 0x64 0x73 0x65 0x74 0x74 0x65 0x72  0x20 0x6D 0x65 0x74 0x68 0x6F 0x64 0x20  ndsetter method 
0x15CA  0x6E 0x6F 0x74 0x20 0x66 0x6F 0x75 0x6E  0x64 0x44 0x69 0x63 0x74 0x69 0x6F 0x6E  not foundDiction
0x15DA  0x61 0x72 0x79 0x2E 0x4C 0x69 0x73 0x74  0x2E 0x41 0x72 0x72 0x61 0x79 0x2E 0x65  ary.List.Array.e
0x15EA  0x71 0x75 0x61 0x6C 0x69 0x74 0x79 0x20  0x6F 0x70 0x65 0x72 0x61 0x74 0x69 0x6F  quality operatio
0x15FA  0x6E 0x20 0x6E 0x6F 0x74 0x20 0x6F 0x6E  0x6C 0x79 0x20 0x6C 0x65 0x67 0x61 0x6C  n not only legal
0x160A  0x20 0x66 0x6F 0x72 0x20 0x27 0x74 0x79  0x70 0x65 0x20 0x6D 0x69 0x73 0x6D 0x61   for 'type misma
0x161A  0x74 0x63 0x68 0x2C 0x20 0x27 0x27 0x20  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  tch, '' expected
0x162A  0x20 0x28 0x77 0x61 0x73 0x20 0x27 0x76  0x61 0x72 0x69 0x61 0x62 0x6C 0x65 0x20   (was 'variable 
0x163A  0x69 0x64 0x65 0x6E 0x74 0x69 0x66 0x69  0x65 0x72 0x20 0x65 0x78 0x70 0x65 0x63  identifier expec
0x164A  0x74 0x65 0x64 0x62 0x69 0x74 0x77 0x69  0x73 0x65 0x20 0x6F 0x70 0x65 0x72 0x61  tedbitwise opera
0x165A  0x74 0x69 0x6F 0x6E 0x73 0x20 0x6F 0x6E  0x6C 0x79 0x20 0x6C 0x65 0x67 0x61 0x6C  tions only legal
0x166A  0x20 0x66 0x6F 0x72 0x20 0x27 0x75 0x69  0x6E 0x74 0x27 0x2C 0x20 0x27 0x69 0x6E   for 'uint', 'in
0x167A  0x74 0x27 0x2C 0x20 0x27 0x66 0x6C 0x61  0x67 0x73 0x27 0x20 0x61 0x6E 0x64 0x20  t', 'flags' and 
0x168A  0x27 0x62 0x79 0x74 0x65 0x27 0x2C 0x20  0x28 0x6E 0x6F 0x74 0x20 0x27 0x63 0x6F  'byte', (not 'co
0x169A  0x6D 0x70 0x61 0x72 0x69 0x73 0x6F 0x6E  0x20 0x6F 0x70 0x65 0x72 0x61 0x74 0x69  mparison operati
0x16AA  0x6F 0x6E 0x73 0x20 0x6F 0x6E 0x6C 0x79  0x20 0x6C 0x65 0x67 0x61 0x6C 0x20 0x66  ons only legal f
0x16BA  0x6F 0x72 0x20 0x6F 0x72 0x64 0x69 0x6E  0x61 0x6C 0x20 0x74 0x79 0x70 0x65 0x73  or ordinal types
0x16CA  0x61 0x64 0x64 0x20 0x61 0x6E 0x64 0x20  0x73 0x75 0x62 0x74 0x72 0x61 0x63 0x74  add and subtract
0x16DA  0x20 0x6F 0x70 0x65 0x72 0x61 0x74 0x69  0x6F 0x6E 0x73 0x20 0x6F 0x6E 0x6C 0x79   operations only
0x16EA  0x20 0x6C 0x65 0x67 0x61 0x6C 0x20 0x66  0x6F 0x72 0x20 0x6E 0x75 0x6D 0x65 0x72   legal for numer
0x16FA  0x69 0x63 0x20 0x74 0x79 0x70 0x65 0x73  0x53 0x74 0x72 0x69 0x6E 0x67 0x2E 0x41  ic typesString.A
0x170A  0x70 0x70 0x65 0x6E 0x64 0x73 0x68 0x69  0x66 0x74 0x20 0x6F 0x70 0x65 0x72 0x61  ppendshift opera
0x171A  0x74 0x69 0x6F 0x6E 0x73 0x20 0x6F 0x6E  0x6C 0x79 0x20 0x6C 0x65 0x67 0x61 0x6C  tions only legal
0x172A  0x20 0x66 0x6F 0x72 0x20 0x69 0x6E 0x74  0x65 0x67 0x72 0x61 0x6C 0x20 0x74 0x79   for integral ty
0x173A  0x70 0x65 0x73 0x73 0x68 0x69 0x66 0x74  0x20 0x6F 0x70 0x65 0x72 0x61 0x6E 0x64  pesshift operand
0x174A  0x20 0x6D 0x75 0x73 0x74 0x20 0x62 0x65  0x20 0x62 0x65 0x74 0x77 0x65 0x65 0x6E   must be between
0x175A  0x20 0x30 0x20 0x61 0x6E 0x64 0x20 0x31  0x36 0x6D 0x75 0x6C 0x74 0x69 0x70 0x6C   0 and 16multipl
0x176A  0x79 0x2C 0x20 0x64 0x69 0x76 0x69 0x64  0x65 0x20 0x61 0x6E 0x64 0x20 0x6D 0x6F  y, divide and mo
0x177A  0x64 0x75 0x6C 0x75 0x73 0x20 0x6F 0x70  0x65 0x72 0x61 0x74 0x69 0x6F 0x6E 0x73  dulus operations
0x178A  0x20 0x6F 0x6E 0x6C 0x79 0x20 0x6C 0x65  0x67 0x61 0x6C 0x20 0x66 0x6F 0x72 0x20   only legal for 
0x179A  0x6E 0x75 0x6D 0x65 0x72 0x69 0x63 0x20  0x74 0x79 0x70 0x65 0x73 0x6D 0x6F 0x64  numeric typesmod
0x17AA  0x75 0x6C 0x75 0x73 0x20 0x6F 0x70 0x65  0x72 0x61 0x74 0x69 0x6F 0x6E 0x20 0x6E  ulus operation n
0x17BA  0x6F 0x74 0x20 0x6C 0x65 0x67 0x61 0x6C  0x20 0x66 0x6F 0x72 0x20 0x27 0x66 0x6C  ot legal for 'fl
0x17CA  0x6F 0x61 0x74 0x27 0x75 0x6E 0x61 0x72  0x79 0x20 0x2B 0x20 0x61 0x6E 0x64 0x20  oat'unary + and 
0x17DA  0x2D 0x20 0x6F 0x6E 0x6C 0x79 0x20 0x6C  0x65 0x67 0x61 0x6C 0x20 0x66 0x6F 0x72  - only legal for
0x17EA  0x20 0x6E 0x75 0x6D 0x65 0x72 0x69 0x63  0x20 0x74 0x79 0x70 0x65 0x73 0x75 0x6E   numeric typesun
0x17FA  0x61 0x72 0x79 0x20 0x2B 0x20 0x61 0x6E  0x64 0x20 0x2D 0x20 0x6F 0x6E 0x6C 0x79  ary + and - only
0x180A  0x20 0x6C 0x65 0x67 0x61 0x6C 0x20 0x66  0x6F 0x72 0x20 0x6E 0x75 0x6D 0x65 0x72   legal for numer
0x181A  0x69 0x63 0x20 0x74 0x79 0x70 0x65 0x73  0x2C 0x20 0x28 0x6E 0x6F 0x74 0x20 0x27  ic types, (not '
0x182A  0x74 0x79 0x70 0x65 0x20 0x6D 0x69 0x73  0x6D 0x61 0x74 0x63 0x68 0x2C 0x20 0x27  type mismatch, '
0x183A  0x62 0x6F 0x6F 0x6C 0x27 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x62 0x69  bool' expectedbi
0x184A  0x74 0x77 0x69 0x73 0x65 0x20 0x6F 0x70  0x65 0x72 0x61 0x74 0x69 0x6F 0x6E 0x73  twise operations
0x185A  0x20 0x6F 0x6E 0x6C 0x79 0x20 0x6C 0x65  0x67 0x61 0x6C 0x20 0x66 0x6F 0x72 0x20   only legal for 
0x186A  0x27 0x75 0x69 0x6E 0x74 0x27 0x2C 0x20  0x27 0x66 0x6C 0x61 0x67 0x73 0x27 0x20  'uint', 'flags' 
0x187A  0x61 0x6E 0x64 0x20 0x27 0x62 0x79 0x74  0x65 0x27 0x2C 0x20 0x28 0x6E 0x6F 0x74  and 'byte', (not
0x188A  0x20 0x27 0x69 0x6E 0x76 0x61 0x6C 0x69  0x64 0x20 0x62 0x6F 0x6F 0x6C 0x65 0x61   'invalid boolea
0x189A  0x6E 0x20 0x74 0x6F 0x6B 0x65 0x6E 0x20  0x69 0x6E 0x76 0x61 0x6C 0x69 0x64 0x20  n token invalid 
0x18AA  0x66 0x6C 0x6F 0x61 0x74 0x20 0x74 0x6F  0x6B 0x65 0x6E 0x20 0x69 0x6E 0x76 0x61  float token inva
0x18BA  0x6C 0x69 0x64 0x20 0x69 0x6E 0x74 0x65  0x67 0x65 0x72 0x20 0x74 0x6F 0x6B 0x65  lid integer toke
0x18CA  0x6E 0x20 0x63 0x61 0x6E 0x6E 0x6F 0x74  0x20 0x63 0x61 0x73 0x74 0x20 0x27 0x27  n cannot cast ''
0x18DA  0x20 0x74 0x6F 0x20 0x27 0x73 0x74 0x72  0x69 0x6E 0x67 0x20 0x69 0x6E 0x64 0x65   to 'string inde
0x18EA  0x78 0x20 0x74 0x79 0x70 0x65 0x20 0x69  0x6E 0x76 0x61 0x6C 0x69 0x64 0x69 0x64  x type invalidid
0x18FA  0x65 0x6E 0x74 0x69 0x66 0x69 0x65 0x72  0x20 0x6E 0x6F 0x74 0x20 0x61 0x72 0x72  entifier not arr
0x190A  0x61 0x79 0x2C 0x20 0x6C 0x69 0x73 0x74  0x20 0x6F 0x72 0x20 0x64 0x69 0x63 0x74  ay, list or dict
0x191A  0x69 0x6F 0x6E 0x61 0x72 0x79 0x20 0x74  0x79 0x70 0x65 0x61 0x6D 0x62 0x69 0x67  ionary typeambig
0x192A  0x75 0x6F 0x75 0x73 0x20 0x66 0x75 0x6E  0x63 0x74 0x69 0x6F 0x6E 0x20 0x6D 0x61  uous function ma
0x193A  0x74 0x63 0x68 0x65 0x73 0x20 0x66 0x6F  0x72 0x20 0x64 0x65 0x6C 0x65 0x67 0x61  tches for delega
0x194A  0x74 0x65 0x20 0x74 0x79 0x70 0x65 0x20  0x27 0x6E 0x6F 0x20 0x66 0x75 0x6E 0x63  te type 'no func
0x195A  0x74 0x69 0x6F 0x6E 0x20 0x6D 0x61 0x74  0x63 0x68 0x65 0x73 0x20 0x66 0x6F 0x72  tion matches for
0x196A  0x20 0x64 0x65 0x6C 0x65 0x67 0x61 0x74  0x65 0x20 0x74 0x79 0x70 0x65 0x20 0x27   delegate type '
0x197A  0x27 0x20 0x69 0x73 0x20 0x6E 0x6F 0x74  0x20 0x64 0x65 0x66 0x69 0x6E 0x65 0x64  ' is not defined
0x198A  0x74 0x79 0x70 0x65 0x6F 0x66 0x63 0x6F  0x6D 0x70 0x69 0x6C 0x65 0x50 0x72 0x69  typeofcompilePri
0x199A  0x6D 0x61 0x72 0x79 0x20 0x6E 0x6F 0x74  0x20 0x69 0x6D 0x70 0x6C 0x65 0x6D 0x65  mary not impleme
0x19AA  0x6E 0x74 0x65 0x64 0x27 0x28 0x27 0x20  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  nted'(' expected
0x19BA  0x27 0x20 0x69 0x73 0x20 0x61 0x6E 0x20  0x69 0x6E 0x76 0x61 0x6C 0x69 0x64 0x20  ' is an invalid 
0x19CA  0x74 0x79 0x70 0x65 0x20 0x66 0x6F 0x72  0x20 0x73 0x69 0x6D 0x70 0x6C 0x65 0x20  type for simple 
0x19DA  0x63 0x61 0x73 0x74 0x27 0x29 0x27 0x20  0x65 0x78 0x70 0x65 0x63 0x74 0x65 0x64  cast')' expected
0x19EA  0x63 0x6F 0x6D 0x70 0x69 0x6C 0x65 0x50  0x72 0x69 0x6D 0x61 0x72 0x79 0x20 0x6E  compilePrimary n
0x19FA  0x6F 0x74 0x20 0x69 0x6D 0x70 0x6C 0x65  0x6D 0x65 0x6E 0x74 0x65 0x64 0x20 0x66  ot implemented f
0x1A0A  0x6F 0x72 0x20 0x27 0x20 0x2D 0x3E 0x20  0x27 0x75 0x6E 0x65 0x78 0x70 0x65 0x63  or ' -> 'unexpec
0x1A1A  0x74 0x65 0x64 0x20 0x62 0x6F 0x6F 0x6C  0x65 0x61 0x6E 0x20 0x6C 0x69 0x74 0x65  ted boolean lite
0x1A2A  0x72 0x61 0x6C 0x27 0x62 0x79 0x74 0x65  0x27 0x20 0x63 0x6F 0x6E 0x73 0x74 0x61  ral'byte' consta
0x1A3A  0x6E 0x74 0x20 0x6F 0x75 0x74 0x20 0x6F  0x66 0x20 0x72 0x61 0x6E 0x67 0x65 0x27  nt out of range'
0x1A4A  0x69 0x6E 0x74 0x27 0x20 0x63 0x6F 0x6E  0x73 0x74 0x61 0x6E 0x74 0x20 0x6F 0x75  int' constant ou
0x1A5A  0x74 0x20 0x6F 0x66 0x20 0x72 0x61 0x6E  0x67 0x65 0x27 0x75 0x69 0x6E 0x74 0x27  t of range'uint'
0x1A6A  0x20 0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E  0x74 0x20 0x6F 0x75 0x74 0x20 0x6F 0x66   constant out of
0x1A7A  0x20 0x72 0x61 0x6E 0x67 0x65 0x69 0x6E  0x76 0x61 0x6C 0x69 0x64 0x20 0x69 0x64   rangeinvalid id
0x1A8A  0x65 0x6E 0x74 0x69 0x66 0x69 0x65 0x72  0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E 0x74  entifierconstant
0x1A9A  0x20 0x69 0x64 0x65 0x6E 0x74 0x69 0x66  0x69 0x65 0x72 0x20 0x63 0x61 0x73 0x65   identifier case
0x1AAA  0x20 0x6E 0x6F 0x74 0x20 0x69 0x6D 0x70  0x6C 0x65 0x6D 0x65 0x6E 0x74 0x65 0x64   not implemented
0x1ABA  0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E 0x74  0x20 0x65 0x78 0x70 0x65 0x63 0x74 0x65  constant expecte
0x1ACA  0x64 0x27 0x20 0x66 0x6C 0x61 0x67 0x73  0x20 0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E  d' flags constan
0x1ADA  0x74 0x2C 0x20 0x28 0x77 0x61 0x73 0x20  0x27 0x27 0x20 0x65 0x6E 0x75 0x6D 0x20  t, (was '' enum 
0x1AEA  0x63 0x6F 0x6E 0x73 0x74 0x61 0x6E 0x74  0x2C 0x20 0x28 0x77 0x61 0x73 0x20 0x27  constant, (was '
0x1AFA  0x27 0x20 0x63 0x6F 0x6E 0x73 0x74 0x61  0x6E 0x74 0x20 0x65 0x78 0x70 0x72 0x65  ' constant expre
0x1B0A  0x73 0x73 0x69 0x6F 0x6E 0x2C 0x20 0x28  0x77 0x61 0x73 0x20 0x27 0x50 0x45 0x45  ssion, (was 'PEE
0x1B1A  0x50 0x48 0x4F 0x4C 0x45 0x4F 0x50 0x54  0x75 0x6E 0x6B 0x6E 0x6F 0x77 0x6E 0x20  PHOLEOPTunknown 
0x1B2A  0x74 0x79 0x70 0x65 0x20 0x30 0x78 0x69  0x6E 0x20 0x54 0x79 0x70 0x65 0x2E 0x54  type 0xin Type.T
0x1B3A  0x6F 0x53 0x74 0x72 0x69 0x6E 0x67 0x28  0x29 0x73 0x65 0x63 0x74 0x69 0x6F 0x6E  oString()section
0x1B4A  0x20 0x6E 0x61 0x6D 0x65 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x22 0x3A   name expected":
0x1B5A  0x20 0x6B 0x65 0x79 0x20 0x73 0x74 0x72  0x69 0x6E 0x67 0x20 0x65 0x78 0x70 0x65   key string expe
0x1B6A  0x63 0x74 0x65 0x64 0x55 0x6E 0x64 0x65  0x66 0x69 0x6E 0x65 0x64 0x42 0x6F 0x6F  ctedUndefinedBoo
0x1B7A  0x6C 0x4B 0x65 0x79 0x77 0x6F 0x72 0x64  0x49 0x64 0x65 0x6E 0x74 0x69 0x66 0x69  lKeywordIdentifi
0x1B8A  0x65 0x72 0x44 0x6F 0x74 0x74 0x65 0x64  0x49 0x64 0x65 0x6E 0x74 0x69 0x66 0x69  erDottedIdentifi
0x1B9A  0x65 0x72 0x49 0x6E 0x74 0x65 0x67 0x65  0x72 0x53 0x74 0x72 0x69 0x6E 0x67 0x43  erIntegerStringC
0x1BAA  0x6F 0x6E 0x73 0x74 0x61 0x6E 0x74 0x41  0x73 0x73 0x69 0x67 0x6E 0x42 0x69 0x74  onstantAssignBit
0x1BBA  0x41 0x6E 0x64 0x42 0x69 0x74 0x4F 0x72  0x4C 0x50 0x61 0x72 0x65 0x6E 0x52 0x50  AndBitOrLParenRP
0x1BCA  0x61 0x72 0x65 0x6E 0x4C 0x42 0x72 0x61  0x63 0x65 0x52 0x42 0x72 0x61 0x63 0x65  arenLBraceRBrace
0x1BDA  0x4C 0x42 0x72 0x61 0x63 0x6B 0x65 0x74  0x52 0x42 0x72 0x61 0x63 0x6B 0x65 0x74  LBracketRBracket
0x1BEA  0x53 0x65 0x6D 0x69 0x43 0x6F 0x6C 0x6F  0x6E 0x43 0x6F 0x6D 0x6D 0x61 0x53 0x75  SemiColonCommaSu
0x1BFA  0x62 0x74 0x72 0x61 0x63 0x74 0x4D 0x75  0x6C 0x74 0x69 0x70 0x6C 0x79 0x44 0x69  btractMultiplyDi
0x1C0A  0x76 0x69 0x64 0x65 0x4D 0x6F 0x64 0x75  0x6C 0x75 0x73 0x49 0x6E 0x63 0x72 0x65  videModulusIncre
0x1C1A  0x6D 0x65 0x6E 0x74 0x44 0x65 0x63 0x72  0x65 0x6D 0x65 0x6E 0x74 0x53 0x68 0x69  mentDecrementShi
0x1C2A  0x66 0x74 0x4C 0x65 0x66 0x74 0x53 0x68  0x69 0x66 0x74 0x52 0x69 0x67 0x68 0x74  ftLeftShiftRight
0x1C3A  0x42 0x6F 0x6F 0x6C 0x65 0x61 0x6E 0x4E  0x6F 0x74 0x42 0x6F 0x6F 0x6C 0x65 0x61  BooleanNotBoolea
0x1C4A  0x6E 0x4F 0x72 0x42 0x6F 0x6F 0x6C 0x65  0x61 0x6E 0x41 0x6E 0x64 0x42 0x69 0x74  nOrBooleanAndBit
0x1C5A  0x4E 0x6F 0x74 0x42 0x69 0x74 0x58 0x6F  0x72 0x70 0x6F 0x72 0x74 0x6D 0x65 0x6D  NotBitXorportmem
0x1C6A  0x6F 0x72 0x79 0x6D 0x65 0x6D 0x6F 0x72  0x79 0x77 0x6F 0x72 0x64 0x23 0x64 0x65  orymemoryword#de
0x1C7A  0x66 0x69 0x6E 0x65 0x65 0x6D 0x62 0x65  0x64 0x70 0x72 0x6F 0x67 0x72 0x61 0x6D  fineembedprogram
0x1C8A  0x75 0x73 0x65 0x73 0x00 0x00 0x20 0x41  0x54 0x4F 0x44 0x4F 0x20 0x3A 0x20 0x74  uses.. ATODO : t
0x1C9A  0x6F 0x6B 0x65 0x6E 0x20 0x6E 0x6F 0x74  0x20 0x69 0x6D 0x70 0x6C 0x65 0x6D 0x65  oken not impleme
0x1CAA  0x6E 0x74 0x65 0x64 0x20 0x69 0x6E 0x20  0x54 0x6F 0x6B 0x65 0x6E 0x2E 0x48 0x6F  nted in Token.Ho
0x1CBA  0x70 0x70 0x65 0x72 0x54 0x6F 0x6B 0x65  0x6E 0x54 0x6F 0x53 0x74 0x72 0x69 0x6E  pperTokenToStrin
0x1CCA  0x67 0x61 0x6D 0x62 0x69 0x67 0x75 0x6F  0x75 0x73 0x20 0x75 0x6E 0x64 0x65 0x63  gambiguous undec
0x1CDA  0x6F 0x72 0x61 0x74 0x65 0x64 0x20 0x6E  0x61 0x6D 0x65 0x64 0x20 0x74 0x79 0x70  orated named typ
0x1CEA  0x65 0x20 0x6E 0x61 0x6D 0x65 0x61 0x6D  0x62 0x69 0x67 0x75 0x6F 0x75 0x73 0x20  e nameambiguous 
0x1CFA  0x75 0x6E 0x64 0x65 0x63 0x6F 0x72 0x61  0x74 0x65 0x64 0x20 0x6E 0x61 0x6D 0x65  undecorated name
0x1D0A  0x64 0x20 0x66 0x75 0x6E 0x63 0x74 0x69  0x6F 0x6E 0x20 0x6F 0x72 0x20 0x6D 0x65  d function or me
0x1D1A  0x74 0x68 0x6F 0x64 0x20 0x6E 0x61 0x6D  0x65 0x69 0x6E 0x76 0x61 0x6C 0x69 0x64  thod nameinvalid
0x1D2A  0x20 0x61 0x72 0x72 0x61 0x79 0x20 0x74  0x79 0x70 0x65 0x20 0x27 0x66 0x75 0x6E   array type 'fun
0x1D3A  0x63 0x74 0x69 0x6F 0x6E 0x20 0x65 0x78  0x70 0x65 0x63 0x74 0x65 0x64 0x2C 0x20  ction expected, 
0x1D4A  0x28 0x6E 0x6F 0x74 0x20 0x76 0x61 0x72  0x69 0x61 0x62 0x6C 0x65 0x20 0x27 0x64  (not variable 'd
0x1D5A  0x65 0x6C 0x65 0x67 0x61 0x74 0x65 0x20  0x64 0x65 0x66 0x69 0x6E 0x69 0x74 0x69  elegate definiti
0x1D6A  0x6F 0x6E 0x20 0x6E 0x6F 0x74 0x20 0x66  0x6F 0x75 0x6E 0x64 0x6E 0x6F 0x20 0x6D  on not foundno m
0x1D7A  0x61 0x74 0x63 0x68 0x69 0x6E 0x67 0x20  0x64 0x65 0x6C 0x65 0x67 0x61 0x74 0x65  atching delegate
0x1D8A  0x20 0x27 0x27 0x20 0x6F 0x76 0x65 0x72  0x6C 0x6F 0x61 0x64 0x20 0x66 0x6F 0x75   '' overload fou
0x1D9A  0x6E 0x64 0x20 0x66 0x6F 0x72 0x20 0x27  0x6E 0x6F 0x20 0x6D 0x61 0x74 0x63 0x68  nd for 'no match
0x1DAA  0x69 0x6E 0x67 0x20 0x6F 0x76 0x65 0x72  0x6C 0x6F 0x61 0x64 0x20 0x66 0x6F 0x75  ing overload fou
0x1DBA  0x6E 0x64 0x20 0x66 0x6F 0x72 0x20 0x27  0x7C 0x62 0x79 0x74 0x65 0x7C 0x75 0x69  nd for '|byte|ui
0x1DCA  0x6E 0x74 0x7C 0x69 0x6E 0x74 0x7C 0x2B  0x69 0x6E 0x74 0x7C 0x2D 0x69 0x6E 0x74  nt|int|+int|-int
0x1DDA  0x7C 0x66 0x6C 0x61 0x67 0x73 0x7C 0x7C  0x62 0x79 0x74 0x65 0x7C 0x63 0x68 0x61  |flags||byte|cha
0x1DEA  0x72 0x7C 0x75 0x69 0x6E 0x74 0x7C 0x69  0x6E 0x74 0x7C 0x2B 0x69 0x6E 0x74 0x7C  r|uint|int|+int|
0x1DFA  0x2D 0x69 0x6E 0x74 0x7C 0x73 0x74 0x72  0x69 0x6E 0x67 0x7C 0x6C 0x6F 0x6E 0x67  -int|string|long
0x1E0A  0x7C 0x66 0x6C 0x6F 0x61 0x74 0x7C                                               |float|


// Compile.hs:1963
// ####  Compile.main(..)  ####                                                 0x0000

0x1E11  0x44            PUSHI0
0x1E12  0x44            PUSHI0
0x1E13  0x1A 0x0F       PUSHIB 0x0F
0x1E15  0x1A 0x06       PUSHIB 0x06
0x1E17  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E19  0x1A 0x0F       PUSHIB 0x0F
0x1E1B  0x1A 0x06       PUSHIB 0x06
0x1E1D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E1F  0x1A 0x0F       PUSHIB 0x0F
0x1E21  0x1A 0x06       PUSHIB 0x06
0x1E23  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E25  0x1A 0x0F       PUSHIB 0x0F
0x1E27  0x1A 0x06       PUSHIB 0x06
0x1E29  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E2B  0x1A 0x0F       PUSHIB 0x0F
0x1E2D  0x1A 0x06       PUSHIB 0x06
0x1E2F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E31  0x1A 0x0F       PUSHIB 0x0F
0x1E33  0x1A 0x07       PUSHIB 0x07
0x1E35  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E37  0x1A 0x07       PUSHIB 0x07
0x1E39  0x1A 0x0F       PUSHIB 0x0F
0x1E3B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E3D  0x1A 0x0F       PUSHIB 0x0F
0x1E3F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1E41  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x1E43  0x44            PUSHI0
0x1E44  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x1E46  0x44            PUSHI0
0x1E47  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x1E49  0x24 0x02       SYSCALL0 0x02  // String.New
0x1E4B  0x44            PUSHI0
0x1E4C  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x1E4E  0x44            PUSHI0
0x1E4F  0x44            PUSHI0
0x1E50  0x1A 0x0F       PUSHIB 0x0F
0x1E52  0x1A 0x0F       PUSHIB 0x0F
0x1E54  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E56  0x44            PUSHI0
0x1E57  0x44            PUSHI0
0x1E58  0x1F 0x2A       POPGLOBALB 0x2A
0x1E5A  0x1A 0x0F       PUSHIB 0x0F
0x1E5C  0x1A 0x0F       PUSHIB 0x0F
0x1E5E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E60  0x1A 0x0F       PUSHIB 0x0F
0x1E62  0x1A 0x0F       PUSHIB 0x0F
0x1E64  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E66  0x44            PUSHI0
0x1E67  0x44            PUSHI0
0x1E68  0x24 0x02       SYSCALL0 0x02  // String.New
0x1E6A  0x44            PUSHI0
0x1E6B  0x1A 0x08       PUSHIB 0x08
0x1E6D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x1E6F  0x1F 0x34       POPGLOBALB 0x34
0x1E71  0x24 0x60       SYSCALL0 0x60  // File.New
0x1E73  0x44            PUSHI0
0x1E74  0x44            PUSHI0
0x1E75  0x44            PUSHI0
0x1E76  0x1A 0x0F       PUSHIB 0x0F
0x1E78  0x1A 0x03       PUSHIB 0x03
0x1E7A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E7C  0x1A 0x0F       PUSHIB 0x0F
0x1E7E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1E80  0x1A 0x0F       PUSHIB 0x0F
0x1E82  0x1A 0x04       PUSHIB 0x04
0x1E84  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E86  0x1A 0x04       PUSHIB 0x04
0x1E88  0x1A 0x0F       PUSHIB 0x0F
0x1E8A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E8C  0x1A 0x04       PUSHIB 0x04
0x1E8E  0x1A 0x0E       PUSHIB 0x0E
0x1E90  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E92  0x1A 0x04       PUSHIB 0x04
0x1E94  0x1A 0x04       PUSHIB 0x04
0x1E96  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E98  0x1A 0x04       PUSHIB 0x04
0x1E9A  0x1A 0x0F       PUSHIB 0x0F
0x1E9C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1E9E  0x1A 0x0F       PUSHIB 0x0F
0x1EA0  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1EA2  0x1A 0x0F       PUSHIB 0x0F
0x1EA4  0x1A 0x04       PUSHIB 0x04
0x1EA6  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EA8  0x1A 0x04       PUSHIB 0x04
0x1EAA  0x1A 0x19       PUSHIB 0x19
0x1EAC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EAE  0x1A 0x04       PUSHIB 0x04
0x1EB0  0x1A 0x0F       PUSHIB 0x0F
0x1EB2  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EB4  0x1A 0x04       PUSHIB 0x04
0x1EB6  0x1A 0x19       PUSHIB 0x19
0x1EB8  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EBA  0x1A 0x04       PUSHIB 0x04
0x1EBC  0x1A 0x19       PUSHIB 0x19
0x1EBE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EC0  0x1A 0x04       PUSHIB 0x04
0x1EC2  0x1A 0x0E       PUSHIB 0x0E
0x1EC4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EC6  0x1A 0x04       PUSHIB 0x04
0x1EC8  0x1A 0x04       PUSHIB 0x04
0x1ECA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1ECC  0x1A 0x04       PUSHIB 0x04
0x1ECE  0x1A 0x0F       PUSHIB 0x0F
0x1ED0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1ED2  0x1A 0x04       PUSHIB 0x04
0x1ED4  0x1A 0x03       PUSHIB 0x03
0x1ED6  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1ED8  0x1A 0x04       PUSHIB 0x04
0x1EDA  0x1A 0x03       PUSHIB 0x03
0x1EDC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EDE  0x1A 0x0F       PUSHIB 0x0F
0x1EE0  0x1A 0x03       PUSHIB 0x03
0x1EE2  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EE4  0x1A 0x04       PUSHIB 0x04
0x1EE6  0x1A 0x19       PUSHIB 0x19
0x1EE8  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EEA  0x1A 0x04       PUSHIB 0x04
0x1EEC  0x1A 0x13       PUSHIB 0x13
0x1EEE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EF0  0x1A 0x04       PUSHIB 0x04
0x1EF2  0x1A 0x04       PUSHIB 0x04
0x1EF4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1EF6  0x44            PUSHI0
0x1EF7  0x1A 0x0F       PUSHIB 0x0F
0x1EF9  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1EFB  0x1A 0x0F       PUSHIB 0x0F
0x1EFD  0x1A 0x04       PUSHIB 0x04
0x1EFF  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F01  0x1A 0x04       PUSHIB 0x04
0x1F03  0x1A 0x19       PUSHIB 0x19
0x1F05  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F07  0x1A 0x04       PUSHIB 0x04
0x1F09  0x1A 0x0F       PUSHIB 0x0F
0x1F0B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F0D  0x1A 0x04       PUSHIB 0x04
0x1F0F  0x1A 0x19       PUSHIB 0x19
0x1F11  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F13  0x44            PUSHI0
0x1F14  0x1A 0x0F       PUSHIB 0x0F
0x1F16  0x1A 0x13       PUSHIB 0x13
0x1F18  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F1A  0x1A 0x0F       PUSHIB 0x0F
0x1F1C  0x1A 0x04       PUSHIB 0x04
0x1F1E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F20  0x1A 0x04       PUSHIB 0x04
0x1F22  0x1A 0x13       PUSHIB 0x13
0x1F24  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F26  0x1A 0x0F       PUSHIB 0x0F
0x1F28  0x1A 0x13       PUSHIB 0x13
0x1F2A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F2C  0x1A 0x0F       PUSHIB 0x0F
0x1F2E  0x1A 0x04       PUSHIB 0x04
0x1F30  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F32  0x1A 0x04       PUSHIB 0x04
0x1F34  0x1A 0x13       PUSHIB 0x13
0x1F36  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F38  0x1A 0x04       PUSHIB 0x04
0x1F3A  0x1A 0x13       PUSHIB 0x13
0x1F3C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F3E  0x1A 0x04       PUSHIB 0x04
0x1F40  0x1A 0x19       PUSHIB 0x19
0x1F42  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F44  0x1A 0x0F       PUSHIB 0x0F
0x1F46  0x1A 0x0F       PUSHIB 0x0F
0x1F48  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F4A  0x1A 0x0F       PUSHIB 0x0F
0x1F4C  0x1A 0x0F       PUSHIB 0x0F
0x1F4E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F50  0x1A 0x0F       PUSHIB 0x0F
0x1F52  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F54  0x1A 0x13       PUSHIB 0x13
0x1F56  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F58  0x44            PUSHI0
0x1F59  0x1A 0x04       PUSHIB 0x04
0x1F5B  0x1A 0x06       PUSHIB 0x06
0x1F5D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F5F  0x1A 0x04       PUSHIB 0x04
0x1F61  0x1A 0x19       PUSHIB 0x19
0x1F63  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F65  0x44            PUSHI0
0x1F66  0x24 0x02       SYSCALL0 0x02  // String.New
0x1F68  0x1A 0x06       PUSHIB 0x06
0x1F6A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F6C  0x1A 0x0F       PUSHIB 0x0F
0x1F6E  0x1A 0x0F       PUSHIB 0x0F
0x1F70  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F72  0x1A 0x0F       PUSHIB 0x0F
0x1F74  0x1A 0x06       PUSHIB 0x06
0x1F76  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x1F78  0x1A 0x03       PUSHIB 0x03
0x1F7A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F7C  0x1A 0x03       PUSHIB 0x03
0x1F7E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F80  0x44            PUSHI0
0x1F81  0x44            PUSHI0
0x1F82  0x44            PUSHI0
0x1F83  0x44            PUSHI0
0x1F84  0x44            PUSHI0
0x1F85  0x44            PUSHI0
0x1F86  0x44            PUSHI0
0x1F87  0x1A 0x13       PUSHIB 0x13
0x1F89  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F8B  0x49            ENTER

                        // <string> rawArgs = System.Arguments;                 Compile.hs:1966

0x1F8C  0x1A 0x0F       PUSHIB 0x0F
0x1F8E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x1F90  0x24 0x59       SYSCALL0 0x59  // System.Arguments_Get
0x1F92  0x5D            POPCOPYLOCALB00

                        // <string> args;                                       Compile.hs:1967

0x1F93  0x1A 0x0F       PUSHIB 0x0F
0x1F95  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // bool checkedBuild = true;                            Compile.hs:1968

0x1F97  0x44            PUSHI0
0x1F98  0x45            PUSHI1
0x1F99  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // bool touchesTree = false;                            Compile.hs:1969

0x1F9B  0x44            PUSHI0

                        // for (uint iArg = 0; iArg < rawArgs.Length; iArg++)

0x1F9C  0x44            PUSHI0
0x1F9D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1F9F  0x4E            PUSHLOCALB00
0x1FA0  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x1FA2  0x08            LT
0x1FA3  0x31 0x98 0x00  JZW 0x203B (+152)

                        // string arg = rawArgs[iArg];                          Compile.hs:1973

0x1FA6  0x24 0x02       SYSCALL0 0x02  // String.New
0x1FA8  0x4E            PUSHLOCALB00
0x1FA9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1FAB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1FAD  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if ((arg.Length == 2) && (arg[0] == '-'))            Compile.hs:1974

0x1FAF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1FB1  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x1FB3  0x1A 0x02       PUSHIB 0x02
0x1FB5  0x05            EQ
0x1FB6  0x27 0x00       DUP 0x00
0x1FB8  0x2E 0x0B       JZB 0x1FC3 (+11)
0x1FBA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1FBC  0x44            PUSHI0
0x1FBD  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x1FBF  0x1A 0x2D       PUSHIB 0x2D
0x1FC1  0x05            EQ
0x1FC2  0x0C            BOOLAND
0x1FC3  0x31 0x6C 0x00  JZW 0x202F (+108)

                        // arg = arg.ToLower();                                 Compile.hs:1976

0x1FC6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x1FC8  0x34 0x9A 0x01  CALLW 0x019A   // String.ToLower
0x1FCB  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // switch (arg)                                         Compile.hs:1977

0x1FCD  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)

                        // case "-g":                                           Compile.hs:1979

0x1FCF  0x37 0x2D 0x67  PUSHIW 0x672D
0x1FD2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x1FD4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x1FD6  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x1FD8  0x2F 0x2C       JNZB 0x2004 (+44)

                        // uint col;                                            Compile.hs:1981

0x1FDA  0x44            PUSHI0

                        // uint row;                                            Compile.hs:1982

0x1FDB  0x44            PUSHI0

                        // iArg++;                                              Compile.hs:1983

0x1FDC  0x22 0x08       INCLOCALB 0x08 (BP+8)

                        // if (TryParseUInt(rawArgs[iArg], ref col))            Compile.hs:1984

0x1FDE  0x4E            PUSHLOCALB00
0x1FDF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1FE1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1FE3  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x1FE5  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x1FE7  0x2E 0x02       JZB 0x1FE9 (+2)

                        // iArg++;                                              Compile.hs:1987

0x1FE9  0x22 0x08       INCLOCALB 0x08 (BP+8)

                        // if (TryParseUInt(rawArgs[iArg], ref row))            Compile.hs:1988

0x1FEB  0x4E            PUSHLOCALB00
0x1FEC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x1FEE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x1FF0  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0x1FF2  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x1FF4  0x2E 0x02       JZB 0x1FF6 (+2)

                        // Parser.SetInteractive(byte(col), byte(row));

0x1FF6  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x1FF8  0x51 0x03       CAST 0x03
0x1FFA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x1FFC  0x51 0x03       CAST 0x03
0x1FFE  0x2C 0x6E       CALLB 0x6E     // Parser.SetInteractive

                        // }                                                    Compile.hs:1992

0x2000  0x28 0x04       DECSP 0x04
0x2002  0x30 0x29       JB 0x202B (+41)

                        // case "-o":                                           Compile.hs:1993

0x2004  0x37 0x2D 0x6F  PUSHIW 0x6F2D
0x2007  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2009  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x200B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x200D  0x2F 0x07       JNZB 0x2014 (+7)

                        // checkedBuild = false;                                Compile.hs:1995

0x200F  0x44            PUSHI0
0x2010  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    Compile.hs:1996

0x2012  0x30 0x19       JB 0x202B (+25)

                        // case "-t":                                           Compile.hs:1997

0x2014  0x37 0x2D 0x74  PUSHIW 0x742D
0x2017  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2019  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x201B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x201D  0x2F 0x07       JNZB 0x2024 (+7)

                        // touchesTree = true;                                  Compile.hs:1999

0x201F  0x45            PUSHI1
0x2020  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    Compile.hs:2000

0x2022  0x30 0x09       JB 0x202B (+9)

                        // args.Clear();                                        Compile.hs:2003

0x2024  0x4F            PUSHLOCALB02
0x2025  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // break;                                               Compile.hs:2004

0x2027  0x28 0x06       DECSP 0x06
0x2029  0x30 0x14       JB 0x203D (+20)

                        // }                                                    Compile.hs:2006

0x202B  0x28 0x02       DECSP 0x02

                        // }                                                    Compile.hs:2007

0x202D  0x30 0x07       JB 0x2034 (+7)

                        // args.Append(arg);                                    Compile.hs:2010

0x202F  0x4F            PUSHLOCALB02
0x2030  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2032  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    Compile.hs:2012

0x2034  0x28 0x02       DECSP 0x02
0x2036  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x2038  0x33 0x65 0xFF  JW 0x1F9D (-155)
0x203B  0x28 0x02       DECSP 0x02

                        // if (args.Length != 1)                                Compile.hs:2014

0x203D  0x4F            PUSHLOCALB02
0x203E  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x2040  0x45            PUSHI1
0x2041  0x06            NE
0x2042  0x2E 0x08       JZB 0x204A (+8)

                        // BadArguments();                                      Compile.hs:2016

0x2044  0x2C 0x16       CALLB 0x16     // Compile.BadArguments

                        // break;                                               Compile.hs:2017

0x2046  0x28 0x08       DECSP 0x08
0x2048  0x2A 0xB4       RETB 0xB4

                        // string jsonPath = args[0];                           Compile.hs:2020

0x204A  0x24 0x02       SYSCALL0 0x02  // String.New
0x204C  0x4F            PUSHLOCALB02
0x204D  0x44            PUSHI0
0x204E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2050  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // string ext = ".json";                                Compile.hs:2021

0x2052  0x24 0x02       SYSCALL0 0x02  // String.New
0x2054  0x1A 0x08       PUSHIB 0x08
0x2056  0x1A 0x05       PUSHIB 0x05
0x2058  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x205A  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (!File.Exists(ref jsonPath, ref ext, "/Debug/Obj/"))

0x205C  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x205E  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x2060  0x1A 0x0D       PUSHIB 0x0D
0x2062  0x1A 0x0B       PUSHIB 0x0B
0x2064  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2066  0x34 0xBE 0x01  CALLW 0x01BE   // File.Exists
0x2069  0x2F 0x04       JNZB 0x206D (+4)

                        // BadArguments();                                      Compile.hs:2024

0x206B  0x2C 0x16       CALLB 0x16     // Compile.BadArguments

                        // CodeStream.CheckedBuild = checkedBuild;              Compile.hs:2027

0x206D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x206F  0x34 0x1C 0x01  CALLW 0x011C   // CodeStream.CheckedBuild_Set

                        // long startTime = Millis;                             Compile.hs:2029

0x2072  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x2074  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x2076  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // SysCalls.New();                                      Compile.hs:2032

0x2078  0x2C 0x88       CALLB 0x88     // SysCalls.New

                        // Symbols.New();                                       Compile.hs:2033

0x207A  0x2C 0x8C       CALLB 0x8C     // Symbols.New

                        // if (!Symbols.Import(jsonPath))                       Compile.hs:2034

0x207C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x207E  0x2C 0xC7       CALLB 0xC7     // Symbols.Import
0x2080  0x31 0xE4 0x00  JZW 0x2164 (+228)

                        // uint mIndex;                                         Compile.hs:2039

0x2083  0x44            PUSHI0

                        // if (!Symbols.GetFunctionIndex("main", ref mIndex))

0x2084  0x1A 0x18       PUSHIB 0x18
0x2086  0x1A 0x04       PUSHIB 0x04
0x2088  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x208A  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x208C  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x208E  0x2F 0x0F       JNZB 0x209D (+15)

                        // Parser.Error("where is 'main'?");                    Compile.hs:2042

0x2090  0x1A 0x1C       PUSHIB 0x1C
0x2092  0x1A 0x10       PUSHIB 0x10
0x2094  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2096  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:2043

0x2098  0x28 0x02       DECSP 0x02
0x209A  0x33 0xCA 0x00  JW 0x2164 (+202)

                        // <uint> mOverloads = Symbols.GetFunctionOverloads(mIndex);

0x209D  0x1A 0x04       PUSHIB 0x04
0x209F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x20A1  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x20A3  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0x20A5  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (mOverloads.Length != 1)                          Compile.hs:2046

0x20A7  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x20A9  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x20AB  0x45            PUSHI1
0x20AC  0x06            NE
0x20AD  0x2E 0x0F       JZB 0x20BC (+15)

                        // Parser.Error("'main' has overloads?");               Compile.hs:2048

0x20AF  0x1A 0x2C       PUSHIB 0x2C
0x20B1  0x1A 0x15       PUSHIB 0x15
0x20B3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20B5  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:2049

0x20B7  0x28 0x04       DECSP 0x04
0x20B9  0x33 0xAB 0x00  JW 0x2164 (+171)

                        // Scanner.New();                                       Compile.hs:2052

0x20BC  0x2C 0x5B       CALLB 0x5B     // Scanner.New

                        // iCurrentOverload = mOverloads[0];                    Compile.hs:2054

0x20BE  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x20C0  0x44            PUSHI0
0x20C1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x20C3  0x1F 0x00       POPGLOBALB 0x00

                        // Symbols.AddFunctionCall(iCurrentOverload); // yup, main is called at least once

0x20C5  0x20 0x00       PUSHGLOBALB 0x00
0x20C7  0x2C 0xB1       CALLB 0xB1     // Symbols.AddFunctionCall

                        // Block.PushBlock(false); // new block context

0x20C9  0x44            PUSHI0
0x20CA  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // if (!compile())                                      Compile.hs:2058

0x20CD  0x2C 0x14       CALLB 0x14     // Compile.compile
0x20CF  0x2F 0x07       JNZB 0x20D6 (+7)

                        // break;                                               Compile.hs:2060

0x20D1  0x28 0x04       DECSP 0x04
0x20D3  0x33 0x91 0x00  JW 0x2164 (+145)

                        // Block.PopBlock();                                    Compile.hs:2062

0x20D6  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // string extension = Path.GetExtension(jsonPath);

0x20D9  0x24 0x02       SYSCALL0 0x02  // String.New
0x20DB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x20DD  0x34 0xC3 0x01  CALLW 0x01C3   // Path.GetExtension
0x20E0  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // string codePath = jsonPath.Replace(extension, ".code");

0x20E2  0x24 0x02       SYSCALL0 0x02  // String.New
0x20E4  0x56 0x08 0x12  PUSHLOCALBB 0x1208
0x20E7  0x1A 0x41       PUSHIB 0x41
0x20E9  0x1A 0x05       PUSHIB 0x05
0x20EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x20ED  0x24 0x09       SYSCALL0 0x09  // String.Replace
0x20EF  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // if (!Symbols.ExportCode(codePath, false))            Compile.hs:2066

0x20F1  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x20F3  0x44            PUSHI0
0x20F4  0x2C 0xC5       CALLB 0xC5     // Symbols.ExportCode
0x20F6  0x2F 0x06       JNZB 0x20FC (+6)

                        // break;                                               Compile.hs:2068

0x20F8  0x28 0x08       DECSP 0x08
0x20FA  0x30 0x6A       JB 0x2164 (+106)

                        // if (touchesTree)                                     Compile.hs:2075

0x20FC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x20FE  0x2E 0x17       JZB 0x2115 (+23)

                        // string touchPath = jsonPath.Replace(extension, ".txt");

0x2100  0x24 0x02       SYSCALL0 0x02  // String.New
0x2102  0x56 0x08 0x12  PUSHLOCALBB 0x1208
0x2105  0x1A 0x46       PUSHIB 0x46
0x2107  0x1A 0x04       PUSHIB 0x04
0x2109  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x210B  0x24 0x09       SYSCALL0 0x09  // String.Replace
0x210D  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // ExportTouchTree(touchPath);                          Compile.hs:2078

0x210F  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x2111  0x2C 0xCE       CALLB 0xCE     // Symbols.ExportTouchTree

                        // }                                                    Compile.hs:2079

0x2113  0x28 0x02       DECSP 0x02

                        // if (!IsInteractive())                                Compile.hs:2081

0x2115  0x2C 0x6F       CALLB 0x6F     // Parser.IsInteractive
0x2117  0x2F 0x49       JNZB 0x2160 (+73)

                        // PrintLn();                                           Compile.hs:2083

0x2119  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // Print("Success.", Color.ProgressText, Color.ProgressFace);

0x211B  0x1A 0x4A       PUSHIB 0x4A
0x211D  0x1A 0x08       PUSHIB 0x08
0x211F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2121  0x34 0xEB 0x01  CALLW 0x01EB   // Color.ProgressText_Get
0x2124  0x34 0xEC 0x01  CALLW 0x01EC   // Color.ProgressFace_Get
0x2127  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // long elapsedTime = Millis - startTime;               Compile.hs:2085

0x2129  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x212B  0x24 0x57       SYSCALL0 0x57  // Time.Millis_Get
0x212D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x212F  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x2131  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // float seconds = elapsedTime / 1000.0;                Compile.hs:2086

0x2133  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0x2135  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x2137  0x1A 0x52       PUSHIB 0x52
0x2139  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0x213B  0x43            SWAP
0x213C  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0x213E  0x43            SWAP
0x213F  0x24 0x50       SYSCALL0 0x50  // Float.Div
0x2141  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // PrintLn("  " + seconds.ToString() + "s", Color.ProgressHighlight, Color.ProgressFace);

0x2143  0x37 0x20 0x20  PUSHIW 0x2020
0x2146  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2148  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x214A  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x214C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x214E  0x1A 0x73       PUSHIB 0x73
0x2150  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2152  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2154  0x34 0xED 0x01  CALLW 0x01ED   // Color.ProgressHighlight_Get
0x2157  0x34 0xEC 0x01  CALLW 0x01EC   // Color.ProgressFace_Get
0x215A  0x2C 0x37       CALLB 0x37     // Screen.PrintLn

                        // }                                                    Compile.hs:2088

0x215C  0x28 0x04       DECSP 0x04
0x215E  0x30 0x04       JB 0x2162 (+4)

                        // Parser.ProgressDone();                               Compile.hs:2091

0x2160  0x2C 0x72       CALLB 0x72     // Parser.ProgressDone

                        // break;                                               Compile.hs:2093

0x2162  0x28 0x08       DECSP 0x08

                        // break;                                               Compile.hs:2095

0x2164  0x28 0x0E       DECSP 0x0E
0x2166  0x2A 0xB4       RETB 0xB4


// Compile.hs:1956
// ####  Compile.BadArguments(..)  ####                                         0x0016

0x2168  0x49            ENTER

                        // PrintLn("Invalid arguments for COMPILE:");           Compile.hs:1957

0x2169  0x1A 0x56       PUSHIB 0x56
0x216B  0x1A 0x1E       PUSHIB 0x1E
0x216D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x216F  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // PrintLn("  COMPILE <object json>");                  Compile.hs:1958

0x2171  0x1A 0x74       PUSHIB 0x74
0x2173  0x1A 0x17       PUSHIB 0x17
0x2175  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2177  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // PrintLn("    -g <c> <r> : called from GUI, not console");

0x2179  0x1A 0x8B       PUSHIB 0x8B
0x217B  0x1A 0x2D       PUSHIB 0x2D
0x217D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x217F  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // PrintLn("    -o : optimized (less runtime checks, peephole optimization on)");

0x2181  0x1A 0xB8       PUSHIB 0xB8
0x2183  0x1A 0x42       PUSHIB 0x42
0x2185  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2187  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // }                                                    Compile.hs:1961

0x2189  0x4A            RET0


// Compile.hs:1722
// ####  Compile.compile(..)  ####                                              0x0014

0x218A  0x49            ENTER

                        // <byte> globalCode = initializeGlobals();             Compile.hs:1724

0x218B  0x1A 0x03       PUSHIB 0x03
0x218D  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x218F  0x2C 0x15       CALLB 0x15     // Compile.initializeGlobals
0x2191  0x5D            POPCOPYLOCALB00

                        // bool success = false;                                Compile.hs:1726

0x2192  0x44            PUSHI0

                        // bool isMain = true;                                  Compile.hs:1727

0x2193  0x44            PUSHI0
0x2194  0x45            PUSHI1
0x2195  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // <string, string> startToken = Symbols.GetOverloadStart(iCurrentOverload);

0x2197  0x1A 0x0F       PUSHIB 0x0F
0x2199  0x1A 0x0F       PUSHIB 0x0F
0x219B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x219D  0x20 0x00       PUSHGLOBALB 0x00
0x219F  0x2C 0xB6       CALLB 0xB6     // Symbols.GetOverloadStart
0x21A1  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Scanner.Reset(startToken);                           Compile.hs:1732

0x21A3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x21A5  0x2C 0x5E       CALLB 0x5E     // Scanner.Reset

                        // Parser.Reset();                                      Compile.hs:1733

0x21A7  0x2C 0x78       CALLB 0x78     // Parser.Reset

                        // Directives.New();                                    Compile.hs:1734

0x21A9  0x34 0x0D 0x01  CALLW 0x010D   // Directives.New

                        // CodeStream.New();                                    Compile.hs:1735

0x21AC  0x34 0x23 0x01  CALLW 0x0123   // CodeStream.New

                        // if (globalCode.Length > 0)                           Compile.hs:1737

0x21AF  0x4E            PUSHLOCALB00
0x21B0  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x21B2  0x44            PUSHI0
0x21B3  0x07            GT
0x21B4  0x2E 0x09       JZB 0x21BD (+9)

                        // CodeStream.AppendCode(globalCode);                   Compile.hs:1739

0x21B6  0x4E            PUSHLOCALB00
0x21B7  0x34 0x20 0x01  CALLW 0x0120   // CodeStream.AppendCode

                        // globalCode.Clear();                                  Compile.hs:1740

0x21BA  0x4E            PUSHLOCALB00
0x21BB  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // Types.SetCurrentMethod(iCurrentOverload);            Compile.hs:1743

0x21BD  0x20 0x00       PUSHGLOBALB 0x00
0x21BF  0x2C 0xCF       CALLB 0xCF     // Types.SetCurrentMethod

                        // Parser.Advance(); // load first token                Compile.hs:1745

0x21C1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (Parser.Check(HopperToken.Keyword, "system"))

0x21C3  0x1A 0x05       PUSHIB 0x05
0x21C5  0x1A 0xFA       PUSHIB 0xFA
0x21C7  0x1A 0x06       PUSHIB 0x06
0x21C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x21CB  0x2C 0x84       CALLB 0x84     // Parser.Check
0x21CD  0x2E 0x18       JZB 0x21E5 (+24)

                        // Symbols.OverloadWasCompiled(iCurrentOverload);

0x21CF  0x20 0x00       PUSHGLOBALB 0x00
0x21D1  0x2C 0xCA       CALLB 0xCA     // Symbols.OverloadWasCompiled

                        // if (!Symbols.OverloadNextToCompile(ref iCurrentOverload))

0x21D3  0x44            PUSHI0
0x21D4  0x47            PUSHGP
0x21D5  0x00            ADD
0x21D6  0x2C 0xCB       CALLB 0xCB     // Symbols.OverloadNextToCompile
0x21D8  0x2F 0x09       JNZB 0x21E1 (+9)

                        // success = true; // all done                          Compile.hs:1753

0x21DA  0x45            PUSHI1
0x21DB  0x4D            POPLOCALB02

                        // break;                                               Compile.hs:1754

0x21DC  0x28 0x02       DECSP 0x02
0x21DE  0x33 0xBF 0x01  JW 0x239D (+447)

                        // continue;                                            Compile.hs:1756

0x21E1  0x28 0x02       DECSP 0x02
0x21E3  0x30 0xB4       JB 0x2197 (-76)

                        // <string,string> braceToken = Parser.CurrentToken; // for CodeGen location

0x21E5  0x1A 0x0F       PUSHIB 0x0F
0x21E7  0x1A 0x0F       PUSHIB 0x0F
0x21E9  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x21EB  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x21ED  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstruction(Instruction.ENTER);

0x21EF  0x1A 0x49       PUSHIB 0x49
0x21F1  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // if (!isMain) // already pushed with globals

0x21F4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x21F6  0x2F 0x06       JNZB 0x21FC (+6)

                        // Block.PushBlock(false); // new block context

0x21F8  0x44            PUSHI0
0x21F9  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // <string,variant> blockContext = Block.Top();

0x21FC  0x1A 0x0F       PUSHIB 0x0F
0x21FE  0x1A 0x14       PUSHIB 0x14
0x2200  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2202  0x34 0x4D 0x01  CALLW 0x014D   // Block.Top
0x2205  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // < < string > > arguments = Symbols.GetOverloadArguments(iCurrentOverload);

0x2207  0x1A 0x19       PUSHIB 0x19
0x2209  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x220B  0x20 0x00       PUSHGLOBALB 0x00
0x220D  0x2C 0xB8       CALLB 0xB8     // Symbols.GetOverloadArguments
0x220F  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // blockContext["arguments"] = arguments;               Compile.hs:1771

0x2211  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2213  0x1A 0x5E       PUSHIB 0x5E
0x2215  0x1A 0x09       PUSHIB 0x09
0x2217  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2219  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x221B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // blockContext["iOverload"] = iCurrentOverload.ToString();

0x221D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x221F  0x37 0x00 0x01  PUSHIW 0x0100
0x2222  0x1A 0x09       PUSHIB 0x09
0x2224  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2226  0x20 0x00       PUSHGLOBALB 0x00
0x2228  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x222B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // string returnType = Symbols.GetOverloadReturnType(iCurrentOverload);

0x222D  0x24 0x02       SYSCALL0 0x02  // String.New
0x222F  0x20 0x00       PUSHGLOBALB 0x00
0x2231  0x2C 0xB7       CALLB 0xB7     // Symbols.GetOverloadReturnType
0x2233  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (returnType != "void")                            Compile.hs:1774

0x2235  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2237  0x37 0x09 0x01  PUSHIW 0x0109
0x223A  0x1A 0x04       PUSHIB 0x04
0x223C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x223E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2240  0x2E 0x0F       JZB 0x224F (+15)

                        // blockContext["returntype"] = returnType;             Compile.hs:1776

0x2242  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2244  0x37 0x0D 0x01  PUSHIW 0x010D
0x2247  0x1A 0x0A       PUSHIB 0x0A
0x2249  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x224B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x224D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // Block.ReplaceTop(blockContext);                      Compile.hs:1778

0x224F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2251  0x34 0x50 0x01  CALLW 0x0150   // Block.ReplaceTop

                        // compileBlock();                                      Compile.hs:1780

0x2254  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // if (Parser.HadError)                                 Compile.hs:1782

0x2256  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2258  0x2E 0x07       JZB 0x225F (+7)

                        // break;                                               Compile.hs:1784

0x225A  0x28 0x0A       DECSP 0x0A
0x225C  0x33 0x41 0x01  JW 0x239D (+321)

                        // Parser.ProgressTick(".");                            Compile.hs:1786

0x225F  0x1A 0x2E       PUSHIB 0x2E
0x2261  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2263  0x2C 0x71       CALLB 0x71     // Parser.ProgressTick

                        // if (Directives.IsStillOpen)                          Compile.hs:1789

0x2265  0x34 0x0E 0x01  CALLW 0x010E   // Directives.IsStillOpen_Get
0x2268  0x2E 0x10       JZB 0x2278 (+16)

                        // Parser.ErrorAtCurrent("'#endif' expected before end of method");

0x226A  0x37 0x17 0x01  PUSHIW 0x0117
0x226D  0x1A 0x26       PUSHIB 0x26
0x226F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2271  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1792

0x2273  0x28 0x0A       DECSP 0x0A
0x2275  0x33 0x28 0x01  JW 0x239D (+296)

                        // if (returnType != "void")                            Compile.hs:1795

0x2278  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x227A  0x37 0x09 0x01  PUSHIW 0x0109
0x227D  0x1A 0x04       PUSHIB 0x04
0x227F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2281  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2283  0x2E 0x35       JZB 0x22B8 (+53)

                        // Instruction lastInstruction = CodeStream.GetLastInstruction();

0x2285  0x44            PUSHI0
0x2286  0x34 0x1D 0x01  CALLW 0x011D   // CodeStream.GetLastInstruction
0x2289  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if ((lastInstruction != Instruction.RET0)            Compile.hs:1798

0x228B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x228D  0x1A 0x4A       PUSHIB 0x4A
0x228F  0x06            NE
0x2290  0x27 0x00       DUP 0x00
0x2292  0x2E 0x12       JZB 0x22A4 (+18)
0x2294  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2296  0x1A 0x2B       PUSHIB 0x2B
0x2298  0x06            NE
0x2299  0x0C            BOOLAND
0x229A  0x27 0x00       DUP 0x00
0x229C  0x2E 0x08       JZB 0x22A4 (+8)
0x229E  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x22A0  0x1A 0x36       PUSHIB 0x36
0x22A2  0x06            NE
0x22A3  0x0C            BOOLAND
0x22A4  0x2E 0x10       JZB 0x22B4 (+16)

                        // Parser.ErrorAtCurrent("'return' expected");

0x22A6  0x37 0x3D 0x01  PUSHIW 0x013D
0x22A9  0x1A 0x11       PUSHIB 0x11
0x22AB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22AD  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1804

0x22AF  0x28 0x0C       DECSP 0x0C
0x22B1  0x33 0xEC 0x00  JW 0x239D (+236)

                        // }                                                    Compile.hs:1806

0x22B4  0x28 0x02       DECSP 0x02
0x22B6  0x30 0x74       JB 0x232A (+116)

                        // <string,string> previousToken = Parser.PreviousToken;

0x22B8  0x1A 0x0F       PUSHIB 0x0F
0x22BA  0x1A 0x0F       PUSHIB 0x0F
0x22BC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x22BE  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0x22C0  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // HopperToken tokenType = Token.GetType(previousToken);

0x22C2  0x44            PUSHI0
0x22C3  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x22C5  0x2C 0x49       CALLB 0x49     // Token.GetType
0x22C7  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // if (tokenType != HopperToken.RBrace)                 Compile.hs:1812

0x22C9  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x22CB  0x1A 0x13       PUSHIB 0x13
0x22CD  0x06            NE
0x22CE  0x2E 0x11       JZB 0x22DF (+17)

                        // Parser.ErrorAt(previousToken, "'}' expected in compile()!!");

0x22D0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x22D2  0x37 0x4E 0x01  PUSHIW 0x014E
0x22D5  0x1A 0x1B       PUSHIB 0x1B
0x22D7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x22D9  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // Die(0x0B);                                           Compile.hs:1815

0x22DB  0x1A 0x0B       PUSHIB 0x0B
0x22DD  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:1819

0x22DF  0x45            PUSHI1
0x22E0  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // if (CodeStream.CheckedBuild)                         Compile.hs:1821

0x22E3  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0x22E6  0x2E 0x15       JZB 0x22FB (+21)

                        // uint localsToPop = Block.GetLocalsToPop(false, false);

0x22E8  0x44            PUSHI0
0x22E9  0x44            PUSHI0
0x22EA  0x44            PUSHI0
0x22EB  0x34 0x58 0x01  CALLW 0x0158   // Block.GetLocalsToPop
0x22EE  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // CodeStream.AddInstruction(Instruction.TESTBPB, byte(localsToPop));

0x22F0  0x1A 0x2D       PUSHIB 0x2D
0x22F2  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x22F4  0x51 0x03       CAST 0x03
0x22F6  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1826

0x22F9  0x28 0x02       DECSP 0x02

                        // uint bytesToPop = Block.GetLocalsToPop(true, isMain);

0x22FB  0x44            PUSHI0
0x22FC  0x45            PUSHI1
0x22FD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x22FF  0x34 0x58 0x01  CALLW 0x0158   // Block.GetLocalsToPop
0x2302  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (bytesToPop == 0)                                 Compile.hs:1829

0x2304  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2306  0x2F 0x09       JNZB 0x230F (+9)

                        // CodeStream.AddInstruction(Instruction.RET0);

0x2308  0x1A 0x4A       PUSHIB 0x4A
0x230A  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1832

0x230D  0x30 0x1B       JB 0x2328 (+27)

                        // else if (bytesToPop < 256)                           Compile.hs:1833

0x230F  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2311  0x55 0x00 0x01  PUSHIWLT 0x0100
0x2314  0x2E 0x0D       JZB 0x2321 (+13)

                        // CodeStream.AddInstruction(Instruction.RETB, byte(bytesToPop));

0x2316  0x1A 0x2A       PUSHIB 0x2A
0x2318  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x231A  0x51 0x03       CAST 0x03
0x231C  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1836

0x231F  0x30 0x09       JB 0x2328 (+9)

                        // CodeStream.AddInstruction(Instruction.RETW, bytesToPop);

0x2321  0x1A 0x35       PUSHIB 0x35
0x2323  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2325  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1841

0x2328  0x28 0x06       DECSP 0x06

                        // if (!isMain)                                         Compile.hs:1842

0x232A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x232C  0x2F 0x07       JNZB 0x2333 (+7)

                        // Block.PopBlock();                                    Compile.hs:1844

0x232E  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // }                                                    Compile.hs:1845

0x2331  0x30 0x35       JB 0x2366 (+53)

                        // Block.Export(0);                                     Compile.hs:1848

0x2333  0x44            PUSHI0
0x2334  0x34 0x5B 0x01  CALLW 0x015B   // Block.Export

                        // <string,variant> mainContext = Block.Top();

0x2337  0x1A 0x0F       PUSHIB 0x0F
0x2339  0x1A 0x14       PUSHIB 0x14
0x233B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x233D  0x34 0x4D 0x01  CALLW 0x014D   // Block.Top
0x2340  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // < <string> > empty;                                  Compile.hs:1852

0x2342  0x1A 0x19       PUSHIB 0x19
0x2344  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // mainContext["locals"] = empty;                       Compile.hs:1853

0x2346  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2348  0x37 0x69 0x01  PUSHIW 0x0169
0x234B  0x1A 0x06       PUSHIB 0x06
0x234D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x234F  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2351  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // mainContext["arguments"] = empty;                    Compile.hs:1854

0x2353  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2355  0x1A 0x5E       PUSHIB 0x5E
0x2357  0x1A 0x09       PUSHIB 0x09
0x2359  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x235B  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x235D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // Block.ReplaceTop(mainContext);                       Compile.hs:1855

0x235F  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2361  0x34 0x50 0x01  CALLW 0x0150   // Block.ReplaceTop

                        // }                                                    Compile.hs:1856

0x2364  0x28 0x04       DECSP 0x04

                        // <byte> codeStream = CodeStream.CurrentStream;

0x2366  0x1A 0x03       PUSHIB 0x03
0x2368  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x236A  0x34 0x26 0x01  CALLW 0x0126   // CodeStream.CurrentStream_Get
0x236D  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // <string,string> debugInfo = CodeStream.DebugInfo;

0x236F  0x1A 0x0F       PUSHIB 0x0F
0x2371  0x1A 0x0F       PUSHIB 0x0F
0x2373  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2375  0x34 0x27 0x01  CALLW 0x0127   // CodeStream.DebugInfo_Get
0x2378  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // Symbols.SetCodeStream(iCurrentOverload, codeStream, debugInfo);

0x237A  0x20 0x00       PUSHGLOBALB 0x00
0x237C  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x237F  0x2C 0xB0       CALLB 0xB0     // Symbols.SetCodeStream

                        // CodeStream.ClearDebugInfo();                         Compile.hs:1861

0x2381  0x34 0x28 0x01  CALLW 0x0128   // CodeStream.ClearDebugInfo

                        // Symbols.OverloadWasCompiled(iCurrentOverload);

0x2384  0x20 0x00       PUSHGLOBALB 0x00
0x2386  0x2C 0xCA       CALLB 0xCA     // Symbols.OverloadWasCompiled

                        // if (!Symbols.OverloadNextToCompile(ref iCurrentOverload))

0x2388  0x44            PUSHI0
0x2389  0x47            PUSHGP
0x238A  0x00            ADD
0x238B  0x2C 0xCB       CALLB 0xCB     // Symbols.OverloadNextToCompile
0x238D  0x2F 0x08       JNZB 0x2395 (+8)

                        // success = true; // all done                          Compile.hs:1867

0x238F  0x45            PUSHI1
0x2390  0x4D            POPLOCALB02

                        // break;                                               Compile.hs:1868

0x2391  0x28 0x0E       DECSP 0x0E
0x2393  0x30 0x0A       JB 0x239D (+10)

                        // isMain = false;                                      Compile.hs:1870

0x2395  0x44            PUSHI0
0x2396  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    Compile.hs:1871

0x2398  0x28 0x0E       DECSP 0x0E
0x239A  0x33 0xFD 0xFD  JW 0x2197 (-515)

                        // return success;                                      Compile.hs:1873

0x239D  0x4F            PUSHLOCALB02
0x239E  0x2B 0x06       RETRETB 0x06


// Compile.hs:1877
// ####  Compile.initializeGlobals(..)  ####                                    0x0015

0x23A0  0x49            ENTER

                        // <string,variant> top = Block.Top();                  Compile.hs:1878

0x23A1  0x1A 0x0F       PUSHIB 0x0F
0x23A3  0x1A 0x14       PUSHIB 0x14
0x23A5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x23A7  0x34 0x4D 0x01  CALLW 0x014D   // Block.Top
0x23AA  0x5D            POPCOPYLOCALB00

                        // < <string> > globals = top["globals"];               Compile.hs:1879

0x23AB  0x1A 0x19       PUSHIB 0x19
0x23AD  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x23AF  0x4E            PUSHLOCALB00
0x23B0  0x37 0x6F 0x01  PUSHIW 0x016F
0x23B3  0x1A 0x07       PUSHIB 0x07
0x23B5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x23B7  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x23B9  0x5E            POPCOPYLOCALB02

                        // CodeStream.New();                                    Compile.hs:1891

0x23BA  0x34 0x23 0x01  CALLW 0x0123   // CodeStream.New

                        // uint gCount = Symbols.GetGlobalCount();              Compile.hs:1893

0x23BD  0x44            PUSHI0
0x23BE  0x2C 0x9F       CALLB 0x9F     // Symbols.GetGlobalCount
0x23C0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (uint gIndex = 0; gIndex < gCount; gIndex++)

0x23C2  0x44            PUSHI0
0x23C3  0x56 0x06 0x04  PUSHLOCALBB 0x0406
0x23C6  0x08            LT
0x23C7  0x31 0xC0 0x00  JZW 0x2487 (+192)

                        // <string> global;                                     Compile.hs:1896

0x23CA  0x1A 0x0F       PUSHIB 0x0F
0x23CC  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // string variableType = Symbols.GetGlobalType(gIndex);

0x23CE  0x24 0x02       SYSCALL0 0x02  // String.New
0x23D0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23D2  0x2C 0xA1       CALLB 0xA1     // Symbols.GetGlobalType
0x23D4  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string identifier   = Symbols.GetGlobalName(gIndex);

0x23D6  0x24 0x02       SYSCALL0 0x02  // String.New
0x23D8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23DA  0x2C 0xA0       CALLB 0xA0     // Symbols.GetGlobalName
0x23DC  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // global.Append(variableType);                         Compile.hs:1899

0x23DE  0x56 0x08 0x0A  PUSHLOCALBB 0x0A08
0x23E1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // global.Append(identifier);                           Compile.hs:1900

0x23E3  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x23E6  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // globals.Append(global);                              Compile.hs:1901

0x23E8  0x4F            PUSHLOCALB02
0x23E9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x23EB  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // InitializeVariable(variableType);                    Compile.hs:1905

0x23ED  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x23EF  0x2C 0xF9       CALLB 0xF9     // Expression.InitializeVariable

                        // <string, string> startToken = Symbols.GetGlobalStart(gIndex);

0x23F1  0x1A 0x0F       PUSHIB 0x0F
0x23F3  0x1A 0x0F       PUSHIB 0x0F
0x23F5  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x23F7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x23F9  0x2C 0xA3       CALLB 0xA3     // Symbols.GetGlobalStart
0x23FB  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (startToken.Count > 0)                            Compile.hs:1909

0x23FD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x23FF  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x2401  0x44            PUSHI0
0x2402  0x07            GT
0x2403  0x31 0x7D 0x00  JZW 0x2480 (+125)

                        // Scanner.Reset(startToken);                           Compile.hs:1912

0x2406  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2408  0x2C 0x5E       CALLB 0x5E     // Scanner.Reset

                        // Parser.Reset();                                      Compile.hs:1913

0x240A  0x2C 0x78       CALLB 0x78     // Parser.Reset

                        // Directives.New();                                    Compile.hs:1914

0x240C  0x34 0x0D 0x01  CALLW 0x010D   // Directives.New

                        // Parser.Advance(); // load first token                Compile.hs:1916

0x240F  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string actualType = CompileExpression(variableType);

0x2411  0x24 0x02       SYSCALL0 0x02  // String.New
0x2413  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2415  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2418  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Parser.HadError)                                 Compile.hs:1919

0x241A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x241C  0x2E 0x0F       JZB 0x242B (+15)

                        // Parser.Error("failure compiling global initializer");

0x241E  0x37 0x76 0x01  PUSHIW 0x0176
0x2421  0x1A 0x24       PUSHIB 0x24
0x2423  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2425  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:1922

0x2427  0x28 0x0C       DECSP 0x0C
0x2429  0x30 0x60       JB 0x2489 (+96)

                        // if (actualType != variableType)                      Compile.hs:1924

0x242B  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x242E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2430  0x2E 0x2E       JZB 0x245E (+46)

                        // if (Types.AutomaticUpCastTop(actualType, variableType))

0x2432  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0x2435  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x2437  0x2F 0x27       JNZB 0x245E (+39)

                        // Parser.Error("type mismatch for initializer, (was '" + actualType + "', expected '"+ variableType +"')");

0x2439  0x37 0x9A 0x01  PUSHIW 0x019A
0x243C  0x1A 0x25       PUSHIB 0x25
0x243E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2440  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2442  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2444  0x37 0xBF 0x01  PUSHIW 0x01BF
0x2447  0x1A 0x0D       PUSHIB 0x0D
0x2449  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x244B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x244D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x244F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2451  0x37 0x27 0x29  PUSHIW 0x2927
0x2454  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2456  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2458  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:1933

0x245A  0x28 0x0C       DECSP 0x0C
0x245C  0x30 0x2D       JB 0x2489 (+45)

                        // uint globalAddress = Symbols.GetGlobalAddress(identifier);

0x245E  0x44            PUSHI0
0x245F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2461  0x2C 0x9E       CALLB 0x9E     // Symbols.GetGlobalAddress
0x2463  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // if (globalAddress < 256)                             Compile.hs:1937

0x2465  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2467  0x55 0x00 0x01  PUSHIWLT 0x0100
0x246A  0x2E 0x0D       JZB 0x2477 (+13)

                        // CodeStream.AddInstruction(Instruction.POPGLOBALB, byte(globalAddress));

0x246C  0x1A 0x1F       PUSHIB 0x1F
0x246E  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2470  0x51 0x03       CAST 0x03
0x2472  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1940

0x2475  0x30 0x09       JB 0x247E (+9)

                        // CodeStream.AddInstruction(Instruction.POPGLOBALW, globalAddress);

0x2477  0x1A 0x3C       PUSHIB 0x3C
0x2479  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x247B  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1945

0x247E  0x28 0x04       DECSP 0x04

                        // }                                                    Compile.hs:1947

0x2480  0x28 0x08       DECSP 0x08
0x2482  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x2484  0x33 0x3F 0xFF  JW 0x23C3 (-193)
0x2487  0x28 0x02       DECSP 0x02

                        // top["globals"] = globals;                            Compile.hs:1948

0x2489  0x4E            PUSHLOCALB00
0x248A  0x37 0x6F 0x01  PUSHIW 0x016F
0x248D  0x1A 0x07       PUSHIB 0x07
0x248F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2491  0x4F            PUSHLOCALB02
0x2492  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // Block.ReplaceTop(top);                               Compile.hs:1949

0x2494  0x4E            PUSHLOCALB00
0x2495  0x34 0x50 0x01  CALLW 0x0150   // Block.ReplaceTop

                        // <byte> code = CodeStream.CurrentStream;              Compile.hs:1951

0x2498  0x1A 0x03       PUSHIB 0x03
0x249A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x249C  0x34 0x26 0x01  CALLW 0x0126   // CodeStream.CurrentStream_Get
0x249F  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // return code;                                         Compile.hs:1952

0x24A1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x24A3  0x2B 0x08       RETRETB 0x08


// Compile.hs:1637
// ####  Compile.compileBlock(..)  ####                                         0x0013

0x24A5  0x49            ENTER

                        // if (!Parser.Check(HopperToken.LBrace))               Compile.hs:1640

0x24A6  0x1A 0x12       PUSHIB 0x12
0x24A8  0x2C 0x83       CALLB 0x83     // Parser.Check
0x24AA  0x2F 0x07       JNZB 0x24B1 (+7)

                        // Parser.ErrorAtCurrent('{');                          Compile.hs:1642

0x24AC  0x1A 0x7B       PUSHIB 0x7B
0x24AE  0x2C 0x7D       CALLB 0x7D     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1643

0x24B0  0x4A            RET0

                        // Parser.Advance(); // {                               Compile.hs:1646

0x24B1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (Parser.HadError)                                 Compile.hs:1651

0x24B3  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x24B5  0x2E 0x03       JZB 0x24B8 (+3)

                        // break;                                               Compile.hs:1653

0x24B7  0x4A            RET0

                        // if (Parser.Check(HopperToken.RBrace))                Compile.hs:1655

0x24B8  0x1A 0x13       PUSHIB 0x13
0x24BA  0x2C 0x83       CALLB 0x83     // Parser.Check
0x24BC  0x2E 0x05       JZB 0x24C1 (+5)

                        // Advance(); // }                                      Compile.hs:1657

0x24BE  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break; // end of method                              Compile.hs:1659

0x24C0  0x4A            RET0

                        // else if (Parser.Check(HopperToken.Directive))

0x24C1  0x1A 0x06       PUSHIB 0x06
0x24C3  0x2C 0x83       CALLB 0x83     // Parser.Check
0x24C5  0x2E 0x08       JZB 0x24CD (+8)

                        // Directives.Directive();                              Compile.hs:1664

0x24C7  0x34 0x13 0x01  CALLW 0x0113   // Directives.Directive

                        // }                                                    Compile.hs:1665

0x24CA  0x33 0xE9 0xFF  JW 0x24B3 (-23)

                        // bool allDefined = Directives.IsAllDefined();

0x24CD  0x44            PUSHI0
0x24CE  0x34 0x0F 0x01  CALLW 0x010F   // Directives.IsAllDefined
0x24D1  0x4C            POPLOCALB00

                        // if (!allDefined)                                     Compile.hs:1670

0x24D2  0x4E            PUSHLOCALB00
0x24D3  0x2F 0x12       JNZB 0x24E5 (+18)

                        // if (Parser.Check(HopperToken.Directive))             Compile.hs:1674

0x24D5  0x1A 0x06       PUSHIB 0x06
0x24D7  0x2C 0x83       CALLB 0x83     // Parser.Check
0x24D9  0x2F 0x79       JNZB 0x2552 (+121)

                        // if (Parser.Check(HopperToken.EOF))                   Compile.hs:1678

0x24DB  0x1A 0x2D       PUSHIB 0x2D
0x24DD  0x2C 0x83       CALLB 0x83     // Parser.Check
0x24DF  0x2F 0x73       JNZB 0x2552 (+115)

                        // Parser.Advance(); // gobble gobble                   Compile.hs:1682

0x24E1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    Compile.hs:1683

0x24E3  0x30 0xF2       JB 0x24D5 (-14)

                        // <string,string> currentToken = Parser.CurrentToken;

0x24E5  0x1A 0x0F       PUSHIB 0x0F
0x24E7  0x1A 0x0F       PUSHIB 0x0F
0x24E9  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x24EB  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x24ED  0x5E            POPCOPYLOCALB02

                        // HopperToken tokenType = Token.GetType(currentToken);

0x24EE  0x44            PUSHI0
0x24EF  0x4F            PUSHLOCALB02
0x24F0  0x2C 0x49       CALLB 0x49     // Token.GetType
0x24F2  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (   (tokenType == HopperToken.Keyword)           // simple type, "if", "while", ...

0x24F4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x24F6  0x1A 0x05       PUSHIB 0x05
0x24F8  0x05            EQ
0x24F9  0x27 0x00       DUP 0x00
0x24FB  0x2F 0x1C       JNZB 0x2517 (+28)
0x24FD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x24FF  0x1A 0x16       PUSHIB 0x16
0x2501  0x05            EQ
0x2502  0x0B            BOOLOR
0x2503  0x27 0x00       DUP 0x00
0x2505  0x2F 0x12       JNZB 0x2517 (+18)
0x2507  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2509  0x1A 0x03       PUSHIB 0x03
0x250B  0x05            EQ
0x250C  0x0B            BOOLOR
0x250D  0x27 0x00       DUP 0x00
0x250F  0x2F 0x08       JNZB 0x2517 (+8)
0x2511  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2513  0x1A 0x02       PUSHIB 0x02
0x2515  0x05            EQ
0x2516  0x0B            BOOLOR
0x2517  0x2E 0x18       JZB 0x252F (+24)

                        // if (!compileStatement(false, true))                  Compile.hs:1695

0x2519  0x44            PUSHI0
0x251A  0x45            PUSHI1
0x251B  0x2C 0x12       CALLB 0x12     // Compile.compileStatement
0x251D  0x2F 0x33       JNZB 0x2550 (+51)

                        // if (!Parser.HadError)                                Compile.hs:1697

0x251F  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2521  0x2F 0x0B       JNZB 0x252C (+11)

                        // Parser.ErrorAtCurrent("bad statement?");             Compile.hs:1699

0x2523  0x37 0xCC 0x01  PUSHIW 0x01CC
0x2526  0x1A 0x0E       PUSHIB 0x0E
0x2528  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x252A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1701

0x252C  0x28 0x06       DECSP 0x06
0x252E  0x4A            RET0

                        // else if (tokenType == HopperToken.LBrace)            Compile.hs:1704

0x252F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2531  0x1A 0x12       PUSHIB 0x12
0x2533  0x05            EQ
0x2534  0x2E 0x0F       JZB 0x2543 (+15)

                        // Parser.ErrorAt(currentToken, "unexpected '{'");

0x2536  0x4F            PUSHLOCALB02
0x2537  0x37 0xDA 0x01  PUSHIW 0x01DA
0x253A  0x1A 0x0E       PUSHIB 0x0E
0x253C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x253E  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1707

0x2540  0x28 0x06       DECSP 0x06
0x2542  0x4A            RET0

                        // Parser.ErrorAt(currentToken, "keyword or identifier expected");

0x2543  0x4F            PUSHLOCALB02
0x2544  0x37 0xE8 0x01  PUSHIW 0x01E8
0x2547  0x1A 0x1E       PUSHIB 0x1E
0x2549  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x254B  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1712

0x254D  0x28 0x06       DECSP 0x06
0x254F  0x4A            RET0

                        // }                                                    Compile.hs:1714

0x2550  0x28 0x04       DECSP 0x04

                        // }                                                    Compile.hs:1715

0x2552  0x28 0x02       DECSP 0x02

                        // } // loop                                            Compile.hs:1716

0x2554  0x33 0x5F 0xFF  JW 0x24B3 (-161)


// Compile.hs:1330
// ####  Compile.compileStatement(..)  ####                                     0x0012


                        // bool success = false;                                Compile.hs:1331

0x2557  0x5F 0x01       ENTERB 0x01

                        // <string,string> currentToken = Parser.CurrentToken;

0x2559  0x1A 0x0F       PUSHIB 0x0F
0x255B  0x1A 0x0F       PUSHIB 0x0F
0x255D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x255F  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x2561  0x5E            POPCOPYLOCALB02

                        // string tokenString = currentToken["lexeme"];

0x2562  0x24 0x02       SYSCALL0 0x02  // String.New
0x2564  0x4F            PUSHLOCALB02
0x2565  0x37 0x06 0x02  PUSHIW 0x0206
0x2568  0x1A 0x06       PUSHIB 0x06
0x256A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x256C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x256E  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // HopperToken tokenType = Token.GetType(currentToken);

0x2570  0x44            PUSHI0
0x2571  0x4F            PUSHLOCALB02
0x2572  0x2C 0x49       CALLB 0x49     // Token.GetType
0x2574  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (debugInfoInsert)                                 Compile.hs:1335

0x2576  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x2578  0x2E 0x06       JZB 0x257E (+6)

                        // CodeStream.InsertDebugInfo(false);                   Compile.hs:1337

0x257A  0x44            PUSHI0
0x257B  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // switch (tokenType)                                   Compile.hs:1340

0x257E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)

                        // case HopperToken.Keyword:                            Compile.hs:1342

0x2580  0x1A 0x05       PUSHIB 0x05
0x2582  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2584  0x05            EQ
0x2585  0x31 0xBE 0x00  JZW 0x2643 (+190)

                        // if (tokenString == "if")                             Compile.hs:1344

0x2588  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x258A  0x37 0x69 0x66  PUSHIW 0x6669
0x258D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x258F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2591  0x2F 0x0B       JNZB 0x259C (+11)

                        // success = compileIfStatement();                      Compile.hs:1346

0x2593  0x2C 0x02       CALLB 0x02     // Compile.compileIfStatement
0x2595  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1347

0x2596  0x45            PUSHI1
0x2597  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1348

0x2599  0x33 0x23 0x04  JW 0x29BC (+1059)

                        // else if (tokenString == "return")                    Compile.hs:1349

0x259C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x259E  0x37 0x0D 0x01  PUSHIW 0x010D
0x25A1  0x1A 0x06       PUSHIB 0x06
0x25A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25A5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x25A7  0x2F 0x08       JNZB 0x25AF (+8)

                        // success = compileReturn();                           Compile.hs:1351

0x25A9  0x2C 0x03       CALLB 0x03     // Compile.compileReturn
0x25AB  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1352

0x25AC  0x33 0x10 0x04  JW 0x29BC (+1040)

                        // else if (tokenString == "break")                     Compile.hs:1353

0x25AF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x25B1  0x37 0x0C 0x02  PUSHIW 0x020C
0x25B4  0x1A 0x05       PUSHIB 0x05
0x25B6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25B8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x25BA  0x2F 0x08       JNZB 0x25C2 (+8)

                        // success = compileBreak();                            Compile.hs:1355

0x25BC  0x2C 0x04       CALLB 0x04     // Compile.compileBreak
0x25BE  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1356

0x25BF  0x33 0xFD 0x03  JW 0x29BC (+1021)

                        // else if (tokenString == "continue")                  Compile.hs:1357

0x25C2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x25C4  0x37 0x11 0x02  PUSHIW 0x0211
0x25C7  0x1A 0x08       PUSHIB 0x08
0x25C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25CB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x25CD  0x2F 0x08       JNZB 0x25D5 (+8)

                        // success = compileContinue();                         Compile.hs:1359

0x25CF  0x2C 0x05       CALLB 0x05     // Compile.compileContinue
0x25D1  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1360

0x25D2  0x33 0xEA 0x03  JW 0x29BC (+1002)

                        // else if (tokenString == "while")                     Compile.hs:1361

0x25D5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x25D7  0x37 0x19 0x02  PUSHIW 0x0219
0x25DA  0x1A 0x05       PUSHIB 0x05
0x25DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25DE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x25E0  0x2F 0x0A       JNZB 0x25EA (+10)

                        // success = compileWhile();                            Compile.hs:1363

0x25E2  0x2C 0x06       CALLB 0x06     // Compile.compileWhile
0x25E4  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1364

0x25E5  0x45            PUSHI1
0x25E6  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1365

0x25E8  0x30 0x58       JB 0x2640 (+88)

                        // else if (tokenString == "loop")                      Compile.hs:1366

0x25EA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x25EC  0x37 0x1E 0x02  PUSHIW 0x021E
0x25EF  0x1A 0x04       PUSHIB 0x04
0x25F1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x25F3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x25F5  0x2F 0x0A       JNZB 0x25FF (+10)

                        // success = compileLoop();                             Compile.hs:1368

0x25F7  0x2C 0x07       CALLB 0x07     // Compile.compileLoop
0x25F9  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1369

0x25FA  0x45            PUSHI1
0x25FB  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1370

0x25FD  0x30 0x43       JB 0x2640 (+67)

                        // else if (tokenString == "for")                       Compile.hs:1371

0x25FF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2601  0x1A 0x68       PUSHIB 0x68
0x2603  0x1A 0x03       PUSHIB 0x03
0x2605  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2607  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2609  0x2F 0x0A       JNZB 0x2613 (+10)

                        // success = compileFor();                              Compile.hs:1373

0x260B  0x2C 0x08       CALLB 0x08     // Compile.compileFor
0x260D  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1374

0x260E  0x45            PUSHI1
0x260F  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1375

0x2611  0x30 0x2F       JB 0x2640 (+47)

                        // else if (tokenString == "foreach")                   Compile.hs:1376

0x2613  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2615  0x37 0x22 0x02  PUSHIW 0x0222
0x2618  0x1A 0x07       PUSHIB 0x07
0x261A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x261C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x261E  0x2F 0x0A       JNZB 0x2628 (+10)

                        // success = compileForEach();                          Compile.hs:1378

0x2620  0x2C 0x0D       CALLB 0x0D     // Compile.compileForEach
0x2622  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1379

0x2623  0x45            PUSHI1
0x2624  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1380

0x2626  0x30 0x1A       JB 0x2640 (+26)

                        // else if (tokenString == "switch")                    Compile.hs:1381

0x2628  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x262A  0x37 0x29 0x02  PUSHIW 0x0229
0x262D  0x1A 0x06       PUSHIB 0x06
0x262F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2631  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2633  0x2F 0x0A       JNZB 0x263D (+10)

                        // success = compileSwitch();                           Compile.hs:1383

0x2635  0x2C 0x0E       CALLB 0x0E     // Compile.compileSwitch
0x2637  0x4C            POPLOCALB00

                        // noSemiColon = true;                                  Compile.hs:1384

0x2638  0x45            PUSHI1
0x2639  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    Compile.hs:1385

0x263B  0x30 0x05       JB 0x2640 (+5)

                        // success = compileLocalDeclaration();                 Compile.hs:1389

0x263D  0x2C 0x11       CALLB 0x11     // Compile.compileLocalDeclaration
0x263F  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1391

0x2640  0x33 0x7C 0x03  JW 0x29BC (+892)

                        // case HopperToken.LT:                                 Compile.hs:1392

0x2643  0x1A 0x16       PUSHIB 0x16
0x2645  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2647  0x05            EQ
0x2648  0x2E 0x08       JZB 0x2650 (+8)

                        // success = compileLocalDeclaration();                 Compile.hs:1395

0x264A  0x2C 0x11       CALLB 0x11     // Compile.compileLocalDeclaration
0x264C  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1396

0x264D  0x33 0x6F 0x03  JW 0x29BC (+879)

                        // if ((tokenType == HopperToken.Identifier) || (tokenType == HopperToken.DottedIdentifier))

0x2650  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2652  0x1A 0x03       PUSHIB 0x03
0x2654  0x05            EQ
0x2655  0x27 0x00       DUP 0x00
0x2657  0x2F 0x08       JNZB 0x265F (+8)
0x2659  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x265B  0x1A 0x02       PUSHIB 0x02
0x265D  0x05            EQ
0x265E  0x0B            BOOLOR
0x265F  0x31 0x5D 0x03  JZW 0x29BC (+861)

                        // bool isDotted = (tokenType == HopperToken.DottedIdentifier);

0x2662  0x44            PUSHI0
0x2663  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2665  0x1A 0x02       PUSHIB 0x02
0x2667  0x05            EQ
0x2668  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // <string,string> nextToken = Parser.Peek();           Compile.hs:1402

0x266A  0x1A 0x0F       PUSHIB 0x0F
0x266C  0x1A 0x0F       PUSHIB 0x0F
0x266E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2670  0x2C 0x85       CALLB 0x85     // Parser.Peek
0x2672  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // HopperToken nextTokenType = Token.GetType(nextToken);

0x2674  0x44            PUSHI0
0x2675  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x2677  0x2C 0x49       CALLB 0x49     // Token.GetType
0x2679  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (Types.IsEnum(tokenString) || Types.IsFlags(tokenString))

0x267B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x267D  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x267F  0x27 0x00       DUP 0x00
0x2681  0x2F 0x07       JNZB 0x2688 (+7)
0x2683  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2685  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x2687  0x0B            BOOLOR
0x2688  0x2E 0x08       JZB 0x2690 (+8)

                        // success = compileLocalDeclaration();                 Compile.hs:1406

0x268A  0x2C 0x11       CALLB 0x11     // Compile.compileLocalDeclaration
0x268C  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1407

0x268D  0x33 0x2D 0x03  JW 0x29BA (+813)

                        // else if (nextTokenType == HopperToken.Identifier)

0x2690  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2692  0x1A 0x03       PUSHIB 0x03
0x2694  0x05            EQ
0x2695  0x2E 0x08       JZB 0x269D (+8)

                        // success = compileLocalDeclaration();                 Compile.hs:1410

0x2697  0x2C 0x11       CALLB 0x11     // Compile.compileLocalDeclaration
0x2699  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1411

0x269A  0x33 0x20 0x03  JW 0x29BA (+800)

                        // Advance();                                           Compile.hs:1414

0x269D  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // <string,string> idToken   = Parser.PreviousToken;

0x269F  0x1A 0x0F       PUSHIB 0x0F
0x26A1  0x1A 0x0F       PUSHIB 0x0F
0x26A3  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x26A5  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0x26A7  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // tokenString = idToken["lexeme"];                     Compile.hs:1416

0x26A9  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x26AB  0x37 0x06 0x02  PUSHIW 0x0206
0x26AE  0x1A 0x06       PUSHIB 0x06
0x26B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x26B2  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x26B4  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // nextToken = Parser.CurrentToken;                     Compile.hs:1417

0x26B6  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x26B8  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // tokenType = Token.GetType(nextToken);                Compile.hs:1418

0x26BA  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x26BC  0x2C 0x49       CALLB 0x49     // Token.GetType
0x26BE  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (tokenType == HopperToken.Assign)                 Compile.hs:1419

0x26C0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x26C2  0x1A 0x2C       PUSHIB 0x2C
0x26C4  0x05            EQ
0x26C5  0x2E 0x0B       JZB 0x26D0 (+11)

                        // success = compileAssignment(tokenString, false);

0x26C7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x26C9  0x44            PUSHI0
0x26CA  0x2C 0x10       CALLB 0x10     // Compile.compileAssignment
0x26CC  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1423

0x26CD  0x33 0xEB 0x02  JW 0x29B8 (+747)

                        // else if (tokenType == HopperToken.LBracket)

0x26D0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x26D2  0x1A 0x14       PUSHIB 0x14
0x26D4  0x05            EQ
0x26D5  0x31 0x8C 0x02  JZW 0x2961 (+652)

                        // Advance(); // [                                      Compile.hs:1427

0x26D8  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string collectionVariable = tokenString;             Compile.hs:1430

0x26DA  0x24 0x02       SYSCALL0 0x02  // String.New
0x26DC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x26DE  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // string qualifiedName;                                Compile.hs:1431

0x26E0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string collectionType = Types.GetTypeString(collectionVariable, true, ref qualifiedName);

0x26E2  0x24 0x02       SYSCALL0 0x02  // String.New
0x26E4  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x26E6  0x45            PUSHI1
0x26E7  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0x26E9  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x26EB  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // if (Parser.HadError)                                 Compile.hs:1433

0x26ED  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x26EF  0x2E 0x07       JZB 0x26F6 (+7)

                        // break;                                               Compile.hs:1435

0x26F1  0x28 0x06       DECSP 0x06
0x26F3  0x33 0xC5 0x02  JW 0x29B8 (+709)

                        // bool isArray = false;                                Compile.hs:1437

0x26F6  0x44            PUSHI0

                        // bool isList = true;                                  Compile.hs:1438

0x26F7  0x44            PUSHI0
0x26F8  0x45            PUSHI1
0x26F9  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // bool isDictionary = false;                           Compile.hs:1439

0x26FB  0x44            PUSHI0

                        // if (Types.IsArray(collectionType))                   Compile.hs:1440

0x26FC  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x26FE  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x2700  0x2E 0x64       JZB 0x2764 (+100)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0x2702  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x2704  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string indexType = CompileExpression("uint");

0x2707  0x24 0x02       SYSCALL0 0x02  // String.New
0x2709  0x37 0x2F 0x02  PUSHIW 0x022F
0x270C  0x1A 0x04       PUSHIB 0x04
0x270E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2710  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2713  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (Parser.HadError)                                 Compile.hs:1447

0x2715  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2717  0x2E 0x07       JZB 0x271E (+7)

                        // break;                                               Compile.hs:1449

0x2719  0x28 0x0E       DECSP 0x0E
0x271B  0x33 0x9D 0x02  JW 0x29B8 (+669)

                        // if (indexType != "uint")                             Compile.hs:1452

0x271E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2720  0x37 0x2F 0x02  PUSHIW 0x022F
0x2723  0x1A 0x04       PUSHIB 0x04
0x2725  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2727  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2729  0x2E 0x18       JZB 0x2741 (+24)

                        // if (Types.AutomaticUpCastTop(indexType, "uint"))

0x272B  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x272D  0x37 0x2F 0x02  PUSHIW 0x022F
0x2730  0x1A 0x04       PUSHIB 0x04
0x2732  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2734  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x2736  0x2E 0x0B       JZB 0x2741 (+11)

                        // indexType = "uint";                                  Compile.hs:1456

0x2738  0x37 0x2F 0x02  PUSHIW 0x022F
0x273B  0x1A 0x04       PUSHIB 0x04
0x273D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x273F  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (indexType != "uint")                             Compile.hs:1459

0x2741  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2743  0x37 0x2F 0x02  PUSHIW 0x022F
0x2746  0x1A 0x04       PUSHIB 0x04
0x2748  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x274A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x274C  0x2E 0x10       JZB 0x275C (+16)

                        // Parser.ErrorAtCurrent("array index type invalid");

0x274E  0x37 0x33 0x02  PUSHIW 0x0233
0x2751  0x1A 0x18       PUSHIB 0x18
0x2753  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2755  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1462

0x2757  0x28 0x0E       DECSP 0x0E
0x2759  0x33 0x5F 0x02  JW 0x29B8 (+607)

                        // isArray = true;                                      Compile.hs:1464

0x275C  0x45            PUSHI1
0x275D  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // }                                                    Compile.hs:1465

0x275F  0x28 0x02       DECSP 0x02
0x2761  0x33 0x11 0x01  JW 0x2872 (+273)

                        // else if (Types.IsList(collectionType))               Compile.hs:1466

0x2764  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x2766  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x2768  0x2E 0x64       JZB 0x27CC (+100)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0x276A  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x276C  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string indexType = CompileExpression("uint");

0x276F  0x24 0x02       SYSCALL0 0x02  // String.New
0x2771  0x37 0x2F 0x02  PUSHIW 0x022F
0x2774  0x1A 0x04       PUSHIB 0x04
0x2776  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2778  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x277B  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (Parser.HadError)                                 Compile.hs:1473

0x277D  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x277F  0x2E 0x07       JZB 0x2786 (+7)

                        // break;                                               Compile.hs:1475

0x2781  0x28 0x0E       DECSP 0x0E
0x2783  0x33 0x35 0x02  JW 0x29B8 (+565)

                        // if (indexType != "uint")                             Compile.hs:1478

0x2786  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2788  0x37 0x2F 0x02  PUSHIW 0x022F
0x278B  0x1A 0x04       PUSHIB 0x04
0x278D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x278F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2791  0x2E 0x18       JZB 0x27A9 (+24)

                        // if (Types.AutomaticUpCastTop(indexType, "uint"))

0x2793  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2795  0x37 0x2F 0x02  PUSHIW 0x022F
0x2798  0x1A 0x04       PUSHIB 0x04
0x279A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x279C  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x279E  0x2E 0x0B       JZB 0x27A9 (+11)

                        // indexType = "uint";                                  Compile.hs:1482

0x27A0  0x37 0x2F 0x02  PUSHIW 0x022F
0x27A3  0x1A 0x04       PUSHIB 0x04
0x27A5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27A7  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (indexType != "uint")                             Compile.hs:1485

0x27A9  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x27AB  0x37 0x2F 0x02  PUSHIW 0x022F
0x27AE  0x1A 0x04       PUSHIB 0x04
0x27B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27B2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x27B4  0x2E 0x10       JZB 0x27C4 (+16)

                        // Parser.ErrorAtCurrent("list index type invalid");

0x27B6  0x37 0x4B 0x02  PUSHIW 0x024B
0x27B9  0x1A 0x17       PUSHIB 0x17
0x27BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x27BD  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1488

0x27BF  0x28 0x0E       DECSP 0x0E
0x27C1  0x33 0xF7 0x01  JW 0x29B8 (+503)

                        // isList = true;                                       Compile.hs:1490

0x27C4  0x45            PUSHI1
0x27C5  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // break;                                               Compile.hs:1491

0x27C7  0x28 0x0E       DECSP 0x0E
0x27C9  0x33 0xEF 0x01  JW 0x29B8 (+495)

                        // else if (Types.IsDictionary(collectionType))

0x27CC  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x27CE  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x27D0  0x31 0x94 0x00  JZW 0x2864 (+148)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0x27D3  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x27D5  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string keyType = Types.GetKeyFromCollection(collectionType);

0x27D8  0x24 0x02       SYSCALL0 0x02  // String.New
0x27DA  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x27DC  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0x27DE  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // string actualType = CompileExpression(keyType);

0x27E0  0x24 0x02       SYSCALL0 0x02  // String.New
0x27E2  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x27E4  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x27E7  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (Parser.HadError)                                 Compile.hs:1503

0x27E9  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x27EB  0x2E 0x07       JZB 0x27F2 (+7)

                        // break;                                               Compile.hs:1505

0x27ED  0x28 0x10       DECSP 0x10
0x27EF  0x33 0xC9 0x01  JW 0x29B8 (+457)

                        // if (keyType != actualType)                           Compile.hs:1507

0x27F2  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0x27F5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x27F7  0x2E 0x66       JZB 0x285D (+102)

                        // if ((keyType == "string") && (actualType != "string"))

0x27F9  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x27FB  0x37 0x62 0x02  PUSHIW 0x0262
0x27FE  0x1A 0x06       PUSHIB 0x06
0x2800  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2802  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2804  0x44            PUSHI0
0x2805  0x05            EQ
0x2806  0x27 0x00       DUP 0x00
0x2808  0x2E 0x10       JZB 0x2818 (+16)
0x280A  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x280C  0x37 0x62 0x02  PUSHIW 0x0262
0x280F  0x1A 0x06       PUSHIB 0x06
0x2811  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2813  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2815  0x44            PUSHI0
0x2816  0x06            NE
0x2817  0x0C            BOOLAND
0x2818  0x2E 0x1B       JZB 0x2833 (+27)

                        // Parser.ErrorAtCurrent("dictionary key type should be 'string', (not '" + actualType +"')");

0x281A  0x37 0x68 0x02  PUSHIW 0x0268
0x281D  0x1A 0x2E       PUSHIB 0x2E
0x281F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2821  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x2823  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2825  0x37 0x27 0x29  PUSHIW 0x2927
0x2828  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x282A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x282C  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1512

0x282E  0x28 0x10       DECSP 0x10
0x2830  0x33 0x88 0x01  JW 0x29B8 (+392)

                        // if (Types.AutomaticUpCastTop(actualType, keyType))

0x2833  0x56 0x20 0x1E  PUSHLOCALBB 0x1E20
0x2836  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x2838  0x2E 0x06       JZB 0x283E (+6)

                        // actualType = keyType;                                Compile.hs:1516

0x283A  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x283C  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (keyType != actualType)                           Compile.hs:1518

0x283E  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0x2841  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2843  0x2E 0x1A       JZB 0x285D (+26)

                        // Parser.ErrorAtCurrent("dictionary key type should be '" + keyType + "'");

0x2845  0x37 0x68 0x02  PUSHIW 0x0268
0x2848  0x1A 0x1F       PUSHIB 0x1F
0x284A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x284C  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x284E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2850  0x1A 0x27       PUSHIB 0x27
0x2852  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2854  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2856  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1521

0x2858  0x28 0x10       DECSP 0x10
0x285A  0x33 0x5E 0x01  JW 0x29B8 (+350)

                        // isDictionary = true;                                 Compile.hs:1524

0x285D  0x45            PUSHI1
0x285E  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // }                                                    Compile.hs:1525

0x2860  0x28 0x04       DECSP 0x04
0x2862  0x30 0x10       JB 0x2872 (+16)

                        // Parser.ErrorAtCurrent("identifier not array, dictionary or list type");

0x2864  0x37 0x96 0x02  PUSHIW 0x0296
0x2867  0x1A 0x2D       PUSHIB 0x2D
0x2869  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x286B  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1529

0x286D  0x28 0x0C       DECSP 0x0C
0x286F  0x33 0x49 0x01  JW 0x29B8 (+329)

                        // Parser.Consume(HopperToken.RBracket, ']');           Compile.hs:1532

0x2872  0x1A 0x15       PUSHIB 0x15
0x2874  0x1A 0x5D       PUSHIB 0x5D
0x2876  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:1533

0x2878  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x287A  0x2E 0x07       JZB 0x2881 (+7)

                        // break;                                               Compile.hs:1535

0x287C  0x28 0x0C       DECSP 0x0C
0x287E  0x33 0x3A 0x01  JW 0x29B8 (+314)

                        // Parser.Consume(HopperToken.Assign, '=');             Compile.hs:1538

0x2881  0x1A 0x2C       PUSHIB 0x2C
0x2883  0x1A 0x3D       PUSHIB 0x3D
0x2885  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:1539

0x2887  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2889  0x2E 0x07       JZB 0x2890 (+7)

                        // break;                                               Compile.hs:1541

0x288B  0x28 0x0C       DECSP 0x0C
0x288D  0x33 0x2B 0x01  JW 0x29B8 (+299)

                        // string expressionType = CompileExpression(collectionType);

0x2890  0x24 0x02       SYSCALL0 0x02  // String.New
0x2892  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x2894  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2897  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // if (Parser.HadError)                                 Compile.hs:1546

0x2899  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x289B  0x2E 0x07       JZB 0x28A2 (+7)

                        // break;                                               Compile.hs:1548

0x289D  0x28 0x0E       DECSP 0x0E
0x289F  0x33 0x19 0x01  JW 0x29B8 (+281)

                        // string valueType = Types.GetValueFromCollection(collectionType);

0x28A2  0x24 0x02       SYSCALL0 0x02  // String.New
0x28A4  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x28A6  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x28A8  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (expressionType != valueType)                     Compile.hs:1551

0x28AA  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0x28AD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x28AF  0x2E 0x61       JZB 0x2910 (+97)

                        // if (valueType == "variant")                          Compile.hs:1553

0x28B1  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x28B3  0x37 0xC3 0x02  PUSHIW 0x02C3
0x28B6  0x1A 0x07       PUSHIB 0x07
0x28B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28BA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x28BC  0x2F 0x29       JNZB 0x28E5 (+41)

                        // if (Types.IsValueType(expressionType))               Compile.hs:1556

0x28BE  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x28C0  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x28C2  0x2E 0x4E       JZB 0x2910 (+78)

                        // byte vt = Types.ToByte(expressionType);              Compile.hs:1559

0x28C4  0x44            PUSHI0
0x28C5  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x28C7  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x28C9  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // CodeStream.AddInstructionPUSHI(vt);                  Compile.hs:1560

0x28CB  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x28CD  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Variant", "Box");

0x28D0  0x37 0xCA 0x02  PUSHIW 0x02CA
0x28D3  0x1A 0x07       PUSHIB 0x07
0x28D5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28D7  0x37 0xD1 0x02  PUSHIW 0x02D1
0x28DA  0x1A 0x03       PUSHIB 0x03
0x28DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28DE  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1562

0x28E1  0x28 0x02       DECSP 0x02

                        // }                                                    Compile.hs:1563

0x28E3  0x30 0x2D       JB 0x2910 (+45)

                        // else if (!Types.AutomaticUpCastTop(expressionType, valueType))

0x28E5  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0x28E8  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x28EA  0x2F 0x26       JNZB 0x2910 (+38)

                        // Parser.ErrorAtCurrent(                               Compile.hs:1566

0x28EC  0x37 0xD4 0x02  PUSHIW 0x02D4
0x28EF  0x1A 0x25       PUSHIB 0x25
0x28F1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28F3  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x28F5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x28F7  0x37 0xF9 0x02  PUSHIW 0x02F9
0x28FA  0x1A 0x08       PUSHIB 0x08
0x28FC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x28FE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2900  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x2902  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2904  0x1A 0x27       PUSHIB 0x27
0x2906  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2908  0x24 0x03       SYSCALL0 0x03  // String.Append
0x290A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1568

0x290C  0x28 0x10       DECSP 0x10
0x290E  0x30 0x51       JB 0x295F (+81)

                        // if (isArray)                                         Compile.hs:1571

0x2910  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x2912  0x2E 0x15       JZB 0x2927 (+21)

                        // CodeStream.AddInstructionSysCall0("Array", "SetItem");

0x2914  0x37 0x01 0x03  PUSHIW 0x0301
0x2917  0x1A 0x05       PUSHIB 0x05
0x2919  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x291B  0x37 0x06 0x03  PUSHIW 0x0306
0x291E  0x1A 0x07       PUSHIB 0x07
0x2920  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2922  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1574

0x2925  0x30 0x34       JB 0x2959 (+52)

                        // else if (isDictionary)                               Compile.hs:1575

0x2927  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x2929  0x2E 0x15       JZB 0x293E (+21)

                        // CodeStream.AddInstructionSysCall0("Dictionary", "Set");

0x292B  0x37 0x0D 0x03  PUSHIW 0x030D
0x292E  0x1A 0x0A       PUSHIB 0x0A
0x2930  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2932  0x37 0x06 0x03  PUSHIW 0x0306
0x2935  0x1A 0x03       PUSHIB 0x03
0x2937  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2939  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1578

0x293C  0x30 0x1D       JB 0x2959 (+29)

                        // else if (isList)                                     Compile.hs:1579

0x293E  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x2940  0x2E 0x15       JZB 0x2955 (+21)

                        // CodeStream.AddInstructionSysCall0("List", "SetItem");

0x2942  0x37 0x17 0x03  PUSHIW 0x0317
0x2945  0x1A 0x04       PUSHIB 0x04
0x2947  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2949  0x37 0x06 0x03  PUSHIW 0x0306
0x294C  0x1A 0x07       PUSHIB 0x07
0x294E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2950  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1582

0x2953  0x30 0x06       JB 0x2959 (+6)

                        // Die(0x0B); // what's this? string?                   Compile.hs:1585

0x2955  0x1A 0x0B       PUSHIB 0x0B
0x2957  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // success = true;                                      Compile.hs:1587

0x2959  0x45            PUSHI1
0x295A  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1588

0x295B  0x28 0x10       DECSP 0x10
0x295D  0x30 0x5B       JB 0x29B8 (+91)

                        // }                                                    Compile.hs:1590

0x295F  0x30 0x59       JB 0x29B8 (+89)

                        // else if ((tokenType == HopperToken.Increment) || (tokenType == HopperToken.Decrement))

0x2961  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2963  0x1A 0x2A       PUSHIB 0x2A
0x2965  0x05            EQ
0x2966  0x27 0x00       DUP 0x00
0x2968  0x2F 0x08       JNZB 0x2970 (+8)
0x296A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x296C  0x1A 0x2B       PUSHIB 0x2B
0x296E  0x05            EQ
0x296F  0x0B            BOOLOR
0x2970  0x2E 0x0A       JZB 0x297A (+10)

                        // success = compileIncrementDecrement(tokenString, tokenType);

0x2972  0x56 0x04 0x06  PUSHLOCALBB 0x0604
0x2975  0x2C 0x0F       CALLB 0x0F     // Compile.compileIncrementDecrement
0x2977  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1595

0x2978  0x30 0x40       JB 0x29B8 (+64)

                        // else if (tokenType == HopperToken.LParen)            Compile.hs:1596

0x297A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x297C  0x1A 0x10       PUSHIB 0x10
0x297E  0x05            EQ
0x297F  0x2E 0x2A       JZB 0x29A9 (+42)

                        // string returnType = CompileMethodCall(tokenString, "");

0x2981  0x24 0x02       SYSCALL0 0x02  // String.New
0x2983  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2985  0x24 0x02       SYSCALL0 0x02  // String.New
0x2987  0x2C 0xFC       CALLB 0xFC     // Expression.CompileMethodCall
0x2989  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (returnType != "void")                            Compile.hs:1600

0x298B  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x298D  0x37 0x09 0x01  PUSHIW 0x0109
0x2990  0x1A 0x04       PUSHIB 0x04
0x2992  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2994  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2996  0x2E 0x0D       JZB 0x29A3 (+13)

                        // Parser.ErrorAtCurrent("function cannot be used as method (return value must be consumed)");

0x2998  0x37 0x1B 0x03  PUSHIW 0x031B
0x299B  0x1A 0x41       PUSHIB 0x41
0x299D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x299F  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    Compile.hs:1603

0x29A1  0x30 0x04       JB 0x29A5 (+4)

                        // success = true;                                      Compile.hs:1606

0x29A3  0x45            PUSHI1
0x29A4  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:1608

0x29A5  0x28 0x02       DECSP 0x02
0x29A7  0x30 0x11       JB 0x29B8 (+17)

                        // if (!Parser.HadError)                                Compile.hs:1611

0x29A9  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x29AB  0x2F 0x0D       JNZB 0x29B8 (+13)

                        // Parser.ErrorAt(nextToken, "'(' or '=' expected");

0x29AD  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x29AF  0x37 0x5C 0x03  PUSHIW 0x035C
0x29B2  0x1A 0x13       PUSHIB 0x13
0x29B4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x29B6  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // }                                                    Compile.hs:1616

0x29B8  0x28 0x02       DECSP 0x02

                        // }                                                    Compile.hs:1617

0x29BA  0x28 0x06       DECSP 0x06

                        // } // switch (tokenType)                              Compile.hs:1623

0x29BC  0x28 0x02       DECSP 0x02

                        // if (success && !noSemiColon)                         Compile.hs:1624

0x29BE  0x4E            PUSHLOCALB00
0x29BF  0x27 0x00       DUP 0x00
0x29C1  0x2E 0x06       JZB 0x29C7 (+6)
0x29C3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x29C5  0x41            BOOLNOT
0x29C6  0x0C            BOOLAND
0x29C7  0x2E 0x12       JZB 0x29D9 (+18)

                        // if (!Parser.Check(HopperToken.SemiColon))            Compile.hs:1626

0x29C9  0x1A 0x0C       PUSHIB 0x0C
0x29CB  0x2C 0x83       CALLB 0x83     // Parser.Check
0x29CD  0x2F 0x06       JNZB 0x29D3 (+6)

                        // DumpPrevious();                                      Compile.hs:1628

0x29CF  0x2C 0x77       CALLB 0x77     // Parser.DumpPrevious

                        // DumpCurrent();                                       Compile.hs:1629

0x29D1  0x2C 0x76       CALLB 0x76     // Parser.DumpCurrent

                        // Parser.Consume(HopperToken.SemiColon, ';');

0x29D3  0x1A 0x0C       PUSHIB 0x0C
0x29D5  0x1A 0x3B       PUSHIB 0x3B
0x29D7  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // return success;                                      Compile.hs:1633

0x29D9  0x4E            PUSHLOCALB00
0x29DA  0x2B 0x0C       RETRETB 0x0C


// Compile.hs:56
// ####  Compile.compileIfStatement(..)  ####                                   0x0002


                        // bool success = false;                                Compile.hs:57

0x29DC  0x5F 0x02       ENTERB 0x02

                        // <uint> jumpEnds;                                     Compile.hs:59

0x29DE  0x1A 0x04       PUSHIB 0x04
0x29E0  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // CodeStream.InsertDebugInfo(false); // could be a 2nd 'else if'

0x29E2  0x44            PUSHI0
0x29E3  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // Parser.Advance(); // if                              Compile.hs:64

0x29E6  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LParen, '(');             Compile.hs:66

0x29E8  0x1A 0x10       PUSHIB 0x10
0x29EA  0x1A 0x28       PUSHIB 0x28
0x29EC  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:67

0x29EE  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x29F0  0x32 0xE6 0x00  JNZW 0x2AD6 (+230)

                        // string ifCheckType = CompileExpression("bool");

0x29F3  0x24 0x02       SYSCALL0 0x02  // String.New
0x29F5  0x37 0x6F 0x03  PUSHIW 0x036F
0x29F8  0x1A 0x04       PUSHIB 0x04
0x29FA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x29FC  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x29FF  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if ("bool" != ifCheckType)                           Compile.hs:73

0x2A01  0x37 0x6F 0x03  PUSHIW 0x036F
0x2A04  0x1A 0x04       PUSHIB 0x04
0x2A06  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2A08  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2A0A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2A0C  0x2E 0x1B       JZB 0x2A27 (+27)

                        // Parser.Error("boolean expression expected, (was '" + ifCheckType + "')");

0x2A0E  0x37 0x73 0x03  PUSHIW 0x0373
0x2A11  0x1A 0x23       PUSHIB 0x23
0x2A13  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2A15  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2A17  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2A19  0x37 0x27 0x29  PUSHIW 0x2927
0x2A1C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2A1E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2A20  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:76

0x2A22  0x28 0x02       DECSP 0x02
0x2A24  0x33 0xB2 0x00  JW 0x2AD6 (+178)

                        // Parser.Consume(HopperToken.RParen, ')');             Compile.hs:79

0x2A27  0x1A 0x11       PUSHIB 0x11
0x2A29  0x1A 0x29       PUSHIB 0x29
0x2A2B  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:80

0x2A2D  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2A2F  0x2E 0x07       JZB 0x2A36 (+7)

                        // break;                                               Compile.hs:82

0x2A31  0x28 0x02       DECSP 0x02
0x2A33  0x33 0xA3 0x00  JW 0x2AD6 (+163)

                        // uint jumpPast = CodeStream.NextAddress;              Compile.hs:86

0x2A36  0x44            PUSHI0
0x2A37  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2A3A  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x2A3C  0x1A 0x31       PUSHIB 0x31
0x2A3E  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // Block.PushBlock(false); // not a loop context

0x2A41  0x44            PUSHI0
0x2A42  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:90

0x2A45  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:91

0x2A47  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:92

0x2A4A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2A4C  0x2E 0x07       JZB 0x2A53 (+7)

                        // break;                                               Compile.hs:94

0x2A4E  0x28 0x04       DECSP 0x04
0x2A50  0x33 0x86 0x00  JW 0x2AD6 (+134)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:97

0x2A53  0x45            PUSHI1
0x2A54  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // uint jumpEnd = CodeStream.NextAddress;               Compile.hs:100

0x2A57  0x44            PUSHI0
0x2A58  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2A5B  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // jumpEnds.Append(jumpEnd);                            Compile.hs:101

0x2A5D  0x56 0x04 0x0A  PUSHLOCALBB 0x0A04
0x2A60  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // CodeStream.AddInstructionJump(Instruction.JW);

0x2A62  0x1A 0x33       PUSHIB 0x33
0x2A64  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // uint pastAddress = CodeStream.NextAddress;           Compile.hs:104

0x2A67  0x44            PUSHI0
0x2A68  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2A6B  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.PatchJump(jumpPast, pastAddress);

0x2A6D  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x2A70  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // if (Parser.Check(HopperToken.Keyword, "else"))

0x2A73  0x1A 0x05       PUSHIB 0x05
0x2A75  0x37 0x96 0x03  PUSHIW 0x0396
0x2A78  0x1A 0x04       PUSHIB 0x04
0x2A7A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2A7C  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2A7E  0x2E 0x1F       JZB 0x2A9D (+31)

                        // wasElse = true; // there was at least one else clause

0x2A80  0x45            PUSHI1
0x2A81  0x4D            POPLOCALB02

                        // Advance(); // else                                   Compile.hs:110

0x2A82  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (Parser.Check(HopperToken.Keyword, "if"))

0x2A84  0x1A 0x05       PUSHIB 0x05
0x2A86  0x37 0x69 0x66  PUSHIW 0x6669
0x2A89  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2A8B  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2A8D  0x2E 0x07       JZB 0x2A94 (+7)

                        // continue; // else if                                 Compile.hs:113

0x2A8F  0x28 0x08       DECSP 0x08
0x2A91  0x33 0x51 0xFF  JW 0x29E2 (-175)

                        // Block.PushBlock(false); // not a loop context

0x2A94  0x44            PUSHI0
0x2A95  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:117

0x2A98  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:118

0x2A9A  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (wasElse)                                         Compile.hs:121

0x2A9D  0x4F            PUSHLOCALB02
0x2A9E  0x2E 0x26       JZB 0x2AC4 (+38)

                        // foreach (var jump in jumpEnds)                       Compile.hs:123

0x2AA0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2AA2  0x44            PUSHI0
0x2AA3  0x44            PUSHI0
0x2AA4  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2AA6  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x2AA8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x2AAA  0x05            EQ
0x2AAB  0x2F 0x15       JNZB 0x2AC0 (+21)
0x2AAD  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x2AB0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x2AB2  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // CodeStream.PatchJump(jump, CodeStream.NextAddress);

0x2AB4  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x2AB6  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2AB9  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    Compile.hs:126

0x2ABC  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x2ABE  0x30 0xE6       JB 0x2AA4 (-26)
0x2AC0  0x28 0x06       DECSP 0x06

                        // }                                                    Compile.hs:127

0x2AC2  0x30 0x10       JB 0x2AD2 (+16)

                        // CodeStream.PopTail(3);                               Compile.hs:131

0x2AC4  0x1A 0x03       PUSHIB 0x03
0x2AC6  0x34 0x2E 0x01  CALLW 0x012E   // CodeStream.PopTail

                        // CodeStream.PatchJump(jumpPast, pastAddress-3);

0x2AC9  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x2ACC  0x1A 0x03       PUSHIB 0x03
0x2ACE  0x01            SUB
0x2ACF  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // success = true;                                      Compile.hs:134

0x2AD2  0x45            PUSHI1
0x2AD3  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:135

0x2AD4  0x28 0x08       DECSP 0x08

                        // return success;                                      Compile.hs:137

0x2AD6  0x4E            PUSHLOCALB00
0x2AD7  0x2B 0x06       RETRETB 0x06


// Compile.hs:141
// ####  Compile.compileReturn(..)  ####                                        0x0003


                        // bool success = false;                                Compile.hs:142

0x2AD9  0x5F 0x01       ENTERB 0x01

                        // Parser.Advance(); // return                          Compile.hs:145

0x2ADB  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string returnType = "void";                          Compile.hs:146

0x2ADD  0x24 0x02       SYSCALL0 0x02  // String.New
0x2ADF  0x37 0x09 0x01  PUSHIW 0x0109
0x2AE2  0x1A 0x04       PUSHIB 0x04
0x2AE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2AE6  0x5E            POPCOPYLOCALB02

                        // <string,variant> blockContext = Block.GetMethodBlock();

0x2AE7  0x1A 0x0F       PUSHIB 0x0F
0x2AE9  0x1A 0x14       PUSHIB 0x14
0x2AEB  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2AED  0x34 0x4E 0x01  CALLW 0x014E   // Block.GetMethodBlock
0x2AF0  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint returnBytes = 0;                                Compile.hs:148

0x2AF2  0x44            PUSHI0

                        // if (blockContext.Count > 0)                          Compile.hs:149

0x2AF3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2AF5  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x2AF7  0x44            PUSHI0
0x2AF8  0x07            GT
0x2AF9  0x2E 0x5C       JZB 0x2B55 (+92)

                        // if (blockContext.Contains("returntype"))             Compile.hs:151

0x2AFB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2AFD  0x37 0x0D 0x01  PUSHIW 0x010D
0x2B00  0x1A 0x0A       PUSHIB 0x0A
0x2B02  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B04  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x2B06  0x2E 0x4F       JZB 0x2B55 (+79)

                        // returnType = blockContext["returntype"];             Compile.hs:153

0x2B08  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2B0A  0x37 0x0D 0x01  PUSHIW 0x010D
0x2B0D  0x1A 0x0A       PUSHIB 0x0A
0x2B0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B11  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2B13  0x5E            POPCOPYLOCALB02

                        // string actualReturnType = CompileExpression(returnType);

0x2B14  0x24 0x02       SYSCALL0 0x02  // String.New
0x2B16  0x4F            PUSHLOCALB02
0x2B17  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2B1A  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (actualReturnType != returnType)                  Compile.hs:155

0x2B1C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B1E  0x4F            PUSHLOCALB02
0x2B1F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2B21  0x2E 0x2E       JZB 0x2B4F (+46)

                        // if (Types.AutomaticUpCastTop(actualReturnType, returnType))

0x2B23  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B25  0x4F            PUSHLOCALB02
0x2B26  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x2B28  0x2F 0x27       JNZB 0x2B4F (+39)

                        // Parser.Error("invalid return type, (was '" + actualReturnType + "', expected '"+ returnType +"')");

0x2B2A  0x37 0x9A 0x03  PUSHIW 0x039A
0x2B2D  0x1A 0x1B       PUSHIB 0x1B
0x2B2F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B31  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B33  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B35  0x37 0xBF 0x01  PUSHIW 0x01BF
0x2B38  0x1A 0x0D       PUSHIB 0x0D
0x2B3A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2B3C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B3E  0x4F            PUSHLOCALB02
0x2B3F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B41  0x37 0x27 0x29  PUSHIW 0x2927
0x2B44  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2B46  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2B48  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:164

0x2B4A  0x28 0x08       DECSP 0x08
0x2B4C  0x33 0x75 0x00  JW 0x2BC1 (+117)

                        // returnBytes = 2;                                     Compile.hs:167

0x2B4F  0x1A 0x02       PUSHIB 0x02
0x2B51  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    Compile.hs:168

0x2B53  0x28 0x02       DECSP 0x02

                        // if (CodeStream.CheckedBuild)                         Compile.hs:170

0x2B55  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0x2B58  0x2E 0x18       JZB 0x2B70 (+24)

                        // uint localsToPop = Block.GetLocalsToPop(false, false) + returnBytes;

0x2B5A  0x44            PUSHI0
0x2B5B  0x44            PUSHI0
0x2B5C  0x44            PUSHI0
0x2B5D  0x34 0x58 0x01  CALLW 0x0158   // Block.GetLocalsToPop
0x2B60  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2B62  0x00            ADD
0x2B63  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstruction(Instruction.TESTBPB, byte(localsToPop));

0x2B65  0x1A 0x2D       PUSHIB 0x2D
0x2B67  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B69  0x51 0x03       CAST 0x03
0x2B6B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:175

0x2B6E  0x28 0x02       DECSP 0x02

                        // uint bytesToPop = Block.GetLocalsToPop(true, false);

0x2B70  0x44            PUSHI0
0x2B71  0x45            PUSHI1
0x2B72  0x44            PUSHI0
0x2B73  0x34 0x58 0x01  CALLW 0x0158   // Block.GetLocalsToPop
0x2B76  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (bytesToPop == 0)                                 Compile.hs:179

0x2B78  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B7A  0x2F 0x09       JNZB 0x2B83 (+9)

                        // CodeStream.AddInstruction(Instruction.RET0);

0x2B7C  0x1A 0x4A       PUSHIB 0x4A
0x2B7E  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:183

0x2B81  0x30 0x3C       JB 0x2BBD (+60)

                        // else if (returnBytes > 0)                            Compile.hs:184

0x2B83  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2B85  0x44            PUSHI0
0x2B86  0x07            GT
0x2B87  0x2E 0x1D       JZB 0x2BA4 (+29)

                        // if (bytesToPop < 256)                                Compile.hs:186

0x2B89  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B8B  0x55 0x00 0x01  PUSHIWLT 0x0100
0x2B8E  0x2E 0x0D       JZB 0x2B9B (+13)

                        // CodeStream.AddInstruction(Instruction.RETRETB, byte(bytesToPop));

0x2B90  0x1A 0x2B       PUSHIB 0x2B
0x2B92  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B94  0x51 0x03       CAST 0x03
0x2B96  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:189

0x2B99  0x30 0x24       JB 0x2BBD (+36)

                        // CodeStream.AddInstruction(Instruction.RETRETW, bytesToPop);

0x2B9B  0x1A 0x36       PUSHIB 0x36
0x2B9D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2B9F  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:194

0x2BA2  0x30 0x1B       JB 0x2BBD (+27)

                        // if (bytesToPop < 256)                                Compile.hs:197

0x2BA4  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2BA6  0x55 0x00 0x01  PUSHIWLT 0x0100
0x2BA9  0x2E 0x0D       JZB 0x2BB6 (+13)

                        // CodeStream.AddInstruction(Instruction.RETB, byte(bytesToPop));

0x2BAB  0x1A 0x2A       PUSHIB 0x2A
0x2BAD  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2BAF  0x51 0x03       CAST 0x03
0x2BB1  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:200

0x2BB4  0x30 0x09       JB 0x2BBD (+9)

                        // CodeStream.AddInstruction(Instruction.RETW, bytesToPop);

0x2BB6  0x1A 0x35       PUSHIB 0x35
0x2BB8  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2BBA  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // success = true;                                      Compile.hs:206

0x2BBD  0x45            PUSHI1
0x2BBE  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:207

0x2BBF  0x28 0x08       DECSP 0x08

                        // return success;                                      Compile.hs:209

0x2BC1  0x4E            PUSHLOCALB00
0x2BC2  0x2B 0x02       RETRETB 0x02


// Compile.hs:213
// ####  Compile.compileBreak(..)  ####                                         0x0004


                        // bool success = true;                                 Compile.hs:214

0x2BC4  0x5F 0x01       ENTERB 0x01

                        // bool success = true;                                 Compile.hs:214

0x2BC6  0x45            PUSHI1
0x2BC7  0x4C            POPLOCALB00

                        // Parser.Advance(); // break;                          Compile.hs:216

0x2BC8  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // uint bytesToPop = Block.GetBytesToPop(true, false);

0x2BCA  0x44            PUSHI0
0x2BCB  0x45            PUSHI1
0x2BCC  0x44            PUSHI0
0x2BCD  0x34 0x57 0x01  CALLW 0x0157   // Block.GetBytesToPop
0x2BD0  0x4D            POPLOCALB02

                        // if (bytesToPop > 0)                                  Compile.hs:220

0x2BD1  0x4F            PUSHLOCALB02
0x2BD2  0x44            PUSHI0
0x2BD3  0x07            GT
0x2BD4  0x2E 0x23       JZB 0x2BF7 (+35)

                        // while (bytesToPop > 255)                             Compile.hs:222

0x2BD6  0x4F            PUSHLOCALB02
0x2BD7  0x1A 0xFF       PUSHIB 0xFF
0x2BD9  0x07            GT
0x2BDA  0x2E 0x10       JZB 0x2BEA (+16)

                        // CodeStream.AddInstruction(Instruction.DECSP, 0xFE); // even numbered stack slots (254, not 255)

0x2BDC  0x1A 0x28       PUSHIB 0x28
0x2BDE  0x1A 0xFE       PUSHIB 0xFE
0x2BE0  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // bytesToPop = bytesToPop - 254;                       Compile.hs:225

0x2BE3  0x4F            PUSHLOCALB02
0x2BE4  0x1A 0xFE       PUSHIB 0xFE
0x2BE6  0x01            SUB
0x2BE7  0x4D            POPLOCALB02

                        // }                                                    Compile.hs:226

0x2BE8  0x30 0xEE       JB 0x2BD6 (-18)

                        // if (bytesToPop > 0)                                  Compile.hs:227

0x2BEA  0x4F            PUSHLOCALB02
0x2BEB  0x44            PUSHI0
0x2BEC  0x07            GT
0x2BED  0x2E 0x0A       JZB 0x2BF7 (+10)

                        // CodeStream.AddInstruction(Instruction.DECSP, byte(bytesToPop));

0x2BEF  0x1A 0x28       PUSHIB 0x28
0x2BF1  0x4F            PUSHLOCALB02
0x2BF2  0x51 0x03       CAST 0x03
0x2BF4  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // uint breakJump = CodeStream.NextAddress;             Compile.hs:234

0x2BF7  0x44            PUSHI0
0x2BF8  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2BFB  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // CodeStream.AddInstructionJump(Instruction.JW);

0x2BFD  0x1A 0x33       PUSHIB 0x33
0x2BFF  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // if (!Block.AddBreakPatch(breakJump))                 Compile.hs:236

0x2C02  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C04  0x34 0x51 0x01  CALLW 0x0151   // Block.AddBreakPatch
0x2C07  0x2F 0x0D       JNZB 0x2C14 (+13)

                        // Parser.ErrorAtCurrent("'break' must be inside loop block");

0x2C09  0x37 0xB5 0x03  PUSHIW 0x03B5
0x2C0C  0x1A 0x21       PUSHIB 0x21
0x2C0E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C10  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // success = false;                                     Compile.hs:239

0x2C12  0x44            PUSHI0
0x2C13  0x4C            POPLOCALB00

                        // return success;                                      Compile.hs:242

0x2C14  0x4E            PUSHLOCALB00
0x2C15  0x2B 0x06       RETRETB 0x06


// Compile.hs:246
// ####  Compile.compileContinue(..)  ####                                      0x0005


                        // bool success = true;                                 Compile.hs:247

0x2C17  0x5F 0x01       ENTERB 0x01

                        // bool success = true;                                 Compile.hs:247

0x2C19  0x45            PUSHI1
0x2C1A  0x4C            POPLOCALB00

                        // Parser.Advance(); // continue;                       Compile.hs:249

0x2C1B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // uint bytesToPop = Block.GetBytesToPop(true, true);

0x2C1D  0x44            PUSHI0
0x2C1E  0x45            PUSHI1
0x2C1F  0x45            PUSHI1
0x2C20  0x34 0x57 0x01  CALLW 0x0157   // Block.GetBytesToPop
0x2C23  0x4D            POPLOCALB02

                        // if (bytesToPop > 0)                                  Compile.hs:253

0x2C24  0x4F            PUSHLOCALB02
0x2C25  0x44            PUSHI0
0x2C26  0x07            GT
0x2C27  0x2E 0x14       JZB 0x2C3B (+20)

                        // if (bytesToPop > 255)                                Compile.hs:255

0x2C29  0x4F            PUSHLOCALB02
0x2C2A  0x1A 0xFF       PUSHIB 0xFF
0x2C2C  0x07            GT
0x2C2D  0x2E 0x06       JZB 0x2C33 (+6)

                        // Die(0x0B); // limit                                  Compile.hs:257

0x2C2F  0x1A 0x0B       PUSHIB 0x0B
0x2C31  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.AddInstruction(Instruction.DECSP, byte(bytesToPop));

0x2C33  0x1A 0x28       PUSHIB 0x28
0x2C35  0x4F            PUSHLOCALB02
0x2C36  0x51 0x03       CAST 0x03
0x2C38  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // uint continueJump = CodeStream.NextAddress;

0x2C3B  0x44            PUSHI0
0x2C3C  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2C3F  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // CodeStream.AddInstructionJump(Instruction.JW);

0x2C41  0x1A 0x33       PUSHIB 0x33
0x2C43  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // if (!Block.AddContinuePatch(continueJump))           Compile.hs:264

0x2C46  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C48  0x34 0x52 0x01  CALLW 0x0152   // Block.AddContinuePatch
0x2C4B  0x2F 0x0D       JNZB 0x2C58 (+13)

                        // Parser.ErrorAtCurrent("'continue' must be inside loop block");

0x2C4D  0x37 0xD6 0x03  PUSHIW 0x03D6
0x2C50  0x1A 0x24       PUSHIB 0x24
0x2C52  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C54  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // success = false;                                     Compile.hs:267

0x2C56  0x44            PUSHI0
0x2C57  0x4C            POPLOCALB00

                        // return success;                                      Compile.hs:270

0x2C58  0x4E            PUSHLOCALB00
0x2C59  0x2B 0x06       RETRETB 0x06


// Compile.hs:274
// ####  Compile.compileWhile(..)  ####                                         0x0006


                        // bool success = false;                                Compile.hs:275

0x2C5B  0x5F 0x01       ENTERB 0x01

                        // Parser.Advance(); // while                           Compile.hs:278

0x2C5D  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LParen, '(');             Compile.hs:280

0x2C5F  0x1A 0x10       PUSHIB 0x10
0x2C61  0x1A 0x28       PUSHIB 0x28
0x2C63  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:281

0x2C65  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2C67  0x32 0x89 0x00  JNZW 0x2CF0 (+137)

                        // uint continueAddress = CodeStream.NextAddress;

0x2C6A  0x44            PUSHI0
0x2C6B  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2C6E  0x4D            POPLOCALB02

                        // string whileCheckType = CompileExpression("bool");

0x2C6F  0x24 0x02       SYSCALL0 0x02  // String.New
0x2C71  0x37 0x6F 0x03  PUSHIW 0x036F
0x2C74  0x1A 0x04       PUSHIB 0x04
0x2C76  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C78  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2C7B  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if ("bool" != whileCheckType)                        Compile.hs:290

0x2C7D  0x37 0x6F 0x03  PUSHIW 0x036F
0x2C80  0x1A 0x04       PUSHIB 0x04
0x2C82  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C84  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C86  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2C88  0x2E 0x1A       JZB 0x2CA2 (+26)

                        // Parser.Error("boolean expression expected, (was '" + whileCheckType + "')");

0x2C8A  0x37 0x73 0x03  PUSHIW 0x0373
0x2C8D  0x1A 0x23       PUSHIB 0x23
0x2C8F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2C91  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2C93  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C95  0x37 0x27 0x29  PUSHIW 0x2927
0x2C98  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2C9A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2C9C  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:293

0x2C9E  0x28 0x04       DECSP 0x04
0x2CA0  0x30 0x50       JB 0x2CF0 (+80)

                        // Parser.Consume(HopperToken.RParen, ')');             Compile.hs:296

0x2CA2  0x1A 0x11       PUSHIB 0x11
0x2CA4  0x1A 0x29       PUSHIB 0x29
0x2CA6  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:297

0x2CA8  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2CAA  0x2E 0x06       JZB 0x2CB0 (+6)

                        // break;                                               Compile.hs:299

0x2CAC  0x28 0x04       DECSP 0x04
0x2CAE  0x30 0x42       JB 0x2CF0 (+66)

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:303

0x2CB0  0x44            PUSHI0
0x2CB1  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2CB4  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x2CB6  0x1A 0x31       PUSHIB 0x31
0x2CB8  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // Block.PushBlock(true); // loop block context

0x2CBB  0x45            PUSHI1
0x2CBC  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.PushBlock(false); // for block locals

0x2CBF  0x44            PUSHI0
0x2CC0  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:309

0x2CC3  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:310

0x2CC5  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:312

0x2CC8  0x45            PUSHI1
0x2CC9  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstructionJump(Instruction.JW, continueAddress);

0x2CCC  0x1A 0x33       PUSHIB 0x33
0x2CCE  0x4F            PUSHLOCALB02
0x2CCF  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x2CD2  0x44            PUSHI0
0x2CD3  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2CD6  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x2CD8  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x2CDB  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x2CDE  0x4F            PUSHLOCALB02
0x2CDF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2CE1  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:321

0x2CE4  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2CE6  0x2E 0x06       JZB 0x2CEC (+6)

                        // break;                                               Compile.hs:323

0x2CE8  0x28 0x08       DECSP 0x08
0x2CEA  0x30 0x06       JB 0x2CF0 (+6)

                        // success = true;                                      Compile.hs:325

0x2CEC  0x45            PUSHI1
0x2CED  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:326

0x2CEE  0x28 0x08       DECSP 0x08

                        // return success;                                      Compile.hs:328

0x2CF0  0x4E            PUSHLOCALB00
0x2CF1  0x2B 0x02       RETRETB 0x02


// Compile.hs:332
// ####  Compile.compileLoop(..)  ####                                          0x0007


                        // bool success = false;                                Compile.hs:333

0x2CF3  0x5F 0x01       ENTERB 0x01

                        // Parser.Advance(); // loop                            Compile.hs:336

0x2CF5  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Block.PushBlock(true); // loop context               Compile.hs:338

0x2CF7  0x45            PUSHI1
0x2CF8  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // uint continueAddress = CodeStream.NextAddress;

0x2CFB  0x44            PUSHI0
0x2CFC  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2CFF  0x4D            POPLOCALB02

                        // Block.PushBlock(false); // for block locals

0x2D00  0x44            PUSHI0
0x2D01  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:343

0x2D04  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:344

0x2D06  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:346

0x2D09  0x45            PUSHI1
0x2D0A  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstructionJump(Instruction.JW, continueAddress);

0x2D0D  0x1A 0x33       PUSHIB 0x33
0x2D0F  0x4F            PUSHLOCALB02
0x2D10  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x2D13  0x44            PUSHI0
0x2D14  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2D17  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // Block.PopBlock(continueAddress, breakAddress);

0x2D19  0x4F            PUSHLOCALB02
0x2D1A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2D1C  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:352

0x2D1F  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2D21  0x2E 0x06       JZB 0x2D27 (+6)

                        // break;                                               Compile.hs:354

0x2D23  0x28 0x04       DECSP 0x04
0x2D25  0x30 0x06       JB 0x2D2B (+6)

                        // success = true;                                      Compile.hs:356

0x2D27  0x45            PUSHI1
0x2D28  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:357

0x2D29  0x28 0x04       DECSP 0x04

                        // return success;                                      Compile.hs:359

0x2D2B  0x4E            PUSHLOCALB00
0x2D2C  0x2B 0x02       RETRETB 0x02


// Compile.hs:363
// ####  Compile.compileFor(..)  ####                                           0x0008


                        // bool success = false;                                Compile.hs:364

0x2D2E  0x5F 0x01       ENTERB 0x01

                        // Block.PushBlock(true); // new loop block context

0x2D30  0x45            PUSHI1
0x2D31  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Parser.Advance(); // for                             Compile.hs:369

0x2D34  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LParen, '(');             Compile.hs:370

0x2D36  0x1A 0x10       PUSHIB 0x10
0x2D38  0x1A 0x28       PUSHIB 0x28
0x2D3A  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:371

0x2D3C  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2D3E  0x32 0xDF 0x00  JNZW 0x2E1D (+223)

                        // if (Parser.Check(HopperToken.SemiColon))             Compile.hs:377

0x2D41  0x1A 0x0C       PUSHIB 0x0C
0x2D43  0x2C 0x83       CALLB 0x83     // Parser.Check
0x2D45  0x2E 0x0A       JZB 0x2D4F (+10)

                        // Parser.Consume(HopperToken.SemiColon, ';');

0x2D47  0x1A 0x0C       PUSHIB 0x0C
0x2D49  0x1A 0x3B       PUSHIB 0x3B
0x2D4B  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // }                                                    Compile.hs:381

0x2D4D  0x30 0x09       JB 0x2D56 (+9)

                        // if (!compileStatement(false, false))                 Compile.hs:384

0x2D4F  0x44            PUSHI0
0x2D50  0x44            PUSHI0
0x2D51  0x2C 0x12       CALLB 0x12     // Compile.compileStatement
0x2D53  0x31 0xCA 0x00  JZW 0x2E1D (+202)

                        // uint loopAddress = CodeStream.NextAddress;           Compile.hs:390

0x2D56  0x44            PUSHI0
0x2D57  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2D5A  0x4D            POPLOCALB02

                        // string exitCheckType = CompileExpression("bool");

0x2D5B  0x24 0x02       SYSCALL0 0x02  // String.New
0x2D5D  0x37 0x6F 0x03  PUSHIW 0x036F
0x2D60  0x1A 0x04       PUSHIB 0x04
0x2D62  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2D64  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2D67  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if ("bool" != exitCheckType)                         Compile.hs:392

0x2D69  0x37 0x6F 0x03  PUSHIW 0x036F
0x2D6C  0x1A 0x04       PUSHIB 0x04
0x2D6E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2D70  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2D72  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2D74  0x2E 0x1B       JZB 0x2D8F (+27)

                        // Parser.Error("boolean expression expected, (was '" + exitCheckType + "')");

0x2D76  0x37 0x73 0x03  PUSHIW 0x0373
0x2D79  0x1A 0x23       PUSHIB 0x23
0x2D7B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2D7D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2D7F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2D81  0x37 0x27 0x29  PUSHIW 0x2927
0x2D84  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2D86  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2D88  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:395

0x2D8A  0x28 0x04       DECSP 0x04
0x2D8C  0x33 0x91 0x00  JW 0x2E1D (+145)

                        // Parser.Consume(HopperToken.SemiColon, ';');

0x2D8F  0x1A 0x0C       PUSHIB 0x0C
0x2D91  0x1A 0x3B       PUSHIB 0x3B
0x2D93  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:398

0x2D95  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2D97  0x2E 0x07       JZB 0x2D9E (+7)

                        // break;                                               Compile.hs:400

0x2D99  0x28 0x04       DECSP 0x04
0x2D9B  0x33 0x82 0x00  JW 0x2E1D (+130)

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:403

0x2D9E  0x44            PUSHI0
0x2D9F  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2DA2  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x2DA4  0x1A 0x31       PUSHIB 0x31
0x2DA6  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // <byte> mainStream = CodeStream.CurrentStream;

0x2DA9  0x1A 0x03       PUSHIB 0x03
0x2DAB  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2DAD  0x34 0x26 0x01  CALLW 0x0126   // CodeStream.CurrentStream_Get
0x2DB0  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // CodeStream.New();                                    Compile.hs:407

0x2DB2  0x34 0x23 0x01  CALLW 0x0123   // CodeStream.New

                        // if (!Parser.Check(HopperToken.RParen)) // can be empty

0x2DB5  0x1A 0x11       PUSHIB 0x11
0x2DB7  0x2C 0x83       CALLB 0x83     // Parser.Check
0x2DB9  0x2F 0x0C       JNZB 0x2DC5 (+12)

                        // if (!compileStatement(true, false))                  Compile.hs:412

0x2DBB  0x45            PUSHI1
0x2DBC  0x44            PUSHI0
0x2DBD  0x2C 0x12       CALLB 0x12     // Compile.compileStatement
0x2DBF  0x2F 0x06       JNZB 0x2DC5 (+6)

                        // break;                                               Compile.hs:414

0x2DC1  0x28 0x08       DECSP 0x08
0x2DC3  0x30 0x5A       JB 0x2E1D (+90)

                        // <byte> incrementStream = CodeStream.CurrentStream;

0x2DC5  0x1A 0x03       PUSHIB 0x03
0x2DC7  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x2DC9  0x34 0x26 0x01  CALLW 0x0126   // CodeStream.CurrentStream_Get
0x2DCC  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // CodeStream.New(mainStream);                          Compile.hs:418

0x2DCE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2DD0  0x34 0x24 0x01  CALLW 0x0124   // CodeStream.New

                        // Parser.Consume(HopperToken.RParen, ')');             Compile.hs:420

0x2DD3  0x1A 0x11       PUSHIB 0x11
0x2DD5  0x1A 0x29       PUSHIB 0x29
0x2DD7  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:421

0x2DD9  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2DDB  0x2E 0x06       JZB 0x2DE1 (+6)

                        // break;                                               Compile.hs:423

0x2DDD  0x28 0x0A       DECSP 0x0A
0x2DDF  0x30 0x3E       JB 0x2E1D (+62)

                        // Block.PushBlock(false); // for block locals

0x2DE1  0x44            PUSHI0
0x2DE2  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:426

0x2DE5  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:427

0x2DE7  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:429

0x2DEA  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2DEC  0x2E 0x06       JZB 0x2DF2 (+6)

                        // break;                                               Compile.hs:431

0x2DEE  0x28 0x0A       DECSP 0x0A
0x2DF0  0x30 0x2D       JB 0x2E1D (+45)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:434

0x2DF2  0x45            PUSHI1
0x2DF3  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // uint continueAddress = CodeStream.NextAddress;

0x2DF6  0x44            PUSHI0
0x2DF7  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2DFA  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AppendCode(incrementStream);              Compile.hs:437

0x2DFC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x2DFE  0x34 0x20 0x01  CALLW 0x0120   // CodeStream.AppendCode

                        // CodeStream.AddInstructionJump(Instruction.JW, loopAddress);

0x2E01  0x1A 0x33       PUSHIB 0x33
0x2E03  0x4F            PUSHLOCALB02
0x2E04  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x2E07  0x44            PUSHI0
0x2E08  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2E0B  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x2E0D  0x56 0x06 0x0E  PUSHLOCALBB 0x0E06
0x2E10  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x2E13  0x56 0x0C 0x0E  PUSHLOCALBB 0x0E0C
0x2E16  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // success = true;                                      Compile.hs:444

0x2E19  0x45            PUSHI1
0x2E1A  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:445

0x2E1B  0x28 0x0E       DECSP 0x0E

                        // return success;                                      Compile.hs:449

0x2E1D  0x4E            PUSHLOCALB00
0x2E1E  0x2B 0x02       RETRETB 0x02


// Compile.hs:722
// ####  Compile.compileForEach(..)  ####                                       0x000D


                        // bool success = false;                                Compile.hs:723

0x2E20  0x5F 0x01       ENTERB 0x01

                        // Parser.Advance(); // foreach                         Compile.hs:726

0x2E22  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LParen, '(');             Compile.hs:727

0x2E24  0x1A 0x10       PUSHIB 0x10
0x2E26  0x1A 0x28       PUSHIB 0x28
0x2E28  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:728

0x2E2A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2E2C  0x32 0xED 0x00  JNZW 0x2F19 (+237)

                        // if (!Parser.Check(HopperToken.Keyword, "var"))

0x2E2F  0x1A 0x05       PUSHIB 0x05
0x2E31  0x37 0xC3 0x02  PUSHIW 0x02C3
0x2E34  0x1A 0x03       PUSHIB 0x03
0x2E36  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E38  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2E3A  0x2F 0x0B       JNZB 0x2E45 (+11)

                        // Parser.Error("'var' expected");                      Compile.hs:734

0x2E3C  0x37 0xFA 0x03  PUSHIW 0x03FA
0x2E3F  0x1A 0x0E       PUSHIB 0x0E
0x2E41  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E43  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // Parser.Advance(); // var                             Compile.hs:736

0x2E45  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (!Parser.Check(HopperToken.Identifier))           Compile.hs:738

0x2E47  0x1A 0x03       PUSHIB 0x03
0x2E49  0x2C 0x83       CALLB 0x83     // Parser.Check
0x2E4B  0x2F 0x0E       JNZB 0x2E59 (+14)

                        // Parser.Error("identifier expected");                 Compile.hs:740

0x2E4D  0x37 0xF3 0x01  PUSHIW 0x01F3
0x2E50  0x1A 0x13       PUSHIB 0x13
0x2E52  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E54  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:741

0x2E56  0x33 0xC3 0x00  JW 0x2F19 (+195)

                        // <string,string> currentToken = CurrentToken;

0x2E59  0x1A 0x0F       PUSHIB 0x0F
0x2E5B  0x1A 0x0F       PUSHIB 0x0F
0x2E5D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x2E5F  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x2E61  0x5E            POPCOPYLOCALB02

                        // string identifier = currentToken["lexeme"];

0x2E62  0x24 0x02       SYSCALL0 0x02  // String.New
0x2E64  0x4F            PUSHLOCALB02
0x2E65  0x37 0x06 0x02  PUSHIW 0x0206
0x2E68  0x1A 0x06       PUSHIB 0x06
0x2E6A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E6C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x2E6E  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance(); // identifier                      Compile.hs:745

0x2E70  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (!Parser.Check(HopperToken.Keyword, "in"))

0x2E72  0x1A 0x05       PUSHIB 0x05
0x2E74  0x37 0x69 0x6E  PUSHIW 0x6E69
0x2E77  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x2E79  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2E7B  0x2F 0x10       JNZB 0x2E8B (+16)

                        // Parser.Error("'in' expected");                       Compile.hs:749

0x2E7D  0x37 0x08 0x04  PUSHIW 0x0408
0x2E80  0x1A 0x0D       PUSHIB 0x0D
0x2E82  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2E84  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               Compile.hs:750

0x2E86  0x28 0x04       DECSP 0x04
0x2E88  0x33 0x91 0x00  JW 0x2F19 (+145)

                        // Parser.Advance(); // in                              Compile.hs:752

0x2E8B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string collectionType = CompileExpression("");

0x2E8D  0x24 0x02       SYSCALL0 0x02  // String.New
0x2E8F  0x24 0x02       SYSCALL0 0x02  // String.New
0x2E91  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2E94  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (Parser.HadError)                                 Compile.hs:755

0x2E96  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2E98  0x2E 0x07       JZB 0x2E9F (+7)

                        // break;                                               Compile.hs:757

0x2E9A  0x28 0x06       DECSP 0x06
0x2E9C  0x33 0x7D 0x00  JW 0x2F19 (+125)

                        // Parser.Consume(HopperToken.RParen, ')');             Compile.hs:759

0x2E9F  0x1A 0x11       PUSHIB 0x11
0x2EA1  0x1A 0x29       PUSHIB 0x29
0x2EA3  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:760

0x2EA5  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2EA7  0x2E 0x07       JZB 0x2EAE (+7)

                        // break;                                               Compile.hs:762

0x2EA9  0x28 0x06       DECSP 0x06
0x2EAB  0x33 0x6E 0x00  JW 0x2F19 (+110)

                        // string iteratorType = Types.GetIteratorFromCollection(collectionType);

0x2EAE  0x24 0x02       SYSCALL0 0x02  // String.New
0x2EB0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EB2  0x2C 0xE3       CALLB 0xE3     // Types.GetIteratorFromCollection
0x2EB4  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (Parser.HadError)                                 Compile.hs:765

0x2EB6  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2EB8  0x2E 0x06       JZB 0x2EBE (+6)

                        // break;                                               Compile.hs:767

0x2EBA  0x28 0x08       DECSP 0x08
0x2EBC  0x30 0x5D       JB 0x2F19 (+93)

                        // if (collectionType == "string")                      Compile.hs:769

0x2EBE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EC0  0x37 0x62 0x02  PUSHIW 0x0262
0x2EC3  0x1A 0x06       PUSHIB 0x06
0x2EC5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2EC7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2EC9  0x2F 0x1A       JNZB 0x2EE3 (+26)

                        // if (iteratorType != "char")                          Compile.hs:771

0x2ECB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2ECD  0x37 0x15 0x04  PUSHIW 0x0415
0x2ED0  0x1A 0x04       PUSHIB 0x04
0x2ED2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2ED4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2ED6  0x2E 0x06       JZB 0x2EDC (+6)

                        // Die(0x0B); // why not?                               Compile.hs:773

0x2ED8  0x1A 0x0B       PUSHIB 0x0B
0x2EDA  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // success = compileForEachString(identifier);

0x2EDC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2EDE  0x2C 0x09       CALLB 0x09     // Compile.compileForEachString
0x2EE0  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:776

0x2EE1  0x30 0x36       JB 0x2F17 (+54)

                        // else if (Types.IsList(collectionType))               Compile.hs:777

0x2EE3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EE5  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x2EE7  0x2E 0x0C       JZB 0x2EF3 (+12)

                        // success = compileForEachList(identifier, iteratorType, collectionType);

0x2EE9  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x2EEC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EEE  0x2C 0x0A       CALLB 0x0A     // Compile.compileForEachList
0x2EF0  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:780

0x2EF1  0x30 0x26       JB 0x2F17 (+38)

                        // else if (Types.IsArray(collectionType))              Compile.hs:781

0x2EF3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EF5  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x2EF7  0x2E 0x0C       JZB 0x2F03 (+12)

                        // success = compileForEachArray(identifier, iteratorType, collectionType);

0x2EF9  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x2EFC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2EFE  0x2C 0x0B       CALLB 0x0B     // Compile.compileForEachArray
0x2F00  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:784

0x2F01  0x30 0x16       JB 0x2F17 (+22)

                        // else if (Types.IsDictionary(collectionType))

0x2F03  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2F05  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x2F07  0x2E 0x0C       JZB 0x2F13 (+12)

                        // success = compileForEachDictionary(identifier, iteratorType, collectionType);

0x2F09  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x2F0C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2F0E  0x2C 0x0C       CALLB 0x0C     // Compile.compileForEachDictionary
0x2F10  0x4C            POPLOCALB00

                        // }                                                    Compile.hs:788

0x2F11  0x30 0x06       JB 0x2F17 (+6)

                        // Die(0x0B); // how did we get past the check in GetIteratorFromCollection(..)?

0x2F13  0x1A 0x0B       PUSHIB 0x0B
0x2F15  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // break;                                               Compile.hs:793

0x2F17  0x28 0x08       DECSP 0x08

                        // return success;                                      Compile.hs:797

0x2F19  0x4E            PUSHLOCALB00
0x2F1A  0x2B 0x02       RETRETB 0x02


// Compile.hs:801
// ####  Compile.compileSwitch(..)  ####                                        0x000E


                        // bool success = false;                                Compile.hs:802

0x2F1C  0x5F 0x01       ENTERB 0x01

                        // <uint> jumpEnds;                                     Compile.hs:805

0x2F1E  0x1A 0x04       PUSHIB 0x04
0x2F20  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // Parser.Advance(); // switch                          Compile.hs:806

0x2F22  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LParen, '(');             Compile.hs:807

0x2F24  0x1A 0x10       PUSHIB 0x10
0x2F26  0x1A 0x28       PUSHIB 0x28
0x2F28  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:808

0x2F2A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2F2C  0x2E 0x07       JZB 0x2F33 (+7)

                        // break;                                               Compile.hs:810

0x2F2E  0x28 0x02       DECSP 0x02
0x2F30  0x33 0xB3 0x02  JW 0x31E3 (+691)

                        // string switchType = CompileExpression("");           Compile.hs:813

0x2F33  0x24 0x02       SYSCALL0 0x02  // String.New
0x2F35  0x24 0x02       SYSCALL0 0x02  // String.New
0x2F37  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x2F3A  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint unique = CodeStream.NextAddress;                Compile.hs:815

0x2F3C  0x44            PUSHI0
0x2F3D  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x2F40  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // string switchName ="switch_" + unique.ToHexString(4);

0x2F42  0x24 0x02       SYSCALL0 0x02  // String.New
0x2F44  0x37 0x19 0x04  PUSHIW 0x0419
0x2F47  0x1A 0x07       PUSHIB 0x07
0x2F49  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2F4B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x2F4D  0x1A 0x04       PUSHIB 0x04
0x2F4F  0x34 0x71 0x01  CALLW 0x0171   // UInt.ToHexString
0x2F52  0x24 0x03       SYSCALL0 0x03  // String.Append
0x2F54  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // Block.PushBlock(false); // block for switch variable

0x2F56  0x44            PUSHI0
0x2F57  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.AddLocal(switchType, switchName);              Compile.hs:818

0x2F5A  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x2F5D  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // bool isRef;                                          Compile.hs:820

0x2F60  0x44            PUSHI0

                        // byte switchOffset = CodeStream.IntToByte(Block.GetOffset(switchName, ref isRef));

0x2F61  0x44            PUSHI0
0x2F62  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x2F64  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x2F66  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x2F69  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x2F6C  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 Compile.hs:823

0x2F6E  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2F70  0x2E 0x07       JZB 0x2F77 (+7)

                        // break;                                               Compile.hs:825

0x2F72  0x28 0x0C       DECSP 0x0C
0x2F74  0x33 0x6F 0x02  JW 0x31E3 (+623)

                        // if (!Types.IsValueType(switchType) && (switchType != "string"))

0x2F77  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2F79  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x2F7B  0x41            BOOLNOT
0x2F7C  0x27 0x00       DUP 0x00
0x2F7E  0x2E 0x10       JZB 0x2F8E (+16)
0x2F80  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x2F82  0x37 0x62 0x02  PUSHIW 0x0262
0x2F85  0x1A 0x06       PUSHIB 0x06
0x2F87  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2F89  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x2F8B  0x44            PUSHI0
0x2F8C  0x06            NE
0x2F8D  0x0C            BOOLAND
0x2F8E  0x2E 0x0B       JZB 0x2F99 (+11)

                        // Parser.ErrorAtCurrent("'switch' expression type must be value type or string");

0x2F90  0x37 0x20 0x04  PUSHIW 0x0420
0x2F93  0x1A 0x35       PUSHIB 0x35
0x2F95  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2F97  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Parser.Consume(HopperToken.RParen, ')');             Compile.hs:832

0x2F99  0x1A 0x11       PUSHIB 0x11
0x2F9B  0x1A 0x29       PUSHIB 0x29
0x2F9D  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:833

0x2F9F  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2FA1  0x2E 0x07       JZB 0x2FA8 (+7)

                        // break;                                               Compile.hs:835

0x2FA3  0x28 0x0C       DECSP 0x0C
0x2FA5  0x33 0x3E 0x02  JW 0x31E3 (+574)

                        // Parser.Consume(HopperToken.LBrace, '{');             Compile.hs:837

0x2FA8  0x1A 0x12       PUSHIB 0x12
0x2FAA  0x1A 0x7B       PUSHIB 0x7B
0x2FAC  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:838

0x2FAE  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x2FB0  0x2E 0x07       JZB 0x2FB7 (+7)

                        // break;                                               Compile.hs:840

0x2FB2  0x28 0x0C       DECSP 0x0C
0x2FB4  0x33 0x2F 0x02  JW 0x31E3 (+559)

                        // bool defaultSeen = false;                            Compile.hs:842

0x2FB7  0x44            PUSHI0

                        // if (Parser.Check(HopperToken.RBrace))                Compile.hs:845

0x2FB8  0x1A 0x13       PUSHIB 0x13
0x2FBA  0x2C 0x83       CALLB 0x83     // Parser.Check
0x2FBC  0x2E 0x09       JZB 0x2FC5 (+9)

                        // success = true;                                      Compile.hs:847

0x2FBE  0x45            PUSHI1
0x2FBF  0x4C            POPLOCALB00

                        // Parser.Advance(); // }                               Compile.hs:848

0x2FC0  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               Compile.hs:849

0x2FC2  0x33 0xF0 0x01  JW 0x31B2 (+496)

                        // if (Parser.Check(HopperToken.EOF))                   Compile.hs:851

0x2FC5  0x1A 0x2D       PUSHIB 0x2D
0x2FC7  0x2C 0x83       CALLB 0x83     // Parser.Check
0x2FC9  0x2E 0x0E       JZB 0x2FD7 (+14)

                        // Parser.ErrorAtCurrent("unexpected EOF in 'switch'");

0x2FCB  0x37 0x55 0x04  PUSHIW 0x0455
0x2FCE  0x1A 0x1A       PUSHIB 0x1A
0x2FD0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2FD2  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:854

0x2FD4  0x33 0xDE 0x01  JW 0x31B2 (+478)

                        // bool isDefault = false;                              Compile.hs:857

0x2FD7  0x44            PUSHI0

                        // if (!Parser.Check(HopperToken.Keyword, "case"))

0x2FD8  0x1A 0x05       PUSHIB 0x05
0x2FDA  0x37 0x6F 0x04  PUSHIW 0x046F
0x2FDD  0x1A 0x04       PUSHIB 0x04
0x2FDF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2FE1  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2FE3  0x2F 0x37       JNZB 0x301A (+55)

                        // if (Parser.Check(HopperToken.Keyword, "default"))

0x2FE5  0x1A 0x05       PUSHIB 0x05
0x2FE7  0x37 0x73 0x04  PUSHIW 0x0473
0x2FEA  0x1A 0x07       PUSHIB 0x07
0x2FEC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x2FEE  0x2C 0x84       CALLB 0x84     // Parser.Check
0x2FF0  0x2E 0x1C       JZB 0x300C (+28)

                        // isDefault = true;                                    Compile.hs:862

0x2FF2  0x45            PUSHI1
0x2FF3  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (defaultSeen)                                     Compile.hs:863

0x2FF5  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x2FF7  0x2E 0x10       JZB 0x3007 (+16)

                        // Parser.ErrorAtCurrent("'default' can only occur once");

0x2FF9  0x37 0x7A 0x04  PUSHIW 0x047A
0x2FFC  0x1A 0x1D       PUSHIB 0x1D
0x2FFE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3000  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:866

0x3002  0x28 0x02       DECSP 0x02
0x3004  0x33 0xAE 0x01  JW 0x31B2 (+430)

                        // defaultSeen = true;                                  Compile.hs:868

0x3007  0x45            PUSHI1
0x3008  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // }                                                    Compile.hs:869

0x300A  0x30 0x10       JB 0x301A (+16)

                        // Parser.ErrorAtCurrent("'case' expected");            Compile.hs:872

0x300C  0x37 0x97 0x04  PUSHIW 0x0497
0x300F  0x1A 0x0F       PUSHIB 0x0F
0x3011  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3013  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:873

0x3015  0x28 0x02       DECSP 0x02
0x3017  0x33 0x9B 0x01  JW 0x31B2 (+411)

                        // if (defaultSeen && !isDefault)                       Compile.hs:876

0x301A  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x301C  0x27 0x00       DUP 0x00
0x301E  0x2E 0x06       JZB 0x3024 (+6)
0x3020  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x3022  0x41            BOOLNOT
0x3023  0x0C            BOOLAND
0x3024  0x2E 0x10       JZB 0x3034 (+16)

                        // Parser.ErrorAtCurrent("'default' must be last case");

0x3026  0x37 0xA6 0x04  PUSHIW 0x04A6
0x3029  0x1A 0x1B       PUSHIB 0x1B
0x302B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x302D  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:879

0x302F  0x28 0x02       DECSP 0x02
0x3031  0x33 0x81 0x01  JW 0x31B2 (+385)

                        // <uint> jumpNexts;                                    Compile.hs:881

0x3034  0x1A 0x04       PUSHIB 0x04
0x3036  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // <uint> jumpMatches;                                  Compile.hs:882

0x3038  0x1A 0x04       PUSHIB 0x04
0x303A  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // CodeStream.InsertDebugInfo(false);                   Compile.hs:886

0x303C  0x44            PUSHI0
0x303D  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // Parser.Advance(); // "case" or "default"             Compile.hs:888

0x3040  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (!isDefault)                                      Compile.hs:890

0x3042  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x3044  0x2F 0x6D       JNZB 0x30B1 (+109)

                        // string caseConstant = ParseConstantExpression(switchType);

0x3046  0x24 0x02       SYSCALL0 0x02  // String.New
0x3048  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x304A  0x34 0x0C 0x01  CALLW 0x010C   // Constant.ParseConstantExpression
0x304D  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // if (Parser.HadError)                                 Compile.hs:893

0x304F  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3051  0x2E 0x07       JZB 0x3058 (+7)

                        // break;                                               Compile.hs:895

0x3053  0x28 0x02       DECSP 0x02
0x3055  0x33 0xE3 0x00  JW 0x3138 (+227)

                        // if (switchType == "string")                          Compile.hs:897

0x3058  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x305A  0x37 0x62 0x02  PUSHIW 0x0262
0x305D  0x1A 0x06       PUSHIB 0x06
0x305F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3061  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3063  0x2F 0x09       JNZB 0x306C (+9)

                        // CodeStream.AddString(caseConstant);                  Compile.hs:899

0x3065  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x3067  0x34 0x3C 0x01  CALLW 0x013C   // CodeStream.AddString

                        // }                                                    Compile.hs:900

0x306A  0x30 0x45       JB 0x30AF (+69)

                        // else if (switchType == "char")                       Compile.hs:901

0x306C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x306E  0x37 0x15 0x04  PUSHIW 0x0415
0x3071  0x1A 0x04       PUSHIB 0x04
0x3073  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3075  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3077  0x2F 0x13       JNZB 0x308A (+19)

                        // char c = caseConstant[0];                            Compile.hs:903

0x3079  0x44            PUSHI0
0x307A  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x307C  0x44            PUSHI0
0x307D  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x307F  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // CodeStream.AddInstructionPUSHI(byte(c));             Compile.hs:904

0x3081  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x3083  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // }                                                    Compile.hs:905

0x3086  0x28 0x02       DECSP 0x02
0x3088  0x30 0x27       JB 0x30AF (+39)

                        // uint cc;                                             Compile.hs:908

0x308A  0x44            PUSHI0

                        // if (Token.TryParseUInt(caseConstant, ref cc))

0x308B  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x308D  0x21 0x18       PUSHSTACKADDRB 0x18 (BP+24)
0x308F  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x3091  0x2E 0x09       JZB 0x309A (+9)

                        // CodeStream.AddInstructionPUSHI(cc);                  Compile.hs:911

0x3093  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x3095  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // }                                                    Compile.hs:912

0x3098  0x30 0x15       JB 0x30AD (+21)

                        // Parser.Error("unexpected 'case' constant '" + caseConstant + "'");

0x309A  0x37 0xC1 0x04  PUSHIW 0x04C1
0x309D  0x1A 0x1C       PUSHIB 0x1C
0x309F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x30A1  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x30A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x30A5  0x1A 0x27       PUSHIB 0x27
0x30A7  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x30A9  0x24 0x03       SYSCALL0 0x03  // String.Append
0x30AB  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    Compile.hs:917

0x30AD  0x28 0x02       DECSP 0x02

                        // } // !isDefault                                      Compile.hs:918

0x30AF  0x28 0x02       DECSP 0x02

                        // Parser.Consume(HopperToken.Colon, ':');              Compile.hs:920

0x30B1  0x1A 0x0E       PUSHIB 0x0E
0x30B3  0x1A 0x3A       PUSHIB 0x3A
0x30B5  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:921

0x30B7  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x30B9  0x32 0x7F 0x00  JNZW 0x3138 (+127)

                        // if (!isDefault)                                      Compile.hs:926

0x30BC  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x30BE  0x32 0x7A 0x00  JNZW 0x3138 (+122)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, switchOffset); // switch variable

0x30C1  0x1A 0x1C       PUSHIB 0x1C
0x30C3  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x30C5  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // if (switchType == "string")                          Compile.hs:930

0x30C8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x30CA  0x37 0x62 0x02  PUSHIW 0x0262
0x30CD  0x1A 0x06       PUSHIB 0x06
0x30CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x30D1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x30D3  0x2F 0x18       JNZB 0x30EB (+24)

                        // CodeStream.AddInstructionSysCall0("String", "Compare");

0x30D5  0x37 0xDD 0x04  PUSHIW 0x04DD
0x30D8  0x1A 0x06       PUSHIB 0x06
0x30DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x30DC  0x37 0xE3 0x04  PUSHIW 0x04E3
0x30DF  0x1A 0x07       PUSHIB 0x07
0x30E1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x30E3  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x30E6  0x1A 0x44       PUSHIB 0x44
0x30E8  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.EQ); // => 1

0x30EB  0x1A 0x05       PUSHIB 0x05
0x30ED  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpNext = CodeStream.NextAddress;              Compile.hs:936

0x30F0  0x44            PUSHI0
0x30F1  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x30F4  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // jumpNexts.Append(jumpNext);                          Compile.hs:937

0x30F6  0x56 0x12 0x16  PUSHLOCALBB 0x1612
0x30F9  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x30FB  0x1A 0x31       PUSHIB 0x31
0x30FD  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // if (Parser.Check(HopperToken.Keyword, "case"))

0x3100  0x1A 0x05       PUSHIB 0x05
0x3102  0x37 0x6F 0x04  PUSHIW 0x046F
0x3105  0x1A 0x04       PUSHIB 0x04
0x3107  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3109  0x2C 0x84       CALLB 0x84     // Parser.Check
0x310B  0x2E 0x2B       JZB 0x3136 (+43)

                        // uint jumpMatch = CodeStream.NextAddress;             Compile.hs:942

0x310D  0x44            PUSHI0
0x310E  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3111  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // CodeStream.AddInstructionJump(Instruction.JW);

0x3113  0x1A 0x33       PUSHIB 0x33
0x3115  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // jumpMatches.Append(jumpMatch);                       Compile.hs:944

0x3118  0x56 0x14 0x18  PUSHLOCALBB 0x1814
0x311B  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:946

0x311D  0x44            PUSHI0
0x311E  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3121  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // CodeStream.PatchJump(jumpNexts[0], nextAddress);

0x3123  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3125  0x44            PUSHI0
0x3126  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x3128  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x312A  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // jumpNexts.Clear();                                   Compile.hs:948

0x312D  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x312F  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // continue; // multiple cases                          Compile.hs:950

0x3131  0x28 0x06       DECSP 0x06
0x3133  0x33 0x09 0xFF  JW 0x303C (-247)

                        // }                                                    Compile.hs:952

0x3136  0x28 0x02       DECSP 0x02

                        // if (Parser.HadError)                                 Compile.hs:956

0x3138  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x313A  0x2E 0x06       JZB 0x3140 (+6)

                        // break;                                               Compile.hs:958

0x313C  0x28 0x06       DECSP 0x06
0x313E  0x30 0x74       JB 0x31B2 (+116)

                        // foreach (var jumpMatch in jumpMatches)               Compile.hs:961

0x3140  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x3142  0x44            PUSHI0
0x3143  0x44            PUSHI0
0x3144  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x3146  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x3148  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x314A  0x05            EQ
0x314B  0x2F 0x1B       JNZB 0x3166 (+27)
0x314D  0x56 0x16 0x1A  PUSHLOCALBB 0x1A16
0x3150  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x3152  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:963

0x3154  0x44            PUSHI0
0x3155  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3158  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // CodeStream.PatchJump(jumpMatch, nextAddress);

0x315A  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x315D  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    Compile.hs:965

0x3160  0x28 0x02       DECSP 0x02
0x3162  0x22 0x1A       INCLOCALB 0x1A (BP+26)
0x3164  0x30 0xE0       JB 0x3144 (-32)
0x3166  0x28 0x06       DECSP 0x06

                        // Block.PushBlock(false); // not loop context

0x3168  0x44            PUSHI0
0x3169  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:968

0x316C  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:969

0x316E  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:971

0x3171  0x45            PUSHI1
0x3172  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // uint jumpEnd = CodeStream.NextAddress;               Compile.hs:973

0x3175  0x44            PUSHI0
0x3176  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3179  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // CodeStream.AddInstructionJump(Instruction.JW);

0x317B  0x1A 0x33       PUSHIB 0x33
0x317D  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // jumpEnds.Append(jumpEnd);                            Compile.hs:975

0x3180  0x4F            PUSHLOCALB02
0x3181  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x3183  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // foreach (var jumpNext in jumpNexts)                  Compile.hs:978

0x3185  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3187  0x44            PUSHI0
0x3188  0x44            PUSHI0
0x3189  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x318B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x318D  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x318F  0x05            EQ
0x3190  0x2F 0x1B       JNZB 0x31AB (+27)
0x3192  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x3195  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x3197  0x1B 0x1A       POPLOCALB 0x1A (BP+26)

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:980

0x3199  0x44            PUSHI0
0x319A  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x319D  0x1B 0x1E       POPLOCALB 0x1E (BP+30)

                        // CodeStream.PatchJump(jumpNext, nextAddress);

0x319F  0x56 0x1A 0x1E  PUSHLOCALBB 0x1E1A
0x31A2  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    Compile.hs:982

0x31A5  0x28 0x02       DECSP 0x02
0x31A7  0x22 0x1C       INCLOCALB 0x1C (BP+28)
0x31A9  0x30 0xE0       JB 0x3189 (-32)
0x31AB  0x28 0x06       DECSP 0x06

                        // } // loop                                            Compile.hs:983

0x31AD  0x28 0x08       DECSP 0x08
0x31AF  0x33 0x09 0xFE  JW 0x2FB8 (-503)

                        // uint endAddress = CodeStream.NextAddress;            Compile.hs:985

0x31B2  0x44            PUSHI0
0x31B3  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x31B6  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // foreach (var jumpEnd in jumpEnds)                    Compile.hs:986

0x31B8  0x4F            PUSHLOCALB02
0x31B9  0x44            PUSHI0
0x31BA  0x44            PUSHI0
0x31BB  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x31BD  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x31BF  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x31C1  0x05            EQ
0x31C2  0x2F 0x1A       JNZB 0x31DC (+26)
0x31C4  0x56 0x12 0x16  PUSHLOCALBB 0x1612
0x31C7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x31C9  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // uint ui = jumpEnd;                                   Compile.hs:988

0x31CB  0x44            PUSHI0
0x31CC  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x31CE  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // CodeStream.PatchJump(ui, endAddress);                Compile.hs:989

0x31D0  0x56 0x18 0x10  PUSHLOCALBB 0x1018
0x31D3  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    Compile.hs:990

0x31D6  0x28 0x02       DECSP 0x02
0x31D8  0x22 0x16       INCLOCALB 0x16 (BP+22)
0x31DA  0x30 0xE1       JB 0x31BB (-31)
0x31DC  0x28 0x06       DECSP 0x06

                        // Block.PopBlock();                                    Compile.hs:991

0x31DE  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // break;                                               Compile.hs:992

0x31E1  0x28 0x10       DECSP 0x10

                        // return success;                                      Compile.hs:994

0x31E3  0x4E            PUSHLOCALB00
0x31E4  0x2B 0x02       RETRETB 0x02


// Compile.hs:1277
// ####  Compile.compileLocalDeclaration(..)  ####                              0x0011


                        // bool success = false;                                Compile.hs:1278

0x31E6  0x5F 0x01       ENTERB 0x01

                        // string variableType = Types.ParseType();             Compile.hs:1281

0x31E8  0x24 0x02       SYSCALL0 0x02  // String.New
0x31EA  0x2C 0xDF       CALLB 0xDF     // Types.ParseType
0x31EC  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 Compile.hs:1282

0x31ED  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x31EF  0x2E 0x07       JZB 0x31F6 (+7)

                        // break;                                               Compile.hs:1284

0x31F1  0x28 0x02       DECSP 0x02
0x31F3  0x33 0xA8 0x00  JW 0x329B (+168)

                        // if (!Parser.Check(HopperToken.Identifier))           Compile.hs:1286

0x31F6  0x1A 0x03       PUSHIB 0x03
0x31F8  0x2C 0x83       CALLB 0x83     // Parser.Check
0x31FA  0x2F 0x16       JNZB 0x3210 (+22)

                        // if (!Parser.Check(HopperToken.DottedIdentifier))

0x31FC  0x1A 0x02       PUSHIB 0x02
0x31FE  0x2C 0x83       CALLB 0x83     // Parser.Check
0x3200  0x2F 0x10       JNZB 0x3210 (+16)

                        // Parser.ErrorAtCurrent("identifier expected");

0x3202  0x37 0xF3 0x01  PUSHIW 0x01F3
0x3205  0x1A 0x13       PUSHIB 0x13
0x3207  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3209  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1291

0x320B  0x28 0x02       DECSP 0x02
0x320D  0x33 0x8E 0x00  JW 0x329B (+142)

                        // <string,string> idToken   = Parser.CurrentToken;

0x3210  0x1A 0x0F       PUSHIB 0x0F
0x3212  0x1A 0x0F       PUSHIB 0x0F
0x3214  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x3216  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x3218  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string identifier = idToken["lexeme"];               Compile.hs:1295

0x321A  0x24 0x02       SYSCALL0 0x02  // String.New
0x321C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x321E  0x37 0x06 0x02  PUSHIW 0x0206
0x3221  0x1A 0x06       PUSHIB 0x06
0x3223  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3225  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3227  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // char firstCharacter = identifier[0];                 Compile.hs:1297

0x3229  0x44            PUSHI0
0x322A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x322C  0x44            PUSHI0
0x322D  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x322F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (firstCharacter.IsUpper())                        Compile.hs:1298

0x3231  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3233  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0x3236  0x2E 0x0F       JZB 0x3245 (+15)

                        // Parser.ErrorAtCurrent("public identifier for local declaration is invalid");

0x3238  0x37 0xEA 0x04  PUSHIW 0x04EA
0x323B  0x1A 0x32       PUSHIB 0x32
0x323D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x323F  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1301

0x3241  0x28 0x08       DECSP 0x08
0x3243  0x30 0x58       JB 0x329B (+88)

                        // Parser.Advance(); // identifier                      Compile.hs:1303

0x3245  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (!Parser.Check(HopperToken.Assign) && !Parser.Check(HopperToken.SemiColon))

0x3247  0x1A 0x2C       PUSHIB 0x2C
0x3249  0x2C 0x83       CALLB 0x83     // Parser.Check
0x324B  0x41            BOOLNOT
0x324C  0x27 0x00       DUP 0x00
0x324E  0x2E 0x08       JZB 0x3256 (+8)
0x3250  0x1A 0x0C       PUSHIB 0x0C
0x3252  0x2C 0x83       CALLB 0x83     // Parser.Check
0x3254  0x41            BOOLNOT
0x3255  0x0C            BOOLAND
0x3256  0x2E 0x0F       JZB 0x3265 (+15)

                        // Parser.ErrorAtCurrent("';' or '=' expected");

0x3258  0x37 0x1C 0x05  PUSHIW 0x051C
0x325B  0x1A 0x13       PUSHIB 0x13
0x325D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x325F  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1308

0x3261  0x28 0x08       DECSP 0x08
0x3263  0x30 0x38       JB 0x329B (+56)

                        // InitializeVariable(variableType);                    Compile.hs:1311

0x3265  0x4F            PUSHLOCALB02
0x3266  0x2C 0xF9       CALLB 0xF9     // Expression.InitializeVariable

                        // Block.AddLocal(variableType, identifier);            Compile.hs:1312

0x3268  0x4F            PUSHLOCALB02
0x3269  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x326B  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // if (Parser.Check(HopperToken.SemiColon))             Compile.hs:1313

0x326E  0x1A 0x0C       PUSHIB 0x0C
0x3270  0x2C 0x83       CALLB 0x83     // Parser.Check
0x3272  0x2E 0x21       JZB 0x3293 (+33)

                        // if (variableType == "variant")                       Compile.hs:1315

0x3274  0x4F            PUSHLOCALB02
0x3275  0x37 0xC3 0x02  PUSHIW 0x02C3
0x3278  0x1A 0x07       PUSHIB 0x07
0x327A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x327C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x327E  0x2F 0x0F       JNZB 0x328D (+15)

                        // Parser.ErrorAtCurrent("uninitialized variant illegal");

0x3280  0x37 0x2F 0x05  PUSHIW 0x052F
0x3283  0x1A 0x1D       PUSHIB 0x1D
0x3285  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3287  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1318

0x3289  0x28 0x08       DECSP 0x08
0x328B  0x30 0x10       JB 0x329B (+16)

                        // success = true;                                      Compile.hs:1320

0x328D  0x45            PUSHI1
0x328E  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1321

0x328F  0x28 0x08       DECSP 0x08
0x3291  0x30 0x0A       JB 0x329B (+10)

                        // success = compileAssignment(identifier, true);

0x3293  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3295  0x45            PUSHI1
0x3296  0x2C 0x10       CALLB 0x10     // Compile.compileAssignment
0x3298  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1324

0x3299  0x28 0x08       DECSP 0x08

                        // return success;                                      Compile.hs:1326

0x329B  0x4E            PUSHLOCALB00
0x329C  0x2B 0x02       RETRETB 0x02


// Compile.hs:1100
// ####  Compile.compileAssignment(..)  ####                                    0x0010


                        // bool success = false;                                Compile.hs:1101

0x329E  0x5F 0x01       ENTERB 0x01

                        // <string,string> leftToken = PreviousToken;           Compile.hs:1104

0x32A0  0x1A 0x0F       PUSHIB 0x0F
0x32A2  0x1A 0x0F       PUSHIB 0x0F
0x32A4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x32A6  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0x32A8  0x5E            POPCOPYLOCALB02

                        // Parser.Consume(HopperToken.Assign, '=');             Compile.hs:1105

0x32A9  0x1A 0x2C       PUSHIB 0x2C
0x32AB  0x1A 0x3D       PUSHIB 0x3D
0x32AD  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 Compile.hs:1106

0x32AF  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x32B1  0x2E 0x07       JZB 0x32B8 (+7)

                        // break;                                               Compile.hs:1108

0x32B3  0x28 0x02       DECSP 0x02
0x32B5  0x33 0xE4 0x02  JW 0x3599 (+740)

                        // string qualifiedName;                                Compile.hs:1112

0x32B8  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType = Types.GetTypeString(variableName, false, ref qualifiedName);

0x32BA  0x24 0x02       SYSCALL0 0x02  // String.New
0x32BC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x32BE  0x44            PUSHI0
0x32BF  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x32C1  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x32C3  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // bool isSetter = false;                               Compile.hs:1114

0x32C5  0x44            PUSHI0

                        // uint iOverload;                                      Compile.hs:1115

0x32C6  0x44            PUSHI0

                        // if (ignoreZero)                                      Compile.hs:1117

0x32C7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32C9  0x31 0xDA 0x00  JZW 0x33A3 (+218)

                        // ignoreZero = Types.IsValueType(variableType);

0x32CC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x32CE  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x32D0  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if (ignoreZero)                                      Compile.hs:1120

0x32D2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32D4  0x2E 0x1C       JZB 0x32F0 (+28)

                        // <string,string> nextToken = Parser.Peek();           Compile.hs:1122

0x32D6  0x1A 0x0F       PUSHIB 0x0F
0x32D8  0x1A 0x0F       PUSHIB 0x0F
0x32DA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x32DC  0x2C 0x85       CALLB 0x85     // Parser.Peek
0x32DE  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // HopperToken nextTokenType = Token.GetType(nextToken);

0x32E0  0x44            PUSHI0
0x32E1  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x32E3  0x2C 0x49       CALLB 0x49     // Token.GetType
0x32E5  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // ignoreZero = nextTokenType == HopperToken.SemiColon;

0x32E7  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x32E9  0x1A 0x0C       PUSHIB 0x0C
0x32EB  0x05            EQ
0x32EC  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    Compile.hs:1125

0x32EE  0x28 0x04       DECSP 0x04

                        // if (ignoreZero)                                      Compile.hs:1126

0x32F0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x32F2  0x31 0xB1 0x00  JZW 0x33A3 (+177)

                        // <string,string> currentToken = Parser.CurrentToken;

0x32F5  0x1A 0x0F       PUSHIB 0x0F
0x32F7  0x1A 0x0F       PUSHIB 0x0F
0x32F9  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x32FB  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x32FD  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // HopperToken tokenType = Token.GetType(currentToken);

0x32FF  0x44            PUSHI0
0x3300  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3302  0x2C 0x49       CALLB 0x49     // Token.GetType
0x3304  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if ((variableType == "bool")                         Compile.hs:1130

0x3306  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3308  0x37 0x6F 0x03  PUSHIW 0x036F
0x330B  0x1A 0x04       PUSHIB 0x04
0x330D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x330F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3311  0x44            PUSHI0
0x3312  0x05            EQ
0x3313  0x27 0x00       DUP 0x00
0x3315  0x2E 0x23       JZB 0x3338 (+35)
0x3317  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3319  0x1A 0x07       PUSHIB 0x07
0x331B  0x05            EQ
0x331C  0x0C            BOOLAND
0x331D  0x27 0x00       DUP 0x00
0x331F  0x2E 0x19       JZB 0x3338 (+25)
0x3321  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3323  0x37 0x06 0x02  PUSHIW 0x0206
0x3326  0x1A 0x06       PUSHIB 0x06
0x3328  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x332A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x332C  0x37 0x4C 0x05  PUSHIW 0x054C
0x332F  0x1A 0x05       PUSHIB 0x05
0x3331  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3333  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3335  0x44            PUSHI0
0x3336  0x05            EQ
0x3337  0x0C            BOOLAND
0x3338  0x2E 0x0B       JZB 0x3343 (+11)

                        // Parser.Advance(); // 'false'                         Compile.hs:1135

0x333A  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // success = true;                                      Compile.hs:1136

0x333C  0x45            PUSHI1
0x333D  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1137

0x333E  0x28 0x0E       DECSP 0x0E
0x3340  0x33 0x59 0x02  JW 0x3599 (+601)

                        // else if (((variableType == "byte") || (variableType == "int") || (variableType == "uint"))

0x3343  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3345  0x37 0x51 0x05  PUSHIW 0x0551
0x3348  0x1A 0x04       PUSHIB 0x04
0x334A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x334C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x334E  0x44            PUSHI0
0x334F  0x05            EQ
0x3350  0x27 0x00       DUP 0x00
0x3352  0x2F 0x22       JNZB 0x3374 (+34)
0x3354  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3356  0x37 0x30 0x02  PUSHIW 0x0230
0x3359  0x1A 0x03       PUSHIB 0x03
0x335B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x335D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x335F  0x44            PUSHI0
0x3360  0x05            EQ
0x3361  0x0B            BOOLOR
0x3362  0x27 0x00       DUP 0x00
0x3364  0x2F 0x10       JNZB 0x3374 (+16)
0x3366  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3368  0x37 0x2F 0x02  PUSHIW 0x022F
0x336B  0x1A 0x04       PUSHIB 0x04
0x336D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x336F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3371  0x44            PUSHI0
0x3372  0x05            EQ
0x3373  0x0B            BOOLOR
0x3374  0x27 0x00       DUP 0x00
0x3376  0x2E 0x20       JZB 0x3396 (+32)
0x3378  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x337A  0x1A 0x09       PUSHIB 0x09
0x337C  0x05            EQ
0x337D  0x0C            BOOLAND
0x337E  0x27 0x00       DUP 0x00
0x3380  0x2E 0x16       JZB 0x3396 (+22)
0x3382  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3384  0x37 0x06 0x02  PUSHIW 0x0206
0x3387  0x1A 0x06       PUSHIB 0x06
0x3389  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x338B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x338D  0x1A 0x30       PUSHIB 0x30
0x338F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3391  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3393  0x44            PUSHI0
0x3394  0x05            EQ
0x3395  0x0C            BOOLAND
0x3396  0x2E 0x0B       JZB 0x33A1 (+11)

                        // Parser.Advance(); // '0'                             Compile.hs:1144

0x3398  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // success = true;                                      Compile.hs:1145

0x339A  0x45            PUSHI1
0x339B  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1146

0x339C  0x28 0x0E       DECSP 0x0E
0x339E  0x33 0xFB 0x01  JW 0x3599 (+507)

                        // }                                                    Compile.hs:1148

0x33A1  0x28 0x04       DECSP 0x04

                        // if (variableType.Length == 0)                        Compile.hs:1150

0x33A3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x33A5  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x33A7  0x32 0x94 0x00  JNZW 0x343B (+148)

                        // string setterMethod = variableName + "_Set";

0x33AA  0x24 0x02       SYSCALL0 0x02  // String.New
0x33AC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x33AE  0x37 0x55 0x05  PUSHIW 0x0555
0x33B1  0x1A 0x04       PUSHIB 0x04
0x33B3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x33B5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x33B7  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // setterMethod = Types.QualifyMethodName(setterMethod);

0x33B9  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x33BB  0x2C 0xE9       CALLB 0xE9     // Types.QualifyMethodName
0x33BD  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // uint fIndex;                                         Compile.hs:1155

0x33BF  0x44            PUSHI0

                        // if (!Symbols.GetFunctionIndex(setterMethod, ref fIndex))

0x33C0  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x33C2  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x33C4  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x33C6  0x2F 0x11       JNZB 0x33D7 (+17)

                        // Parser.ErrorAt(leftToken, "undefined identifier");

0x33C8  0x4F            PUSHLOCALB02
0x33C9  0x37 0x59 0x05  PUSHIW 0x0559
0x33CC  0x1A 0x14       PUSHIB 0x14
0x33CE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x33D0  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1159

0x33D2  0x28 0x0E       DECSP 0x0E
0x33D4  0x33 0xC5 0x01  JW 0x3599 (+453)

                        // <uint> overloads = Symbols.GetFunctionOverloads(fIndex);

0x33D7  0x1A 0x04       PUSHIB 0x04
0x33D9  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x33DB  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x33DD  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0x33DF  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (overloads.Length != 1)                           Compile.hs:1163

0x33E1  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x33E3  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x33E5  0x45            PUSHI1
0x33E6  0x06            NE
0x33E7  0x2E 0x11       JZB 0x33F8 (+17)

                        // Parser.ErrorAt(leftToken, "setter method should only have one overload");

0x33E9  0x4F            PUSHLOCALB02
0x33EA  0x37 0x6D 0x05  PUSHIW 0x056D
0x33ED  0x1A 0x2B       PUSHIB 0x2B
0x33EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x33F1  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1166

0x33F3  0x28 0x10       DECSP 0x10
0x33F5  0x33 0xA4 0x01  JW 0x3599 (+420)

                        // iOverload = overloads[0];                            Compile.hs:1168

0x33F8  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x33FA  0x44            PUSHI0
0x33FB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x33FD  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // < < string > > arguments = Symbols.GetOverloadArguments(iOverload);

0x33FF  0x1A 0x19       PUSHIB 0x19
0x3401  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x3403  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3405  0x2C 0xB8       CALLB 0xB8     // Symbols.GetOverloadArguments
0x3407  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (arguments.Length != 1)                           Compile.hs:1171

0x3409  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x340B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x340D  0x45            PUSHI1
0x340E  0x06            NE
0x340F  0x2E 0x11       JZB 0x3420 (+17)

                        // Parser.ErrorAt(leftToken, "setter method should only have one argument");

0x3411  0x4F            PUSHLOCALB02
0x3412  0x37 0x98 0x05  PUSHIW 0x0598
0x3415  0x1A 0x2B       PUSHIB 0x2B
0x3417  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3419  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1174

0x341B  0x28 0x12       DECSP 0x12
0x341D  0x33 0x7C 0x01  JW 0x3599 (+380)

                        // <string> argument = arguments[0];                    Compile.hs:1176

0x3420  0x1A 0x0F       PUSHIB 0x0F
0x3422  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x3424  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3426  0x44            PUSHI0
0x3427  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x3429  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // variableType = argument[1];                          Compile.hs:1177

0x342B  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x342D  0x45            PUSHI1
0x342E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x3430  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // isSetter = true;                                     Compile.hs:1178

0x3432  0x45            PUSHI1
0x3433  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // Symbols.OverloadToCompile(iOverload);                Compile.hs:1179

0x3435  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3437  0x2C 0xC9       CALLB 0xC9     // Symbols.OverloadToCompile

                        // }                                                    Compile.hs:1180

0x3439  0x28 0x0A       DECSP 0x0A

                        // string expressionType = CompileExpression(variableType);

0x343B  0x24 0x02       SYSCALL0 0x02  // String.New
0x343D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x343F  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x3442  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // if (Parser.HadError)                                 Compile.hs:1182

0x3444  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3446  0x2E 0x07       JZB 0x344D (+7)

                        // break;                                               Compile.hs:1184

0x3448  0x28 0x0C       DECSP 0x0C
0x344A  0x33 0x4F 0x01  JW 0x3599 (+335)

                        // if (expressionType != variableType)                  Compile.hs:1186

0x344D  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x3450  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3452  0x31 0x11 0x01  JZW 0x3563 (+273)

                        // if (!Types.AutomaticUpCastTop(expressionType, variableType))

0x3455  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x3458  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x345A  0x32 0x09 0x01  JNZW 0x3563 (+265)

                        // bool isVerified = false;                             Compile.hs:1190

0x345D  0x44            PUSHI0

                        // if ((expressionType == "variant") || (expressionType == "K") || (expressionType == "V"))

0x345E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3460  0x37 0xC3 0x02  PUSHIW 0x02C3
0x3463  0x1A 0x07       PUSHIB 0x07
0x3465  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3467  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3469  0x44            PUSHI0
0x346A  0x05            EQ
0x346B  0x27 0x00       DUP 0x00
0x346D  0x2F 0x1C       JNZB 0x3489 (+28)
0x346F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3471  0x1A 0x4B       PUSHIB 0x4B
0x3473  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3475  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3477  0x44            PUSHI0
0x3478  0x05            EQ
0x3479  0x0B            BOOLOR
0x347A  0x27 0x00       DUP 0x00
0x347C  0x2F 0x0D       JNZB 0x3489 (+13)
0x347E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3480  0x1A 0x56       PUSHIB 0x56
0x3482  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3484  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3486  0x44            PUSHI0
0x3487  0x05            EQ
0x3488  0x0B            BOOLOR
0x3489  0x31 0x8E 0x00  JZW 0x3517 (+142)

                        // if (Types.IsSimpleType(variableType))                Compile.hs:1193

0x348C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x348E  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0x3490  0x2E 0x0E       JZB 0x349E (+14)

                        // Types.VerifyTopType(variableType, "");               Compile.hs:1195

0x3492  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3494  0x24 0x02       SYSCALL0 0x02  // String.New
0x3496  0x2C 0xF7       CALLB 0xF7     // Types.VerifyTopType

                        // isVerified = true;                                   Compile.hs:1196

0x3498  0x45            PUSHI1
0x3499  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // }                                                    Compile.hs:1197

0x349B  0x33 0x7C 0x00  JW 0x3517 (+124)

                        // else if (Types.IsList(variableType))                 Compile.hs:1198

0x349E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x34A0  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x34A2  0x2E 0x2D       JZB 0x34CF (+45)

                        // Types.VerifyTopType("list", "");                     Compile.hs:1200

0x34A4  0x37 0x4B 0x02  PUSHIW 0x024B
0x34A7  0x1A 0x04       PUSHIB 0x04
0x34A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x34AB  0x24 0x02       SYSCALL0 0x02  // String.New
0x34AD  0x2C 0xF7       CALLB 0xF7     // Types.VerifyTopType

                        // string variableValueType = Types.GetValueFromCollection(variableType);

0x34AF  0x24 0x02       SYSCALL0 0x02  // String.New
0x34B1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x34B3  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x34B5  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Types.IsSimpleType(variableValueType))           Compile.hs:1202

0x34B7  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x34B9  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0x34BB  0x2E 0x10       JZB 0x34CB (+16)

                        // Types.VerifyTopValueType(variableValueType, "list");

0x34BD  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x34BF  0x37 0x4B 0x02  PUSHIW 0x024B
0x34C2  0x1A 0x04       PUSHIB 0x04
0x34C4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x34C6  0x2C 0xF3       CALLB 0xF3     // Types.VerifyTopValueType

                        // isVerified = true;                                   Compile.hs:1205

0x34C8  0x45            PUSHI1
0x34C9  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // }                                                    Compile.hs:1207

0x34CB  0x28 0x02       DECSP 0x02
0x34CD  0x30 0x4A       JB 0x3517 (+74)

                        // else if (Types.IsDictionary(variableType))           Compile.hs:1208

0x34CF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x34D1  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x34D3  0x2E 0x44       JZB 0x3517 (+68)

                        // Types.VerifyTopType("dictionary", "");               Compile.hs:1210

0x34D5  0x37 0x68 0x02  PUSHIW 0x0268
0x34D8  0x1A 0x0A       PUSHIB 0x0A
0x34DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x34DC  0x24 0x02       SYSCALL0 0x02  // String.New
0x34DE  0x2C 0xF7       CALLB 0xF7     // Types.VerifyTopType

                        // string variableKeyType = Types.GetKeyFromCollection(variableType);

0x34E0  0x24 0x02       SYSCALL0 0x02  // String.New
0x34E2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x34E4  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0x34E6  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string variableValueType = Types.GetValueFromCollection(variableType);

0x34E8  0x24 0x02       SYSCALL0 0x02  // String.New
0x34EA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x34EC  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x34EE  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (Types.IsSimpleType(variableKeyType))             Compile.hs:1213

0x34F0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x34F2  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0x34F4  0x2E 0x21       JZB 0x3515 (+33)

                        // Types.VerifyTopType(variableKeyType, "Key");

0x34F6  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x34F8  0x37 0xC3 0x05  PUSHIW 0x05C3
0x34FB  0x1A 0x03       PUSHIB 0x03
0x34FD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x34FF  0x2C 0xF7       CALLB 0xF7     // Types.VerifyTopType

                        // if (Types.IsSimpleType(variableValueType))           Compile.hs:1216

0x3501  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3503  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0x3505  0x2E 0x10       JZB 0x3515 (+16)

                        // Types.VerifyTopValueType(variableValueType, "dictionary");

0x3507  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3509  0x37 0x68 0x02  PUSHIW 0x0268
0x350C  0x1A 0x0A       PUSHIB 0x0A
0x350E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3510  0x2C 0xF3       CALLB 0xF3     // Types.VerifyTopValueType

                        // isVerified = true;                                   Compile.hs:1219

0x3512  0x45            PUSHI1
0x3513  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // }                                                    Compile.hs:1222

0x3515  0x28 0x04       DECSP 0x04

                        // if (!isVerified)                                     Compile.hs:1224

0x3517  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3519  0x2F 0x48       JNZB 0x3561 (+72)

                        // if (expressionType == "variant")                     Compile.hs:1226

0x351B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x351D  0x37 0xC3 0x02  PUSHIW 0x02C3
0x3520  0x1A 0x07       PUSHIB 0x07
0x3522  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3524  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3526  0x2E 0x3B       JZB 0x3561 (+59)

                        // else if (expressionType == "V")                      Compile.hs:1234

0x3528  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x352A  0x1A 0x56       PUSHIB 0x56
0x352C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x352E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3530  0x2E 0x31       JZB 0x3561 (+49)

                        // else if (expressionType == "K")                      Compile.hs:1240

0x3532  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3534  0x1A 0x4B       PUSHIB 0x4B
0x3536  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3538  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x353A  0x2E 0x27       JZB 0x3561 (+39)

                        // Parser.ErrorAt(leftToken,                            Compile.hs:1248

0x353C  0x4F            PUSHLOCALB02
0x353D  0x37 0xD4 0x02  PUSHIW 0x02D4
0x3540  0x1A 0x25       PUSHIB 0x25
0x3542  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3544  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3546  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3548  0x37 0xF9 0x02  PUSHIW 0x02F9
0x354B  0x1A 0x08       PUSHIB 0x08
0x354D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x354F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3551  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3553  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3555  0x1A 0x27       PUSHIB 0x27
0x3557  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3559  0x24 0x03       SYSCALL0 0x03  // String.Append
0x355B  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               Compile.hs:1250

0x355D  0x28 0x0E       DECSP 0x0E
0x355F  0x30 0x3A       JB 0x3599 (+58)

                        // }                                                    Compile.hs:1253

0x3561  0x28 0x02       DECSP 0x02

                        // if (!isSetter)                                       Compile.hs:1256

0x3563  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3565  0x2F 0x0A       JNZB 0x356F (+10)

                        // CodeStream.AddInstructionPopVariable(variableType, qualifiedName);

0x3567  0x56 0x06 0x04  PUSHLOCALBB 0x0406
0x356A  0x34 0x3B 0x01  CALLW 0x013B   // CodeStream.AddInstructionPopVariable

                        // }                                                    Compile.hs:1259

0x356D  0x30 0x28       JB 0x3595 (+40)

                        // string returnType = CompileMethodCall(variableName + "_Set", "");

0x356F  0x24 0x02       SYSCALL0 0x02  // String.New
0x3571  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3573  0x37 0x55 0x05  PUSHIW 0x0555
0x3576  0x1A 0x04       PUSHIB 0x04
0x3578  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x357A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x357C  0x24 0x02       SYSCALL0 0x02  // String.New
0x357E  0x2C 0xFC       CALLB 0xFC     // Expression.CompileMethodCall
0x3580  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (returnType != "void")                            Compile.hs:1264

0x3582  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3584  0x37 0x09 0x01  PUSHIW 0x0109
0x3587  0x1A 0x04       PUSHIB 0x04
0x3589  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x358B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x358D  0x2E 0x06       JZB 0x3593 (+6)

                        // Die(0x0B);                                           Compile.hs:1266

0x358F  0x1A 0x0B       PUSHIB 0x0B
0x3591  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    Compile.hs:1268

0x3593  0x28 0x02       DECSP 0x02

                        // success = true;                                      Compile.hs:1270

0x3595  0x45            PUSHI1
0x3596  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1271

0x3597  0x28 0x0C       DECSP 0x0C

                        // return success;                                      Compile.hs:1273

0x3599  0x4E            PUSHLOCALB00
0x359A  0x2B 0x06       RETRETB 0x06


// Compile.hs:998
// ####  Compile.compileIncrementDecrement(..)  ####                            0x000F


                        // bool success = false;                                Compile.hs:999

0x359C  0x5F 0x01       ENTERB 0x01

                        // Parser.Advance(); // ++ or --                        Compile.hs:1002

0x359E  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string qualifiedName;                                Compile.hs:1003

0x35A0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType = Types.GetTypeString(variableName, true, ref qualifiedName);

0x35A2  0x24 0x02       SYSCALL0 0x02  // String.New
0x35A4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x35A6  0x45            PUSHI1
0x35A7  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x35A9  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x35AB  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (Parser.HadError)                                 Compile.hs:1005

0x35AD  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x35AF  0x2E 0x07       JZB 0x35B6 (+7)

                        // break;                                               Compile.hs:1007

0x35B1  0x28 0x04       DECSP 0x04
0x35B3  0x33 0xB0 0x01  JW 0x3763 (+432)

                        // if (!Types.IsNumericType(variableType))              Compile.hs:1009

0x35B6  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x35B8  0x2C 0xD6       CALLB 0xD6     // Types.IsNumericType
0x35BA  0x2F 0x10       JNZB 0x35CA (+16)

                        // Parser.ErrorAtCurrent("++ and -- operations only legal for numeric types");

0x35BC  0x37 0xC6 0x05  PUSHIW 0x05C6
0x35BF  0x1A 0x31       PUSHIB 0x31
0x35C1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35C3  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               Compile.hs:1012

0x35C5  0x28 0x04       DECSP 0x04
0x35C7  0x33 0x9C 0x01  JW 0x3763 (+412)

                        // if ((variableType == "uint") || (variableType == "byte") || (variableType == "int"))

0x35CA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x35CC  0x37 0x2F 0x02  PUSHIW 0x022F
0x35CF  0x1A 0x04       PUSHIB 0x04
0x35D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35D3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x35D5  0x44            PUSHI0
0x35D6  0x05            EQ
0x35D7  0x27 0x00       DUP 0x00
0x35D9  0x2F 0x22       JNZB 0x35FB (+34)
0x35DB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x35DD  0x37 0x51 0x05  PUSHIW 0x0551
0x35E0  0x1A 0x04       PUSHIB 0x04
0x35E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35E4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x35E6  0x44            PUSHI0
0x35E7  0x05            EQ
0x35E8  0x0B            BOOLOR
0x35E9  0x27 0x00       DUP 0x00
0x35EB  0x2F 0x10       JNZB 0x35FB (+16)
0x35ED  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x35EF  0x37 0x30 0x02  PUSHIW 0x0230
0x35F2  0x1A 0x03       PUSHIB 0x03
0x35F4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x35F6  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x35F8  0x44            PUSHI0
0x35F9  0x05            EQ
0x35FA  0x0B            BOOLOR
0x35FB  0x2E 0x55       JZB 0x3650 (+85)

                        // if (!Symbols.GlobalMemberExists(qualifiedName))

0x35FD  0x4F            PUSHLOCALB02
0x35FE  0x2C 0x9C       CALLB 0x9C     // Symbols.GlobalMemberExists
0x3600  0x2F 0x50       JNZB 0x3650 (+80)

                        // bool isRef;                                          Compile.hs:1018

0x3602  0x44            PUSHI0

                        // int offset = Block.GetOffset(variableName, ref isRef);

0x3603  0x44            PUSHI0
0x3604  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3606  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3608  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x360B  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if ((offset > -129) && (offset < 128) && !isRef)

0x360D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x360F  0x44            PUSHI0
0x3610  0x1A 0x81       PUSHIB 0x81
0x3612  0x12            SUBI
0x3613  0x16            GTI
0x3614  0x27 0x00       DUP 0x00
0x3616  0x2E 0x10       JZB 0x3626 (+16)
0x3618  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x361A  0x1A 0x80       PUSHIB 0x80
0x361C  0x17            LTI
0x361D  0x0C            BOOLAND
0x361E  0x27 0x00       DUP 0x00
0x3620  0x2E 0x06       JZB 0x3626 (+6)
0x3622  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3624  0x41            BOOLNOT
0x3625  0x0C            BOOLAND
0x3626  0x2E 0x28       JZB 0x364E (+40)

                        // byte operand =  CodeStream.IntToByte(offset);

0x3628  0x44            PUSHI0
0x3629  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x362B  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x362E  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (tokenType == HopperToken.Increment)              Compile.hs:1023

0x3630  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3632  0x1A 0x2A       PUSHIB 0x2A
0x3634  0x05            EQ
0x3635  0x2E 0x0B       JZB 0x3640 (+11)

                        // CodeStream.AddInstruction(Instruction.INCLOCALB, operand);

0x3637  0x1A 0x22       PUSHIB 0x22
0x3639  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x363B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1026

0x363E  0x30 0x09       JB 0x3647 (+9)

                        // CodeStream.AddInstruction(Instruction.DECLOCALB, operand);

0x3640  0x1A 0x23       PUSHIB 0x23
0x3642  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3644  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // success = true;                                      Compile.hs:1031

0x3647  0x45            PUSHI1
0x3648  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1032

0x3649  0x28 0x0A       DECSP 0x0A
0x364B  0x33 0x18 0x01  JW 0x3763 (+280)

                        // }                                                    Compile.hs:1034

0x364E  0x28 0x04       DECSP 0x04

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0x3650  0x4F            PUSHLOCALB02
0x3651  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // CodeStream.AddInstructionPUSHI(byte(1));             Compile.hs:1038

0x3654  0x45            PUSHI1
0x3655  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // if (tokenType == HopperToken.Increment)              Compile.hs:1039

0x3658  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x365A  0x1A 0x2A       PUSHIB 0x2A
0x365C  0x05            EQ
0x365D  0x31 0x7D 0x00  JZW 0x36DA (+125)

                        // switch (variableType)                                Compile.hs:1041

0x3660  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)

                        // case "long":                                         Compile.hs:1043

0x3662  0x37 0xF7 0x05  PUSHIW 0x05F7
0x3665  0x1A 0x04       PUSHIB 0x04
0x3667  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3669  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x366B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x366D  0x2F 0x26       JNZB 0x3693 (+38)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x366F  0x37 0xFB 0x05  PUSHIW 0x05FB
0x3672  0x1A 0x04       PUSHIB 0x04
0x3674  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3676  0x37 0xFF 0x05  PUSHIW 0x05FF
0x3679  0x1A 0x06       PUSHIB 0x06
0x367B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x367D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Long", "Add");

0x3680  0x37 0x01 0x06  PUSHIW 0x0601
0x3683  0x1A 0x04       PUSHIB 0x04
0x3685  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3687  0x37 0x05 0x06  PUSHIW 0x0605
0x368A  0x1A 0x03       PUSHIB 0x03
0x368C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x368E  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1047

0x3691  0x30 0x44       JB 0x36D5 (+68)

                        // case "float":                                        Compile.hs:1048

0x3693  0x37 0x08 0x06  PUSHIW 0x0608
0x3696  0x1A 0x05       PUSHIB 0x05
0x3698  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x369A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x369C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x369E  0x2F 0x26       JNZB 0x36C4 (+38)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToFloat");

0x36A0  0x37 0xFB 0x05  PUSHIW 0x05FB
0x36A3  0x1A 0x04       PUSHIB 0x04
0x36A5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36A7  0x37 0x0D 0x06  PUSHIW 0x060D
0x36AA  0x1A 0x07       PUSHIB 0x07
0x36AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36AE  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Float", "Add");

0x36B1  0x37 0x0F 0x06  PUSHIW 0x060F
0x36B4  0x1A 0x05       PUSHIB 0x05
0x36B6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36B8  0x37 0x05 0x06  PUSHIW 0x0605
0x36BB  0x1A 0x03       PUSHIB 0x03
0x36BD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36BF  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1052

0x36C2  0x30 0x13       JB 0x36D5 (+19)

                        // if (Types.IsSignedIntType(variableType))             Compile.hs:1055

0x36C4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x36C6  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x36C8  0x2E 0x09       JZB 0x36D1 (+9)

                        // CodeStream.AddInstruction(Instruction.ADDI);

0x36CA  0x1A 0x11       PUSHIB 0x11
0x36CC  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1058

0x36CF  0x30 0x06       JB 0x36D5 (+6)

                        // CodeStream.AddInstruction(Instruction.ADD);

0x36D1  0x44            PUSHI0
0x36D2  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1064

0x36D5  0x28 0x02       DECSP 0x02

                        // }                                                    Compile.hs:1065

0x36D7  0x33 0x82 0x00  JW 0x3759 (+130)

                        // else if (tokenType == HopperToken.Decrement)

0x36DA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x36DC  0x1A 0x2B       PUSHIB 0x2B
0x36DE  0x05            EQ
0x36DF  0x31 0x7A 0x00  JZW 0x3759 (+122)

                        // switch (variableType)                                Compile.hs:1068

0x36E2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)

                        // case "long":                                         Compile.hs:1070

0x36E4  0x37 0xF7 0x05  PUSHIW 0x05F7
0x36E7  0x1A 0x04       PUSHIB 0x04
0x36E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36EB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x36ED  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x36EF  0x2F 0x26       JNZB 0x3715 (+38)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x36F1  0x37 0xFB 0x05  PUSHIW 0x05FB
0x36F4  0x1A 0x04       PUSHIB 0x04
0x36F6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36F8  0x37 0xFF 0x05  PUSHIW 0x05FF
0x36FB  0x1A 0x06       PUSHIB 0x06
0x36FD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x36FF  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Long", "Sub");

0x3702  0x37 0x01 0x06  PUSHIW 0x0601
0x3705  0x1A 0x04       PUSHIB 0x04
0x3707  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3709  0x37 0x14 0x06  PUSHIW 0x0614
0x370C  0x1A 0x03       PUSHIB 0x03
0x370E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3710  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1074

0x3713  0x30 0x44       JB 0x3757 (+68)

                        // case "float":                                        Compile.hs:1075

0x3715  0x37 0x08 0x06  PUSHIW 0x0608
0x3718  0x1A 0x05       PUSHIB 0x05
0x371A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x371C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x371E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3720  0x2F 0x26       JNZB 0x3746 (+38)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToFloat");

0x3722  0x37 0xFB 0x05  PUSHIW 0x05FB
0x3725  0x1A 0x04       PUSHIB 0x04
0x3727  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3729  0x37 0x0D 0x06  PUSHIW 0x060D
0x372C  0x1A 0x07       PUSHIB 0x07
0x372E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3730  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Float", "Sub");

0x3733  0x37 0x0F 0x06  PUSHIW 0x060F
0x3736  0x1A 0x05       PUSHIB 0x05
0x3738  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x373A  0x37 0x14 0x06  PUSHIW 0x0614
0x373D  0x1A 0x03       PUSHIB 0x03
0x373F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3741  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:1079

0x3744  0x30 0x13       JB 0x3757 (+19)

                        // if (Types.IsSignedIntType(variableType))             Compile.hs:1082

0x3746  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3748  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x374A  0x2E 0x09       JZB 0x3753 (+9)

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x374C  0x1A 0x12       PUSHIB 0x12
0x374E  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1085

0x3751  0x30 0x06       JB 0x3757 (+6)

                        // CodeStream.AddInstruction(Instruction.SUB);

0x3753  0x45            PUSHI1
0x3754  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    Compile.hs:1091

0x3757  0x28 0x02       DECSP 0x02

                        // CodeStream.AddInstructionPopVariable(variableType, qualifiedName);

0x3759  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x375B  0x4F            PUSHLOCALB02
0x375C  0x34 0x3B 0x01  CALLW 0x013B   // CodeStream.AddInstructionPopVariable

                        // success = true;                                      Compile.hs:1094

0x375F  0x45            PUSHI1
0x3760  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:1095

0x3761  0x28 0x04       DECSP 0x04

                        // return success;                                      Compile.hs:1097

0x3763  0x4E            PUSHLOCALB00
0x3764  0x2B 0x06       RETRETB 0x06


// Compile.hs:453
// ####  Compile.compileForEachString(..)  ####                                 0x0009


                        // bool success = false;                                Compile.hs:454

0x3766  0x5F 0x01       ENTERB 0x01

                        // Block.PushBlock(true); // new loop block context

0x3768  0x45            PUSHI1
0x3769  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.AddLocal("string", identifier+ "_c");    // string collection object (expression in [top])

0x376C  0x37 0x62 0x02  PUSHIW 0x0262
0x376F  0x1A 0x06       PUSHIB 0x06
0x3771  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3773  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3775  0x37 0x5F 0x63  PUSHIW 0x635F
0x3778  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x377A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x377C  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // char: identifier

0x377F  0x1A 0x44       PUSHIB 0x44
0x3781  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // uint: identifier_i

0x3784  0x1A 0x44       PUSHIB 0x44
0x3786  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // Block.AddLocal("char", identifier);                  Compile.hs:462

0x3789  0x37 0x15 0x04  PUSHIW 0x0415
0x378C  0x1A 0x04       PUSHIB 0x04
0x378E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3790  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3792  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // Block.AddLocal("uint", identifier+"_i");             Compile.hs:463

0x3795  0x37 0x2F 0x02  PUSHIW 0x022F
0x3798  0x1A 0x04       PUSHIB 0x04
0x379A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x379C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x379E  0x37 0x5F 0x69  PUSHIW 0x695F
0x37A1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x37A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x37A5  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // bool isRef;                                          Compile.hs:466

0x37A8  0x44            PUSHI0

                        // byte identifierOffset = CodeStream.IntToByte(Block.GetOffset(identifier, ref isRef));

0x37A9  0x44            PUSHI0
0x37AA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x37AC  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x37AE  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x37B1  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x37B4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // byte iteratorOffset   = CodeStream.IntToByte(Block.GetOffset(identifier+"_i", ref isRef));

0x37B6  0x44            PUSHI0
0x37B7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x37B9  0x37 0x5F 0x69  PUSHIW 0x695F
0x37BC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x37BE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x37C0  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x37C2  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x37C5  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x37C8  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte collectionOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_c", ref isRef));

0x37CA  0x44            PUSHI0
0x37CB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x37CD  0x37 0x5F 0x63  PUSHIW 0x635F
0x37D0  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x37D2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x37D4  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x37D6  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x37D9  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x37DC  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:471

0x37DE  0x44            PUSHI0
0x37DF  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x37E2  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // string collection object

0x37E4  0x1A 0x1C       PUSHIB 0x1C
0x37E6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x37E8  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("String", "Length_Get");

0x37EB  0x37 0xDD 0x04  PUSHIW 0x04DD
0x37EE  0x1A 0x06       PUSHIB 0x06
0x37F0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37F2  0x37 0x17 0x06  PUSHIW 0x0617
0x37F5  0x1A 0x0A       PUSHIB 0x0A
0x37F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x37F9  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x37FC  0x1A 0x1C       PUSHIB 0x1C
0x37FE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3800  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.EQ);           Compile.hs:475

0x3803  0x1A 0x05       PUSHIB 0x05
0x3805  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:476

0x3808  0x44            PUSHI0
0x3809  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x380C  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionJump(Instruction.JNZW);

0x380E  0x1A 0x32       PUSHIB 0x32
0x3810  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // string collection object

0x3813  0x1A 0x1C       PUSHIB 0x1C
0x3815  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3817  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x381A  0x1A 0x1C       PUSHIB 0x1C
0x381C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x381E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("String", "GetChar");

0x3821  0x37 0xDD 0x04  PUSHIW 0x04DD
0x3824  0x1A 0x06       PUSHIB 0x06
0x3826  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3828  0x37 0x21 0x06  PUSHIW 0x0621
0x382B  0x1A 0x07       PUSHIB 0x07
0x382D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x382F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, identifierOffset);

0x3832  0x1A 0x1B       PUSHIB 0x1B
0x3834  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3836  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // Block.PushBlock(false); // for block locals

0x3839  0x44            PUSHI0
0x383A  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:488

0x383D  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:489

0x383F  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:491

0x3842  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3844  0x2E 0x06       JZB 0x384A (+6)

                        // break;                                               Compile.hs:493

0x3846  0x28 0x0C       DECSP 0x0C
0x3848  0x30 0x30       JB 0x3878 (+48)

                        // uint continueAddress = CodeStream.NextAddress;

0x384A  0x44            PUSHI0
0x384B  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x384E  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:497

0x3850  0x45            PUSHI1
0x3851  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstruction(Instruction.INCLOCALB, iteratorOffset);

0x3854  0x1A 0x22       PUSHIB 0x22
0x3856  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3858  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJump(Instruction.JW, nextAddress);

0x385B  0x1A 0x33       PUSHIB 0x33
0x385D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x385F  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x3862  0x44            PUSHI0
0x3863  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3866  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x3868  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x386B  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x386E  0x56 0x0E 0x10  PUSHLOCALBB 0x100E
0x3871  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // success = true;                                      Compile.hs:508

0x3874  0x45            PUSHI1
0x3875  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:509

0x3876  0x28 0x10       DECSP 0x10

                        // return success;                                      Compile.hs:511

0x3878  0x4E            PUSHLOCALB00
0x3879  0x2B 0x04       RETRETB 0x04


// Compile.hs:515
// ####  Compile.compileForEachList(..)  ####                                   0x000A


                        // bool success = false;                                Compile.hs:516

0x387B  0x5F 0x01       ENTERB 0x01

                        // Block.PushBlock(true); // new loop block context

0x387D  0x45            PUSHI1
0x387E  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.AddLocal(collectionType, identifier+ "_c");    // list collection object (expression in [top])

0x3881  0x56 0xFE 0xFA  PUSHLOCALBB 0xFAFE
0x3884  0x37 0x5F 0x63  PUSHIW 0x635F
0x3887  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3889  0x24 0x03       SYSCALL0 0x03  // String.Append
0x388B  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // iteratorType: identifier

0x388E  0x1A 0x44       PUSHIB 0x44
0x3890  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // uint: identifier_i

0x3893  0x1A 0x44       PUSHIB 0x44
0x3895  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // Block.AddLocal(iteratorType, identifier);            Compile.hs:524

0x3898  0x56 0xFC 0xFA  PUSHLOCALBB 0xFAFC
0x389B  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // Block.AddLocal("uint", identifier+"_i");             Compile.hs:525

0x389E  0x37 0x2F 0x02  PUSHIW 0x022F
0x38A1  0x1A 0x04       PUSHIB 0x04
0x38A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x38A5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x38A7  0x37 0x5F 0x69  PUSHIW 0x695F
0x38AA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38AC  0x24 0x03       SYSCALL0 0x03  // String.Append
0x38AE  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // bool isReference = !Types.IsValueType(iteratorType);

0x38B1  0x44            PUSHI0
0x38B2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x38B4  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x38B6  0x41            BOOLNOT
0x38B7  0x4D            POPLOCALB02

                        // bool isRef;                                          Compile.hs:529

0x38B8  0x44            PUSHI0

                        // byte identifierOffset = CodeStream.IntToByte(Block.GetOffset(identifier, ref isRef));

0x38B9  0x44            PUSHI0
0x38BA  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x38BC  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x38BE  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x38C1  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x38C4  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte iteratorOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_i", ref isRef));

0x38C6  0x44            PUSHI0
0x38C7  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x38C9  0x37 0x5F 0x69  PUSHIW 0x695F
0x38CC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38CE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x38D0  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x38D2  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x38D5  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x38D8  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // byte collectionOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_c", ref isRef));

0x38DA  0x44            PUSHI0
0x38DB  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x38DD  0x37 0x5F 0x63  PUSHIW 0x635F
0x38E0  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x38E2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x38E4  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x38E6  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x38E9  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x38EC  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:535

0x38EE  0x44            PUSHI0
0x38EF  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x38F2  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // list collection object

0x38F4  0x1A 0x1C       PUSHIB 0x1C
0x38F6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x38F8  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("List", "Length_Get");

0x38FB  0x37 0x17 0x03  PUSHIW 0x0317
0x38FE  0x1A 0x04       PUSHIB 0x04
0x3900  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3902  0x37 0x17 0x06  PUSHIW 0x0617
0x3905  0x1A 0x0A       PUSHIB 0x0A
0x3907  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3909  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x390C  0x1A 0x1C       PUSHIB 0x1C
0x390E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3910  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.EQ);           Compile.hs:539

0x3913  0x1A 0x05       PUSHIB 0x05
0x3915  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:540

0x3918  0x44            PUSHI0
0x3919  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x391C  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // CodeStream.AddInstructionJump(Instruction.JNZW);

0x391E  0x1A 0x32       PUSHIB 0x32
0x3920  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // list collection object

0x3923  0x1A 0x1C       PUSHIB 0x1C
0x3925  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3927  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x392A  0x1A 0x1C       PUSHIB 0x1C
0x392C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x392E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // if (iteratorType == "variant")                       Compile.hs:546

0x3931  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3933  0x37 0xC3 0x02  PUSHIW 0x02C3
0x3936  0x1A 0x07       PUSHIB 0x07
0x3938  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x393A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x393C  0x2F 0x15       JNZB 0x3951 (+21)

                        // CodeStream.AddInstructionSysCall0("List", "GetItemAsVariant");

0x393E  0x37 0x17 0x03  PUSHIW 0x0317
0x3941  0x1A 0x04       PUSHIB 0x04
0x3943  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3945  0x37 0x28 0x06  PUSHIW 0x0628
0x3948  0x1A 0x10       PUSHIB 0x10
0x394A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x394C  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    Compile.hs:550

0x394F  0x30 0x13       JB 0x3962 (+19)

                        // CodeStream.AddInstructionSysCall0("List", "GetItem");

0x3951  0x37 0x17 0x03  PUSHIW 0x0317
0x3954  0x1A 0x04       PUSHIB 0x04
0x3956  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3958  0x37 0x28 0x06  PUSHIW 0x0628
0x395B  0x1A 0x07       PUSHIB 0x07
0x395D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x395F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // if (isReference)                                     Compile.hs:558

0x3962  0x4F            PUSHLOCALB02
0x3963  0x2E 0x07       JZB 0x396A (+7)

                        // CodeStream.AddInstruction(Instruction.COPYNEXTPOP);

0x3965  0x1A 0x48       PUSHIB 0x48
0x3967  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, identifierOffset);

0x396A  0x1A 0x1B       PUSHIB 0x1B
0x396C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x396E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // Block.PushBlock(false); // for block locals

0x3971  0x44            PUSHI0
0x3972  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:565

0x3975  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:566

0x3977  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:568

0x397A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x397C  0x2E 0x06       JZB 0x3982 (+6)

                        // break;                                               Compile.hs:570

0x397E  0x28 0x0E       DECSP 0x0E
0x3980  0x30 0x30       JB 0x39B0 (+48)

                        // uint continueAddress = CodeStream.NextAddress;

0x3982  0x44            PUSHI0
0x3983  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3986  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:574

0x3988  0x45            PUSHI1
0x3989  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstruction(Instruction.INCLOCALB, iteratorOffset);

0x398C  0x1A 0x22       PUSHIB 0x22
0x398E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3990  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJump(Instruction.JW, nextAddress);

0x3993  0x1A 0x33       PUSHIB 0x33
0x3995  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3997  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x399A  0x44            PUSHI0
0x399B  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x399E  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x39A0  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x39A3  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x39A6  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x39A9  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // success = true;                                      Compile.hs:585

0x39AC  0x45            PUSHI1
0x39AD  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:586

0x39AE  0x28 0x12       DECSP 0x12

                        // return success;                                      Compile.hs:588

0x39B0  0x4E            PUSHLOCALB00
0x39B1  0x2B 0x08       RETRETB 0x08


// Compile.hs:592
// ####  Compile.compileForEachArray(..)  ####                                  0x000B


                        // bool success = false;                                Compile.hs:593

0x39B3  0x5F 0x01       ENTERB 0x01

                        // Block.PushBlock(true); // new loop block context

0x39B5  0x45            PUSHI1
0x39B6  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.AddLocal(collectionType, identifier+ "_c");    // array collection object (expression in [top])

0x39B9  0x56 0xFE 0xFA  PUSHLOCALBB 0xFAFE
0x39BC  0x37 0x5F 0x63  PUSHIW 0x635F
0x39BF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x39C1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x39C3  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // iteratorType: identifier

0x39C6  0x1A 0x44       PUSHIB 0x44
0x39C8  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // uint: identifier_i

0x39CB  0x1A 0x44       PUSHIB 0x44
0x39CD  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // Block.AddLocal(iteratorType, identifier);            Compile.hs:601

0x39D0  0x56 0xFC 0xFA  PUSHLOCALBB 0xFAFC
0x39D3  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // Block.AddLocal("uint", identifier+"_i");             Compile.hs:602

0x39D6  0x37 0x2F 0x02  PUSHIW 0x022F
0x39D9  0x1A 0x04       PUSHIB 0x04
0x39DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x39DD  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x39DF  0x37 0x5F 0x69  PUSHIW 0x695F
0x39E2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x39E4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x39E6  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // bool isReference = !Types.IsValueType(iteratorType);

0x39E9  0x44            PUSHI0
0x39EA  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x39EC  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x39EE  0x41            BOOLNOT
0x39EF  0x4D            POPLOCALB02

                        // if (isReference)                                     Compile.hs:605

0x39F0  0x4F            PUSHLOCALB02
0x39F1  0x2E 0x06       JZB 0x39F7 (+6)

                        // Die(0x0B); // how did an array end up with reference members?

0x39F3  0x1A 0x0B       PUSHIB 0x0B
0x39F5  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // bool isRef;                                          Compile.hs:610

0x39F7  0x44            PUSHI0

                        // byte identifierOffset = CodeStream.IntToByte(Block.GetOffset(identifier, ref isRef));

0x39F8  0x44            PUSHI0
0x39F9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x39FB  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x39FD  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3A00  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3A03  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte iteratorOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_i", ref isRef));

0x3A05  0x44            PUSHI0
0x3A06  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3A08  0x37 0x5F 0x69  PUSHIW 0x695F
0x3A0B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3A0D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3A0F  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x3A11  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3A14  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3A17  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // byte collectionOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_c", ref isRef));

0x3A19  0x44            PUSHI0
0x3A1A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3A1C  0x37 0x5F 0x63  PUSHIW 0x635F
0x3A1F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3A21  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3A23  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x3A25  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3A28  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3A2B  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // uint nextAddress = CodeStream.NextAddress;           Compile.hs:615

0x3A2D  0x44            PUSHI0
0x3A2E  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3A31  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // array collection object

0x3A33  0x1A 0x1C       PUSHIB 0x1C
0x3A35  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3A37  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Array", "Count_Get");

0x3A3A  0x37 0x01 0x03  PUSHIW 0x0301
0x3A3D  0x1A 0x05       PUSHIB 0x05
0x3A3F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A41  0x37 0x38 0x06  PUSHIW 0x0638
0x3A44  0x1A 0x09       PUSHIB 0x09
0x3A46  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A48  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x3A4B  0x1A 0x1C       PUSHIB 0x1C
0x3A4D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3A4F  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.EQ);           Compile.hs:620

0x3A52  0x1A 0x05       PUSHIB 0x05
0x3A54  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:621

0x3A57  0x44            PUSHI0
0x3A58  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3A5B  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // CodeStream.AddInstructionJump(Instruction.JNZW);

0x3A5D  0x1A 0x32       PUSHIB 0x32
0x3A5F  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // array collection object

0x3A62  0x1A 0x1C       PUSHIB 0x1C
0x3A64  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x3A66  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x3A69  0x1A 0x1C       PUSHIB 0x1C
0x3A6B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3A6D  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Array", "GetItem");

0x3A70  0x37 0x01 0x03  PUSHIW 0x0301
0x3A73  0x1A 0x05       PUSHIB 0x05
0x3A75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A77  0x37 0x28 0x06  PUSHIW 0x0628
0x3A7A  0x1A 0x07       PUSHIB 0x07
0x3A7C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3A7E  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, identifierOffset);

0x3A81  0x1A 0x1B       PUSHIB 0x1B
0x3A83  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3A85  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // Block.PushBlock(false); // for block locals

0x3A88  0x44            PUSHI0
0x3A89  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:633

0x3A8C  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:634

0x3A8E  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:636

0x3A91  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3A93  0x2E 0x06       JZB 0x3A99 (+6)

                        // break;                                               Compile.hs:638

0x3A95  0x28 0x0E       DECSP 0x0E
0x3A97  0x30 0x30       JB 0x3AC7 (+48)

                        // uint continueAddress = CodeStream.NextAddress;

0x3A99  0x44            PUSHI0
0x3A9A  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3A9D  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:642

0x3A9F  0x45            PUSHI1
0x3AA0  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstruction(Instruction.INCLOCALB, iteratorOffset);

0x3AA3  0x1A 0x22       PUSHIB 0x22
0x3AA5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3AA7  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJump(Instruction.JW, nextAddress);

0x3AAA  0x1A 0x33       PUSHIB 0x33
0x3AAC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3AAE  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x3AB1  0x44            PUSHI0
0x3AB2  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3AB5  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x3AB7  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x3ABA  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x3ABD  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x3AC0  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // success = true;                                      Compile.hs:653

0x3AC3  0x45            PUSHI1
0x3AC4  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:654

0x3AC5  0x28 0x12       DECSP 0x12

                        // return success;                                      Compile.hs:656

0x3AC7  0x4E            PUSHLOCALB00
0x3AC8  0x2B 0x08       RETRETB 0x08


// Compile.hs:660
// ####  Compile.compileForEachDictionary(..)  ####                             0x000C


                        // bool success = false;                                Compile.hs:661

0x3ACA  0x5F 0x01       ENTERB 0x01

                        // Block.PushBlock(true); // new loop block context

0x3ACC  0x45            PUSHI1
0x3ACD  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // Block.AddLocal(collectionType, identifier+ "_c");    // dictionary collection object (expression in [top])

0x3AD0  0x56 0xFE 0xFA  PUSHLOCALBB 0xFAFE
0x3AD3  0x37 0x5F 0x63  PUSHIW 0x635F
0x3AD6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3AD8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3ADA  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // string keyType = Types.GetKeyFromCollection(collectionType);

0x3ADD  0x24 0x02       SYSCALL0 0x02  // String.New
0x3ADF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3AE1  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0x3AE3  0x5E            POPCOPYLOCALB02

                        // string valueType = Types.GetKeyFromCollection(collectionType);

0x3AE4  0x24 0x02       SYSCALL0 0x02  // String.New
0x3AE6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3AE8  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0x3AEA  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // byte kt = Types.ToByte(keyType);                     Compile.hs:671

0x3AEC  0x44            PUSHI0
0x3AED  0x4F            PUSHLOCALB02
0x3AEE  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x3AF0  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte vt = Types.ToByte(valueType);                   Compile.hs:672

0x3AF2  0x44            PUSHI0
0x3AF3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3AF5  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x3AF7  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(kt);                  Compile.hs:673

0x3AF9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3AFB  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionPUSHI(vt);                  Compile.hs:674

0x3AFE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3B00  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Pair", "New");

0x3B03  0x37 0x41 0x06  PUSHIW 0x0641
0x3B06  0x1A 0x04       PUSHIB 0x04
0x3B08  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B0A  0x37 0x45 0x06  PUSHIW 0x0645
0x3B0D  0x1A 0x03       PUSHIB 0x03
0x3B0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B11  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionPUSHI(0);                   Compile.hs:676

0x3B14  0x44            PUSHI0
0x3B15  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // Block.AddLocal(iteratorType, identifier); // pair is same type as collection

0x3B18  0x56 0xFC 0xFA  PUSHLOCALBB 0xFAFC
0x3B1B  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // Block.AddLocal("uint", identifier+"_i");             Compile.hs:679

0x3B1E  0x37 0x2F 0x02  PUSHIW 0x022F
0x3B21  0x1A 0x04       PUSHIB 0x04
0x3B23  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B25  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3B27  0x37 0x5F 0x69  PUSHIW 0x695F
0x3B2A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3B2C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3B2E  0x34 0x4F 0x01  CALLW 0x014F   // Block.AddLocal

                        // bool isRef;                                          Compile.hs:681

0x3B31  0x44            PUSHI0

                        // byte identifierOffset = CodeStream.IntToByte(Block.GetOffset(identifier, ref isRef));

0x3B32  0x44            PUSHI0
0x3B33  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3B35  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x3B37  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3B3A  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3B3D  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // byte iteratorOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_i", ref isRef));

0x3B3F  0x44            PUSHI0
0x3B40  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3B42  0x37 0x5F 0x69  PUSHIW 0x695F
0x3B45  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3B47  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3B49  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x3B4B  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3B4E  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3B51  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // byte collectionOffset = CodeStream.IntToByte(Block.GetOffset(identifier+"_c", ref isRef));

0x3B53  0x44            PUSHI0
0x3B54  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3B56  0x37 0x5F 0x63  PUSHIW 0x635F
0x3B59  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3B5B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3B5D  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x3B5F  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x3B62  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x3B65  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // uint continueAddress = CodeStream.NextAddress;

0x3B67  0x44            PUSHI0
0x3B68  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3B6B  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, collectionOffset); // dictionary collection object

0x3B6D  0x1A 0x1C       PUSHIB 0x1C
0x3B6F  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x3B71  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, iteratorOffset);

0x3B74  0x1A 0x1C       PUSHIB 0x1C
0x3B76  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3B78  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Dictionary", "Next");

0x3B7B  0x37 0x0D 0x03  PUSHIW 0x030D
0x3B7E  0x1A 0x0A       PUSHIB 0x0A
0x3B80  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B82  0x37 0x48 0x06  PUSHIW 0x0648
0x3B85  0x1A 0x04       PUSHIB 0x04
0x3B87  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3B89  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, iteratorOffset); // iterator (identifier_i)

0x3B8C  0x1A 0x1B       PUSHIB 0x1B
0x3B8E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x3B90  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, identifierOffset); // pair (identifier)

0x3B93  0x1A 0x1B       PUSHIB 0x1B
0x3B95  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x3B97  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // uint jumpExit = CodeStream.NextAddress;              Compile.hs:695

0x3B9A  0x44            PUSHI0
0x3B9B  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3B9E  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x3BA0  0x1A 0x31       PUSHIB 0x31
0x3BA2  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // Block.PushBlock(false); // for block locals

0x3BA5  0x44            PUSHI0
0x3BA6  0x34 0x53 0x01  CALLW 0x0153   // Block.PushBlock

                        // compileBlock();                                      Compile.hs:699

0x3BA9  0x2C 0x13       CALLB 0x13     // Compile.compileBlock

                        // Block.PopBlock();                                    Compile.hs:700

0x3BAB  0x34 0x54 0x01  CALLW 0x0154   // Block.PopBlock

                        // if (Parser.HadError)                                 Compile.hs:702

0x3BAE  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3BB0  0x2E 0x06       JZB 0x3BB6 (+6)

                        // break;                                               Compile.hs:704

0x3BB2  0x28 0x14       DECSP 0x14
0x3BB4  0x30 0x23       JB 0x3BD7 (+35)

                        // CodeStream.InsertDebugInfo(true);                    Compile.hs:707

0x3BB6  0x45            PUSHI1
0x3BB7  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // CodeStream.AddInstructionJump(Instruction.JW, continueAddress);

0x3BBA  0x1A 0x33       PUSHIB 0x33
0x3BBC  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x3BBE  0x34 0x34 0x01  CALLW 0x0134   // CodeStream.AddInstructionJump

                        // uint breakAddress = CodeStream.NextAddress;

0x3BC1  0x44            PUSHI0
0x3BC2  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x3BC5  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // CodeStream.PatchJump(jumpExit, breakAddress);

0x3BC7  0x56 0x14 0x16  PUSHLOCALBB 0x1614
0x3BCA  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // Block.PopBlock(continueAddress, breakAddress);

0x3BCD  0x56 0x12 0x16  PUSHLOCALBB 0x1612
0x3BD0  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // success = true;                                      Compile.hs:715

0x3BD3  0x45            PUSHI1
0x3BD4  0x4C            POPLOCALB00

                        // break;                                               Compile.hs:716

0x3BD5  0x28 0x16       DECSP 0x16

                        // return success;                                      Compile.hs:718

0x3BD7  0x4E            PUSHLOCALB00
0x3BD8  0x2B 0x08       RETRETB 0x08


// /source/system/string.hs:489
// ####  String.ToLower(..)  ####                                               0x019A


                        // uint i;                                              string.hs:490

0x3BDA  0x5F 0x03       ENTERB 0x03

                        // string result;                                       string.hs:493

0x3BDC  0x24 0x02       SYSCALL0 0x02  // String.New

                        // length = this.Length;                                string.hs:494

0x3BDE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3BE0  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3BE2  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (; i < length; i++)                              string.hs:495

0x3BE4  0x4E            PUSHLOCALB00
0x3BE5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3BE7  0x08            LT
0x3BE8  0x2E 0x14       JZB 0x3BFC (+20)

                        // c = this[i];                                         string.hs:497

0x3BEA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3BEC  0x4E            PUSHLOCALB00
0x3BED  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x3BEF  0x4D            POPLOCALB02

                        // Build(ref result, c.ToLower());                      string.hs:498

0x3BF0  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x3BF2  0x4F            PUSHLOCALB02
0x3BF3  0x34 0x63 0x01  CALLW 0x0163   // Char.ToLower
0x3BF6  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    string.hs:499

0x3BF8  0x22 0x00       INCLOCALB 0x00 (BP+0)
0x3BFA  0x30 0xEA       JB 0x3BE4 (-22)

                        // return result;                                       string.hs:500

0x3BFC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3BFE  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:320
// ####  Token.TryParseUInt(..)  ####                                           0x0054


                        // bool success;                                        token.hs:321

0x3C00  0x5F 0x01       ENTERB 0x01

                        // long rv;                                             token.hs:322

0x3C02  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (TryParseLong(content, ref rv))                   token.hs:323

0x3C04  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C06  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x3C08  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x3C0A  0x2E 0x1E       JZB 0x3C28 (+30)

                        // if ((rv >= 0) && (rv <= 65535))                      token.hs:325

0x3C0C  0x4F            PUSHLOCALB02
0x3C0D  0x44            PUSHI0
0x3C0E  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x3C10  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x3C12  0x27 0x00       DUP 0x00
0x3C14  0x2E 0x0B       JZB 0x3C1F (+11)
0x3C16  0x4F            PUSHLOCALB02
0x3C17  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0x3C1A  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x3C1C  0x24 0x46       SYSCALL0 0x46  // Long.LE
0x3C1E  0x0C            BOOLAND
0x3C1F  0x2E 0x09       JZB 0x3C28 (+9)

                        // returnValue = uint(rv);                              token.hs:327

0x3C21  0x4F            PUSHLOCALB02
0x3C22  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x3C24  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // success = true;                                      token.hs:328

0x3C26  0x45            PUSHI1
0x3C27  0x4C            POPLOCALB00

                        // return success;                                      token.hs:331

0x3C28  0x4E            PUSHLOCALB00
0x3C29  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:87
// ####  Token.GetType(..)  ####                                                0x0049

0x3C2B  0x49            ENTER

                        // string name = token["type"];                         token.hs:89

0x3C2C  0x24 0x02       SYSCALL0 0x02  // String.New
0x3C2E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3C30  0x37 0x13 0x01  PUSHIW 0x0113
0x3C33  0x1A 0x04       PUSHIB 0x04
0x3C35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C37  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3C39  0x5D            POPCOPYLOCALB00

                        // HopperToken tokenType = HopperToken.Undefined;

0x3C3A  0x44            PUSHI0
0x3C3B  0x44            PUSHI0
0x3C3C  0x4D            POPLOCALB02

                        // if (hopperTokenTypes.Contains(name))                 token.hs:91

0x3C3D  0x20 0x0E       PUSHGLOBALB 0x0E
0x3C3F  0x4E            PUSHLOCALB00
0x3C40  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x3C42  0x2E 0x0A       JZB 0x3C4C (+10)

                        // tokenType = hopperTokenTypes[name];                  token.hs:93

0x3C44  0x20 0x0E       PUSHGLOBALB 0x0E
0x3C46  0x4E            PUSHLOCALB00
0x3C47  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3C49  0x4D            POPLOCALB02

                        // }                                                    token.hs:94

0x3C4A  0x30 0x0B       JB 0x3C55 (+11)

                        // PrintLn("TODO : token not implemented in Token.GetType");

0x3C4C  0x37 0x4C 0x06  PUSHIW 0x064C
0x3C4F  0x1A 0x2D       PUSHIB 0x2D
0x3C51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3C53  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // return tokenType;                                    token.hs:99

0x3C55  0x4F            PUSHLOCALB02
0x3C56  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/token.hs:273
// ####  Token.TryParseLong(..)  ####                                           0x0052

0x3C58  0x49            ENTER

                        // long result;                                         token.hs:274

0x3C59  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // bool makeNegative;                                   token.hs:275

0x3C5B  0x44            PUSHI0

                        // if (content.Length < 1)                              token.hs:276

0x3C5C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C5E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3C60  0x45            PUSHI1
0x3C61  0x08            LT
0x3C62  0x2E 0x05       JZB 0x3C67 (+5)

                        // return false;                                        token.hs:278

0x3C64  0x44            PUSHI0
0x3C65  0x2B 0x08       RETRETB 0x08

                        // if (content.StartsWith('+'))                         token.hs:280

0x3C67  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C69  0x1A 0x2B       PUSHIB 0x2B
0x3C6B  0x34 0x8C 0x01  CALLW 0x018C   // String.StartsWith
0x3C6E  0x2E 0x0B       JZB 0x3C79 (+11)

                        // content = content.Substring(1);                      token.hs:282

0x3C70  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C72  0x45            PUSHI1
0x3C73  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x3C75  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    token.hs:283

0x3C77  0x30 0x14       JB 0x3C8B (+20)

                        // else if (content.StartsWith('-'))                    token.hs:284

0x3C79  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C7B  0x1A 0x2D       PUSHIB 0x2D
0x3C7D  0x34 0x8C 0x01  CALLW 0x018C   // String.StartsWith
0x3C80  0x2E 0x0B       JZB 0x3C8B (+11)

                        // content = content.Substring(1);                      token.hs:286

0x3C82  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C84  0x45            PUSHI1
0x3C85  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x3C87  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // makeNegative = true;                                 token.hs:287

0x3C89  0x45            PUSHI1
0x3C8A  0x4D            POPLOCALB02

                        // foreach (var c in content)                           token.hs:289

0x3C8B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3C8D  0x44            PUSHI0
0x3C8E  0x44            PUSHI0
0x3C8F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3C91  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3C93  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x3C95  0x05            EQ
0x3C96  0x2F 0x2A       JNZB 0x3CC0 (+42)
0x3C98  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x3C9B  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x3C9D  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // result = result * 10;                                token.hs:291

0x3C9F  0x4E            PUSHLOCALB00
0x3CA0  0x1A 0x0A       PUSHIB 0x0A
0x3CA2  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x3CA4  0x24 0x42       SYSCALL0 0x42  // Long.Mul
0x3CA6  0x5D            POPCOPYLOCALB00

                        // if (!c.IsDigit())                                    token.hs:292

0x3CA7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3CA9  0x34 0x60 0x01  CALLW 0x0160   // Char.IsDigit
0x3CAC  0x2F 0x05       JNZB 0x3CB1 (+5)

                        // return false;                                        token.hs:294

0x3CAE  0x44            PUSHI0
0x3CAF  0x2B 0x0E       RETRETB 0x0E

                        // result = result + (byte(c) - 48); // 48 is ASCII for '0'

0x3CB1  0x4E            PUSHLOCALB00
0x3CB2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3CB4  0x1A 0x30       PUSHIB 0x30
0x3CB6  0x01            SUB
0x3CB7  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x3CB9  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x3CBB  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:297

0x3CBC  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x3CBE  0x30 0xD1       JB 0x3C8F (-47)
0x3CC0  0x28 0x06       DECSP 0x06

                        // if (makeNegative)                                    token.hs:298

0x3CC2  0x4F            PUSHLOCALB02
0x3CC3  0x2E 0x06       JZB 0x3CC9 (+6)

                        // result = -result;                                    token.hs:300

0x3CC5  0x4E            PUSHLOCALB00
0x3CC6  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0x3CC8  0x5D            POPCOPYLOCALB00

                        // returnValue = result;                                token.hs:302

0x3CC9  0x4E            PUSHLOCALB00
0x3CCA  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return true;                                         token.hs:303

0x3CCC  0x45            PUSHI1
0x3CCD  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/parser.hs:27
// ####  Parser.SetInteractive(..)  ####                                        0x006E

0x3CCF  0x49            ENTER

                        // tickColumn = column;                                 parser.hs:28

0x3CD0  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3CD2  0x1F 0x3C       POPGLOBALB 0x3C

                        // tickRow = row;                                       parser.hs:29

0x3CD4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CD6  0x1F 0x3A       POPGLOBALB 0x3A

                        // interactive = true;                                  parser.hs:30

0x3CD8  0x45            PUSHI1
0x3CD9  0x1F 0x32       POPGLOBALB 0x32

                        // File.Delete(errorPath);                              parser.hs:31

0x3CDB  0x37 0x79 0x06  PUSHIW 0x0679
0x3CDE  0x1A 0x10       PUSHIB 0x10
0x3CE0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3CE2  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // errorFile = File.Create(errorPath);                  parser.hs:32

0x3CE4  0x37 0x79 0x06  PUSHIW 0x0679
0x3CE7  0x1A 0x10       PUSHIB 0x10
0x3CE9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3CEB  0x24 0x62       SYSCALL0 0x62  // File.Create
0x3CED  0x59 0x36       POPCOPYGLOBALB 0x36

                        // currentTick = 0;                                     parser.hs:33

0x3CEF  0x44            PUSHI0
0x3CF0  0x1F 0x38       POPGLOBALB 0x38

                        // Diagnostics.SetError(0x00);                          parser.hs:34

0x3CF2  0x44            PUSHI0
0x3CF3  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:35

0x3CF5  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:149
// ####  Parser.Error(..)  ####                                                 0x007C

0x3CF7  0x49            ENTER

                        // ErrorAt(previousToken, message);                     parser.hs:150

0x3CF8  0x20 0x2C       PUSHGLOBALB 0x2C
0x3CFA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3CFC  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // }                                                    parser.hs:151

0x3CFE  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:37
// ####  Parser.IsInteractive(..)  ####                                         0x006F

0x3D00  0x49            ENTER

                        // return interactive;                                  parser.hs:38

0x3D01  0x20 0x32       PUSHGLOBALB 0x32
0x3D03  0x4A            RET0


// /source/compiler/tokens/parser.hs:74
// ####  Parser.ProgressDone(..)  ####                                          0x0072

0x3D04  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:75

0x3D05  0x2C 0x6F       CALLB 0x6F     // Parser.IsInteractive
0x3D07  0x2E 0x0F       JZB 0x3D16 (+15)

                        // DrawChar(tickColumn, tickRow, ' ', Color.ProgressText, Color.ProgressFace);

0x3D09  0x52 0x3C 0x3A  PUSHGLOBALBB 0x3A3C
0x3D0C  0x1A 0x20       PUSHIB 0x20
0x3D0E  0x34 0xEB 0x01  CALLW 0x01EB   // Color.ProgressText_Get
0x3D11  0x34 0xEC 0x01  CALLW 0x01EC   // Color.ProgressFace_Get
0x3D14  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // }                                                    parser.hs:79

0x3D16  0x4A            RET0


// /source/compiler/tokens/parser.hs:103
// ####  Parser.Reset(..)  ####                                                 0x0078

0x3D17  0x49            ENTER

                        // <string, string> empty;                              parser.hs:104

0x3D18  0x1A 0x0F       PUSHIB 0x0F
0x3D1A  0x1A 0x0F       PUSHIB 0x0F
0x3D1C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // previousToken = empty;                               parser.hs:105

0x3D1E  0x4E            PUSHLOCALB00
0x3D1F  0x59 0x2C       POPCOPYGLOBALB 0x2C

                        // currentToken = empty;                                parser.hs:106

0x3D21  0x4E            PUSHLOCALB00
0x3D22  0x59 0x2E       POPCOPYGLOBALB 0x2E

                        // hadError = false;                                    parser.hs:107

0x3D24  0x44            PUSHI0
0x3D25  0x1F 0x30       POPGLOBALB 0x30

                        // }                                                    parser.hs:108

0x3D27  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:162
// ####  Parser.Advance(..)  ####                                               0x007F

0x3D29  0x49            ENTER

                        // previousToken = currentToken;                        parser.hs:163

0x3D2A  0x20 0x2E       PUSHGLOBALB 0x2E
0x3D2C  0x59 0x2C       POPCOPYGLOBALB 0x2C

                        // nextToken();                                         parser.hs:166

0x3D2E  0x2C 0x79       CALLB 0x79     // Parser.nextToken

                        // HopperToken ttype = Token.GetType(currentToken);

0x3D30  0x44            PUSHI0
0x3D31  0x20 0x2E       PUSHGLOBALB 0x2E
0x3D33  0x2C 0x49       CALLB 0x49     // Token.GetType
0x3D35  0x4C            POPLOCALB00

                        // if (ttype != HopperToken.Error)                      parser.hs:168

0x3D36  0x4E            PUSHLOCALB00
0x3D37  0x45            PUSHI1
0x3D38  0x06            NE
0x3D39  0x2E 0x05       JZB 0x3D3E (+5)

                        // break;                                               parser.hs:170

0x3D3B  0x28 0x02       DECSP 0x02
0x3D3D  0x4A            RET0

                        // ErrorAtCurrent(currentToken["lexeme"]);              parser.hs:172

0x3D3E  0x20 0x2E       PUSHGLOBALB 0x2E
0x3D40  0x37 0x06 0x02  PUSHIW 0x0206
0x3D43  0x1A 0x06       PUSHIB 0x06
0x3D45  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3D47  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3D49  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:173

0x3D4B  0x28 0x02       DECSP 0x02
0x3D4D  0x4A            RET0


// /source/compiler/tokens/parser.hs:220
// ####  Parser.Check(..)  ####                                                 0x0084


                        // bool result = false;                                 parser.hs:221

0x3D4E  0x5F 0x02       ENTERB 0x02

                        // HopperToken ttype = Token.GetType(currentToken);

0x3D50  0x20 0x2E       PUSHGLOBALB 0x2E
0x3D52  0x2C 0x49       CALLB 0x49     // Token.GetType
0x3D54  0x4D            POPLOCALB02

                        // result = (checkType == ttype);                       parser.hs:225

0x3D55  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3D57  0x4F            PUSHLOCALB02
0x3D58  0x05            EQ
0x3D59  0x4C            POPLOCALB00

                        // if (!result)                                         parser.hs:226

0x3D5A  0x4E            PUSHLOCALB00
0x3D5B  0x2F 0x07       JNZB 0x3D62 (+7)

                        // break;                                               parser.hs:228

0x3D5D  0x28 0x02       DECSP 0x02
0x3D5F  0x33 0x8C 0x00  JW 0x3DEB (+140)

                        // if (checkType == HopperToken.Keyword)                parser.hs:230

0x3D62  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3D64  0x1A 0x05       PUSHIB 0x05
0x3D66  0x05            EQ
0x3D67  0x2E 0x38       JZB 0x3D9F (+56)

                        // keyword = "|" + keyword + "|";                       parser.hs:232

0x3D69  0x1A 0x7C       PUSHIB 0x7C
0x3D6B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3D6D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3D6F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3D71  0x1A 0x7C       PUSHIB 0x7C
0x3D73  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3D75  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3D77  0x57 0xFE       POPCOPYLOCALB 0xFE (BP-2)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x3D79  0x24 0x02       SYSCALL0 0x02  // String.New
0x3D7B  0x1A 0x7C       PUSHIB 0x7C
0x3D7D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3D7F  0x20 0x2E       PUSHGLOBALB 0x2E
0x3D81  0x37 0x06 0x02  PUSHIW 0x0206
0x3D84  0x1A 0x06       PUSHIB 0x06
0x3D86  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3D88  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3D8A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3D8C  0x1A 0x7C       PUSHIB 0x7C
0x3D8E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3D90  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3D92  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // result = keyword.Contains(search);                   parser.hs:234

0x3D94  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0x3D97  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x3D9A  0x4C            POPLOCALB00

                        // }                                                    parser.hs:235

0x3D9B  0x28 0x02       DECSP 0x02
0x3D9D  0x30 0x4C       JB 0x3DE9 (+76)

                        // else if ((checkType == HopperToken.Identifier) && (keyword.Length != 0))

0x3D9F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3DA1  0x1A 0x03       PUSHIB 0x03
0x3DA3  0x05            EQ
0x3DA4  0x27 0x00       DUP 0x00
0x3DA6  0x2E 0x09       JZB 0x3DAF (+9)
0x3DA8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3DAA  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3DAC  0x44            PUSHI0
0x3DAD  0x06            NE
0x3DAE  0x0C            BOOLAND
0x3DAF  0x2E 0x16       JZB 0x3DC5 (+22)

                        // result = keyword == currentToken["lexeme"];

0x3DB1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3DB3  0x20 0x2E       PUSHGLOBALB 0x2E
0x3DB5  0x37 0x06 0x02  PUSHIW 0x0206
0x3DB8  0x1A 0x06       PUSHIB 0x06
0x3DBA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3DBC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3DBE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3DC0  0x44            PUSHI0
0x3DC1  0x05            EQ
0x3DC2  0x4C            POPLOCALB00

                        // }                                                    parser.hs:239

0x3DC3  0x30 0x26       JB 0x3DE9 (+38)

                        // else if ((checkType == HopperToken.Directive) && (keyword.Length != 0))

0x3DC5  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3DC7  0x1A 0x06       PUSHIB 0x06
0x3DC9  0x05            EQ
0x3DCA  0x27 0x00       DUP 0x00
0x3DCC  0x2E 0x09       JZB 0x3DD5 (+9)
0x3DCE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3DD0  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3DD2  0x44            PUSHI0
0x3DD3  0x06            NE
0x3DD4  0x0C            BOOLAND
0x3DD5  0x2E 0x14       JZB 0x3DE9 (+20)

                        // result = keyword == currentToken["lexeme"];

0x3DD7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3DD9  0x20 0x2E       PUSHGLOBALB 0x2E
0x3DDB  0x37 0x06 0x02  PUSHIW 0x0206
0x3DDE  0x1A 0x06       PUSHIB 0x06
0x3DE0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3DE2  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3DE4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x3DE6  0x44            PUSHI0
0x3DE7  0x05            EQ
0x3DE8  0x4C            POPLOCALB00

                        // break;                                               parser.hs:244

0x3DE9  0x28 0x02       DECSP 0x02

                        // return result;                                       parser.hs:246

0x3DEB  0x4E            PUSHLOCALB00
0x3DEC  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/parser.hs:83
// ####  Parser.CurrentToken_Get(..)  ####                                      0x0074

0x3DEE  0x49            ENTER

                        // <string, string> CurrentToken { get { return currentToken; }}

0x3DEF  0x20 0x2E       PUSHGLOBALB 0x2E
0x3DF1  0x4A            RET0


// /source/compiler/tokens/parser.hs:81
// ####  Parser.HadError_Get(..)  ####                                          0x0073

0x3DF2  0x49            ENTER

                        // bool HadError { get { return hadError; } }           parser.hs:81

0x3DF3  0x20 0x30       PUSHGLOBALB 0x30
0x3DF5  0x4A            RET0


// /source/compiler/tokens/parser.hs:57
// ####  Parser.ProgressTick(..)  ####                                          0x0071

0x3DF6  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:58

0x3DF7  0x2C 0x6F       CALLB 0x6F     // Parser.IsInteractive
0x3DF9  0x2E 0x26       JZB 0x3E1F (+38)

                        // char c = progressTicks[currentTick];                 parser.hs:60

0x3DFB  0x44            PUSHI0
0x3DFC  0x52 0x34 0x38  PUSHGLOBALBB 0x3834
0x3DFF  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x3E01  0x4C            POPLOCALB00

                        // DrawChar(tickColumn, tickRow, c, Color.StatusText, Color.StatusFace);

0x3E02  0x52 0x3C 0x3A  PUSHGLOBALBB 0x3A3C
0x3E05  0x4E            PUSHLOCALB00
0x3E06  0x34 0xFD 0x01  CALLW 0x01FD   // Color.StatusText_Get
0x3E09  0x34 0xFC 0x01  CALLW 0x01FC   // Color.StatusFace_Get
0x3E0C  0x24 0x33       SYSCALL0 0x33  // Screen.DrawChar

                        // currentTick++;                                       parser.hs:62

0x3E0E  0x53 0x38       INCGLOBALB 0x38

                        // if (currentTick == progressTicks.Length)             parser.hs:63

0x3E10  0x52 0x38 0x34  PUSHGLOBALBB 0x3438
0x3E13  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3E15  0x05            EQ
0x3E16  0x2E 0x05       JZB 0x3E1B (+5)

                        // currentTick = 0;                                     parser.hs:65

0x3E18  0x44            PUSHI0
0x3E19  0x1F 0x38       POPGLOBALB 0x38

                        // }                                                    parser.hs:67

0x3E1B  0x28 0x02       DECSP 0x02
0x3E1D  0x2A 0x02       RETB 0x02

                        // Print(str, Color.ProgressTick, Color.ProgressBackground);

0x3E1F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3E21  0x34 0xE9 0x01  CALLW 0x01E9   // Color.ProgressTick_Get
0x3E24  0x34 0xEA 0x01  CALLW 0x01EA   // Color.ProgressBackground_Get
0x3E27  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // }                                                    parser.hs:72

0x3E29  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:157
// ####  Parser.ErrorAtCurrent(..)  ####                                        0x007E

0x3E2B  0x49            ENTER

                        // ErrorAt(currentToken, message);                      parser.hs:158

0x3E2C  0x20 0x2E       PUSHGLOBALB 0x2E
0x3E2E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3E30  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // }                                                    parser.hs:159

0x3E32  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:84
// ####  Parser.PreviousToken_Get(..)  ####                                     0x0075

0x3E34  0x49            ENTER

                        // <string, string> PreviousToken { get { return previousToken; }}

0x3E35  0x20 0x2C       PUSHGLOBALB 0x2C
0x3E37  0x4A            RET0


// /source/compiler/tokens/parser.hs:115
// ####  Parser.ErrorAt(..)  ####                                               0x007A

0x3E38  0x49            ENTER

                        // if (!hadError)                                       parser.hs:116

0x3E39  0x20 0x30       PUSHGLOBALB 0x30
0x3E3B  0x32 0xA7 0x00  JNZW 0x3EE2 (+167)

                        // string errorMessage;                                 parser.hs:118

0x3E3E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string lexeme = token["lexeme"];                     parser.hs:119

0x3E40  0x24 0x02       SYSCALL0 0x02  // String.New
0x3E42  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3E44  0x37 0x06 0x02  PUSHIW 0x0206
0x3E47  0x1A 0x06       PUSHIB 0x06
0x3E49  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3E4B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3E4D  0x5E            POPCOPYLOCALB02

                        // if (token.Contains("line"))                          parser.hs:120

0x3E4E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3E50  0x37 0x89 0x06  PUSHIW 0x0689
0x3E53  0x1A 0x04       PUSHIB 0x04
0x3E55  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3E57  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x3E59  0x2E 0x3B       JZB 0x3E94 (+59)

                        // string ln = token["line"];                           parser.hs:122

0x3E5B  0x24 0x02       SYSCALL0 0x02  // String.New
0x3E5D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3E5F  0x37 0x89 0x06  PUSHIW 0x0689
0x3E62  0x1A 0x04       PUSHIB 0x04
0x3E64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3E66  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3E68  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string path = token["source"];                       parser.hs:123

0x3E6A  0x24 0x02       SYSCALL0 0x02  // String.New
0x3E6C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3E6E  0x37 0x8D 0x06  PUSHIW 0x068D
0x3E71  0x1A 0x06       PUSHIB 0x06
0x3E73  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3E75  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x3E77  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // errorMessage = "[" + path + ":" + ln + "]";

0x3E79  0x1A 0x5B       PUSHIB 0x5B
0x3E7B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3E7D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x3E7F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3E81  0x1A 0x3A       PUSHIB 0x3A
0x3E83  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3E85  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3E87  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3E89  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3E8B  0x1A 0x5D       PUSHIB 0x5D
0x3E8D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3E8F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3E91  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:125

0x3E92  0x28 0x04       DECSP 0x04

                        // HopperToken ttype = Token.GetType(token);            parser.hs:126

0x3E94  0x44            PUSHI0
0x3E95  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3E97  0x2C 0x49       CALLB 0x49     // Token.GetType
0x3E99  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (ttype == HopperToken.EOF)                        parser.hs:127

0x3E9B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3E9D  0x1A 0x2D       PUSHIB 0x2D
0x3E9F  0x05            EQ
0x3EA0  0x2E 0x0F       JZB 0x3EAF (+15)

                        // errorMessage = errorMessage + " Error at end";

0x3EA2  0x4E            PUSHLOCALB00
0x3EA3  0x37 0x93 0x06  PUSHIW 0x0693
0x3EA6  0x1A 0x0D       PUSHIB 0x0D
0x3EA8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3EAA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3EAC  0x5D            POPCOPYLOCALB00

                        // }                                                    parser.hs:130

0x3EAD  0x30 0x23       JB 0x3ED0 (+35)

                        // else if (ttype == HopperToken.Error)                 parser.hs:131

0x3EAF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3EB1  0x45            PUSHI1
0x3EB2  0x05            EQ
0x3EB3  0x2F 0x1D       JNZB 0x3ED0 (+29)

                        // else if (lexeme.Length > 0)                          parser.hs:135

0x3EB5  0x4F            PUSHLOCALB02
0x3EB6  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x3EB8  0x44            PUSHI0
0x3EB9  0x07            GT
0x3EBA  0x2E 0x16       JZB 0x3ED0 (+22)

                        // errorMessage = errorMessage + " Error at '" + lexeme + "'";

0x3EBC  0x4E            PUSHLOCALB00
0x3EBD  0x37 0xA0 0x06  PUSHIW 0x06A0
0x3EC0  0x1A 0x0B       PUSHIB 0x0B
0x3EC2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3EC4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3EC6  0x4F            PUSHLOCALB02
0x3EC7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3EC9  0x1A 0x27       PUSHIB 0x27
0x3ECB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3ECD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3ECF  0x5D            POPCOPYLOCALB00

                        // errorMessage = errorMessage + ": " + message;

0x3ED0  0x4E            PUSHLOCALB00
0x3ED1  0x37 0x3A 0x20  PUSHIW 0x203A
0x3ED4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3ED6  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3ED8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3EDA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3EDC  0x5D            POPCOPYLOCALB00

                        // EmitError(errorMessage);                             parser.hs:140

0x3EDD  0x4E            PUSHLOCALB00
0x3EDE  0x2C 0x70       CALLB 0x70     // Parser.EmitError

                        // }                                                    parser.hs:141

0x3EE0  0x28 0x06       DECSP 0x06

                        // hadError = true;                                     parser.hs:142

0x3EE2  0x45            PUSHI1
0x3EE3  0x1F 0x30       POPGLOBALB 0x30

                        // }                                                    parser.hs:143

0x3EE5  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:216
// ####  Parser.Check(..)  ####                                                 0x0083

0x3EE7  0x49            ENTER

                        // return Check(checkType, "");                         parser.hs:217

0x3EE8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3EEA  0x24 0x02       SYSCALL0 0x02  // String.New
0x3EEC  0x2C 0x84       CALLB 0x84     // Parser.Check
0x3EEE  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/parser.hs:153
// ####  Parser.ErrorAtCurrent(..)  ####                                        0x007D

0x3EF0  0x49            ENTER

                        // ErrorAt(currentToken, "'" + ch + "' expected");

0x3EF1  0x20 0x2E       PUSHGLOBALB 0x2E
0x3EF3  0x1A 0x27       PUSHIB 0x27
0x3EF5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3EF7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3EF9  0x25 0x03       SYSCALL1 0x03  // String.Append
0x3EFB  0x37 0x1E 0x01  PUSHIW 0x011E
0x3EFE  0x1A 0x0A       PUSHIB 0x0A
0x3F00  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F02  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F04  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // }                                                    parser.hs:155

0x3F06  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:250
// ####  Parser.Peek(..)  ####                                                  0x0085

0x3F08  0x49            ENTER

                        // <string,string> peek = Scanner.Peek();               parser.hs:251

0x3F09  0x1A 0x0F       PUSHIB 0x0F
0x3F0B  0x1A 0x0F       PUSHIB 0x0F
0x3F0D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x3F0F  0x2C 0x6D       CALLB 0x6D     // Scanner.Peek
0x3F11  0x5D            POPCOPYLOCALB00

                        // return peek;                                         parser.hs:252

0x3F12  0x4E            PUSHLOCALB00
0x3F13  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/parser.hs:177
// ####  Parser.Consume(..)  ####                                               0x0080

0x3F15  0x49            ENTER

                        // Consume(consumeType, "", "'" + ch + "' expected");

0x3F16  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3F18  0x24 0x02       SYSCALL0 0x02  // String.New
0x3F1A  0x1A 0x27       PUSHIB 0x27
0x3F1C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F1E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3F20  0x25 0x03       SYSCALL1 0x03  // String.Append
0x3F22  0x37 0x1E 0x01  PUSHIW 0x011E
0x3F25  0x1A 0x0A       PUSHIB 0x0A
0x3F27  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F29  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F2B  0x2C 0x82       CALLB 0x82     // Parser.Consume

                        // }                                                    parser.hs:179

0x3F2D  0x2A 0x04       RETB 0x04


// /source/compiler/tokens/parser.hs:95
// ####  Parser.DumpPrevious(..)  ####                                          0x0077

0x3F2F  0x49            ENTER

                        // OutputDebug("PreviousToken:");                       parser.hs:96

0x3F30  0x37 0xAB 0x06  PUSHIW 0x06AB
0x3F33  0x1A 0x0E       PUSHIB 0x0E
0x3F35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F37  0x24 0x7A       SYSCALL0 0x7A  // Diagnostics.OutputDebug

                        // foreach (var kv in previousToken)                    parser.hs:97

0x3F39  0x20 0x2C       PUSHGLOBALB 0x2C
0x3F3B  0x1A 0x0F       PUSHIB 0x0F
0x3F3D  0x1A 0x0F       PUSHIB 0x0F
0x3F3F  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x3F41  0x44            PUSHI0
0x3F42  0x4E            PUSHLOCALB00
0x3F43  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3F45  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x3F47  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3F49  0x4D            POPLOCALB02
0x3F4A  0x2E 0x1C       JZB 0x3F66 (+28)

                        // OutputDebug("  " + kv.key + "->" + kv.value);

0x3F4C  0x37 0x20 0x20  PUSHIW 0x2020
0x3F4F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F51  0x4F            PUSHLOCALB02
0x3F52  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x3F54  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F56  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0x3F59  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F5B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F5D  0x4F            PUSHLOCALB02
0x3F5E  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x3F60  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F62  0x24 0x7A       SYSCALL0 0x7A  // Diagnostics.OutputDebug

                        // }                                                    parser.hs:100

0x3F64  0x30 0xDE       JB 0x3F42 (-34)
0x3F66  0x28 0x06       DECSP 0x06

                        // }                                                    parser.hs:101

0x3F68  0x4A            RET0


// /source/compiler/tokens/parser.hs:87
// ####  Parser.DumpCurrent(..)  ####                                           0x0076

0x3F69  0x49            ENTER

                        // OutputDebug("CurrentToken:");                        parser.hs:88

0x3F6A  0x37 0xB9 0x06  PUSHIW 0x06B9
0x3F6D  0x1A 0x0D       PUSHIB 0x0D
0x3F6F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x3F71  0x24 0x7A       SYSCALL0 0x7A  // Diagnostics.OutputDebug

                        // foreach (var kv in currentToken)                     parser.hs:89

0x3F73  0x20 0x2E       PUSHGLOBALB 0x2E
0x3F75  0x1A 0x0F       PUSHIB 0x0F
0x3F77  0x1A 0x0F       PUSHIB 0x0F
0x3F79  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x3F7B  0x44            PUSHI0
0x3F7C  0x4E            PUSHLOCALB00
0x3F7D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x3F7F  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x3F81  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x3F83  0x4D            POPLOCALB02
0x3F84  0x2E 0x1C       JZB 0x3FA0 (+28)

                        // OutputDebug("  " + kv.key + "->" + kv.value);

0x3F86  0x37 0x20 0x20  PUSHIW 0x2020
0x3F89  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F8B  0x4F            PUSHLOCALB02
0x3F8C  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x3F8E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F90  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0x3F93  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3F95  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F97  0x4F            PUSHLOCALB02
0x3F98  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x3F9A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3F9C  0x24 0x7A       SYSCALL0 0x7A  // Diagnostics.OutputDebug

                        // }                                                    parser.hs:92

0x3F9E  0x30 0xDE       JB 0x3F7C (-34)
0x3FA0  0x28 0x06       DECSP 0x06

                        // }                                                    parser.hs:93

0x3FA2  0x4A            RET0


// /source/compiler/tokens/parser.hs:111
// ####  Parser.nextToken(..)  ####                                             0x0079

0x3FA3  0x49            ENTER

                        // currentToken = Scanner.Next();                       parser.hs:112

0x3FA4  0x2C 0x6C       CALLB 0x6C     // Scanner.Next
0x3FA6  0x59 0x2E       POPCOPYGLOBALB 0x2E

                        // }                                                    parser.hs:113

0x3FA8  0x4A            RET0


// /source/compiler/tokens/parser.hs:42
// ####  Parser.EmitError(..)  ####                                             0x0070

0x3FA9  0x49            ENTER

                        // if (IsInteractive())                                 parser.hs:43

0x3FAA  0x2C 0x6F       CALLB 0x6F     // Parser.IsInteractive
0x3FAC  0x2E 0x22       JZB 0x3FCE (+34)

                        // ProgressDone();                                      parser.hs:45

0x3FAE  0x2C 0x72       CALLB 0x72     // Parser.ProgressDone

                        // string eol = "" + char(0x0A);                        parser.hs:46

0x3FB0  0x24 0x02       SYSCALL0 0x02  // String.New
0x3FB2  0x24 0x02       SYSCALL0 0x02  // String.New
0x3FB4  0x1A 0x0A       PUSHIB 0x0A
0x3FB6  0x25 0x03       SYSCALL1 0x03  // String.Append
0x3FB8  0x5D            POPCOPYLOCALB00

                        // errorFile.Append(errorMessage + eol);                parser.hs:47

0x3FB9  0x20 0x36       PUSHGLOBALB 0x36
0x3FBB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3FBD  0x4E            PUSHLOCALB00
0x3FBE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3FC0  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // errorFile.Flush();                                   parser.hs:48

0x3FC2  0x20 0x36       PUSHGLOBALB 0x36
0x3FC4  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // Diagnostics.SetError(0x0E);                          parser.hs:49

0x3FC6  0x1A 0x0E       PUSHIB 0x0E
0x3FC8  0x24 0x7D       SYSCALL0 0x7D  // Diagnostics.SetError

                        // }                                                    parser.hs:50

0x3FCA  0x28 0x02       DECSP 0x02
0x3FCC  0x2A 0x02       RETB 0x02

                        // PrintLn(errorMessage);                               parser.hs:53

0x3FCE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x3FD0  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // }                                                    parser.hs:55

0x3FD2  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/parser.hs:185
// ####  Parser.Consume(..)  ####                                               0x0082

0x3FD4  0x49            ENTER

                        // if (HadError)                                        parser.hs:188

0x3FD5  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x3FD7  0x2E 0x04       JZB 0x3FDB (+4)

                        // break;                                               parser.hs:190

0x3FD9  0x2A 0x06       RETB 0x06

                        // HopperToken ttype = Token.GetType(currentToken);

0x3FDB  0x44            PUSHI0
0x3FDC  0x20 0x2E       PUSHGLOBALB 0x2E
0x3FDE  0x2C 0x49       CALLB 0x49     // Token.GetType
0x3FE0  0x4C            POPLOCALB00

                        // if (ttype == consumeType)                            parser.hs:193

0x3FE1  0x4E            PUSHLOCALB00
0x3FE2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x3FE4  0x05            EQ
0x3FE5  0x2E 0x4A       JZB 0x402F (+74)

                        // if (ttype == HopperToken.Keyword)                    parser.hs:195

0x3FE7  0x4E            PUSHLOCALB00
0x3FE8  0x1A 0x05       PUSHIB 0x05
0x3FEA  0x05            EQ
0x3FEB  0x2E 0x3E       JZB 0x4029 (+62)

                        // keyword = "|" + keyword + "|";                       parser.hs:197

0x3FED  0x1A 0x7C       PUSHIB 0x7C
0x3FEF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3FF1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x3FF3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3FF5  0x1A 0x7C       PUSHIB 0x7C
0x3FF7  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x3FF9  0x24 0x03       SYSCALL0 0x03  // String.Append
0x3FFB  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // string search = "|" + currentToken["lexeme"] + "|";

0x3FFD  0x24 0x02       SYSCALL0 0x02  // String.New
0x3FFF  0x1A 0x7C       PUSHIB 0x7C
0x4001  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4003  0x20 0x2E       PUSHGLOBALB 0x2E
0x4005  0x37 0x06 0x02  PUSHIW 0x0206
0x4008  0x1A 0x06       PUSHIB 0x06
0x400A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x400C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x400E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4010  0x1A 0x7C       PUSHIB 0x7C
0x4012  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4014  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4016  0x5E            POPCOPYLOCALB02

                        // if (keyword.Contains(search))                        parser.hs:199

0x4017  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4019  0x4F            PUSHLOCALB02
0x401A  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x401D  0x2E 0x08       JZB 0x4025 (+8)

                        // Advance();                                           parser.hs:201

0x401F  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               parser.hs:202

0x4021  0x28 0x04       DECSP 0x04
0x4023  0x2A 0x06       RETB 0x06

                        // }                                                    parser.hs:204

0x4025  0x28 0x02       DECSP 0x02
0x4027  0x30 0x08       JB 0x402F (+8)

                        // Advance();                                           parser.hs:207

0x4029  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               parser.hs:208

0x402B  0x28 0x02       DECSP 0x02
0x402D  0x2A 0x06       RETB 0x06

                        // ErrorAtCurrent(message);                             parser.hs:211

0x402F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4031  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               parser.hs:212

0x4033  0x28 0x02       DECSP 0x02
0x4035  0x2A 0x06       RETB 0x06


// /source/system/file.hs:18
// ####  File.Exists(..)  ####                                                  0x01BE

0x4037  0x49            ENTER

                        // if (!File.Exists(filePath))                          file.hs:19

0x4038  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x403A  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x403C  0x2F 0x4C       JNZB 0x4088 (+76)

                        // string rawPath = filePath;                           file.hs:21

0x403E  0x24 0x02       SYSCALL0 0x02  // String.New
0x4040  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x4042  0x5D            POPCOPYLOCALB00

                        // string ext = Path.GetExtension(rawPath);             file.hs:22

0x4043  0x24 0x02       SYSCALL0 0x02  // String.New
0x4045  0x4E            PUSHLOCALB00
0x4046  0x34 0xC3 0x01  CALLW 0x01C3   // Path.GetExtension
0x4049  0x5E            POPCOPYLOCALB02

                        // if (ext == ".")                                      file.hs:23

0x404A  0x4F            PUSHLOCALB02
0x404B  0x1A 0x2E       PUSHIB 0x2E
0x404D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x404F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x4051  0x2F 0x24       JNZB 0x4075 (+36)

                        // filePath = rawPath + extension;                      file.hs:26

0x4053  0x4E            PUSHLOCALB00
0x4054  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x4056  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4058  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:27

0x405A  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x405C  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x405E  0x2F 0x28       JNZB 0x4086 (+40)

                        // filePath = Path.Combine(searchFolder, rawPath + extension);

0x4060  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4062  0x4E            PUSHLOCALB00
0x4063  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0x4065  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4067  0x34 0xC2 0x01  CALLW 0x01C2   // Path.Combine
0x406A  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:31

0x406C  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x406E  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x4070  0x2F 0x16       JNZB 0x4086 (+22)

                        // return false;                                        file.hs:33

0x4072  0x44            PUSHI0
0x4073  0x2B 0x0A       RETRETB 0x0A

                        // filePath = Path.Combine(searchFolder, rawPath);

0x4075  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4077  0x4E            PUSHLOCALB00
0x4078  0x34 0xC2 0x01  CALLW 0x01C2   // Path.Combine
0x407B  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // if (!File.Exists(filePath))                          file.hs:41

0x407D  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x407F  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x4081  0x2F 0x05       JNZB 0x4086 (+5)

                        // return false;                                        file.hs:43

0x4083  0x44            PUSHI0
0x4084  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    file.hs:46

0x4086  0x28 0x04       DECSP 0x04

                        // extension = Path.GetExtension(filePath);             file.hs:47

0x4088  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0x408A  0x34 0xC3 0x01  CALLW 0x01C3   // Path.GetExtension
0x408D  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // return true;                                         file.hs:48

0x408F  0x45            PUSHI1
0x4090  0x2B 0x06       RETRETB 0x06


// /source/compiler/codegen/codestream.hs:19
// ####  CodeStream.CheckedBuild_Set(..)  ####                                  0x011C

0x4092  0x49            ENTER

                        // set { checkedBuild = value; }                        codestream.hs:19

0x4093  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4095  0x1F 0xA4       POPGLOBALB 0xA4
0x4097  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:92
// ####  CodeStream.New(..)  ####                                               0x0123

0x4099  0x49            ENTER

                        // currentStream.Clear();                               codestream.hs:93

0x409A  0x20 0xA0       PUSHGLOBALB 0xA0
0x409C  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // Peephole.Initialize();                               codestream.hs:94

0x409E  0x34 0x3E 0x01  CALLW 0x013E   // Peephole.Initialize

                        // }                                                    codestream.hs:95

0x40A1  0x4A            RET0


// /source/compiler/codegen/codestream.hs:59
// ####  CodeStream.AppendCode(..)  ####                                        0x0120

0x40A2  0x49            ENTER

                        // foreach (var b in code)                              codestream.hs:60

0x40A3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40A5  0x44            PUSHI0
0x40A6  0x44            PUSHI0
0x40A7  0x4E            PUSHLOCALB00
0x40A8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x40AA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x40AC  0x05            EQ
0x40AD  0x2F 0x11       JNZB 0x40BE (+17)
0x40AF  0x4E            PUSHLOCALB00
0x40B0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x40B2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x40B4  0x4D            POPLOCALB02

                        // currentStream.Append(b);                             codestream.hs:62

0x40B5  0x20 0xA0       PUSHGLOBALB 0xA0
0x40B7  0x4F            PUSHLOCALB02
0x40B8  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    codestream.hs:63

0x40BA  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x40BC  0x30 0xEB       JB 0x40A7 (-21)
0x40BE  0x28 0x06       DECSP 0x06

                        // UpdatePeepholeBoundary(currentStream.Length);

0x40C0  0x20 0xA0       PUSHGLOBALB 0xA0
0x40C2  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x40C4  0x34 0x3F 0x01  CALLW 0x013F   // Peephole.UpdatePeepholeBoundary

                        // }                                                    codestream.hs:65

0x40C7  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:422
// ####  CodeStream.AddInstruction(..)  ####                                    0x0136

0x40C9  0x49            ENTER

                        // switch (instruction)                                 codestream.hs:423

0x40CA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.JB:                                 codestream.hs:425

0x40CC  0x1A 0x30       PUSHIB 0x30
0x40CE  0x4E            PUSHLOCALB00
0x40CF  0x05            EQ
0x40D0  0x2F 0x20       JNZB 0x40F0 (+32)

                        // case Instruction.JZB:                                codestream.hs:426

0x40D2  0x1A 0x2E       PUSHIB 0x2E
0x40D4  0x4E            PUSHLOCALB00
0x40D5  0x05            EQ
0x40D6  0x2F 0x1A       JNZB 0x40F0 (+26)

                        // case Instruction.JNZB:                               codestream.hs:427

0x40D8  0x1A 0x2F       PUSHIB 0x2F
0x40DA  0x4E            PUSHLOCALB00
0x40DB  0x05            EQ
0x40DC  0x2F 0x14       JNZB 0x40F0 (+20)

                        // case Instruction.JW:                                 codestream.hs:428

0x40DE  0x1A 0x33       PUSHIB 0x33
0x40E0  0x4E            PUSHLOCALB00
0x40E1  0x05            EQ
0x40E2  0x2F 0x0E       JNZB 0x40F0 (+14)

                        // case Instruction.JZW:                                codestream.hs:429

0x40E4  0x1A 0x31       PUSHIB 0x31
0x40E6  0x4E            PUSHLOCALB00
0x40E7  0x05            EQ
0x40E8  0x2F 0x08       JNZB 0x40F0 (+8)

                        // case Instruction.JNZW:                               codestream.hs:430

0x40EA  0x1A 0x32       PUSHIB 0x32
0x40EC  0x4E            PUSHLOCALB00
0x40ED  0x05            EQ
0x40EE  0x2E 0x06       JZB 0x40F4 (+6)

                        // Die(0x0B); // illegal to not use th Jump-specific AddInstructions

0x40F0  0x1A 0x0B       PUSHIB 0x0B
0x40F2  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    codestream.hs:434

0x40F4  0x28 0x02       DECSP 0x02

                        // internalAddInstruction(instruction);                 codestream.hs:435

0x40F6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x40F8  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:436

0x40FB  0x1A 0xA0       PUSHIB 0xA0
0x40FD  0x47            PUSHGP
0x40FE  0x00            ADD
0x40FF  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // }                                                    codestream.hs:437

0x4102  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:23
// ####  CodeStream.GetLastInstruction(..)  ####                                0x011D


                        // Instruction last = Instruction.NOP;                  codestream.hs:24

0x4104  0x5F 0x01       ENTERB 0x01

                        // Instruction last = Instruction.NOP;                  codestream.hs:24

0x4106  0x1A 0x50       PUSHIB 0x50
0x4108  0x4C            POPLOCALB00

                        // if (LastInstructionIndex < currentStream.Length)

0x4109  0x34 0x41 0x01  CALLW 0x0141   // Peephole.LastInstructionIndex_Get
0x410C  0x20 0xA0       PUSHGLOBALB 0xA0
0x410E  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x4110  0x08            LT
0x4111  0x2E 0x0F       JZB 0x4120 (+15)

                        // byte instr = currentStream[LastInstructionIndex];

0x4113  0x44            PUSHI0
0x4114  0x20 0xA0       PUSHGLOBALB 0xA0
0x4116  0x34 0x41 0x01  CALLW 0x0141   // Peephole.LastInstructionIndex_Get
0x4119  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x411B  0x4D            POPLOCALB02

                        // last = Instruction(instr);                           codestream.hs:28

0x411C  0x4F            PUSHLOCALB02
0x411D  0x4C            POPLOCALB00

                        // }                                                    codestream.hs:29

0x411E  0x28 0x02       DECSP 0x02

                        // return last;                                         codestream.hs:30

0x4120  0x4E            PUSHLOCALB00
0x4121  0x2B 0x02       RETRETB 0x02


// /source/compiler/codegen/codestream.hs:611
// ####  CodeStream.InsertDebugInfo(..)  ####                                   0x013D

0x4123  0x49            ENTER

                        // <string,string> token;                               codestream.hs:612

0x4124  0x1A 0x0F       PUSHIB 0x0F
0x4126  0x1A 0x0F       PUSHIB 0x0F
0x4128  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (!usePreviousToken)                               codestream.hs:613

0x412A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x412C  0x2F 0x07       JNZB 0x4133 (+7)

                        // token = CurrentToken;                                codestream.hs:615

0x412E  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x4130  0x5D            POPCOPYLOCALB00

                        // }                                                    codestream.hs:616

0x4131  0x30 0x05       JB 0x4136 (+5)

                        // token = PreviousToken;                               codestream.hs:619

0x4133  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0x4135  0x5D            POPCOPYLOCALB00

                        // uint na = NextAddress;                               codestream.hs:621

0x4136  0x44            PUSHI0
0x4137  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x413A  0x4D            POPLOCALB02

                        // string nextAddress = na.ToString();                  codestream.hs:622

0x413B  0x24 0x02       SYSCALL0 0x02  // String.New
0x413D  0x4F            PUSHLOCALB02
0x413E  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x4141  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string ln = token["line"];                           codestream.hs:623

0x4143  0x24 0x02       SYSCALL0 0x02  // String.New
0x4145  0x4E            PUSHLOCALB00
0x4146  0x37 0x89 0x06  PUSHIW 0x0689
0x4149  0x1A 0x04       PUSHIB 0x04
0x414B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x414D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x414F  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (!debugInfoLineUsed.Contains(ln)) // keep the one with the earliest address

0x4151  0x20 0x9E       PUSHGLOBALB 0x9E
0x4153  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4155  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x4157  0x2F 0x10       JNZB 0x4167 (+16)

                        // debugInfo[nextAddress] = ln;                         codestream.hs:626

0x4159  0x20 0x9C       PUSHGLOBALB 0x9C
0x415B  0x56 0x04 0x06  PUSHLOCALBB 0x0604
0x415E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // debugInfoLineUsed[ln] = true;                        codestream.hs:627

0x4160  0x20 0x9E       PUSHGLOBALB 0x9E
0x4162  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4164  0x45            PUSHI1
0x4165  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    codestream.hs:629

0x4167  0x2A 0x0A       RETB 0x0A


// /source/compiler/codegen/codestream.hs:18
// ####  CodeStream.CheckedBuild_Get(..)  ####                                  0x011B

0x4169  0x49            ENTER

                        // get { return checkedBuild; }                         codestream.hs:18

0x416A  0x20 0xA4       PUSHGLOBALB 0xA4
0x416C  0x4A            RET0


// /source/compiler/codegen/codestream.hs:439
// ####  CodeStream.AddInstruction(..)  ####                                    0x0137

0x416D  0x49            ENTER

                        // internalAddInstruction(instruction);                 codestream.hs:440

0x416E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4170  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // currentStream.Append(operand);                       codestream.hs:441

0x4173  0x20 0xA0       PUSHGLOBALB 0xA0
0x4175  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4177  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:442

0x4179  0x1A 0xA0       PUSHIB 0xA0
0x417B  0x47            PUSHGP
0x417C  0x00            ADD
0x417D  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // }                                                    codestream.hs:443

0x4180  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/codestream.hs:445
// ####  CodeStream.AddInstruction(..)  ####                                    0x0138

0x4182  0x49            ENTER

                        // internalAddInstruction(instruction);                 codestream.hs:446

0x4183  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4185  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // uint lsb = operand & 0xFF;                           codestream.hs:447

0x4188  0x44            PUSHI0
0x4189  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x418B  0x1A 0xFF       PUSHIB 0xFF
0x418D  0x0E            BITAND
0x418E  0x4C            POPLOCALB00

                        // currentStream.Append(byte(lsb));                     codestream.hs:448

0x418F  0x20 0xA0       PUSHGLOBALB 0xA0
0x4191  0x4E            PUSHLOCALB00
0x4192  0x51 0x03       CAST 0x03
0x4194  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // uint msb = operand >> 8;                             codestream.hs:449

0x4196  0x44            PUSHI0
0x4197  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4199  0x1A 0x08       PUSHIB 0x08
0x419B  0x10            BITSHR
0x419C  0x4D            POPLOCALB02

                        // currentStream.Append(byte(msb));                     codestream.hs:450

0x419D  0x20 0xA0       PUSHGLOBALB 0xA0
0x419F  0x4F            PUSHLOCALB02
0x41A0  0x51 0x03       CAST 0x03
0x41A2  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:451

0x41A4  0x1A 0xA0       PUSHIB 0xA0
0x41A6  0x47            PUSHGP
0x41A7  0x00            ADD
0x41A8  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // }                                                    codestream.hs:452

0x41AB  0x2A 0x08       RETB 0x08


// /source/compiler/codegen/codestream.hs:105
// ####  CodeStream.CurrentStream_Get(..)  ####                                 0x0126

0x41AD  0x49            ENTER

                        // <byte> CurrentStream { get { return currentStream; } }

0x41AE  0x20 0xA0       PUSHGLOBALB 0xA0
0x41B0  0x4A            RET0


// /source/compiler/codegen/codestream.hs:106
// ####  CodeStream.DebugInfo_Get(..)  ####                                     0x0127

0x41B1  0x49            ENTER

                        // <string,string> DebugInfo { get { return debugInfo; } }

0x41B2  0x20 0x9C       PUSHGLOBALB 0x9C
0x41B4  0x4A            RET0


// /source/compiler/codegen/codestream.hs:108
// ####  CodeStream.ClearDebugInfo(..)  ####                                    0x0128

0x41B5  0x49            ENTER

                        // debugInfo.Clear();                                   codestream.hs:109

0x41B6  0x20 0x9C       PUSHGLOBALB 0x9C
0x41B8  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // debugInfoLineUsed.Clear();                           codestream.hs:110

0x41BA  0x20 0x9E       PUSHGLOBALB 0x9E
0x41BC  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // }                                                    codestream.hs:111

0x41BE  0x4A            RET0


// /source/compiler/codegen/codestream.hs:476
// ####  CodeStream.AddInstructionPushVariable(..)  ####                        0x013A

0x41BF  0x49            ENTER

                        // string fullName;                                     codestream.hs:477

0x41C0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType = Types.GetTypeString(variableName, true, ref fullName);

0x41C2  0x24 0x02       SYSCALL0 0x02  // String.New
0x41C4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x41C6  0x45            PUSHI1
0x41C7  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x41C9  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x41CB  0x5E            POPCOPYLOCALB02

                        // if (Symbols.GlobalMemberExists(fullName))            codestream.hs:480

0x41CC  0x4E            PUSHLOCALB00
0x41CD  0x2C 0x9C       CALLB 0x9C     // Symbols.GlobalMemberExists
0x41CF  0x2E 0x25       JZB 0x41F4 (+37)

                        // uint globalAddress = Symbols.GetGlobalAddress(fullName);

0x41D1  0x44            PUSHI0
0x41D2  0x4E            PUSHLOCALB00
0x41D3  0x2C 0x9E       CALLB 0x9E     // Symbols.GetGlobalAddress
0x41D5  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (globalAddress < 256)                             codestream.hs:483

0x41D7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x41D9  0x55 0x00 0x01  PUSHIWLT 0x0100
0x41DC  0x2E 0x0D       JZB 0x41E9 (+13)

                        // CodeStream.AddInstruction(Instruction.PUSHGLOBALB, byte(globalAddress));

0x41DE  0x1A 0x20       PUSHIB 0x20
0x41E0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x41E2  0x51 0x03       CAST 0x03
0x41E4  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:486

0x41E7  0x30 0x09       JB 0x41F0 (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHGLOBALW, globalAddress);

0x41E9  0x1A 0x3D       PUSHIB 0x3D
0x41EB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x41ED  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:491

0x41F0  0x28 0x02       DECSP 0x02
0x41F2  0x2A 0x06       RETB 0x06

                        // bool isRef;                                          codestream.hs:494

0x41F4  0x44            PUSHI0

                        // int offset = Block.GetOffset(variableName, ref isRef);

0x41F5  0x44            PUSHI0
0x41F6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x41F8  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x41FA  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x41FD  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if ((offset > -129) && (offset < 128))               codestream.hs:496

0x41FF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4201  0x44            PUSHI0
0x4202  0x1A 0x81       PUSHIB 0x81
0x4204  0x12            SUBI
0x4205  0x16            GTI
0x4206  0x27 0x00       DUP 0x00
0x4208  0x2E 0x08       JZB 0x4210 (+8)
0x420A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x420C  0x1A 0x80       PUSHIB 0x80
0x420E  0x17            LTI
0x420F  0x0C            BOOLAND
0x4210  0x2E 0x22       JZB 0x4232 (+34)

                        // byte operand =  CodeStream.IntToByte(offset);

0x4212  0x44            PUSHI0
0x4213  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4215  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x4218  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (isRef)                                           codestream.hs:499

0x421A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x421C  0x2E 0x0B       JZB 0x4227 (+11)

                        // CodeStream.AddInstruction(Instruction.PUSHRELB, operand);

0x421E  0x1A 0x1E       PUSHIB 0x1E
0x4220  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4222  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:502

0x4225  0x30 0x09       JB 0x422E (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, operand);

0x4227  0x1A 0x1C       PUSHIB 0x1C
0x4229  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x422B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:507

0x422E  0x28 0x02       DECSP 0x02
0x4230  0x30 0x20       JB 0x4250 (+32)

                        // uint operand =  CodeStream.IntToUInt(offset);

0x4232  0x44            PUSHI0
0x4233  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4235  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x4238  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (isRef)                                           codestream.hs:511

0x423A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x423C  0x2E 0x0B       JZB 0x4247 (+11)

                        // CodeStream.AddInstruction(Instruction.PUSHRELW, operand);

0x423E  0x1A 0x3B       PUSHIB 0x3B
0x4240  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4242  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:514

0x4245  0x30 0x09       JB 0x424E (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALW, operand);

0x4247  0x1A 0x39       PUSHIB 0x39
0x4249  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x424B  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:519

0x424E  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:520

0x4250  0x28 0x04       DECSP 0x04

                        // }                                                    codestream.hs:521

0x4252  0x2A 0x06       RETB 0x06


// /source/compiler/codegen/codestream.hs:454
// ####  CodeStream.AddInstructionPUSHI(..)  ####                               0x0139

0x4254  0x49            ENTER

                        // if (operand == 0)                                    codestream.hs:455

0x4255  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4257  0x2F 0x10       JNZB 0x4267 (+16)

                        // CodeStream.internalAddInstruction(Instruction.PUSHI0);

0x4259  0x1A 0x44       PUSHIB 0x44
0x425B  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:458

0x425E  0x1A 0xA0       PUSHIB 0xA0
0x4260  0x47            PUSHGP
0x4261  0x00            ADD
0x4262  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // }                                                    codestream.hs:459

0x4265  0x2A 0x02       RETB 0x02

                        // else if (operand == 1)                               codestream.hs:460

0x4267  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4269  0x45            PUSHI1
0x426A  0x05            EQ
0x426B  0x2E 0x10       JZB 0x427B (+16)

                        // CodeStream.internalAddInstruction(Instruction.PUSHI1);

0x426D  0x1A 0x45       PUSHIB 0x45
0x426F  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:463

0x4272  0x1A 0xA0       PUSHIB 0xA0
0x4274  0x47            PUSHGP
0x4275  0x00            ADD
0x4276  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // }                                                    codestream.hs:464

0x4279  0x2A 0x02       RETB 0x02

                        // else if (operand < 256)                              codestream.hs:465

0x427B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x427D  0x55 0x00 0x01  PUSHIWLT 0x0100
0x4280  0x2E 0x0D       JZB 0x428D (+13)

                        // CodeStream.AddInstruction(Instruction.PUSHIB, byte(operand));

0x4282  0x1A 0x1A       PUSHIB 0x1A
0x4284  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4286  0x51 0x03       CAST 0x03
0x4288  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:468

0x428B  0x2A 0x02       RETB 0x02

                        // CodeStream.AddInstruction(Instruction.PUSHIW, operand);

0x428D  0x1A 0x37       PUSHIB 0x37
0x428F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4291  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:473

0x4294  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:317
// ####  CodeStream.AddInstructionSysCall0(..)  ####                            0x0131


                        // byte iSysCall;                                       codestream.hs:320

0x4296  0x5F 0x01       ENTERB 0x01

                        // string name = sysCallUnit + '.' + sysCallMethod;

0x4298  0x24 0x02       SYSCALL0 0x02  // String.New
0x429A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x429C  0x1A 0x2E       PUSHIB 0x2E
0x429E  0x25 0x03       SYSCALL1 0x03  // String.Append
0x42A0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x42A2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x42A4  0x5E            POPCOPYLOCALB02

                        // if (TryUserSysCall(name))                            codestream.hs:322

0x42A5  0x4F            PUSHLOCALB02
0x42A6  0x34 0x30 0x01  CALLW 0x0130   // CodeStream.TryUserSysCall
0x42A9  0x2E 0x06       JZB 0x42AF (+6)

                        // break;                                               codestream.hs:324

0x42AB  0x28 0x04       DECSP 0x04
0x42AD  0x2A 0x04       RETB 0x04

                        // if (!TryParseSysCall(name, ref iSysCall))            codestream.hs:326

0x42AF  0x4F            PUSHLOCALB02
0x42B0  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x42B2  0x2C 0x89       CALLB 0x89     // SysCalls.TryParseSysCall
0x42B4  0x2F 0x18       JNZB 0x42CC (+24)

                        // PrintLn("'" + name + "' not found");                 codestream.hs:328

0x42B6  0x1A 0x27       PUSHIB 0x27
0x42B8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x42BA  0x4F            PUSHLOCALB02
0x42BB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x42BD  0x37 0xC6 0x06  PUSHIW 0x06C6
0x42C0  0x1A 0x0B       PUSHIB 0x0B
0x42C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x42C4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x42C6  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(3); // key not found                             codestream.hs:329

0x42C8  0x1A 0x03       PUSHIB 0x03
0x42CA  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.AddInstruction(Instruction.SYSCALL0, iSysCall);

0x42CC  0x1A 0x24       PUSHIB 0x24
0x42CE  0x4E            PUSHLOCALB00
0x42CF  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // break;                                               codestream.hs:332

0x42D2  0x28 0x04       DECSP 0x04
0x42D4  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/codestream.hs:53
// ####  CodeStream.NextAddress_Get(..)  ####                                   0x011F

0x42D6  0x49            ENTER

                        // return currentStream.Length;                         codestream.hs:54

0x42D7  0x20 0xA0       PUSHGLOBALB 0xA0
0x42D9  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x42DB  0x4A            RET0


// /source/compiler/codegen/codestream.hs:336
// ####  CodeStream.AddInstructionJump(..)  ####                                0x0132

0x42DC  0x49            ENTER

                        // UpdatePeepholeBoundary(currentStream.Length);

0x42DD  0x20 0xA0       PUSHGLOBALB 0xA0
0x42DF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x42E1  0x34 0x3F 0x01  CALLW 0x013F   // Peephole.UpdatePeepholeBoundary

                        // switch (jumpInstruction)                             codestream.hs:340

0x42E4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case Instruction.JW:                                 codestream.hs:342

0x42E6  0x1A 0x33       PUSHIB 0x33
0x42E8  0x4E            PUSHLOCALB00
0x42E9  0x05            EQ
0x42EA  0x2F 0x0E       JNZB 0x42F8 (+14)

                        // case Instruction.JZW:                                codestream.hs:343

0x42EC  0x1A 0x31       PUSHIB 0x31
0x42EE  0x4E            PUSHLOCALB00
0x42EF  0x05            EQ
0x42F0  0x2F 0x08       JNZB 0x42F8 (+8)

                        // case Instruction.JNZW:                               codestream.hs:344

0x42F2  0x1A 0x32       PUSHIB 0x32
0x42F4  0x4E            PUSHLOCALB00
0x42F5  0x05            EQ
0x42F6  0x2E 0x0A       JZB 0x4300 (+10)

                        // AddInstruction(jumpInstruction, uint(0)); // place holder

0x42F8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x42FA  0x44            PUSHI0
0x42FB  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:347

0x42FE  0x30 0x20       JB 0x431E (+32)

                        // case Instruction.JB:                                 codestream.hs:348

0x4300  0x1A 0x30       PUSHIB 0x30
0x4302  0x4E            PUSHLOCALB00
0x4303  0x05            EQ
0x4304  0x2F 0x0E       JNZB 0x4312 (+14)

                        // case Instruction.JZB:                                codestream.hs:349

0x4306  0x1A 0x2E       PUSHIB 0x2E
0x4308  0x4E            PUSHLOCALB00
0x4309  0x05            EQ
0x430A  0x2F 0x08       JNZB 0x4312 (+8)

                        // case Instruction.JNZB:                               codestream.hs:350

0x430C  0x1A 0x2F       PUSHIB 0x2F
0x430E  0x4E            PUSHLOCALB00
0x430F  0x05            EQ
0x4310  0x2E 0x0A       JZB 0x431A (+10)

                        // AddInstruction(jumpInstruction, byte(0)); // place holder

0x4312  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4314  0x44            PUSHI0
0x4315  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:353

0x4318  0x30 0x06       JB 0x431E (+6)

                        // Die(0x0B); // what's this?                           codestream.hs:356

0x431A  0x1A 0x0B       PUSHIB 0x0B
0x431C  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    codestream.hs:358

0x431E  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:360

0x4320  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:200
// ####  CodeStream.PatchJump(..)  ####                                         0x012F


                        // byte jumpInstr = currentStream[jumpAddress];

0x4322  0x5F 0x01       ENTERB 0x01

                        // byte jumpInstr = currentStream[jumpAddress];

0x4324  0x20 0xA0       PUSHGLOBALB 0xA0
0x4326  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4328  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x432A  0x4C            POPLOCALB00

                        // Instruction jumpInstruction = Instruction(jumpInstr);

0x432B  0x44            PUSHI0
0x432C  0x4E            PUSHLOCALB00
0x432D  0x4D            POPLOCALB02

                        // bool isLong;                                         codestream.hs:203

0x432E  0x44            PUSHI0

                        // Instruction shortInstruction;                        codestream.hs:204

0x432F  0x44            PUSHI0

                        // switch (jumpInstruction)                             codestream.hs:205

0x4330  0x4F            PUSHLOCALB02

                        // case Instruction.JB:                                 codestream.hs:207

0x4331  0x1A 0x30       PUSHIB 0x30
0x4333  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4335  0x05            EQ
0x4336  0x2F 0x44       JNZB 0x437A (+68)

                        // case Instruction.JZB:                                codestream.hs:210

0x4338  0x1A 0x2E       PUSHIB 0x2E
0x433A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x433C  0x05            EQ
0x433D  0x2F 0x3D       JNZB 0x437A (+61)

                        // case Instruction.JNZB:                               codestream.hs:213

0x433F  0x1A 0x2F       PUSHIB 0x2F
0x4341  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4343  0x05            EQ
0x4344  0x2F 0x36       JNZB 0x437A (+54)

                        // case Instruction.JW:                                 codestream.hs:216

0x4346  0x1A 0x33       PUSHIB 0x33
0x4348  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x434A  0x05            EQ
0x434B  0x2E 0x0B       JZB 0x4356 (+11)

                        // isLong = true;                                       codestream.hs:218

0x434D  0x45            PUSHI1
0x434E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // shortInstruction = Instruction.JB;                   codestream.hs:219

0x4350  0x1A 0x30       PUSHIB 0x30
0x4352  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    codestream.hs:220

0x4354  0x30 0x26       JB 0x437A (+38)

                        // case Instruction.JZW:                                codestream.hs:221

0x4356  0x1A 0x31       PUSHIB 0x31
0x4358  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x435A  0x05            EQ
0x435B  0x2E 0x0B       JZB 0x4366 (+11)

                        // isLong = true;                                       codestream.hs:223

0x435D  0x45            PUSHI1
0x435E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // shortInstruction = Instruction.JZB;                  codestream.hs:224

0x4360  0x1A 0x2E       PUSHIB 0x2E
0x4362  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    codestream.hs:225

0x4364  0x30 0x16       JB 0x437A (+22)

                        // case Instruction.JNZW:                               codestream.hs:226

0x4366  0x1A 0x32       PUSHIB 0x32
0x4368  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x436A  0x05            EQ
0x436B  0x2E 0x0B       JZB 0x4376 (+11)

                        // isLong = true;                                       codestream.hs:228

0x436D  0x45            PUSHI1
0x436E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // shortInstruction = Instruction.JNZB;                 codestream.hs:229

0x4370  0x1A 0x2F       PUSHIB 0x2F
0x4372  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    codestream.hs:230

0x4374  0x30 0x06       JB 0x437A (+6)

                        // Die(0x0B); // what's this?                           codestream.hs:233

0x4376  0x1A 0x0B       PUSHIB 0x0B
0x4378  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    codestream.hs:235

0x437A  0x28 0x02       DECSP 0x02

                        // int offset = int(jumpToAddress) - int(jumpAddress);

0x437C  0x44            PUSHI0
0x437D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x437F  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x4381  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4383  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x4385  0x12            SUBI
0x4386  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (isLong)                                          codestream.hs:237

0x4388  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x438A  0x31 0x8E 0x00  JZW 0x4418 (+142)

                        // uint op = IntToUInt(offset);                         codestream.hs:239

0x438D  0x44            PUSHI0
0x438E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4390  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x4393  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // uint lsb = op & 0xFF;                                codestream.hs:240

0x4395  0x44            PUSHI0
0x4396  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x4398  0x1A 0xFF       PUSHIB 0xFF
0x439A  0x0E            BITAND
0x439B  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // uint msb = op >> 8;                                  codestream.hs:241

0x439D  0x44            PUSHI0
0x439E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x43A0  0x1A 0x08       PUSHIB 0x08
0x43A2  0x10            BITSHR
0x43A3  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if ((shortInstruction == Instruction.JB) && (offset >= 0) && (offset <= 127))

0x43A5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x43A7  0x1A 0x30       PUSHIB 0x30
0x43A9  0x05            EQ
0x43AA  0x27 0x00       DUP 0x00
0x43AC  0x2E 0x11       JZB 0x43BD (+17)
0x43AE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x43B0  0x44            PUSHI0
0x43B1  0x18            GEI
0x43B2  0x0C            BOOLAND
0x43B3  0x27 0x00       DUP 0x00
0x43B5  0x2E 0x08       JZB 0x43BD (+8)
0x43B7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x43B9  0x1A 0x7F       PUSHIB 0x7F
0x43BB  0x19            LEI
0x43BC  0x0C            BOOLAND
0x43BD  0x2E 0x3E       JZB 0x43FB (+62)

                        // uint phb = PeepholeBoundary;                         codestream.hs:244

0x43BF  0x44            PUSHI0
0x43C0  0x34 0x40 0x01  CALLW 0x0140   // Peephole.PeepholeBoundary_Get
0x43C3  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (jumpAddress > phb)                               codestream.hs:245

0x43C5  0x56 0xFC 0x10  PUSHLOCALBB 0x10FC
0x43C8  0x07            GT
0x43C9  0x2E 0x09       JZB 0x43D2 (+9)

                        // UpdatePeepholeBoundary(currentStream.Length);

0x43CB  0x20 0xA0       PUSHGLOBALB 0xA0
0x43CD  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x43CF  0x34 0x3F 0x01  CALLW 0x013F   // Peephole.UpdatePeepholeBoundary

                        // currentStream.SetItem(jumpAddress+0, byte(shortInstruction));

0x43D2  0x20 0xA0       PUSHGLOBALB 0xA0
0x43D4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x43D6  0x44            PUSHI0
0x43D7  0x00            ADD
0x43D8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x43DA  0x51 0x03       CAST 0x03
0x43DC  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(jumpAddress+1, byte(lsb));

0x43DE  0x20 0xA0       PUSHGLOBALB 0xA0
0x43E0  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x43E2  0x45            PUSHI1
0x43E3  0x00            ADD
0x43E4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x43E6  0x51 0x03       CAST 0x03
0x43E8  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(jumpAddress+2, byte(Instruction.NOP));

0x43EA  0x20 0xA0       PUSHGLOBALB 0xA0
0x43EC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x43EE  0x1A 0x02       PUSHIB 0x02
0x43F0  0x00            ADD
0x43F1  0x1A 0x50       PUSHIB 0x50
0x43F3  0x51 0x03       CAST 0x03
0x43F5  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    codestream.hs:252

0x43F7  0x28 0x02       DECSP 0x02
0x43F9  0x30 0x1B       JB 0x4414 (+27)

                        // currentStream.SetItem(jumpAddress+1, byte(lsb));

0x43FB  0x20 0xA0       PUSHGLOBALB 0xA0
0x43FD  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x43FF  0x45            PUSHI1
0x4400  0x00            ADD
0x4401  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x4403  0x51 0x03       CAST 0x03
0x4405  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(jumpAddress+2, byte(msb));

0x4407  0x20 0xA0       PUSHGLOBALB 0xA0
0x4409  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x440B  0x1A 0x02       PUSHIB 0x02
0x440D  0x00            ADD
0x440E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x4410  0x51 0x03       CAST 0x03
0x4412  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    codestream.hs:258

0x4414  0x28 0x06       DECSP 0x06
0x4416  0x2A 0x0E       RETB 0x0E

                        // byte op = IntToByte(offset);                         codestream.hs:261

0x4418  0x44            PUSHI0
0x4419  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x441B  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x441E  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // currentStream.SetItem(jumpAddress+1, op);            codestream.hs:262

0x4420  0x20 0xA0       PUSHGLOBALB 0xA0
0x4422  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x4424  0x45            PUSHI1
0x4425  0x00            ADD
0x4426  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x4428  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    codestream.hs:263

0x442A  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:264

0x442C  0x2A 0x0E       RETB 0x0E


// /source/compiler/codegen/codestream.hs:186
// ####  CodeStream.PopTail(..)  ####                                           0x012E

0x442E  0x49            ENTER

                        // uint iLast = currentStream.Length - 1;               codestream.hs:189

0x442F  0x44            PUSHI0
0x4430  0x20 0xA0       PUSHGLOBALB 0xA0
0x4432  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x4434  0x45            PUSHI1
0x4435  0x01            SUB
0x4436  0x4C            POPLOCALB00

                        // currentStream.Remove(iLast);                         codestream.hs:190

0x4437  0x20 0xA0       PUSHGLOBALB 0xA0
0x4439  0x4E            PUSHLOCALB00
0x443A  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // pops--;                                              codestream.hs:191

0x443C  0x23 0xFE       DECLOCALB 0xFE (BP-2)

                        // if (pops == 0)                                       codestream.hs:192

0x443E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4440  0x2F 0x06       JNZB 0x4446 (+6)

                        // break;                                               codestream.hs:194

0x4442  0x28 0x02       DECSP 0x02
0x4444  0x2A 0x02       RETB 0x02

                        // }                                                    codestream.hs:196

0x4446  0x28 0x02       DECSP 0x02
0x4448  0x30 0xE7       JB 0x442F (-25)


// /source/compiler/codegen/codestream.hs:367
// ####  CodeStream.AddInstructionJump(..)  ####                                0x0134


                        // uint jumpAddress = NextAddress;                      codestream.hs:368

0x444A  0x5F 0x01       ENTERB 0x01

                        // uint jumpAddress = NextAddress;                      codestream.hs:368

0x444C  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x444F  0x4C            POPLOCALB00

                        // int offset = int(jumpToAddress) - int(jumpAddress);

0x4450  0x44            PUSHI0
0x4451  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4453  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x4455  0x4E            PUSHLOCALB00
0x4456  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x4458  0x12            SUBI
0x4459  0x4D            POPLOCALB02

                        // if ((offset >= -128) && (offset <= 127))             codestream.hs:370

0x445A  0x4F            PUSHLOCALB02
0x445B  0x44            PUSHI0
0x445C  0x1A 0x80       PUSHIB 0x80
0x445E  0x12            SUBI
0x445F  0x18            GEI
0x4460  0x27 0x00       DUP 0x00
0x4462  0x2E 0x07       JZB 0x4469 (+7)
0x4464  0x4F            PUSHLOCALB02
0x4465  0x1A 0x7F       PUSHIB 0x7F
0x4467  0x19            LEI
0x4468  0x0C            BOOLAND
0x4469  0x2E 0x3C       JZB 0x44A5 (+60)

                        // byte op = IntToByte(offset);                         codestream.hs:372

0x446B  0x44            PUSHI0
0x446C  0x4F            PUSHLOCALB02
0x446D  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x4470  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // switch (jumpInstruction)                             codestream.hs:373

0x4472  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)

                        // case Instruction.JW:                                 codestream.hs:375

0x4474  0x1A 0x33       PUSHIB 0x33
0x4476  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4478  0x05            EQ
0x4479  0x2E 0x08       JZB 0x4481 (+8)

                        // jumpInstruction = Instruction.JB;                    codestream.hs:377

0x447B  0x1A 0x30       PUSHIB 0x30
0x447D  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:378

0x447F  0x30 0x1A       JB 0x4499 (+26)

                        // case Instruction.JZW:                                codestream.hs:379

0x4481  0x1A 0x31       PUSHIB 0x31
0x4483  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4485  0x05            EQ
0x4486  0x2E 0x08       JZB 0x448E (+8)

                        // jumpInstruction = Instruction.JZB;                   codestream.hs:381

0x4488  0x1A 0x2E       PUSHIB 0x2E
0x448A  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:382

0x448C  0x30 0x0D       JB 0x4499 (+13)

                        // case Instruction.JNZW:                               codestream.hs:383

0x448E  0x1A 0x32       PUSHIB 0x32
0x4490  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4492  0x05            EQ
0x4493  0x2E 0x06       JZB 0x4499 (+6)

                        // jumpInstruction = Instruction.JNZB;                  codestream.hs:385

0x4495  0x1A 0x2F       PUSHIB 0x2F
0x4497  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:387

0x4499  0x28 0x02       DECSP 0x02

                        // AddInstruction(jumpInstruction, op);                 codestream.hs:388

0x449B  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x449E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:389

0x44A1  0x28 0x02       DECSP 0x02
0x44A3  0x30 0x3A       JB 0x44DD (+58)

                        // uint op = IntToUInt(offset);                         codestream.hs:392

0x44A5  0x44            PUSHI0
0x44A6  0x4F            PUSHLOCALB02
0x44A7  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x44AA  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // switch (jumpInstruction)                             codestream.hs:393

0x44AC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)

                        // case Instruction.JB:                                 codestream.hs:395

0x44AE  0x1A 0x30       PUSHIB 0x30
0x44B0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x44B2  0x05            EQ
0x44B3  0x2E 0x08       JZB 0x44BB (+8)

                        // jumpInstruction = Instruction.JW;                    codestream.hs:397

0x44B5  0x1A 0x33       PUSHIB 0x33
0x44B7  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:398

0x44B9  0x30 0x1A       JB 0x44D3 (+26)

                        // case Instruction.JZB:                                codestream.hs:399

0x44BB  0x1A 0x2E       PUSHIB 0x2E
0x44BD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x44BF  0x05            EQ
0x44C0  0x2E 0x08       JZB 0x44C8 (+8)

                        // jumpInstruction = Instruction.JZW;                   codestream.hs:401

0x44C2  0x1A 0x31       PUSHIB 0x31
0x44C4  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:402

0x44C6  0x30 0x0D       JB 0x44D3 (+13)

                        // case Instruction.JNZB:                               codestream.hs:403

0x44C8  0x1A 0x2F       PUSHIB 0x2F
0x44CA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x44CC  0x05            EQ
0x44CD  0x2E 0x06       JZB 0x44D3 (+6)

                        // jumpInstruction = Instruction.JNZW;                  codestream.hs:405

0x44CF  0x1A 0x32       PUSHIB 0x32
0x44D1  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    codestream.hs:407

0x44D3  0x28 0x02       DECSP 0x02

                        // AddInstruction(jumpInstruction, op);                 codestream.hs:408

0x44D5  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x44D8  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:409

0x44DB  0x28 0x02       DECSP 0x02

                        // UpdatePeepholeBoundary(currentStream.Length);

0x44DD  0x20 0xA0       PUSHGLOBALB 0xA0
0x44DF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x44E1  0x34 0x3F 0x01  CALLW 0x013F   // Peephole.UpdatePeepholeBoundary

                        // }                                                    codestream.hs:411

0x44E4  0x2A 0x08       RETB 0x08


// /source/compiler/codegen/codestream.hs:97
// ####  CodeStream.New(..)  ####                                               0x0124

0x44E6  0x49            ENTER

                        // currentStream = starterStream;                       codestream.hs:98

0x44E7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44E9  0x59 0xA0       POPCOPYGLOBALB 0xA0

                        // Peephole.Initialize();                               codestream.hs:99

0x44EB  0x34 0x3E 0x01  CALLW 0x013E   // Peephole.Initialize

                        // }                                                    codestream.hs:100

0x44EE  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:68
// ####  CodeStream.IntToByte(..)  ####                                         0x0121

0x44F0  0x49            ENTER

                        // if ((offset < -128) || (offset > 127))               codestream.hs:69

0x44F1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44F3  0x44            PUSHI0
0x44F4  0x1A 0x80       PUSHIB 0x80
0x44F6  0x12            SUBI
0x44F7  0x17            LTI
0x44F8  0x27 0x00       DUP 0x00
0x44FA  0x2F 0x08       JNZB 0x4502 (+8)
0x44FC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x44FE  0x1A 0x7F       PUSHIB 0x7F
0x4500  0x16            GTI
0x4501  0x0B            BOOLOR
0x4502  0x2E 0x06       JZB 0x4508 (+6)

                        // Die(0x0B);                                           codestream.hs:71

0x4504  0x1A 0x0B       PUSHIB 0x0B
0x4506  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // if (offset < 0)                                      codestream.hs:73

0x4508  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x450A  0x44            PUSHI0
0x450B  0x17            LTI
0x450C  0x2E 0x0A       JZB 0x4516 (+10)

                        // offset = 256 + offset; // -1 -> 255                  codestream.hs:75

0x450E  0x37 0x00 0x01  PUSHIW 0x0100
0x4511  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4513  0x11            ADDI
0x4514  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // byte result = byte(offset);                          codestream.hs:77

0x4516  0x44            PUSHI0
0x4517  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4519  0x51 0x03       CAST 0x03
0x451B  0x4C            POPLOCALB00

                        // return result;                                       codestream.hs:78

0x451C  0x4E            PUSHLOCALB00
0x451D  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/codestream.hs:576
// ####  CodeStream.AddString(..)  ####                                         0x013C

0x451F  0x49            ENTER

                        // if (value.Length == 0)                               codestream.hs:577

0x4520  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4522  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4524  0x2F 0x15       JNZB 0x4539 (+21)

                        // CodeStream.AddInstructionSysCall0("String", "New");

0x4526  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4529  0x1A 0x06       PUSHIB 0x06
0x452B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x452D  0x37 0x45 0x06  PUSHIW 0x0645
0x4530  0x1A 0x03       PUSHIB 0x03
0x4532  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4534  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    codestream.hs:580

0x4537  0x2A 0x02       RETB 0x02

                        // else if (value.Length == 1)                          codestream.hs:581

0x4539  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x453B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x453D  0x45            PUSHI1
0x453E  0x05            EQ
0x453F  0x2E 0x26       JZB 0x4565 (+38)

                        // CodeStream.AddInstructionPUSHI(byte(value[0]));

0x4541  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4543  0x44            PUSHI0
0x4544  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4546  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // byte iSysCall;                                       codestream.hs:584

0x4549  0x44            PUSHI0

                        // if (!TryParseSysCall("String.NewFromConstant", ref iSysCall))

0x454A  0x37 0xD1 0x06  PUSHIW 0x06D1
0x454D  0x1A 0x16       PUSHIB 0x16
0x454F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4551  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x4553  0x2C 0x89       CALLB 0x89     // SysCalls.TryParseSysCall
0x4555  0x2F 0x06       JNZB 0x455B (+6)

                        // Die(3); // key not found                             codestream.hs:587

0x4557  0x1A 0x03       PUSHIB 0x03
0x4559  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.AddInstruction(Instruction.SYSCALL1, iSysCall);

0x455B  0x1A 0x25       PUSHIB 0x25
0x455D  0x4E            PUSHLOCALB00
0x455E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:590

0x4561  0x28 0x02       DECSP 0x02
0x4563  0x2A 0x02       RETB 0x02

                        // else if (value.Length == 2)                          codestream.hs:591

0x4565  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4567  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x4569  0x1A 0x02       PUSHIB 0x02
0x456B  0x05            EQ
0x456C  0x2E 0x2F       JZB 0x459B (+47)

                        // CodeStream.AddInstructionPUSHI(byte(value[0]) + (byte(value[1]) << 8));

0x456E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4570  0x44            PUSHI0
0x4571  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4573  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4575  0x45            PUSHI1
0x4576  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4578  0x1A 0x08       PUSHIB 0x08
0x457A  0x0F            BITSHL
0x457B  0x00            ADD
0x457C  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // byte iSysCall;                                       codestream.hs:594

0x457F  0x44            PUSHI0

                        // if (!TryParseSysCall("String.NewFromConstant", ref iSysCall))

0x4580  0x37 0xD1 0x06  PUSHIW 0x06D1
0x4583  0x1A 0x16       PUSHIB 0x16
0x4585  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4587  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x4589  0x2C 0x89       CALLB 0x89     // SysCalls.TryParseSysCall
0x458B  0x2F 0x06       JNZB 0x4591 (+6)

                        // Die(3); // key not found                             codestream.hs:597

0x458D  0x1A 0x03       PUSHIB 0x03
0x458F  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.AddInstruction(Instruction.SYSCALL1, iSysCall);

0x4591  0x1A 0x25       PUSHIB 0x25
0x4593  0x4E            PUSHLOCALB00
0x4594  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:600

0x4597  0x28 0x02       DECSP 0x02
0x4599  0x2A 0x02       RETB 0x02

                        // uint constantAddress = CodeStream.CreateStringConstant(value);

0x459B  0x44            PUSHI0
0x459C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x459E  0x34 0x2C 0x01  CALLW 0x012C   // CodeStream.CreateStringConstant
0x45A1  0x4C            POPLOCALB00

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0x45A2  0x4E            PUSHLOCALB00
0x45A3  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionPUSHI(value.Length);

0x45A6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x45A8  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x45AA  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("String", "NewFromConstant");

0x45AD  0x37 0xDD 0x04  PUSHIW 0x04DD
0x45B0  0x1A 0x06       PUSHIB 0x06
0x45B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x45B4  0x37 0xD8 0x06  PUSHIW 0x06D8
0x45B7  0x1A 0x0F       PUSHIB 0x0F
0x45B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x45BB  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    codestream.hs:607

0x45BE  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:608

0x45C0  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/codestream.hs:523
// ####  CodeStream.AddInstructionPopVariable(..)  ####                         0x013B

0x45C2  0x49            ENTER

                        // if (!IsValueType(variableType))                      codestream.hs:524

0x45C3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x45C5  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x45C7  0x2F 0x0E       JNZB 0x45D5 (+14)

                        // CodeStream.internalAddInstruction(Instruction.COPYNEXTPOP);

0x45C9  0x1A 0x48       PUSHIB 0x48
0x45CB  0x34 0x35 0x01  CALLW 0x0135   // CodeStream.internalAddInstruction

                        // PeepholeOptimize(ref currentStream);                 codestream.hs:528

0x45CE  0x1A 0xA0       PUSHIB 0xA0
0x45D0  0x47            PUSHGP
0x45D1  0x00            ADD
0x45D2  0x34 0x44 0x01  CALLW 0x0144   // Peephole.PeepholeOptimize

                        // string fullName;                                     codestream.hs:530

0x45D5  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType2 = Types.GetTypeString(variableName, true, ref fullName);

0x45D7  0x24 0x02       SYSCALL0 0x02  // String.New
0x45D9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x45DB  0x45            PUSHI1
0x45DC  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x45DE  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x45E0  0x5E            POPCOPYLOCALB02

                        // if (Symbols.GlobalMemberExists(fullName))            codestream.hs:533

0x45E1  0x4E            PUSHLOCALB00
0x45E2  0x2C 0x9C       CALLB 0x9C     // Symbols.GlobalMemberExists
0x45E4  0x2E 0x25       JZB 0x4609 (+37)

                        // uint globalAddress = Symbols.GetGlobalAddress(fullName);

0x45E6  0x44            PUSHI0
0x45E7  0x4E            PUSHLOCALB00
0x45E8  0x2C 0x9E       CALLB 0x9E     // Symbols.GetGlobalAddress
0x45EA  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (globalAddress < 256)                             codestream.hs:536

0x45EC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x45EE  0x55 0x00 0x01  PUSHIWLT 0x0100
0x45F1  0x2E 0x0D       JZB 0x45FE (+13)

                        // CodeStream.AddInstruction(Instruction.POPGLOBALB, byte(globalAddress));

0x45F3  0x1A 0x1F       PUSHIB 0x1F
0x45F5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x45F7  0x51 0x03       CAST 0x03
0x45F9  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:539

0x45FC  0x30 0x09       JB 0x4605 (+9)

                        // CodeStream.AddInstruction(Instruction.POPGLOBALW, globalAddress);

0x45FE  0x1A 0x3C       PUSHIB 0x3C
0x4600  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4602  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:544

0x4605  0x28 0x02       DECSP 0x02
0x4607  0x2A 0x08       RETB 0x08

                        // bool isRef;                                          codestream.hs:547

0x4609  0x44            PUSHI0

                        // int offset = Block.GetOffset(variableName, ref isRef);

0x460A  0x44            PUSHI0
0x460B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x460D  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x460F  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x4612  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if ((offset > -129) && (offset < 128))               codestream.hs:549

0x4614  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4616  0x44            PUSHI0
0x4617  0x1A 0x81       PUSHIB 0x81
0x4619  0x12            SUBI
0x461A  0x16            GTI
0x461B  0x27 0x00       DUP 0x00
0x461D  0x2E 0x08       JZB 0x4625 (+8)
0x461F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4621  0x1A 0x80       PUSHIB 0x80
0x4623  0x17            LTI
0x4624  0x0C            BOOLAND
0x4625  0x2E 0x22       JZB 0x4647 (+34)

                        // byte operand =  CodeStream.IntToByte(offset);

0x4627  0x44            PUSHI0
0x4628  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x462A  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x462D  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (isRef)                                           codestream.hs:552

0x462F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4631  0x2E 0x0B       JZB 0x463C (+11)

                        // CodeStream.AddInstruction(Instruction.POPRELB, operand);

0x4633  0x1A 0x1D       PUSHIB 0x1D
0x4635  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4637  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:555

0x463A  0x30 0x09       JB 0x4643 (+9)

                        // CodeStream.AddInstruction(Instruction.POPLOCALB, operand);

0x463C  0x1A 0x1B       PUSHIB 0x1B
0x463E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4640  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:560

0x4643  0x28 0x02       DECSP 0x02
0x4645  0x30 0x20       JB 0x4665 (+32)

                        // uint operand =  CodeStream.IntToUInt(offset);

0x4647  0x44            PUSHI0
0x4648  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x464A  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x464D  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (isRef)                                           codestream.hs:564

0x464F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x4651  0x2E 0x0B       JZB 0x465C (+11)

                        // CodeStream.AddInstruction(Instruction.POPRELW, operand);

0x4653  0x1A 0x3A       PUSHIB 0x3A
0x4655  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4657  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:567

0x465A  0x30 0x09       JB 0x4663 (+9)

                        // CodeStream.AddInstruction(Instruction.POPLOCALW, operand);

0x465C  0x1A 0x38       PUSHIB 0x38
0x465E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x4660  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:572

0x4663  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:573

0x4665  0x28 0x04       DECSP 0x04

                        // }                                                    codestream.hs:574

0x4667  0x2A 0x08       RETB 0x08


// /source/compiler/codegen/codestream.hs:415
// ####  CodeStream.internalAddInstruction(..)  ####                            0x0135


                        // byte instr = byte(instruction);                      codestream.hs:416

0x4669  0x5F 0x01       ENTERB 0x01

                        // byte instr = byte(instruction);                      codestream.hs:416

0x466B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x466D  0x51 0x03       CAST 0x03
0x466F  0x4C            POPLOCALB00

                        // currentStream.Append(instr);                         codestream.hs:417

0x4670  0x20 0xA0       PUSHGLOBALB 0xA0
0x4672  0x4E            PUSHLOCALB00
0x4673  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // LastInstructionIndex = currentStream.Length-1;

0x4675  0x20 0xA0       PUSHGLOBALB 0xA0
0x4677  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x4679  0x45            PUSHI1
0x467A  0x01            SUB
0x467B  0x34 0x42 0x01  CALLW 0x0142   // Peephole.LastInstructionIndex_Set

                        // }                                                    codestream.hs:419

0x467E  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/codestream.hs:81
// ####  CodeStream.IntToUInt(..)  ####                                         0x0122

0x4680  0x49            ENTER

                        // long loffset = offset;                               codestream.hs:82

0x4681  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x4683  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4685  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x4687  0x5D            POPCOPYLOCALB00

                        // if (loffset < 0)                                     codestream.hs:83

0x4688  0x4E            PUSHLOCALB00
0x4689  0x44            PUSHI0
0x468A  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x468C  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x468E  0x2E 0x0E       JZB 0x469C (+14)

                        // loffset = 65536 + offset; // -1 -> 0xFFFF            codestream.hs:85

0x4690  0x37 0xE7 0x06  PUSHIW 0x06E7
0x4693  0x24 0x3E       SYSCALL0 0x3E  // Long.NewFromConstant
0x4695  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4697  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x4699  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x469B  0x5D            POPCOPYLOCALB00

                        // uint result = uint(loffset);                         codestream.hs:87

0x469C  0x44            PUSHI0
0x469D  0x4E            PUSHLOCALB00
0x469E  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x46A0  0x4D            POPLOCALB02

                        // return result;                                       codestream.hs:88

0x46A1  0x4F            PUSHLOCALB02
0x46A2  0x2B 0x06       RETRETB 0x06


// /source/compiler/codegen/codestream.hs:267
// ####  CodeStream.TryUserSysCall(..)  ####                                    0x0130


                        // bool userSupplied = false;                           codestream.hs:268

0x46A4  0x5F 0x02       ENTERB 0x02

                        // if (DefineExists("H6502"))                           codestream.hs:273

0x46A6  0x37 0xEB 0x06  PUSHIW 0x06EB
0x46A9  0x1A 0x05       PUSHIB 0x05
0x46AB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x46AD  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x46AF  0x31 0x8D 0x00  JZW 0x473C (+141)

                        // if (GetFunctionIndex(name, ref fIndex))              codestream.hs:276

0x46B2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x46B4  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x46B6  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x46B8  0x31 0x84 0x00  JZW 0x473C (+132)

                        // <uint> iOverloads = GetFunctionOverloads(fIndex);

0x46BB  0x1A 0x04       PUSHIB 0x04
0x46BD  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x46BF  0x4F            PUSHLOCALB02
0x46C0  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0x46C2  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (iOverloads.Length == 1)                          codestream.hs:279

0x46C4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x46C6  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x46C8  0x45            PUSHI1
0x46C9  0x05            EQ
0x46CA  0x2E 0x70       JZB 0x473A (+112)

                        // uint iOverload = iOverloads[0];                      codestream.hs:281

0x46CC  0x44            PUSHI0
0x46CD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x46CF  0x44            PUSHI0
0x46D0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x46D2  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (!IsSysCall(iOverload))                           codestream.hs:282

0x46D4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x46D6  0x2C 0xB2       CALLB 0xB2     // Symbols.IsSysCall
0x46D8  0x2F 0x60       JNZB 0x4738 (+96)

                        // Symbols.OverloadToCompile(iOverload); // User supplied SysCall as Hopper source

0x46DA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x46DC  0x2C 0xC9       CALLB 0xC9     // Symbols.OverloadToCompile

                        // if (DefineExists("H6502"))                           codestream.hs:286

0x46DE  0x37 0xEB 0x06  PUSHIW 0x06EB
0x46E1  0x1A 0x05       PUSHIB 0x05
0x46E3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x46E5  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x46E7  0x2E 0x36       JZB 0x471D (+54)

                        // if (iOverload <= 0x3FFF)                             codestream.hs:288

0x46E9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x46EB  0x40 0xFF 0x3F  PUSHIWLE 0x3FFF
0x46EE  0x2E 0x16       JZB 0x4704 (+22)

                        // uint beOverload = 0xC000 | iOverload;                codestream.hs:290

0x46F0  0x44            PUSHI0
0x46F1  0x37 0x00 0xC0  PUSHIW 0xC000
0x46F4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x46F6  0x0D            BITOR
0x46F7  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstruction(Instruction.CALLW, beOverload);

0x46F9  0x1A 0x34       PUSHIB 0x34
0x46FB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x46FD  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:292

0x4700  0x28 0x02       DECSP 0x02
0x4702  0x30 0x34       JB 0x4736 (+52)

                        // Parser.Error("H6502 has a limit of 16383 for function indices, (was '" + iOverload.ToString() + "')");

0x4704  0x37 0xF0 0x06  PUSHIW 0x06F0
0x4707  0x1A 0x37       PUSHIB 0x37
0x4709  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x470B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x470D  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x4710  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4712  0x37 0x27 0x29  PUSHIW 0x2927
0x4715  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4717  0x24 0x03       SYSCALL0 0x03  // String.Append
0x4719  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    codestream.hs:297

0x471B  0x30 0x1B       JB 0x4736 (+27)

                        // else if (iOverload < 256)                            codestream.hs:298

0x471D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x471F  0x55 0x00 0x01  PUSHIWLT 0x0100
0x4722  0x2E 0x0D       JZB 0x472F (+13)

                        // CodeStream.AddInstruction(Instruction.CALLB, byte(iOverload));

0x4724  0x1A 0x2C       PUSHIB 0x2C
0x4726  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4728  0x51 0x03       CAST 0x03
0x472A  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    codestream.hs:301

0x472D  0x30 0x09       JB 0x4736 (+9)

                        // CodeStream.AddInstruction(Instruction.CALLW, iOverload);

0x472F  0x1A 0x34       PUSHIB 0x34
0x4731  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4733  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // userSupplied = true;                                 codestream.hs:307

0x4736  0x45            PUSHI1
0x4737  0x4C            POPLOCALB00

                        // }                                                    codestream.hs:309

0x4738  0x28 0x02       DECSP 0x02

                        // }                                                    codestream.hs:310

0x473A  0x28 0x02       DECSP 0x02

                        // return userSupplied;                                 codestream.hs:313

0x473C  0x4E            PUSHLOCALB00
0x473D  0x2B 0x06       RETRETB 0x06


// /source/compiler/codegen/codestream.hs:171
// ####  CodeStream.CreateStringConstant(..)  ####                              0x012C

0x473F  0x49            ENTER

                        // <byte> bytes;                                        codestream.hs:172

0x4740  0x1A 0x03       PUSHIB 0x03
0x4742  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // foreach (var c in value)                             codestream.hs:173

0x4744  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4746  0x44            PUSHI0
0x4747  0x44            PUSHI0
0x4748  0x4F            PUSHLOCALB02
0x4749  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x474B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x474D  0x05            EQ
0x474E  0x2F 0x12       JNZB 0x4760 (+18)
0x4750  0x4F            PUSHLOCALB02
0x4751  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x4753  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x4755  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // bytes.Append(byte(c));                               codestream.hs:175

0x4757  0x4E            PUSHLOCALB00
0x4758  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x475A  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    codestream.hs:176

0x475C  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x475E  0x30 0xEA       JB 0x4748 (-22)
0x4760  0x28 0x06       DECSP 0x06

                        // return AppendConstant(bytes);                        codestream.hs:177

0x4762  0x4E            PUSHLOCALB00
0x4763  0x34 0x29 0x01  CALLW 0x0129   // CodeStream.AppendConstant
0x4766  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/codestream.hs:114
// ####  CodeStream.AppendConstant(..)  ####                                    0x0129


                        // uint constantAddress;                                codestream.hs:115

0x4768  0x5F 0x02       ENTERB 0x02

                        // uint length = constantStream.Length;                 codestream.hs:118

0x476A  0x20 0xA2       PUSHGLOBALB 0xA2
0x476C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x476E  0x4D            POPLOCALB02

                        // uint candidateLength = data.Length;                  codestream.hs:119

0x476F  0x44            PUSHI0
0x4770  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x4772  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x4774  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // uint iStart = 0;                                     codestream.hs:120

0x4776  0x44            PUSHI0

                        // bool found = false;                                  codestream.hs:121

0x4777  0x44            PUSHI0

                        // if (iStart + candidateLength > length)               codestream.hs:124

0x4778  0x56 0x06 0x04  PUSHLOCALBB 0x0406
0x477B  0x00            ADD
0x477C  0x4F            PUSHLOCALB02
0x477D  0x07            GT
0x477E  0x2F 0x3E       JNZB 0x47BC (+62)

                        // bool match = true;                                   codestream.hs:128

0x4780  0x44            PUSHI0
0x4781  0x45            PUSHI1
0x4782  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // for (uint i = 0; i < candidateLength; i++)           codestream.hs:129

0x4784  0x44            PUSHI0
0x4785  0x56 0x0C 0x04  PUSHLOCALBB 0x040C
0x4788  0x08            LT
0x4789  0x2E 0x1D       JZB 0x47A6 (+29)

                        // if (data[i] != constantStream[iStart+i])             codestream.hs:131

0x478B  0x56 0xFE 0x0C  PUSHLOCALBB 0x0CFE
0x478E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x4790  0x20 0xA2       PUSHGLOBALB 0xA2
0x4792  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x4795  0x00            ADD
0x4796  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x4798  0x06            NE
0x4799  0x2E 0x09       JZB 0x47A2 (+9)

                        // match = false;                                       codestream.hs:133

0x479B  0x44            PUSHI0
0x479C  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // break;                                               codestream.hs:134

0x479E  0x28 0x02       DECSP 0x02
0x47A0  0x30 0x08       JB 0x47A8 (+8)

                        // }                                                    codestream.hs:136

0x47A2  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x47A4  0x30 0xE1       JB 0x4785 (-31)
0x47A6  0x28 0x02       DECSP 0x02

                        // if (match)                                           codestream.hs:137

0x47A8  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x47AA  0x2E 0x0C       JZB 0x47B6 (+12)

                        // found = true;                                        codestream.hs:139

0x47AC  0x45            PUSHI1
0x47AD  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // constantAddress = iStart;                            codestream.hs:140

0x47AF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x47B1  0x4C            POPLOCALB00

                        // break;                                               codestream.hs:141

0x47B2  0x28 0x02       DECSP 0x02
0x47B4  0x30 0x08       JB 0x47BC (+8)

                        // iStart++;                                            codestream.hs:143

0x47B6  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // }                                                    codestream.hs:144

0x47B8  0x28 0x02       DECSP 0x02
0x47BA  0x30 0xBE       JB 0x4778 (-66)

                        // if (found)                                           codestream.hs:145

0x47BC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x47BE  0x2E 0x06       JZB 0x47C4 (+6)

                        // break;                                               codestream.hs:147

0x47C0  0x28 0x08       DECSP 0x08
0x47C2  0x30 0x29       JB 0x47EB (+41)

                        // constantAddress = constantStream.Length;             codestream.hs:150

0x47C4  0x20 0xA2       PUSHGLOBALB 0xA2
0x47C6  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x47C8  0x4C            POPLOCALB00

                        // foreach (var b in data)                              codestream.hs:151

0x47C9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x47CB  0x44            PUSHI0
0x47CC  0x44            PUSHI0
0x47CD  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x47CF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x47D1  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x47D3  0x05            EQ
0x47D4  0x2F 0x13       JNZB 0x47E7 (+19)
0x47D6  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0x47D9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x47DB  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // constantStream.Append(b);                            codestream.hs:153

0x47DD  0x20 0xA2       PUSHGLOBALB 0xA2
0x47DF  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x47E1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    codestream.hs:154

0x47E3  0x22 0x0E       INCLOCALB 0x0E (BP+14)
0x47E5  0x30 0xE8       JB 0x47CD (-24)
0x47E7  0x28 0x06       DECSP 0x06

                        // break;                                               codestream.hs:155

0x47E9  0x28 0x08       DECSP 0x08

                        // return constantAddress;                              codestream.hs:157

0x47EB  0x4E            PUSHLOCALB00
0x47EC  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/syscalls.hs:11
// ####  SysCalls.New(..)  ####                                                 0x0088

0x47EE  0x49            ENTER

                        // syscalls.Clear(); // in case called a 2nd time

0x47EF  0x20 0x3E       PUSHGLOBALB 0x3E
0x47F1  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // addEntry("String", "NewFromConstant");               syscalls.hs:14

0x47F3  0x37 0xDD 0x04  PUSHIW 0x04DD
0x47F6  0x1A 0x06       PUSHIB 0x06
0x47F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x47FA  0x37 0xD8 0x06  PUSHIW 0x06D8
0x47FD  0x1A 0x0F       PUSHIB 0x0F
0x47FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4801  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "NewFromChar");                   syscalls.hs:15

0x4803  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4806  0x1A 0x06       PUSHIB 0x06
0x4808  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x480A  0x37 0x27 0x07  PUSHIW 0x0727
0x480D  0x1A 0x0B       PUSHIB 0x0B
0x480F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4811  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "New");                           syscalls.hs:16

0x4813  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4816  0x1A 0x06       PUSHIB 0x06
0x4818  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x481A  0x37 0x45 0x06  PUSHIW 0x0645
0x481D  0x1A 0x03       PUSHIB 0x03
0x481F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4821  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Append");                        syscalls.hs:17

0x4823  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4826  0x1A 0x06       PUSHIB 0x06
0x4828  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x482A  0x37 0x32 0x07  PUSHIW 0x0732
0x482D  0x1A 0x06       PUSHIB 0x06
0x482F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4831  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "InsertChar");                    syscalls.hs:18

0x4833  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4836  0x1A 0x06       PUSHIB 0x06
0x4838  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x483A  0x37 0x38 0x07  PUSHIW 0x0738
0x483D  0x1A 0x0A       PUSHIB 0x0A
0x483F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4841  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Compare");                       syscalls.hs:19

0x4843  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4846  0x1A 0x06       PUSHIB 0x06
0x4848  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x484A  0x37 0xE3 0x04  PUSHIW 0x04E3
0x484D  0x1A 0x07       PUSHIB 0x07
0x484F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4851  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Length_Get");                    syscalls.hs:20

0x4853  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4856  0x1A 0x06       PUSHIB 0x06
0x4858  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x485A  0x37 0x17 0x06  PUSHIW 0x0617
0x485D  0x1A 0x0A       PUSHIB 0x0A
0x485F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4861  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "EndsWith");                      syscalls.hs:21

0x4863  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4866  0x1A 0x06       PUSHIB 0x06
0x4868  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x486A  0x37 0x42 0x07  PUSHIW 0x0742
0x486D  0x1A 0x08       PUSHIB 0x08
0x486F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4871  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Substring");                     syscalls.hs:22

0x4873  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4876  0x1A 0x06       PUSHIB 0x06
0x4878  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x487A  0x37 0x4A 0x07  PUSHIW 0x074A
0x487D  0x1A 0x09       PUSHIB 0x09
0x487F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4881  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Replace");                       syscalls.hs:23

0x4883  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4886  0x1A 0x06       PUSHIB 0x06
0x4888  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x488A  0x37 0x53 0x07  PUSHIW 0x0753
0x488D  0x1A 0x07       PUSHIB 0x07
0x488F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4891  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "GetChar");                       syscalls.hs:24

0x4893  0x37 0xDD 0x04  PUSHIW 0x04DD
0x4896  0x1A 0x06       PUSHIB 0x06
0x4898  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x489A  0x37 0x21 0x06  PUSHIW 0x0621
0x489D  0x1A 0x07       PUSHIB 0x07
0x489F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48A1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Array", "New");                            syscalls.hs:26

0x48A3  0x37 0x01 0x03  PUSHIW 0x0301
0x48A6  0x1A 0x05       PUSHIB 0x05
0x48A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48AA  0x37 0x45 0x06  PUSHIW 0x0645
0x48AD  0x1A 0x03       PUSHIB 0x03
0x48AF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48B1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Array", "Count_Get");                      syscalls.hs:27

0x48B3  0x37 0x01 0x03  PUSHIW 0x0301
0x48B6  0x1A 0x05       PUSHIB 0x05
0x48B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48BA  0x37 0x38 0x06  PUSHIW 0x0638
0x48BD  0x1A 0x09       PUSHIB 0x09
0x48BF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48C1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Array", "GetItem");                        syscalls.hs:28

0x48C3  0x37 0x01 0x03  PUSHIW 0x0301
0x48C6  0x1A 0x05       PUSHIB 0x05
0x48C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48CA  0x37 0x28 0x06  PUSHIW 0x0628
0x48CD  0x1A 0x07       PUSHIB 0x07
0x48CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48D1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Array", "SetItem");                        syscalls.hs:29

0x48D3  0x37 0x01 0x03  PUSHIW 0x0301
0x48D6  0x1A 0x05       PUSHIB 0x05
0x48D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48DA  0x37 0x06 0x03  PUSHIW 0x0306
0x48DD  0x1A 0x07       PUSHIB 0x07
0x48DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48E1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "New");                             syscalls.hs:31

0x48E3  0x37 0x17 0x03  PUSHIW 0x0317
0x48E6  0x1A 0x04       PUSHIB 0x04
0x48E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48EA  0x37 0x45 0x06  PUSHIW 0x0645
0x48ED  0x1A 0x03       PUSHIB 0x03
0x48EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48F1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Length_Get");                      syscalls.hs:32

0x48F3  0x37 0x17 0x03  PUSHIW 0x0317
0x48F6  0x1A 0x04       PUSHIB 0x04
0x48F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x48FA  0x37 0x17 0x06  PUSHIW 0x0617
0x48FD  0x1A 0x0A       PUSHIB 0x0A
0x48FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4901  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Append");                          syscalls.hs:33

0x4903  0x37 0x17 0x03  PUSHIW 0x0317
0x4906  0x1A 0x04       PUSHIB 0x04
0x4908  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x490A  0x37 0x32 0x07  PUSHIW 0x0732
0x490D  0x1A 0x06       PUSHIB 0x06
0x490F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4911  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Insert");                          syscalls.hs:34

0x4913  0x37 0x17 0x03  PUSHIW 0x0317
0x4916  0x1A 0x04       PUSHIB 0x04
0x4918  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x491A  0x37 0x38 0x07  PUSHIW 0x0738
0x491D  0x1A 0x06       PUSHIB 0x06
0x491F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4921  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "GetItem");                         syscalls.hs:35

0x4923  0x37 0x17 0x03  PUSHIW 0x0317
0x4926  0x1A 0x04       PUSHIB 0x04
0x4928  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x492A  0x37 0x28 0x06  PUSHIW 0x0628
0x492D  0x1A 0x07       PUSHIB 0x07
0x492F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4931  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "GetItemAsVariant");                syscalls.hs:36

0x4933  0x37 0x17 0x03  PUSHIW 0x0317
0x4936  0x1A 0x04       PUSHIB 0x04
0x4938  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x493A  0x37 0x28 0x06  PUSHIW 0x0628
0x493D  0x1A 0x10       PUSHIB 0x10
0x493F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4941  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "SetItem");                         syscalls.hs:37

0x4943  0x37 0x17 0x03  PUSHIW 0x0317
0x4946  0x1A 0x04       PUSHIB 0x04
0x4948  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x494A  0x37 0x06 0x03  PUSHIW 0x0306
0x494D  0x1A 0x07       PUSHIB 0x07
0x494F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4951  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Clear");                           syscalls.hs:38

0x4953  0x37 0x17 0x03  PUSHIW 0x0317
0x4956  0x1A 0x04       PUSHIB 0x04
0x4958  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x495A  0x37 0x5A 0x07  PUSHIW 0x075A
0x495D  0x1A 0x05       PUSHIB 0x05
0x495F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4961  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Remove");                          syscalls.hs:39

0x4963  0x37 0x17 0x03  PUSHIW 0x0317
0x4966  0x1A 0x04       PUSHIB 0x04
0x4968  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x496A  0x37 0x5F 0x07  PUSHIW 0x075F
0x496D  0x1A 0x06       PUSHIB 0x06
0x496F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4971  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("List", "Contains");                        syscalls.hs:40

0x4973  0x37 0x17 0x03  PUSHIW 0x0317
0x4976  0x1A 0x04       PUSHIB 0x04
0x4978  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x497A  0x37 0x65 0x07  PUSHIW 0x0765
0x497D  0x1A 0x08       PUSHIB 0x08
0x497F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4981  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "New");                       syscalls.hs:42

0x4983  0x37 0x0D 0x03  PUSHIW 0x030D
0x4986  0x1A 0x0A       PUSHIB 0x0A
0x4988  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x498A  0x37 0x45 0x06  PUSHIW 0x0645
0x498D  0x1A 0x03       PUSHIB 0x03
0x498F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4991  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Count_Get");                 syscalls.hs:43

0x4993  0x37 0x0D 0x03  PUSHIW 0x030D
0x4996  0x1A 0x0A       PUSHIB 0x0A
0x4998  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x499A  0x37 0x38 0x06  PUSHIW 0x0638
0x499D  0x1A 0x09       PUSHIB 0x09
0x499F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49A1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Set");                       syscalls.hs:44

0x49A3  0x37 0x0D 0x03  PUSHIW 0x030D
0x49A6  0x1A 0x0A       PUSHIB 0x0A
0x49A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49AA  0x37 0x06 0x03  PUSHIW 0x0306
0x49AD  0x1A 0x03       PUSHIB 0x03
0x49AF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49B1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Contains");                  syscalls.hs:45

0x49B3  0x37 0x0D 0x03  PUSHIW 0x030D
0x49B6  0x1A 0x0A       PUSHIB 0x0A
0x49B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49BA  0x37 0x65 0x07  PUSHIW 0x0765
0x49BD  0x1A 0x08       PUSHIB 0x08
0x49BF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49C1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Get");                       syscalls.hs:46

0x49C3  0x37 0x0D 0x03  PUSHIW 0x030D
0x49C6  0x1A 0x0A       PUSHIB 0x0A
0x49C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49CA  0x37 0x1E 0x06  PUSHIW 0x061E
0x49CD  0x1A 0x03       PUSHIB 0x03
0x49CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49D1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Next");                      syscalls.hs:47

0x49D3  0x37 0x0D 0x03  PUSHIW 0x030D
0x49D6  0x1A 0x0A       PUSHIB 0x0A
0x49D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49DA  0x37 0x48 0x06  PUSHIW 0x0648
0x49DD  0x1A 0x04       PUSHIB 0x04
0x49DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49E1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "Clear");                     syscalls.hs:48

0x49E3  0x37 0x0D 0x03  PUSHIW 0x030D
0x49E6  0x1A 0x0A       PUSHIB 0x0A
0x49E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49EA  0x37 0x5A 0x07  PUSHIW 0x075A
0x49ED  0x1A 0x05       PUSHIB 0x05
0x49EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49F1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "New");                             syscalls.hs:50

0x49F3  0x37 0x41 0x06  PUSHIW 0x0641
0x49F6  0x1A 0x04       PUSHIB 0x04
0x49F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x49FA  0x37 0x45 0x06  PUSHIW 0x0645
0x49FD  0x1A 0x03       PUSHIB 0x03
0x49FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A01  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "Set");                             syscalls.hs:51

0x4A03  0x37 0x41 0x06  PUSHIW 0x0641
0x4A06  0x1A 0x04       PUSHIB 0x04
0x4A08  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A0A  0x37 0x06 0x03  PUSHIW 0x0306
0x4A0D  0x1A 0x03       PUSHIB 0x03
0x4A0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A11  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "Key");                             syscalls.hs:52

0x4A13  0x37 0x41 0x06  PUSHIW 0x0641
0x4A16  0x1A 0x04       PUSHIB 0x04
0x4A18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A1A  0x37 0xC3 0x05  PUSHIW 0x05C3
0x4A1D  0x1A 0x03       PUSHIB 0x03
0x4A1F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A21  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "KeyType");                         syscalls.hs:53

0x4A23  0x37 0x41 0x06  PUSHIW 0x0641
0x4A26  0x1A 0x04       PUSHIB 0x04
0x4A28  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A2A  0x37 0x6D 0x07  PUSHIW 0x076D
0x4A2D  0x1A 0x07       PUSHIB 0x07
0x4A2F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A31  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "Value");                           syscalls.hs:54

0x4A33  0x37 0x41 0x06  PUSHIW 0x0641
0x4A36  0x1A 0x04       PUSHIB 0x04
0x4A38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A3A  0x37 0x74 0x07  PUSHIW 0x0774
0x4A3D  0x1A 0x05       PUSHIB 0x05
0x4A3F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A41  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Pair", "ValueType");                       syscalls.hs:55

0x4A43  0x37 0x41 0x06  PUSHIW 0x0641
0x4A46  0x1A 0x04       PUSHIB 0x04
0x4A48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A4A  0x37 0x79 0x07  PUSHIW 0x0779
0x4A4D  0x1A 0x09       PUSHIB 0x09
0x4A4F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A51  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Variant", "Type");                         syscalls.hs:57

0x4A53  0x37 0xCA 0x02  PUSHIW 0x02CA
0x4A56  0x1A 0x07       PUSHIB 0x07
0x4A58  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A5A  0x37 0x75 0x06  PUSHIW 0x0675
0x4A5D  0x1A 0x04       PUSHIB 0x04
0x4A5F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A61  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Variant", "Box");                          syscalls.hs:58

0x4A63  0x37 0xCA 0x02  PUSHIW 0x02CA
0x4A66  0x1A 0x07       PUSHIB 0x07
0x4A68  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A6A  0x37 0xD1 0x02  PUSHIW 0x02D1
0x4A6D  0x1A 0x03       PUSHIB 0x03
0x4A6F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A71  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Variant", "UnBox");                        syscalls.hs:59

0x4A73  0x37 0xCA 0x02  PUSHIW 0x02CA
0x4A76  0x1A 0x07       PUSHIB 0x07
0x4A78  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A7A  0x37 0x82 0x07  PUSHIW 0x0782
0x4A7D  0x1A 0x05       PUSHIB 0x05
0x4A7F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A81  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Print");                         syscalls.hs:61

0x4A83  0x37 0x87 0x07  PUSHIW 0x0787
0x4A86  0x1A 0x06       PUSHIB 0x06
0x4A88  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A8A  0x37 0x8D 0x07  PUSHIW 0x078D
0x4A8D  0x1A 0x05       PUSHIB 0x05
0x4A8F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A91  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "PrintLn");                       syscalls.hs:62

0x4A93  0x37 0x87 0x07  PUSHIW 0x0787
0x4A96  0x1A 0x06       PUSHIB 0x06
0x4A98  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4A9A  0x37 0x92 0x07  PUSHIW 0x0792
0x4A9D  0x1A 0x07       PUSHIB 0x07
0x4A9F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AA1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Clear");                         syscalls.hs:63

0x4AA3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AA6  0x1A 0x06       PUSHIB 0x06
0x4AA8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AAA  0x37 0x5A 0x07  PUSHIW 0x075A
0x4AAD  0x1A 0x05       PUSHIB 0x05
0x4AAF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AB1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "SetCursor");                     syscalls.hs:64

0x4AB3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AB6  0x1A 0x06       PUSHIB 0x06
0x4AB8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4ABA  0x37 0x99 0x07  PUSHIW 0x0799
0x4ABD  0x1A 0x09       PUSHIB 0x09
0x4ABF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AC1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Columns_Get");                   syscalls.hs:65

0x4AC3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AC6  0x1A 0x06       PUSHIB 0x06
0x4AC8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4ACA  0x37 0xA2 0x07  PUSHIW 0x07A2
0x4ACD  0x1A 0x0B       PUSHIB 0x0B
0x4ACF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AD1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Rows_Get");                      syscalls.hs:66

0x4AD3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AD6  0x1A 0x06       PUSHIB 0x06
0x4AD8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4ADA  0x37 0xAD 0x07  PUSHIW 0x07AD
0x4ADD  0x1A 0x08       PUSHIB 0x08
0x4ADF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AE1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "CursorX_Get");                   syscalls.hs:67

0x4AE3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AE6  0x1A 0x06       PUSHIB 0x06
0x4AE8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AEA  0x37 0xB5 0x07  PUSHIW 0x07B5
0x4AED  0x1A 0x0B       PUSHIB 0x0B
0x4AEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AF1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "CursorY_Get");                   syscalls.hs:68

0x4AF3  0x37 0x87 0x07  PUSHIW 0x0787
0x4AF6  0x1A 0x06       PUSHIB 0x06
0x4AF8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4AFA  0x37 0xC0 0x07  PUSHIW 0x07C0
0x4AFD  0x1A 0x0B       PUSHIB 0x0B
0x4AFF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B01  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Suspend");                       syscalls.hs:69

0x4B03  0x37 0x87 0x07  PUSHIW 0x0787
0x4B06  0x1A 0x06       PUSHIB 0x06
0x4B08  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B0A  0x37 0xCB 0x07  PUSHIW 0x07CB
0x4B0D  0x1A 0x07       PUSHIB 0x07
0x4B0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B11  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "Resume");                        syscalls.hs:70

0x4B13  0x37 0x87 0x07  PUSHIW 0x0787
0x4B16  0x1A 0x06       PUSHIB 0x06
0x4B18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B1A  0x37 0xD2 0x07  PUSHIW 0x07D2
0x4B1D  0x1A 0x06       PUSHIB 0x06
0x4B1F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B21  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Screen", "DrawChar");                      syscalls.hs:71

0x4B23  0x37 0x87 0x07  PUSHIW 0x0787
0x4B26  0x1A 0x06       PUSHIB 0x06
0x4B28  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B2A  0x37 0xD8 0x07  PUSHIW 0x07D8
0x4B2D  0x1A 0x08       PUSHIB 0x08
0x4B2F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B31  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Int", "ToFloat");                          syscalls.hs:73

0x4B33  0x37 0xFC 0x05  PUSHIW 0x05FC
0x4B36  0x1A 0x03       PUSHIB 0x03
0x4B38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B3A  0x37 0x0D 0x06  PUSHIW 0x060D
0x4B3D  0x1A 0x07       PUSHIB 0x07
0x4B3F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B41  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Int", "ToLong");                           syscalls.hs:74

0x4B43  0x37 0xFC 0x05  PUSHIW 0x05FC
0x4B46  0x1A 0x03       PUSHIB 0x03
0x4B48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B4A  0x37 0xFF 0x05  PUSHIW 0x05FF
0x4B4D  0x1A 0x06       PUSHIB 0x06
0x4B4F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B51  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("UInt", "ToLong");                          syscalls.hs:76

0x4B53  0x37 0xFB 0x05  PUSHIW 0x05FB
0x4B56  0x1A 0x04       PUSHIB 0x04
0x4B58  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B5A  0x37 0xFF 0x05  PUSHIW 0x05FF
0x4B5D  0x1A 0x06       PUSHIB 0x06
0x4B5F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B61  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("UInt", "ToInt");                           syscalls.hs:77

0x4B63  0x37 0xFB 0x05  PUSHIW 0x05FB
0x4B66  0x1A 0x04       PUSHIB 0x04
0x4B68  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B6A  0x37 0xE0 0x07  PUSHIW 0x07E0
0x4B6D  0x1A 0x05       PUSHIB 0x05
0x4B6F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B71  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "ToString");                        syscalls.hs:79

0x4B73  0x37 0x01 0x06  PUSHIW 0x0601
0x4B76  0x1A 0x04       PUSHIB 0x04
0x4B78  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B7A  0x37 0xE5 0x07  PUSHIW 0x07E5
0x4B7D  0x1A 0x08       PUSHIB 0x08
0x4B7F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B81  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "ToBytes");                         syscalls.hs:80

0x4B83  0x37 0x01 0x06  PUSHIW 0x0601
0x4B86  0x1A 0x04       PUSHIB 0x04
0x4B88  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B8A  0x37 0xED 0x07  PUSHIW 0x07ED
0x4B8D  0x1A 0x07       PUSHIB 0x07
0x4B8F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B91  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "ToFloat");                         syscalls.hs:81

0x4B93  0x37 0x01 0x06  PUSHIW 0x0601
0x4B96  0x1A 0x04       PUSHIB 0x04
0x4B98  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4B9A  0x37 0x0D 0x06  PUSHIW 0x060D
0x4B9D  0x1A 0x07       PUSHIB 0x07
0x4B9F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BA1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "ToInt");                           syscalls.hs:82

0x4BA3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BA6  0x1A 0x04       PUSHIB 0x04
0x4BA8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BAA  0x37 0xE0 0x07  PUSHIW 0x07E0
0x4BAD  0x1A 0x05       PUSHIB 0x05
0x4BAF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BB1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "ToUInt");                          syscalls.hs:83

0x4BB3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BB6  0x1A 0x04       PUSHIB 0x04
0x4BB8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BBA  0x37 0xF4 0x07  PUSHIW 0x07F4
0x4BBD  0x1A 0x06       PUSHIB 0x06
0x4BBF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BC1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "New");                             syscalls.hs:84

0x4BC3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BC6  0x1A 0x04       PUSHIB 0x04
0x4BC8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BCA  0x37 0x45 0x06  PUSHIW 0x0645
0x4BCD  0x1A 0x03       PUSHIB 0x03
0x4BCF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BD1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "NewFromConstant");                 syscalls.hs:85

0x4BD3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BD6  0x1A 0x04       PUSHIB 0x04
0x4BD8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BDA  0x37 0xD8 0x06  PUSHIW 0x06D8
0x4BDD  0x1A 0x0F       PUSHIB 0x0F
0x4BDF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BE1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Add");                             syscalls.hs:86

0x4BE3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BE6  0x1A 0x04       PUSHIB 0x04
0x4BE8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BEA  0x37 0x05 0x06  PUSHIW 0x0605
0x4BED  0x1A 0x03       PUSHIB 0x03
0x4BEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BF1  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Sub");                             syscalls.hs:87

0x4BF3  0x37 0x01 0x06  PUSHIW 0x0601
0x4BF6  0x1A 0x04       PUSHIB 0x04
0x4BF8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4BFA  0x37 0x14 0x06  PUSHIW 0x0614
0x4BFD  0x1A 0x03       PUSHIB 0x03
0x4BFF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C01  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Div");                             syscalls.hs:88

0x4C03  0x37 0x01 0x06  PUSHIW 0x0601
0x4C06  0x1A 0x04       PUSHIB 0x04
0x4C08  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C0A  0x37 0xFA 0x07  PUSHIW 0x07FA
0x4C0D  0x1A 0x03       PUSHIB 0x03
0x4C0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C11  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Mul");                             syscalls.hs:89

0x4C13  0x37 0x01 0x06  PUSHIW 0x0601
0x4C16  0x1A 0x04       PUSHIB 0x04
0x4C18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C1A  0x37 0xFD 0x07  PUSHIW 0x07FD
0x4C1D  0x1A 0x03       PUSHIB 0x03
0x4C1F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C21  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Mod");                             syscalls.hs:90

0x4C23  0x37 0x01 0x06  PUSHIW 0x0601
0x4C26  0x1A 0x04       PUSHIB 0x04
0x4C28  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C2A  0x37 0x00 0x08  PUSHIW 0x0800
0x4C2D  0x1A 0x03       PUSHIB 0x03
0x4C2F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C31  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "EQ");                              syscalls.hs:91

0x4C33  0x37 0x01 0x06  PUSHIW 0x0601
0x4C36  0x1A 0x04       PUSHIB 0x04
0x4C38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C3A  0x37 0x45 0x51  PUSHIW 0x5145
0x4C3D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4C3F  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "LT");                              syscalls.hs:92

0x4C41  0x37 0x01 0x06  PUSHIW 0x0601
0x4C44  0x1A 0x04       PUSHIB 0x04
0x4C46  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C48  0x37 0x4C 0x54  PUSHIW 0x544C
0x4C4B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4C4D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "LE");                              syscalls.hs:93

0x4C4F  0x37 0x01 0x06  PUSHIW 0x0601
0x4C52  0x1A 0x04       PUSHIB 0x04
0x4C54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C56  0x37 0x4C 0x45  PUSHIW 0x454C
0x4C59  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4C5B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "GT");                              syscalls.hs:94

0x4C5D  0x37 0x01 0x06  PUSHIW 0x0601
0x4C60  0x1A 0x04       PUSHIB 0x04
0x4C62  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C64  0x37 0x47 0x54  PUSHIW 0x5447
0x4C67  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4C69  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "GE");                              syscalls.hs:95

0x4C6B  0x37 0x01 0x06  PUSHIW 0x0601
0x4C6E  0x1A 0x04       PUSHIB 0x04
0x4C70  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C72  0x37 0x47 0x45  PUSHIW 0x4547
0x4C75  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4C77  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Long", "Negate");                          syscalls.hs:96

0x4C79  0x37 0x01 0x06  PUSHIW 0x0601
0x4C7C  0x1A 0x04       PUSHIB 0x04
0x4C7E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C80  0x37 0x03 0x08  PUSHIW 0x0803
0x4C83  0x1A 0x06       PUSHIB 0x06
0x4C85  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C87  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "ToString");                       syscalls.hs:98

0x4C89  0x37 0x0F 0x06  PUSHIW 0x060F
0x4C8C  0x1A 0x05       PUSHIB 0x05
0x4C8E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C90  0x37 0xE5 0x07  PUSHIW 0x07E5
0x4C93  0x1A 0x08       PUSHIB 0x08
0x4C95  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4C97  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "ToBytes");                        syscalls.hs:99

0x4C99  0x37 0x0F 0x06  PUSHIW 0x060F
0x4C9C  0x1A 0x05       PUSHIB 0x05
0x4C9E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CA0  0x37 0xED 0x07  PUSHIW 0x07ED
0x4CA3  0x1A 0x07       PUSHIB 0x07
0x4CA5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CA7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "New");                            syscalls.hs:100

0x4CA9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CAC  0x1A 0x05       PUSHIB 0x05
0x4CAE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CB0  0x37 0x45 0x06  PUSHIW 0x0645
0x4CB3  0x1A 0x03       PUSHIB 0x03
0x4CB5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CB7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "NewFromConstant");                syscalls.hs:101

0x4CB9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CBC  0x1A 0x05       PUSHIB 0x05
0x4CBE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CC0  0x37 0xD8 0x06  PUSHIW 0x06D8
0x4CC3  0x1A 0x0F       PUSHIB 0x0F
0x4CC5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CC7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "Add");                            syscalls.hs:102

0x4CC9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CCC  0x1A 0x05       PUSHIB 0x05
0x4CCE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CD0  0x37 0x05 0x06  PUSHIW 0x0605
0x4CD3  0x1A 0x03       PUSHIB 0x03
0x4CD5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CD7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "Sub");                            syscalls.hs:103

0x4CD9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CDC  0x1A 0x05       PUSHIB 0x05
0x4CDE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CE0  0x37 0x14 0x06  PUSHIW 0x0614
0x4CE3  0x1A 0x03       PUSHIB 0x03
0x4CE5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CE7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "Div");                            syscalls.hs:104

0x4CE9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CEC  0x1A 0x05       PUSHIB 0x05
0x4CEE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CF0  0x37 0xFA 0x07  PUSHIW 0x07FA
0x4CF3  0x1A 0x03       PUSHIB 0x03
0x4CF5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4CF7  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "Mul");                            syscalls.hs:105

0x4CF9  0x37 0x0F 0x06  PUSHIW 0x060F
0x4CFC  0x1A 0x05       PUSHIB 0x05
0x4CFE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D00  0x37 0xFD 0x07  PUSHIW 0x07FD
0x4D03  0x1A 0x03       PUSHIB 0x03
0x4D05  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D07  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "EQ");                             syscalls.hs:106

0x4D09  0x37 0x0F 0x06  PUSHIW 0x060F
0x4D0C  0x1A 0x05       PUSHIB 0x05
0x4D0E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D10  0x37 0x45 0x51  PUSHIW 0x5145
0x4D13  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4D15  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "LT");                             syscalls.hs:107

0x4D17  0x37 0x0F 0x06  PUSHIW 0x060F
0x4D1A  0x1A 0x05       PUSHIB 0x05
0x4D1C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D1E  0x37 0x4C 0x54  PUSHIW 0x544C
0x4D21  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4D23  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "LE");                             syscalls.hs:108

0x4D25  0x37 0x0F 0x06  PUSHIW 0x060F
0x4D28  0x1A 0x05       PUSHIB 0x05
0x4D2A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D2C  0x37 0x4C 0x45  PUSHIW 0x454C
0x4D2F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4D31  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "GT");                             syscalls.hs:109

0x4D33  0x37 0x0F 0x06  PUSHIW 0x060F
0x4D36  0x1A 0x05       PUSHIB 0x05
0x4D38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D3A  0x37 0x47 0x54  PUSHIW 0x5447
0x4D3D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4D3F  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Float", "GE");                             syscalls.hs:110

0x4D41  0x37 0x0F 0x06  PUSHIW 0x060F
0x4D44  0x1A 0x05       PUSHIB 0x05
0x4D46  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D48  0x37 0x47 0x45  PUSHIW 0x4547
0x4D4B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x4D4D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Time", "Millis_Get");                      syscalls.hs:112

0x4D4F  0x37 0x09 0x08  PUSHIW 0x0809
0x4D52  0x1A 0x04       PUSHIB 0x04
0x4D54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D56  0x37 0x0D 0x08  PUSHIW 0x080D
0x4D59  0x1A 0x0A       PUSHIB 0x0A
0x4D5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D5D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Time", "Micros_Get");                      syscalls.hs:113

0x4D5F  0x37 0x09 0x08  PUSHIW 0x0809
0x4D62  0x1A 0x04       PUSHIB 0x04
0x4D64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D66  0x37 0x17 0x08  PUSHIW 0x0817
0x4D69  0x1A 0x0A       PUSHIB 0x0A
0x4D6B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D6D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Arguments_Get");                 syscalls.hs:115

0x4D6F  0x37 0x21 0x08  PUSHIW 0x0821
0x4D72  0x1A 0x06       PUSHIB 0x06
0x4D74  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D76  0x37 0x27 0x08  PUSHIW 0x0827
0x4D79  0x1A 0x0D       PUSHIB 0x0D
0x4D7B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D7D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "CurrentDirectory_Get");

0x4D7F  0x37 0x21 0x08  PUSHIW 0x0821
0x4D82  0x1A 0x06       PUSHIB 0x06
0x4D84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D86  0x37 0x34 0x08  PUSHIW 0x0834
0x4D89  0x1A 0x14       PUSHIB 0x14
0x4D8B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D8D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "CurrentDirectory_Set");

0x4D8F  0x37 0x21 0x08  PUSHIW 0x0821
0x4D92  0x1A 0x06       PUSHIB 0x06
0x4D94  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D96  0x37 0x48 0x08  PUSHIW 0x0848
0x4D99  0x1A 0x14       PUSHIB 0x14
0x4D9B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4D9D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Beep");                          syscalls.hs:118

0x4D9F  0x37 0x21 0x08  PUSHIW 0x0821
0x4DA2  0x1A 0x06       PUSHIB 0x06
0x4DA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DA6  0x37 0x5C 0x08  PUSHIW 0x085C
0x4DA9  0x1A 0x04       PUSHIB 0x04
0x4DAB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DAD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Execute");                       syscalls.hs:119

0x4DAF  0x37 0x21 0x08  PUSHIW 0x0821
0x4DB2  0x1A 0x06       PUSHIB 0x06
0x4DB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DB6  0x37 0x60 0x08  PUSHIW 0x0860
0x4DB9  0x1A 0x07       PUSHIB 0x07
0x4DBB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DBD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "RegisterObject");                syscalls.hs:120

0x4DBF  0x37 0x21 0x08  PUSHIW 0x0821
0x4DC2  0x1A 0x06       PUSHIB 0x06
0x4DC4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DC6  0x37 0x67 0x08  PUSHIW 0x0867
0x4DC9  0x1A 0x0E       PUSHIB 0x0E
0x4DCB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DCD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Exists");                          syscalls.hs:122

0x4DCF  0x37 0x75 0x08  PUSHIW 0x0875
0x4DD2  0x1A 0x04       PUSHIB 0x04
0x4DD4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DD6  0x37 0x79 0x08  PUSHIW 0x0879
0x4DD9  0x1A 0x06       PUSHIB 0x06
0x4DDB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DDD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "New");                             syscalls.hs:123

0x4DDF  0x37 0x75 0x08  PUSHIW 0x0875
0x4DE2  0x1A 0x04       PUSHIB 0x04
0x4DE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DE6  0x37 0x45 0x06  PUSHIW 0x0645
0x4DE9  0x1A 0x03       PUSHIB 0x03
0x4DEB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DED  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Open");                            syscalls.hs:124

0x4DEF  0x37 0x75 0x08  PUSHIW 0x0875
0x4DF2  0x1A 0x04       PUSHIB 0x04
0x4DF4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DF6  0x37 0x7F 0x08  PUSHIW 0x087F
0x4DF9  0x1A 0x04       PUSHIB 0x04
0x4DFB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4DFD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Create");                          syscalls.hs:125

0x4DFF  0x37 0x75 0x08  PUSHIW 0x0875
0x4E02  0x1A 0x04       PUSHIB 0x04
0x4E04  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E06  0x37 0x83 0x08  PUSHIW 0x0883
0x4E09  0x1A 0x06       PUSHIB 0x06
0x4E0B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E0D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "ReadLine");                        syscalls.hs:126

0x4E0F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E12  0x1A 0x04       PUSHIB 0x04
0x4E14  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E16  0x37 0x89 0x08  PUSHIW 0x0889
0x4E19  0x1A 0x08       PUSHIB 0x08
0x4E1B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E1D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Read");                            syscalls.hs:127

0x4E1F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E22  0x1A 0x04       PUSHIB 0x04
0x4E24  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E26  0x37 0x89 0x08  PUSHIW 0x0889
0x4E29  0x1A 0x04       PUSHIB 0x04
0x4E2B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E2D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "IsValid");                         syscalls.hs:128

0x4E2F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E32  0x1A 0x04       PUSHIB 0x04
0x4E34  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E36  0x37 0x91 0x08  PUSHIW 0x0891
0x4E39  0x1A 0x07       PUSHIB 0x07
0x4E3B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E3D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Append");                          syscalls.hs:129

0x4E3F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E42  0x1A 0x04       PUSHIB 0x04
0x4E44  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E46  0x37 0x32 0x07  PUSHIW 0x0732
0x4E49  0x1A 0x06       PUSHIB 0x06
0x4E4B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E4D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Flush");                           syscalls.hs:130

0x4E4F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E52  0x1A 0x04       PUSHIB 0x04
0x4E54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E56  0x37 0x98 0x08  PUSHIW 0x0898
0x4E59  0x1A 0x05       PUSHIB 0x05
0x4E5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E5D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "Delete");                          syscalls.hs:131

0x4E5F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E62  0x1A 0x04       PUSHIB 0x04
0x4E64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E66  0x37 0x9D 0x08  PUSHIW 0x089D
0x4E69  0x1A 0x06       PUSHIB 0x06
0x4E6B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E6D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("File", "GetSize");                         syscalls.hs:132

0x4E6F  0x37 0x75 0x08  PUSHIW 0x0875
0x4E72  0x1A 0x04       PUSHIB 0x04
0x4E74  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E76  0x37 0xA3 0x08  PUSHIW 0x08A3
0x4E79  0x1A 0x07       PUSHIB 0x07
0x4E7B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E7D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "Exists");                     syscalls.hs:134

0x4E7F  0x37 0x3B 0x08  PUSHIW 0x083B
0x4E82  0x1A 0x09       PUSHIB 0x09
0x4E84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E86  0x37 0x79 0x08  PUSHIW 0x0879
0x4E89  0x1A 0x06       PUSHIB 0x06
0x4E8B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E8D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "New");                        syscalls.hs:135

0x4E8F  0x37 0x3B 0x08  PUSHIW 0x083B
0x4E92  0x1A 0x09       PUSHIB 0x09
0x4E94  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E96  0x37 0x45 0x06  PUSHIW 0x0645
0x4E99  0x1A 0x03       PUSHIB 0x03
0x4E9B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4E9D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "IsValid");                    syscalls.hs:136

0x4E9F  0x37 0x3B 0x08  PUSHIW 0x083B
0x4EA2  0x1A 0x09       PUSHIB 0x09
0x4EA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EA6  0x37 0x91 0x08  PUSHIW 0x0891
0x4EA9  0x1A 0x07       PUSHIB 0x07
0x4EAB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EAD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "Open");                       syscalls.hs:137

0x4EAF  0x37 0x3B 0x08  PUSHIW 0x083B
0x4EB2  0x1A 0x09       PUSHIB 0x09
0x4EB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EB6  0x37 0x7F 0x08  PUSHIW 0x087F
0x4EB9  0x1A 0x04       PUSHIB 0x04
0x4EBB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EBD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "GetDirectoryCount");

0x4EBF  0x37 0x3B 0x08  PUSHIW 0x083B
0x4EC2  0x1A 0x09       PUSHIB 0x09
0x4EC4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EC6  0x37 0xAA 0x08  PUSHIW 0x08AA
0x4EC9  0x1A 0x11       PUSHIB 0x11
0x4ECB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4ECD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "GetFileCount");               syscalls.hs:139

0x4ECF  0x37 0x3B 0x08  PUSHIW 0x083B
0x4ED2  0x1A 0x09       PUSHIB 0x09
0x4ED4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4ED6  0x37 0xBB 0x08  PUSHIW 0x08BB
0x4ED9  0x1A 0x0C       PUSHIB 0x0C
0x4EDB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EDD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "GetFile");                    syscalls.hs:140

0x4EDF  0x37 0x3B 0x08  PUSHIW 0x083B
0x4EE2  0x1A 0x09       PUSHIB 0x09
0x4EE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EE6  0x37 0xBB 0x08  PUSHIW 0x08BB
0x4EE9  0x1A 0x07       PUSHIB 0x07
0x4EEB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EED  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Directory", "GetDirectory");               syscalls.hs:141

0x4EEF  0x37 0x3B 0x08  PUSHIW 0x083B
0x4EF2  0x1A 0x09       PUSHIB 0x09
0x4EF4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EF6  0x37 0xAA 0x08  PUSHIW 0x08AA
0x4EF9  0x1A 0x0C       PUSHIB 0x0C
0x4EFB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4EFD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ReadKey");                     syscalls.hs:143

0x4EFF  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F02  0x1A 0x08       PUSHIB 0x08
0x4F04  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F06  0x37 0xCF 0x08  PUSHIW 0x08CF
0x4F09  0x1A 0x07       PUSHIB 0x07
0x4F0B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F0D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "IsAvailable_Get");             syscalls.hs:144

0x4F0F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F12  0x1A 0x08       PUSHIB 0x08
0x4F14  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F16  0x37 0xD6 0x08  PUSHIW 0x08D6
0x4F19  0x1A 0x0F       PUSHIB 0x0F
0x4F1B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F1D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ToKey");                       syscalls.hs:145

0x4F1F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F22  0x1A 0x08       PUSHIB 0x08
0x4F24  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F26  0x37 0xE5 0x08  PUSHIW 0x08E5
0x4F29  0x1A 0x05       PUSHIB 0x05
0x4F2B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F2D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ClickX_Get");                  syscalls.hs:147

0x4F2F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F32  0x1A 0x08       PUSHIB 0x08
0x4F34  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F36  0x37 0xEA 0x08  PUSHIW 0x08EA
0x4F39  0x1A 0x0A       PUSHIB 0x0A
0x4F3B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F3D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ClickY_Get");                  syscalls.hs:148

0x4F3F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F42  0x1A 0x08       PUSHIB 0x08
0x4F44  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F46  0x37 0xF4 0x08  PUSHIW 0x08F4
0x4F49  0x1A 0x0A       PUSHIB 0x0A
0x4F4B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F4D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ClickUp_Get");                 syscalls.hs:149

0x4F4F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F52  0x1A 0x08       PUSHIB 0x08
0x4F54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F56  0x37 0xFE 0x08  PUSHIW 0x08FE
0x4F59  0x1A 0x0B       PUSHIB 0x0B
0x4F5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F5D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ClickDouble_Get");             syscalls.hs:150

0x4F5F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F62  0x1A 0x08       PUSHIB 0x08
0x4F64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F66  0x37 0x09 0x09  PUSHIW 0x0909
0x4F69  0x1A 0x0F       PUSHIB 0x0F
0x4F6B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F6D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Keyboard", "ScrollDelta_Get");             syscalls.hs:151

0x4F6F  0x37 0xC7 0x08  PUSHIW 0x08C7
0x4F72  0x1A 0x08       PUSHIB 0x08
0x4F74  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F76  0x37 0x18 0x09  PUSHIW 0x0918
0x4F79  0x1A 0x0F       PUSHIB 0x0F
0x4F7B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F7D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Diagnostics", "OutputDebug");              syscalls.hs:153

0x4F7F  0x37 0x27 0x09  PUSHIW 0x0927
0x4F82  0x1A 0x0B       PUSHIB 0x0B
0x4F84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F86  0x37 0x32 0x09  PUSHIW 0x0932
0x4F89  0x1A 0x0B       PUSHIB 0x0B
0x4F8B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F8D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Diagnostics", "Assert");                   syscalls.hs:154

0x4F8F  0x37 0x27 0x09  PUSHIW 0x0927
0x4F92  0x1A 0x0B       PUSHIB 0x0B
0x4F94  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F96  0x37 0x3D 0x09  PUSHIW 0x093D
0x4F99  0x1A 0x06       PUSHIB 0x06
0x4F9B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4F9D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Diagnostics", "Die");                      syscalls.hs:155

0x4F9F  0x37 0x27 0x09  PUSHIW 0x0927
0x4FA2  0x1A 0x0B       PUSHIB 0x0B
0x4FA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FA6  0x37 0x43 0x09  PUSHIW 0x0943
0x4FA9  0x1A 0x03       PUSHIB 0x03
0x4FAB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FAD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Diagnostics", "SetError");                 syscalls.hs:156

0x4FAF  0x37 0x27 0x09  PUSHIW 0x0927
0x4FB2  0x1A 0x0B       PUSHIB 0x0B
0x4FB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FB6  0x37 0x46 0x09  PUSHIW 0x0946
0x4FB9  0x1A 0x08       PUSHIB 0x08
0x4FBB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FBD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Types", "TypeOf");      // gives 'true' type (for instance, "variant" and not the boxed contents of a variant)

0x4FBF  0x37 0x4E 0x09  PUSHIW 0x094E
0x4FC2  0x1A 0x05       PUSHIB 0x05
0x4FC4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FC6  0x37 0x53 0x09  PUSHIW 0x0953
0x4FC9  0x1A 0x06       PUSHIB 0x06
0x4FCB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FCD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Types", "ValueTypeOf"); // if the type is a list, dictionary, pair or array, then return its value type

0x4FCF  0x37 0x4E 0x09  PUSHIW 0x094E
0x4FD2  0x1A 0x05       PUSHIB 0x05
0x4FD4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FD6  0x37 0x59 0x09  PUSHIW 0x0959
0x4FD9  0x1A 0x0B       PUSHIB 0x0B
0x4FDB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FDD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Types", "KeyTypeOf");   // if the type is a dictionary then return its key type

0x4FDF  0x37 0x4E 0x09  PUSHIW 0x094E
0x4FE2  0x1A 0x05       PUSHIB 0x05
0x4FE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FE6  0x37 0x64 0x09  PUSHIW 0x0964
0x4FE9  0x1A 0x09       PUSHIB 0x09
0x4FEB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FED  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Types", "BoxTypeOf");   // regular "TypeOf" except for boxed variants where the boxed value type is returned (used for "typeof")

0x4FEF  0x37 0x4E 0x09  PUSHIW 0x094E
0x4FF2  0x1A 0x05       PUSHIB 0x05
0x4FF4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FF6  0x37 0x6D 0x09  PUSHIW 0x096D
0x4FF9  0x1A 0x09       PUSHIB 0x09
0x4FFB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x4FFD  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Types", "VerifyValueTypes");               syscalls.hs:162

0x4FFF  0x37 0x4E 0x09  PUSHIW 0x094E
0x5002  0x1A 0x05       PUSHIB 0x05
0x5004  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5006  0x37 0x76 0x09  PUSHIW 0x0976
0x5009  0x1A 0x10       PUSHIB 0x10
0x500B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x500D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Build");                         syscalls.hs:164

0x500F  0x37 0xDD 0x04  PUSHIW 0x04DD
0x5012  0x1A 0x06       PUSHIB 0x06
0x5014  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5016  0x37 0x86 0x09  PUSHIW 0x0986
0x5019  0x1A 0x05       PUSHIB 0x05
0x501B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x501D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "Method_Get");                 syscalls.hs:166

0x501F  0x37 0x8B 0x09  PUSHIW 0x098B
0x5022  0x1A 0x09       PUSHIB 0x09
0x5024  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5026  0x37 0x94 0x09  PUSHIW 0x0994
0x5029  0x1A 0x0A       PUSHIB 0x0A
0x502B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x502D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "URL_Get");                    syscalls.hs:167

0x502F  0x37 0x8B 0x09  PUSHIW 0x098B
0x5032  0x1A 0x09       PUSHIB 0x09
0x5034  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5036  0x37 0x9E 0x09  PUSHIW 0x099E
0x5039  0x1A 0x07       PUSHIB 0x07
0x503B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x503D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "Arguments_Get");              syscalls.hs:168

0x503F  0x37 0x8B 0x09  PUSHIW 0x098B
0x5042  0x1A 0x09       PUSHIB 0x09
0x5044  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5046  0x37 0x27 0x08  PUSHIW 0x0827
0x5049  0x1A 0x0D       PUSHIB 0x0D
0x504B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x504D  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "On");                         syscalls.hs:169

0x504F  0x37 0x8B 0x09  PUSHIW 0x098B
0x5052  0x1A 0x09       PUSHIB 0x09
0x5054  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5056  0x37 0x4F 0x6E  PUSHIW 0x6E4F
0x5059  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x505B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "Send");                       syscalls.hs:170

0x505D  0x37 0x8B 0x09  PUSHIW 0x098B
0x5060  0x1A 0x09       PUSHIB 0x09
0x5062  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5064  0x37 0xA5 0x09  PUSHIW 0x09A5
0x5067  0x1A 0x04       PUSHIB 0x04
0x5069  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x506B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("WebServer", "ClearHandlers");              syscalls.hs:171

0x506D  0x37 0x8B 0x09  PUSHIW 0x098B
0x5070  0x1A 0x09       PUSHIB 0x09
0x5072  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5074  0x37 0xA9 0x09  PUSHIW 0x09A9
0x5077  0x1A 0x0D       PUSHIB 0x0D
0x5079  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x507B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("HttpClient", "GetRequest");                syscalls.hs:173

0x507D  0x37 0xB6 0x09  PUSHIW 0x09B6
0x5080  0x1A 0x0A       PUSHIB 0x0A
0x5082  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5084  0x37 0xC0 0x09  PUSHIW 0x09C0
0x5087  0x1A 0x0A       PUSHIB 0x0A
0x5089  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x508B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "Halted_Get");                   syscalls.hs:175

0x508D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5090  0x1A 0x07       PUSHIB 0x07
0x5092  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5094  0x37 0xD1 0x09  PUSHIW 0x09D1
0x5097  0x1A 0x0A       PUSHIB 0x0A
0x5099  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x509B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "Halted_Set");                   syscalls.hs:176

0x509D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50A0  0x1A 0x07       PUSHIB 0x07
0x50A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50A4  0x37 0xDB 0x09  PUSHIW 0x09DB
0x50A7  0x1A 0x0A       PUSHIB 0x0A
0x50A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50AB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "Load");             // used by the windows shell debugger

0x50AD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50B0  0x1A 0x07       PUSHIB 0x07
0x50B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50B4  0x37 0xE5 0x09  PUSHIW 0x09E5
0x50B7  0x1A 0x04       PUSHIB 0x04
0x50B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50BB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "BytesLoaded_Get");  // used by the windows shell debugger

0x50BD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50C0  0x1A 0x07       PUSHIB 0x07
0x50C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50C4  0x37 0xE9 0x09  PUSHIW 0x09E9
0x50C7  0x1A 0x0F       PUSHIB 0x0F
0x50C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50CB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "Run");              // used by the windows shell debugger

0x50CD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50D0  0x1A 0x07       PUSHIB 0x07
0x50D2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50D4  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50D7  0x1A 0x03       PUSHIB 0x03
0x50D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50DB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "SetVisibility");    // Windows shell debugger: debug child window visible?

0x50DD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50E0  0x1A 0x07       PUSHIB 0x07
0x50E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50E4  0x37 0xF8 0x09  PUSHIW 0x09F8
0x50E7  0x1A 0x0D       PUSHIB 0x0D
0x50E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50EB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "SetStepping");                  syscalls.hs:181

0x50ED  0x37 0xCA 0x09  PUSHIW 0x09CA
0x50F0  0x1A 0x07       PUSHIB 0x07
0x50F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50F4  0x37 0x05 0x0A  PUSHIW 0x0A05
0x50F7  0x1A 0x0B       PUSHIB 0x0B
0x50F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x50FB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "StepInto");                     syscalls.hs:182

0x50FD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5100  0x1A 0x07       PUSHIB 0x07
0x5102  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5104  0x37 0x10 0x0A  PUSHIW 0x0A10
0x5107  0x1A 0x08       PUSHIB 0x08
0x5109  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x510B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "StepOver");                     syscalls.hs:183

0x510D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5110  0x1A 0x07       PUSHIB 0x07
0x5112  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5114  0x37 0x18 0x0A  PUSHIW 0x0A18
0x5117  0x1A 0x08       PUSHIB 0x08
0x5119  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x511B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "StepRun");                      syscalls.hs:184

0x511D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5120  0x1A 0x07       PUSHIB 0x07
0x5122  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5124  0x37 0x20 0x0A  PUSHIW 0x0A20
0x5127  0x1A 0x07       PUSHIB 0x07
0x5129  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x512B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "PC_Get");                       syscalls.hs:185

0x512D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5130  0x1A 0x07       PUSHIB 0x07
0x5132  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5134  0x37 0x27 0x0A  PUSHIW 0x0A27
0x5137  0x1A 0x06       PUSHIB 0x06
0x5139  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x513B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "Waiting_Get");                  syscalls.hs:186

0x513D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5140  0x1A 0x07       PUSHIB 0x07
0x5142  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5144  0x37 0x2D 0x0A  PUSHIW 0x0A2D
0x5147  0x1A 0x0B       PUSHIB 0x0B
0x5149  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x514B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "ClearBreakpoints");             syscalls.hs:187

0x514D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5150  0x1A 0x07       PUSHIB 0x07
0x5152  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5154  0x37 0x38 0x0A  PUSHIW 0x0A38
0x5157  0x1A 0x10       PUSHIB 0x10
0x5159  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x515B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "ClearStatements");              syscalls.hs:188

0x515D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5160  0x1A 0x07       PUSHIB 0x07
0x5162  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5164  0x37 0x48 0x0A  PUSHIW 0x0A48
0x5167  0x1A 0x0F       PUSHIB 0x0F
0x5169  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x516B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "SetBreakpoint");                syscalls.hs:189

0x516D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5170  0x1A 0x07       PUSHIB 0x07
0x5172  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5174  0x37 0x57 0x0A  PUSHIW 0x0A57
0x5177  0x1A 0x0D       PUSHIB 0x0D
0x5179  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x517B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "SetStatement");                 syscalls.hs:190

0x517D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5180  0x1A 0x07       PUSHIB 0x07
0x5182  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5184  0x37 0x64 0x0A  PUSHIW 0x0A64
0x5187  0x1A 0x0C       PUSHIB 0x0C
0x5189  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x518B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "SP_Get");                       syscalls.hs:191

0x518D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x5190  0x1A 0x07       PUSHIB 0x07
0x5192  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5194  0x37 0x70 0x0A  PUSHIW 0x0A70
0x5197  0x1A 0x06       PUSHIB 0x06
0x5199  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x519B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "BP_Get");                       syscalls.hs:192

0x519D  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51A0  0x1A 0x07       PUSHIB 0x07
0x51A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51A4  0x37 0x76 0x0A  PUSHIW 0x0A76
0x51A7  0x1A 0x06       PUSHIB 0x06
0x51A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51AB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "CSP_Get");                      syscalls.hs:193

0x51AD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51B0  0x1A 0x07       PUSHIB 0x07
0x51B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51B4  0x37 0x7C 0x0A  PUSHIW 0x0A7C
0x51B7  0x1A 0x07       PUSHIB 0x07
0x51B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51BB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "GetStackWord");                 syscalls.hs:194

0x51BD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51C0  0x1A 0x07       PUSHIB 0x07
0x51C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51C4  0x37 0x83 0x0A  PUSHIW 0x0A83
0x51C7  0x1A 0x0C       PUSHIB 0x0C
0x51C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51CB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "GetStackVariant");              syscalls.hs:195

0x51CD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51D0  0x1A 0x07       PUSHIB 0x07
0x51D2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51D4  0x37 0x8F 0x0A  PUSHIW 0x0A8F
0x51D7  0x1A 0x0F       PUSHIB 0x0F
0x51D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51DB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "GetStackType");                 syscalls.hs:196

0x51DD  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51E0  0x1A 0x07       PUSHIB 0x07
0x51E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51E4  0x37 0x9E 0x0A  PUSHIW 0x0A9E
0x51E7  0x1A 0x0C       PUSHIB 0x0C
0x51E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51EB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Runtime", "GetCallStackWord");             syscalls.hs:197

0x51ED  0x37 0xCA 0x09  PUSHIW 0x09CA
0x51F0  0x1A 0x07       PUSHIB 0x07
0x51F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51F4  0x37 0xAA 0x0A  PUSHIW 0x0AAA
0x51F7  0x1A 0x10       PUSHIB 0x10
0x51F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x51FB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "Connect");                       syscalls.hs:199

0x51FD  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5200  0x1A 0x06       PUSHIB 0x06
0x5202  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5204  0x37 0xC0 0x0A  PUSHIW 0x0AC0
0x5207  0x1A 0x07       PUSHIB 0x07
0x5209  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x520B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "Close");                         syscalls.hs:200

0x520D  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5210  0x1A 0x06       PUSHIB 0x06
0x5212  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5214  0x37 0xC7 0x0A  PUSHIW 0x0AC7
0x5217  0x1A 0x05       PUSHIB 0x05
0x5219  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x521B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "IsValid");                       syscalls.hs:201

0x521D  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5220  0x1A 0x06       PUSHIB 0x06
0x5222  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5224  0x37 0x91 0x08  PUSHIW 0x0891
0x5227  0x1A 0x07       PUSHIB 0x07
0x5229  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x522B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "IsAvailable_Get");               syscalls.hs:202

0x522D  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5230  0x1A 0x06       PUSHIB 0x06
0x5232  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5234  0x37 0xD6 0x08  PUSHIW 0x08D6
0x5237  0x1A 0x0F       PUSHIB 0x0F
0x5239  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x523B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "ReadChar");                      syscalls.hs:203

0x523D  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5240  0x1A 0x06       PUSHIB 0x06
0x5242  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5244  0x37 0xCC 0x0A  PUSHIW 0x0ACC
0x5247  0x1A 0x08       PUSHIB 0x08
0x5249  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x524B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Serial", "WriteChar");                     syscalls.hs:204

0x524D  0x37 0xBA 0x0A  PUSHIW 0x0ABA
0x5250  0x1A 0x06       PUSHIB 0x06
0x5252  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5254  0x37 0xD4 0x0A  PUSHIW 0x0AD4
0x5257  0x1A 0x09       PUSHIB 0x09
0x5259  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x525B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Hardware", "LED_Set");                     syscalls.hs:206

0x525D  0x37 0xDD 0x0A  PUSHIW 0x0ADD
0x5260  0x1A 0x08       PUSHIB 0x08
0x5262  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5264  0x37 0xE5 0x0A  PUSHIW 0x0AE5
0x5267  0x1A 0x07       PUSHIB 0x07
0x5269  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x526B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "ReadByte");                      syscalls.hs:208

0x526D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x5270  0x1A 0x06       PUSHIB 0x06
0x5272  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5274  0x37 0xF2 0x0A  PUSHIW 0x0AF2
0x5277  0x1A 0x08       PUSHIB 0x08
0x5279  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x527B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "WriteByte");                     syscalls.hs:209

0x527D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x5280  0x1A 0x06       PUSHIB 0x06
0x5282  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5284  0x37 0xFA 0x0A  PUSHIW 0x0AFA
0x5287  0x1A 0x09       PUSHIB 0x09
0x5289  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x528B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "Available");                     syscalls.hs:210

0x528D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x5290  0x1A 0x06       PUSHIB 0x06
0x5292  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5294  0x37 0xD8 0x08  PUSHIW 0x08D8
0x5297  0x1A 0x09       PUSHIB 0x09
0x5299  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x529B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "Maximum");                       syscalls.hs:211

0x529D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x52A0  0x1A 0x06       PUSHIB 0x06
0x52A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52A4  0x37 0x03 0x0B  PUSHIW 0x0B03
0x52A7  0x1A 0x07       PUSHIB 0x07
0x52A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52AB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "Allocate");                      syscalls.hs:212

0x52AD  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x52B0  0x1A 0x06       PUSHIB 0x06
0x52B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52B4  0x37 0x0A 0x0B  PUSHIW 0x0B0A
0x52B7  0x1A 0x08       PUSHIB 0x08
0x52B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52BB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "Free");                          syscalls.hs:213

0x52BD  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x52C0  0x1A 0x06       PUSHIB 0x06
0x52C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52C4  0x37 0x12 0x0B  PUSHIW 0x0B12
0x52C7  0x1A 0x04       PUSHIB 0x04
0x52C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52CB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Trace_Set");                     syscalls.hs:215

0x52CD  0x37 0x21 0x08  PUSHIW 0x0821
0x52D0  0x1A 0x06       PUSHIB 0x06
0x52D2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52D4  0x37 0x16 0x0B  PUSHIW 0x0B16
0x52D7  0x1A 0x09       PUSHIB 0x09
0x52D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52DB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Trace_Get");                     syscalls.hs:216

0x52DD  0x37 0x21 0x08  PUSHIW 0x0821
0x52E0  0x1A 0x06       PUSHIB 0x06
0x52E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52E4  0x37 0x1F 0x0B  PUSHIW 0x0B1F
0x52E7  0x1A 0x09       PUSHIB 0x09
0x52E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52EB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Dictionary", "HashKey");                   syscalls.hs:218

0x52ED  0x37 0x0D 0x03  PUSHIW 0x030D
0x52F0  0x1A 0x0A       PUSHIB 0x0A
0x52F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52F4  0x37 0x28 0x0B  PUSHIW 0x0B28
0x52F7  0x1A 0x07       PUSHIB 0x07
0x52F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x52FB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Clipboard", "HasText_Get");                syscalls.hs:220

0x52FD  0x37 0x2F 0x0B  PUSHIW 0x0B2F
0x5300  0x1A 0x09       PUSHIB 0x09
0x5302  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5304  0x37 0x38 0x0B  PUSHIW 0x0B38
0x5307  0x1A 0x0B       PUSHIB 0x0B
0x5309  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x530B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Clipboard", "GetText");                    syscalls.hs:221

0x530D  0x37 0x2F 0x0B  PUSHIW 0x0B2F
0x5310  0x1A 0x09       PUSHIB 0x09
0x5312  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5314  0x37 0x43 0x0B  PUSHIW 0x0B43
0x5317  0x1A 0x07       PUSHIB 0x07
0x5319  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x531B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Clipboard", "SetText");                    syscalls.hs:222

0x531D  0x37 0x2F 0x0B  PUSHIW 0x0B2F
0x5320  0x1A 0x09       PUSHIB 0x09
0x5322  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5324  0x37 0x4A 0x0B  PUSHIW 0x0B4A
0x5327  0x1A 0x07       PUSHIB 0x07
0x5329  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x532B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "BuildFront");                    syscalls.hs:224

0x532D  0x37 0xDD 0x04  PUSHIW 0x04DD
0x5330  0x1A 0x06       PUSHIB 0x06
0x5332  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5334  0x37 0x51 0x0B  PUSHIW 0x0B51
0x5337  0x1A 0x0A       PUSHIB 0x0A
0x5339  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x533B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "ReadBit");                       syscalls.hs:226

0x533D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x5340  0x1A 0x06       PUSHIB 0x06
0x5342  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5344  0x37 0x5B 0x0B  PUSHIW 0x0B5B
0x5347  0x1A 0x07       PUSHIB 0x07
0x5349  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x534B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Memory", "WriteBit");                      syscalls.hs:227

0x534D  0x37 0xEC 0x0A  PUSHIW 0x0AEC
0x5350  0x1A 0x06       PUSHIB 0x06
0x5352  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5354  0x37 0x62 0x0B  PUSHIW 0x0B62
0x5357  0x1A 0x08       PUSHIB 0x08
0x5359  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x535B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "ToUpper");                         syscalls.hs:229

0x535D  0x37 0x24 0x06  PUSHIW 0x0624
0x5360  0x1A 0x04       PUSHIB 0x04
0x5362  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5364  0x37 0x6A 0x0B  PUSHIW 0x0B6A
0x5367  0x1A 0x07       PUSHIB 0x07
0x5369  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x536B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "IsUpper");                         syscalls.hs:230

0x536D  0x37 0x24 0x06  PUSHIW 0x0624
0x5370  0x1A 0x04       PUSHIB 0x04
0x5372  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5374  0x37 0x71 0x0B  PUSHIW 0x0B71
0x5377  0x1A 0x07       PUSHIB 0x07
0x5379  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x537B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "IsDigit");                         syscalls.hs:231

0x537D  0x37 0x24 0x06  PUSHIW 0x0624
0x5380  0x1A 0x04       PUSHIB 0x04
0x5382  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5384  0x37 0x78 0x0B  PUSHIW 0x0B78
0x5387  0x1A 0x07       PUSHIB 0x07
0x5389  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x538B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "IsLetterOrDigit");                 syscalls.hs:232

0x538D  0x37 0x24 0x06  PUSHIW 0x0624
0x5390  0x1A 0x04       PUSHIB 0x04
0x5392  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5394  0x37 0x7F 0x0B  PUSHIW 0x0B7F
0x5397  0x1A 0x0F       PUSHIB 0x0F
0x5399  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x539B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "IsLower");                         syscalls.hs:233

0x539D  0x37 0x24 0x06  PUSHIW 0x0624
0x53A0  0x1A 0x04       PUSHIB 0x04
0x53A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53A4  0x37 0x8E 0x0B  PUSHIW 0x0B8E
0x53A7  0x1A 0x07       PUSHIB 0x07
0x53A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53AB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "ToDigit");                         syscalls.hs:234

0x53AD  0x37 0x24 0x06  PUSHIW 0x0624
0x53B0  0x1A 0x04       PUSHIB 0x04
0x53B2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53B4  0x37 0x95 0x0B  PUSHIW 0x0B95
0x53B7  0x1A 0x07       PUSHIB 0x07
0x53B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53BB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "ToHex");                           syscalls.hs:235

0x53BD  0x37 0x24 0x06  PUSHIW 0x0624
0x53C0  0x1A 0x04       PUSHIB 0x04
0x53C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53C4  0x37 0x9C 0x0B  PUSHIW 0x0B9C
0x53C7  0x1A 0x05       PUSHIB 0x05
0x53C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53CB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "IsHexDigit");                      syscalls.hs:236

0x53CD  0x37 0x24 0x06  PUSHIW 0x0624
0x53D0  0x1A 0x04       PUSHIB 0x04
0x53D2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53D4  0x37 0xA1 0x0B  PUSHIW 0x0BA1
0x53D7  0x1A 0x0A       PUSHIB 0x0A
0x53D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53DB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Char", "ToLower");                         syscalls.hs:237

0x53DD  0x37 0x24 0x06  PUSHIW 0x0624
0x53E0  0x1A 0x04       PUSHIB 0x04
0x53E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53E4  0x37 0xAB 0x0B  PUSHIW 0x0BAB
0x53E7  0x1A 0x07       PUSHIB 0x07
0x53E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53EB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "StartsWith");                    syscalls.hs:239

0x53ED  0x37 0xDD 0x04  PUSHIW 0x04DD
0x53F0  0x1A 0x06       PUSHIB 0x06
0x53F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53F4  0x37 0xB2 0x0B  PUSHIW 0x0BB2
0x53F7  0x1A 0x0A       PUSHIB 0x0A
0x53F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x53FB  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "Contains");                      syscalls.hs:240

0x53FD  0x37 0xDD 0x04  PUSHIW 0x04DD
0x5400  0x1A 0x06       PUSHIB 0x06
0x5402  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5404  0x37 0x65 0x07  PUSHIW 0x0765
0x5407  0x1A 0x08       PUSHIB 0x08
0x5409  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x540B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("String", "IndexOf");                       syscalls.hs:241

0x540D  0x37 0xDD 0x04  PUSHIW 0x04DD
0x5410  0x1A 0x06       PUSHIB 0x06
0x5412  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5414  0x37 0xBC 0x0B  PUSHIW 0x0BBC
0x5417  0x1A 0x07       PUSHIB 0x07
0x5419  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x541B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Warp_Set");                      syscalls.hs:243

0x541D  0x37 0x21 0x08  PUSHIW 0x0821
0x5420  0x1A 0x06       PUSHIB 0x06
0x5422  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5424  0x37 0xC3 0x0B  PUSHIW 0x0BC3
0x5427  0x1A 0x08       PUSHIB 0x08
0x5429  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x542B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("System", "Warp_Get");                      syscalls.hs:244

0x542D  0x37 0x21 0x08  PUSHIW 0x0821
0x5430  0x1A 0x06       PUSHIB 0x06
0x5432  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5434  0x37 0xCB 0x0B  PUSHIW 0x0BCB
0x5437  0x1A 0x08       PUSHIB 0x08
0x5439  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x543B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // addEntry("Time", "Delay");                           syscalls.hs:246

0x543D  0x37 0x09 0x08  PUSHIW 0x0809
0x5440  0x1A 0x04       PUSHIB 0x04
0x5442  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5444  0x37 0xD3 0x0B  PUSHIW 0x0BD3
0x5447  0x1A 0x05       PUSHIB 0x05
0x5449  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x544B  0x2C 0x87       CALLB 0x87     // SysCalls.addEntry

                        // }                                                    syscalls.hs:247

0x544D  0x4A            RET0


// /source/compiler/tokens/syscalls.hs:250
// ####  SysCalls.TryParseSysCall(..)  ####                                     0x0089


                        // bool success = false;                                syscalls.hs:251

0x544E  0x5F 0x01       ENTERB 0x01

                        // if (syscalls.Contains(name))                         syscalls.hs:252

0x5450  0x20 0x3E       PUSHGLOBALB 0x3E
0x5452  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x5454  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5456  0x2E 0x0C       JZB 0x5462 (+12)

                        // index = syscalls[name];                              syscalls.hs:254

0x5458  0x20 0x3E       PUSHGLOBALB 0x3E
0x545A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x545C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x545E  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // success = true;                                      syscalls.hs:255

0x5460  0x45            PUSHI1
0x5461  0x4C            POPLOCALB00

                        // return success;                                      syscalls.hs:257

0x5462  0x4E            PUSHLOCALB00
0x5463  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/syscalls.hs:6
// ####  SysCalls.addEntry(..)  ####                                            0x0087

0x5465  0x49            ENTER

                        // syscalls[unitName + '.' + methodName] = byte(syscalls.Count);

0x5466  0x20 0x3E       PUSHGLOBALB 0x3E
0x5468  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x546A  0x1A 0x2E       PUSHIB 0x2E
0x546C  0x25 0x03       SYSCALL1 0x03  // String.Append
0x546E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5470  0x24 0x03       SYSCALL0 0x03  // String.Append
0x5472  0x20 0x3E       PUSHGLOBALB 0x3E
0x5474  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x5476  0x51 0x03       CAST 0x03
0x5478  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    syscalls.hs:8

0x547A  0x2A 0x04       RETB 0x04


// /source/compiler/symbols.hs:80
// ####  Symbols.New(..)  ####                                                  0x008C

0x547C  0x49            ENTER

                        // fNames.Clear();                                      symbols.hs:82

0x547D  0x20 0x4C       PUSHGLOBALB 0x4C
0x547F  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // fIndex.Clear();                                      symbols.hs:83

0x5481  0x20 0x4E       PUSHGLOBALB 0x4E
0x5483  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fOverloads.Clear();                                  symbols.hs:84

0x5485  0x20 0x50       PUSHGLOBALB 0x50
0x5487  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fReturnTypes.Clear();                                symbols.hs:85

0x5489  0x20 0x52       PUSHGLOBALB 0x52
0x548B  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fArgumentNamesAndTypes.Clear();                      symbols.hs:86

0x548D  0x20 0x54       PUSHGLOBALB 0x54
0x548F  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fLocalNamesAndTypes.Clear();                         symbols.hs:87

0x5491  0x20 0x56       PUSHGLOBALB 0x56
0x5493  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fStartPos.Clear();                                   symbols.hs:88

0x5495  0x20 0x58       PUSHGLOBALB 0x58
0x5497  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fStartLine.Clear();                                  symbols.hs:89

0x5499  0x20 0x5A       PUSHGLOBALB 0x5A
0x549B  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fSourcePath.Clear();                                 symbols.hs:90

0x549D  0x20 0x5C       PUSHGLOBALB 0x5C
0x549F  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fCodeStream.Clear();                                 symbols.hs:91

0x54A1  0x20 0x64       PUSHGLOBALB 0x64
0x54A3  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fDebugInfo.Clear();                                  symbols.hs:92

0x54A5  0x20 0x66       PUSHGLOBALB 0x66
0x54A7  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fCalls.Clear();                                      symbols.hs:93

0x54A9  0x20 0x68       PUSHGLOBALB 0x68
0x54AB  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fTouches.Clear();                                    symbols.hs:94

0x54AD  0x20 0x94       PUSHGLOBALB 0x94
0x54AF  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fSysCall.Clear();                                    symbols.hs:96

0x54B1  0x20 0x5E       PUSHGLOBALB 0x5E
0x54B3  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fSysCallOverload.Clear();                            symbols.hs:97

0x54B5  0x20 0x60       PUSHGLOBALB 0x60
0x54B7  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fSysCallCount.Clear();                               symbols.hs:98

0x54B9  0x20 0x62       PUSHGLOBALB 0x62
0x54BB  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // iNextOverload = 1;                                   symbols.hs:100

0x54BD  0x45            PUSHI1
0x54BE  0x1F 0x6A       POPGLOBALB 0x6A

                        // pdValues.Clear();                                    symbols.hs:102

0x54C0  0x20 0x88       PUSHGLOBALB 0x88
0x54C2  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // cValues.Clear();                                     symbols.hs:103

0x54C4  0x20 0x8A       PUSHGLOBALB 0x8A
0x54C6  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // gNames.Clear();                                      symbols.hs:105

0x54C8  0x20 0x40       PUSHGLOBALB 0x40
0x54CA  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // gIndex.Clear();                                      symbols.hs:106

0x54CC  0x20 0x42       PUSHGLOBALB 0x42
0x54CE  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // gTypes.Clear();                                      symbols.hs:107

0x54D0  0x20 0x44       PUSHGLOBALB 0x44
0x54D2  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // gStartPos.Clear();                                   symbols.hs:108

0x54D4  0x20 0x46       PUSHGLOBALB 0x46
0x54D6  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // gStartLine.Clear();                                  symbols.hs:109

0x54D8  0x20 0x48       PUSHGLOBALB 0x48
0x54DA  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // gSourcePath.Clear();                                 symbols.hs:110

0x54DC  0x20 0x4A       PUSHGLOBALB 0x4A
0x54DE  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // nameSpaces.Clear();                                  symbols.hs:112

0x54E0  0x20 0x8C       PUSHGLOBALB 0x8C
0x54E2  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // fdNames.Clear();                                     symbols.hs:114

0x54E4  0x20 0x6C       PUSHGLOBALB 0x6C
0x54E6  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // fdIndex.Clear();                                     symbols.hs:115

0x54E8  0x20 0x6E       PUSHGLOBALB 0x6E
0x54EA  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fdOverloads.Clear();                                 symbols.hs:116

0x54EC  0x20 0x70       PUSHGLOBALB 0x70
0x54EE  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fdReturnTypes.Clear();                               symbols.hs:117

0x54F0  0x20 0x72       PUSHGLOBALB 0x72
0x54F2  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // fdArgumentNamesAndTypes.Clear();                     symbols.hs:118

0x54F4  0x20 0x74       PUSHGLOBALB 0x74
0x54F6  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // idNextOverload = 0;                                  symbols.hs:119

0x54F8  0x44            PUSHI0
0x54F9  0x1F 0x76       POPGLOBALB 0x76

                        // eValues.Clear();                                     symbols.hs:121

0x54FB  0x20 0x78       PUSHGLOBALB 0x78
0x54FD  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // eIndex.Clear();                                      symbols.hs:122

0x54FF  0x20 0x7A       PUSHGLOBALB 0x7A
0x5501  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // eMembers.Clear();                                    symbols.hs:123

0x5503  0x20 0x7C       PUSHGLOBALB 0x7C
0x5505  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // flValues.Clear();                                    symbols.hs:125

0x5507  0x20 0x7E       PUSHGLOBALB 0x7E
0x5509  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // flIndex.Clear();                                     symbols.hs:126

0x550B  0x20 0x80       PUSHGLOBALB 0x80
0x550D  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // flMembers.Clear();                                   symbols.hs:127

0x550F  0x20 0x82       PUSHGLOBALB 0x82
0x5511  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // flMembersReversed.Clear();                           symbols.hs:128

0x5513  0x20 0x84       PUSHGLOBALB 0x84
0x5515  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // flMembersSorted.Clear();                             symbols.hs:129

0x5517  0x20 0x86       PUSHGLOBALB 0x86
0x5519  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // overloadsCompiled.Clear();                           symbols.hs:131

0x551B  0x20 0x92       PUSHGLOBALB 0x92
0x551D  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // }                                                    symbols.hs:133

0x551F  0x4A            RET0


// /source/compiler/symbols.hs:1596
// ####  Symbols.Import(..)  ####                                               0x00C7

0x5520  0x49            ENTER

                        // return Import(jsonPath, false);                      symbols.hs:1597

0x5521  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5523  0x44            PUSHI0
0x5524  0x2C 0xC8       CALLB 0xC8     // Symbols.Import
0x5526  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:863
// ####  Symbols.GetFunctionIndex(..)  ####                                     0x00AE


                        // bool found = false;                                  symbols.hs:865

0x5528  0x5F 0x01       ENTERB 0x01

                        // if (fNames.Contains(name))                           symbols.hs:866

0x552A  0x20 0x4C       PUSHGLOBALB 0x4C
0x552C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x552E  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x5530  0x2E 0x2D       JZB 0x555D (+45)

                        // uint length = fNames.Length;                         symbols.hs:868

0x5532  0x44            PUSHI0
0x5533  0x20 0x4C       PUSHGLOBALB 0x4C
0x5535  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5537  0x4D            POPLOCALB02

                        // for (uint i=0; i < length; i++)                      symbols.hs:869

0x5538  0x44            PUSHI0
0x5539  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x553B  0x4F            PUSHLOCALB02
0x553C  0x08            LT
0x553D  0x2E 0x1C       JZB 0x5559 (+28)

                        // if (name == fNames[i])                               symbols.hs:871

0x553F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x5541  0x20 0x4C       PUSHGLOBALB 0x4C
0x5543  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5545  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5547  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5549  0x2F 0x0C       JNZB 0x5555 (+12)

                        // index = i;                                           symbols.hs:873

0x554B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x554D  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // found = true;                                        symbols.hs:874

0x554F  0x45            PUSHI1
0x5550  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:875

0x5551  0x28 0x02       DECSP 0x02
0x5553  0x30 0x08       JB 0x555B (+8)

                        // }                                                    symbols.hs:877

0x5555  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x5557  0x30 0xE2       JB 0x5539 (-30)
0x5559  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:878

0x555B  0x28 0x02       DECSP 0x02

                        // if (!found && !name.Contains('.'))                   symbols.hs:879

0x555D  0x4E            PUSHLOCALB00
0x555E  0x41            BOOLNOT
0x555F  0x27 0x00       DUP 0x00
0x5561  0x2E 0x0B       JZB 0x556C (+11)
0x5563  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x5565  0x1A 0x2E       PUSHIB 0x2E
0x5567  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x556A  0x41            BOOLNOT
0x556B  0x0C            BOOLAND
0x556C  0x2E 0x3A       JZB 0x55A6 (+58)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:881

0x556E  0x20 0x8C       PUSHGLOBALB 0x8C
0x5570  0x44            PUSHI0
0x5571  0x44            PUSHI0
0x5572  0x4F            PUSHLOCALB02
0x5573  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5575  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5577  0x05            EQ
0x5578  0x2F 0x2C       JNZB 0x55A4 (+44)
0x557A  0x4F            PUSHLOCALB02
0x557B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x557D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x557F  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string candidate = nameSpace + "." + name;           symbols.hs:883

0x5581  0x24 0x02       SYSCALL0 0x02  // String.New
0x5583  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5585  0x1A 0x2E       PUSHIB 0x2E
0x5587  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x5589  0x24 0x03       SYSCALL0 0x03  // String.Append
0x558B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x558D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x558F  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (GetFunctionIndex(candidate, ref index))

0x5591  0x56 0x08 0xFE  PUSHLOCALBB 0xFE08
0x5594  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x5596  0x2E 0x08       JZB 0x559E (+8)

                        // found = true;                                        symbols.hs:886

0x5598  0x45            PUSHI1
0x5599  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:887

0x559A  0x28 0x08       DECSP 0x08
0x559C  0x30 0x0A       JB 0x55A6 (+10)

                        // }                                                    symbols.hs:889

0x559E  0x28 0x02       DECSP 0x02
0x55A0  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x55A2  0x30 0xD0       JB 0x5572 (-48)
0x55A4  0x28 0x06       DECSP 0x06

                        // return found;                                        symbols.hs:891

0x55A6  0x4E            PUSHLOCALB00
0x55A7  0x2B 0x06       RETRETB 0x06


// /source/compiler/symbols.hs:894
// ####  Symbols.GetFunctionOverloads(..)  ####                                 0x00AF

0x55A9  0x49            ENTER

                        // <uint> overloads = fOverloads[fIndex];               symbols.hs:895

0x55AA  0x1A 0x04       PUSHIB 0x04
0x55AC  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x55AE  0x20 0x50       PUSHGLOBALB 0x50
0x55B0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x55B2  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x55B4  0x5D            POPCOPYLOCALB00

                        // return overloads;                                    symbols.hs:896

0x55B5  0x4E            PUSHLOCALB00
0x55B6  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:905
// ####  Symbols.AddFunctionCall(..)  ####                                      0x00B1

0x55B8  0x49            ENTER

                        // if (!fCalls.Contains(iOverload))                     symbols.hs:906

0x55B9  0x20 0x68       PUSHGLOBALB 0x68
0x55BB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x55BD  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x55BF  0x2F 0x09       JNZB 0x55C8 (+9)

                        // fCalls[iOverload] = 0;                               symbols.hs:908

0x55C1  0x20 0x68       PUSHGLOBALB 0x68
0x55C3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x55C5  0x44            PUSHI0
0x55C6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fCalls[iOverload] = fCalls[iOverload] + 1;           symbols.hs:910

0x55C8  0x20 0x68       PUSHGLOBALB 0x68
0x55CA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x55CC  0x20 0x68       PUSHGLOBALB 0x68
0x55CE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x55D0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x55D2  0x45            PUSHI1
0x55D3  0x00            ADD
0x55D4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:911

0x55D6  0x2A 0x02       RETB 0x02


// /source/compiler/symbols.hs:1276
// ####  Symbols.ExportCode(..)  ####                                           0x00C5

0x55D8  0x49            ENTER

                        // <uint> usedOverloads;                                symbols.hs:1280

0x55D9  0x1A 0x04       PUSHIB 0x04
0x55DB  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // bool success = true;                                 symbols.hs:1281

0x55DD  0x44            PUSHI0
0x55DE  0x45            PUSHI1
0x55DF  0x4D            POPLOCALB02

                        // foreach (var kv in fCodeStream)                      symbols.hs:1284

0x55E0  0x20 0x64       PUSHGLOBALB 0x64
0x55E2  0x1A 0x04       PUSHIB 0x04
0x55E4  0x1A 0x04       PUSHIB 0x04
0x55E6  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x55E8  0x44            PUSHI0
0x55E9  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x55EC  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x55EE  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x55F0  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x55F2  0x2E 0x14       JZB 0x5606 (+20)

                        // if (!usedOverloads.Contains(kv.key))                 symbols.hs:1286

0x55F4  0x4E            PUSHLOCALB00
0x55F5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x55F7  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x55F9  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x55FB  0x2F 0xEE       JNZB 0x55E9 (-18)

                        // usedOverloads.Append(kv.key);                        symbols.hs:1288

0x55FD  0x4E            PUSHLOCALB00
0x55FE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5600  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5602  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1290

0x5604  0x30 0xE5       JB 0x55E9 (-27)
0x5606  0x28 0x06       DECSP 0x06

                        // foreach (var kv in fCalls)                           symbols.hs:1291

0x5608  0x20 0x68       PUSHGLOBALB 0x68
0x560A  0x1A 0x04       PUSHIB 0x04
0x560C  0x1A 0x04       PUSHIB 0x04
0x560E  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5610  0x44            PUSHI0
0x5611  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x5614  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5616  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x5618  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x561A  0x2E 0x14       JZB 0x562E (+20)

                        // if (!usedOverloads.Contains(kv.key))                 symbols.hs:1293

0x561C  0x4E            PUSHLOCALB00
0x561D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x561F  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5621  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x5623  0x2F 0xEE       JNZB 0x5611 (-18)

                        // usedOverloads.Append(kv.key);                        symbols.hs:1295

0x5625  0x4E            PUSHLOCALB00
0x5626  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5628  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x562A  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1297

0x562C  0x30 0xE5       JB 0x5611 (-27)
0x562E  0x28 0x06       DECSP 0x06

                        // <string, variant> dict;                              symbols.hs:1298

0x5630  0x1A 0x0F       PUSHIB 0x0F
0x5632  0x1A 0x14       PUSHIB 0x14
0x5634  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // <byte> constantStream = CodeStream.GetConstantStream();

0x5636  0x1A 0x03       PUSHIB 0x03
0x5638  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x563A  0x34 0x2D 0x01  CALLW 0x012D   // CodeStream.GetConstantStream
0x563D  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (constantStream.Length > 0)                       symbols.hs:1301

0x563F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5641  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5643  0x44            PUSHI0
0x5644  0x07            GT
0x5645  0x2E 0x24       JZB 0x5669 (+36)

                        // <string,variant> cdict;                              symbols.hs:1303

0x5647  0x1A 0x0F       PUSHIB 0x0F
0x5649  0x1A 0x14       PUSHIB 0x14
0x564B  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // cdict["data"] = constantStream;                      symbols.hs:1304

0x564D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x564F  0x37 0xD8 0x0B  PUSHIW 0x0BD8
0x5652  0x1A 0x04       PUSHIB 0x04
0x5654  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5656  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5658  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // dict["const"] = cdict;                               symbols.hs:1305

0x565A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x565C  0x37 0xD3 0x04  PUSHIW 0x04D3
0x565F  0x1A 0x05       PUSHIB 0x05
0x5661  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5663  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x5665  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1306

0x5667  0x28 0x02       DECSP 0x02

                        // <string, <string,string> > globals;                  symbols.hs:1311

0x5669  0x1A 0x0F       PUSHIB 0x0F
0x566B  0x1A 0x13       PUSHIB 0x13
0x566D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // uint gNamesCount = gNames.Length;                    symbols.hs:1312

0x566F  0x44            PUSHI0
0x5670  0x20 0x40       PUSHGLOBALB 0x40
0x5672  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5674  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // for (uint i = 0; i < gNamesCount; i++)               symbols.hs:1313

0x5676  0x44            PUSHI0
0x5677  0x56 0x0C 0x0A  PUSHLOCALBB 0x0A0C
0x567A  0x08            LT
0x567B  0x2E 0x53       JZB 0x56CE (+83)

                        // uint offset = i * 2;                                 symbols.hs:1315

0x567D  0x44            PUSHI0
0x567E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5680  0x1A 0x02       PUSHIB 0x02
0x5682  0x03            MUL
0x5683  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // <string,string> gDict;                               symbols.hs:1316

0x5685  0x1A 0x0F       PUSHIB 0x0F
0x5687  0x1A 0x0F       PUSHIB 0x0F
0x5689  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // gDict["name"] = gNames[i];                           symbols.hs:1317

0x568B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x568D  0x37 0xDC 0x0B  PUSHIW 0x0BDC
0x5690  0x1A 0x04       PUSHIB 0x04
0x5692  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5694  0x20 0x40       PUSHGLOBALB 0x40
0x5696  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5698  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x569A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // byte typeByte = Types.ToByte(gTypes[i]);             symbols.hs:1319

0x569C  0x44            PUSHI0
0x569D  0x20 0x44       PUSHGLOBALB 0x44
0x569F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x56A1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x56A3  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x56A5  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // type typeType = type(typeByte);                      symbols.hs:1320

0x56A7  0x44            PUSHI0
0x56A8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x56AA  0x51 0x03       CAST 0x03
0x56AC  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // gDict["type"] = typeType.ToString();                 symbols.hs:1322

0x56AE  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x56B0  0x37 0x13 0x01  PUSHIW 0x0113
0x56B3  0x1A 0x04       PUSHIB 0x04
0x56B5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x56B7  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x56B9  0x34 0xCC 0x01  CALLW 0x01CC   // Type.ToString
0x56BC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // globals[offset.ToString()] = gDict;                  symbols.hs:1323

0x56BE  0x56 0x08 0x0E  PUSHLOCALBB 0x0E08
0x56C1  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x56C4  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x56C6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1324

0x56C8  0x28 0x08       DECSP 0x08
0x56CA  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x56CC  0x30 0xAB       JB 0x5677 (-85)
0x56CE  0x28 0x02       DECSP 0x02

                        // if (globals.Count > 0)                               symbols.hs:1325

0x56D0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x56D2  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x56D4  0x44            PUSHI0
0x56D5  0x07            GT
0x56D6  0x2E 0x0F       JZB 0x56E5 (+15)

                        // dict["globals"] = globals;                           symbols.hs:1327

0x56D8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x56DA  0x37 0x6F 0x01  PUSHIW 0x016F
0x56DD  0x1A 0x07       PUSHIB 0x07
0x56DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x56E1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x56E3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // foreach (var iUsedOverload in usedOverloads)

0x56E5  0x4E            PUSHLOCALB00
0x56E6  0x44            PUSHI0
0x56E7  0x44            PUSHI0
0x56E8  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x56EA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x56EC  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x56EE  0x05            EQ
0x56EF  0x32 0x3C 0x02  JNZW 0x592B (+572)
0x56F2  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0x56F5  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x56F7  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // <string,variant> mdict;                              symbols.hs:1333

0x56F9  0x1A 0x0F       PUSHIB 0x0F
0x56FB  0x1A 0x14       PUSHIB 0x14
0x56FD  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (IsSysCall(iUsedOverload))                        symbols.hs:1335

0x56FF  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x5701  0x2C 0xB2       CALLB 0xB2     // Symbols.IsSysCall
0x5703  0x2E 0x07       JZB 0x570A (+7)

                        // continue;                                            symbols.hs:1337

0x5705  0x28 0x02       DECSP 0x02
0x5707  0x33 0x1F 0x02  JW 0x5926 (+543)

                        // if (fCalls.Contains(iUsedOverload))                  symbols.hs:1340

0x570A  0x20 0x68       PUSHGLOBALB 0x68
0x570C  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x570E  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5710  0x2E 0x17       JZB 0x5727 (+23)

                        // mdict["hits"] = fCalls[iUsedOverload];               symbols.hs:1342

0x5712  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x5714  0x37 0xE0 0x0B  PUSHIW 0x0BE0
0x5717  0x1A 0x04       PUSHIB 0x04
0x5719  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x571B  0x20 0x68       PUSHGLOBALB 0x68
0x571D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x571F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5721  0x1A 0x04       PUSHIB 0x04
0x5723  0x24 0x27       SYSCALL0 0x27  // Variant.Box
0x5725  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (fCodeStream.Contains(iUsedOverload))             symbols.hs:1344

0x5727  0x20 0x64       PUSHGLOBALB 0x64
0x5729  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x572B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x572D  0x31 0xED 0x01  JZW 0x591A (+493)

                        // < < string > > argsAndTypes = fArgumentNamesAndTypes[iUsedOverload];

0x5730  0x1A 0x19       PUSHIB 0x19
0x5732  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x5734  0x20 0x54       PUSHGLOBALB 0x54
0x5736  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x5738  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x573A  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // uint argCount = argsAndTypes.Length;                 symbols.hs:1347

0x573C  0x44            PUSHI0
0x573D  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x573F  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5741  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // int acount;                                          symbols.hs:1348

0x5743  0x44            PUSHI0

                        // <string, <string, string> > argdicts;                symbols.hs:1350

0x5744  0x1A 0x0F       PUSHIB 0x0F
0x5746  0x1A 0x13       PUSHIB 0x13
0x5748  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var argument in argsAndTypes)               symbols.hs:1351

0x574A  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x574C  0x44            PUSHI0
0x574D  0x44            PUSHI0
0x574E  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x5750  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5752  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x5754  0x05            EQ
0x5755  0x32 0xA1 0x00  JNZW 0x57F6 (+161)
0x5758  0x56 0x1C 0x20  PUSHLOCALBB 0x201C
0x575B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x575D  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // <string, string> argdict;                            symbols.hs:1353

0x575F  0x1A 0x0F       PUSHIB 0x0F
0x5761  0x1A 0x0F       PUSHIB 0x0F
0x5763  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // string name = argument[2];                           symbols.hs:1354

0x5765  0x24 0x02       SYSCALL0 0x02  // String.New
0x5767  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5769  0x1A 0x02       PUSHIB 0x02
0x576B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x576D  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // string aref = argument[0];                           symbols.hs:1355

0x576F  0x24 0x02       SYSCALL0 0x02  // String.New
0x5771  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5773  0x44            PUSHI0
0x5774  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5776  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // if (aref == "ref")                                   symbols.hs:1356

0x5778  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x577A  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x577D  0x1A 0x03       PUSHIB 0x03
0x577F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5781  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5783  0x2F 0x0D       JNZB 0x5790 (+13)

                        // aref = "true";                                       symbols.hs:1358

0x5785  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0x5788  0x1A 0x04       PUSHIB 0x04
0x578A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x578C  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // }                                                    symbols.hs:1359

0x578E  0x30 0x0B       JB 0x5799 (+11)

                        // aref = "false";                                      symbols.hs:1362

0x5790  0x37 0x4C 0x05  PUSHIW 0x054C
0x5793  0x1A 0x05       PUSHIB 0x05
0x5795  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5797  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // byte typeByte = Types.ToByte(argument[1]);           symbols.hs:1364

0x5799  0x44            PUSHI0
0x579A  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x579C  0x45            PUSHI1
0x579D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x579F  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x57A1  0x1B 0x28       POPLOCALB 0x28 (BP+40)

                        // type typeType = type(typeByte);                      symbols.hs:1365

0x57A3  0x44            PUSHI0
0x57A4  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0x57A6  0x51 0x03       CAST 0x03
0x57A8  0x1B 0x2A       POPLOCALB 0x2A (BP+42)

                        // argdict["name"] = name;                              symbols.hs:1367

0x57AA  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x57AC  0x37 0xDC 0x0B  PUSHIW 0x0BDC
0x57AF  0x1A 0x04       PUSHIB 0x04
0x57B1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x57B3  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x57B5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // argdict["type"] = typeType.ToString();               symbols.hs:1368

0x57B7  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x57B9  0x37 0x13 0x01  PUSHIW 0x0113
0x57BC  0x1A 0x04       PUSHIB 0x04
0x57BE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x57C0  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x57C2  0x34 0xCC 0x01  CALLW 0x01CC   // Type.ToString
0x57C5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // argdict["ref"] = aref;                               symbols.hs:1369

0x57C7  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x57C9  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x57CC  0x1A 0x03       PUSHIB 0x03
0x57CE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x57D0  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x57D2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // int offset = 0 - (int(argCount)-acount)*2;           symbols.hs:1371

0x57D4  0x44            PUSHI0
0x57D5  0x44            PUSHI0
0x57D6  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x57D8  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x57DA  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x57DC  0x12            SUBI
0x57DD  0x1A 0x02       PUSHIB 0x02
0x57DF  0x14            MULI
0x57E0  0x12            SUBI
0x57E1  0x1B 0x2C       POPLOCALB 0x2C (BP+44)

                        // argdicts[offset.ToString()] = argdict;               symbols.hs:1372

0x57E3  0x56 0x1A 0x2C  PUSHLOCALBB 0x2C1A
0x57E6  0x34 0x6A 0x01  CALLW 0x016A   // Int.ToString
0x57E9  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x57EB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // acount++;                                            symbols.hs:1373

0x57ED  0x22 0x18       INCLOCALB 0x18 (BP+24)

                        // }                                                    symbols.hs:1374

0x57EF  0x28 0x0C       DECSP 0x0C
0x57F1  0x22 0x20       INCLOCALB 0x20 (BP+32)
0x57F3  0x33 0x5B 0xFF  JW 0x574E (-165)
0x57F6  0x28 0x06       DECSP 0x06

                        // if (argdicts.Count > 0)                              symbols.hs:1375

0x57F8  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x57FA  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x57FC  0x44            PUSHI0
0x57FD  0x07            GT
0x57FE  0x2E 0x0E       JZB 0x580C (+14)

                        // mdict["arguments"]   = argdicts;                     symbols.hs:1377

0x5800  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x5802  0x1A 0x5E       PUSHIB 0x5E
0x5804  0x1A 0x09       PUSHIB 0x09
0x5806  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5808  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x580A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (DefineExists("H6502") && fLocalNamesAndTypes.Contains(iUsedOverload))

0x580C  0x37 0xEB 0x06  PUSHIW 0x06EB
0x580F  0x1A 0x05       PUSHIB 0x05
0x5811  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5813  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x5815  0x27 0x00       DUP 0x00
0x5817  0x2E 0x09       JZB 0x5820 (+9)
0x5819  0x20 0x56       PUSHGLOBALB 0x56
0x581B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x581D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x581F  0x0C            BOOLAND
0x5820  0x31 0xA2 0x00  JZW 0x58C2 (+162)

                        // < < string > > localsAndTypes = fLocalNamesAndTypes[iUsedOverload];

0x5823  0x1A 0x19       PUSHIB 0x19
0x5825  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x5827  0x20 0x56       PUSHGLOBALB 0x56
0x5829  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x582B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x582D  0x57 0x1C       POPCOPYLOCALB 0x1C (BP+28)

                        // <string, <string, string> > localdicts;              symbols.hs:1382

0x582F  0x1A 0x0F       PUSHIB 0x0F
0x5831  0x1A 0x13       PUSHIB 0x13
0x5833  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var local in localsAndTypes)                symbols.hs:1383

0x5835  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x5837  0x44            PUSHI0
0x5838  0x44            PUSHI0
0x5839  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x583B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x583D  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x583F  0x05            EQ
0x5840  0x2F 0x69       JNZB 0x58A9 (+105)
0x5842  0x56 0x20 0x24  PUSHLOCALBB 0x2420
0x5845  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5847  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // <string, string> localdict;                          symbols.hs:1385

0x5849  0x1A 0x0F       PUSHIB 0x0F
0x584B  0x1A 0x0F       PUSHIB 0x0F
0x584D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // string lrange  = local[0];                           symbols.hs:1386

0x584F  0x24 0x02       SYSCALL0 0x02  // String.New
0x5851  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x5853  0x44            PUSHI0
0x5854  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5856  0x57 0x28       POPCOPYLOCALB 0x28 (BP+40)

                        // string lname   = local[1];                           symbols.hs:1387

0x5858  0x24 0x02       SYSCALL0 0x02  // String.New
0x585A  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x585C  0x45            PUSHI1
0x585D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x585F  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // string ltype   = local[2];                           symbols.hs:1388

0x5861  0x24 0x02       SYSCALL0 0x02  // String.New
0x5863  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x5865  0x1A 0x02       PUSHIB 0x02
0x5867  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5869  0x57 0x2C       POPCOPYLOCALB 0x2C (BP+44)

                        // string loffset = local[3];                           symbols.hs:1389

0x586B  0x24 0x02       SYSCALL0 0x02  // String.New
0x586D  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x586F  0x1A 0x03       PUSHIB 0x03
0x5871  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5873  0x57 0x2E       POPCOPYLOCALB 0x2E (BP+46)

                        // localdict["name"] = lname;                           symbols.hs:1390

0x5875  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x5877  0x37 0xDC 0x0B  PUSHIW 0x0BDC
0x587A  0x1A 0x04       PUSHIB 0x04
0x587C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x587E  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x5880  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // localdict["type"] = ltype;                           symbols.hs:1391

0x5882  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x5884  0x37 0x13 0x01  PUSHIW 0x0113
0x5887  0x1A 0x04       PUSHIB 0x04
0x5889  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x588B  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x588D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // localdict["offset"] = loffset;                       symbols.hs:1392

0x588F  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x5891  0x37 0xEB 0x0B  PUSHIW 0x0BEB
0x5894  0x1A 0x06       PUSHIB 0x06
0x5896  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5898  0x1C 0x2E       PUSHLOCALB 0x2E (BP+46)
0x589A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // localdicts[lrange] = localdict;                      symbols.hs:1393

0x589C  0x56 0x1E 0x28  PUSHLOCALBB 0x281E
0x589F  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x58A1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1394

0x58A3  0x28 0x0A       DECSP 0x0A
0x58A5  0x22 0x24       INCLOCALB 0x24 (BP+36)
0x58A7  0x30 0x92       JB 0x5839 (-110)
0x58A9  0x28 0x06       DECSP 0x06

                        // if (localdicts.Count > 0)                            symbols.hs:1395

0x58AB  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x58AD  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x58AF  0x44            PUSHI0
0x58B0  0x07            GT
0x58B1  0x2E 0x0F       JZB 0x58C0 (+15)

                        // mdict["locals"]   = localdicts;                      symbols.hs:1397

0x58B3  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x58B5  0x37 0x69 0x01  PUSHIW 0x0169
0x58B8  0x1A 0x06       PUSHIB 0x06
0x58BA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x58BC  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x58BE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1399

0x58C0  0x28 0x04       DECSP 0x04

                        // mdict["code"]   = fCodeStream[iUsedOverload];

0x58C2  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x58C4  0x1A 0x42       PUSHIB 0x42
0x58C6  0x1A 0x04       PUSHIB 0x04
0x58C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x58CA  0x20 0x64       PUSHGLOBALB 0x64
0x58CC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x58CE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x58D0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // mdict["debug"]   = fDebugInfo[iUsedOverload];

0x58D2  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x58D4  0x37 0xF1 0x0B  PUSHIW 0x0BF1
0x58D7  0x1A 0x05       PUSHIB 0x05
0x58D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x58DB  0x20 0x66       PUSHGLOBALB 0x66
0x58DD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x58DF  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x58E1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // mdict["line"]   = fStartLine[iUsedOverload];

0x58E3  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x58E5  0x37 0x89 0x06  PUSHIW 0x0689
0x58E8  0x1A 0x04       PUSHIB 0x04
0x58EA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x58EC  0x20 0x5A       PUSHGLOBALB 0x5A
0x58EE  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x58F0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x58F2  0x1A 0x04       PUSHIB 0x04
0x58F4  0x24 0x27       SYSCALL0 0x27  // Variant.Box
0x58F6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // mdict["source"] = fSourcePath[iUsedOverload];

0x58F8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x58FA  0x37 0x8D 0x06  PUSHIW 0x068D
0x58FD  0x1A 0x06       PUSHIB 0x06
0x58FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5901  0x20 0x5C       PUSHGLOBALB 0x5C
0x5903  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x5905  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5907  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // mdict["name"] = GetFunctionName(iUsedOverload);

0x5909  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x590B  0x37 0xDC 0x0B  PUSHIW 0x0BDC
0x590E  0x1A 0x04       PUSHIB 0x04
0x5910  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5912  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x5914  0x2C 0x8F       CALLB 0x8F     // Symbols.GetFunctionName
0x5916  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1405

0x5918  0x28 0x08       DECSP 0x08

                        // dict[iUsedOverload.ToString()] = mdict;              symbols.hs:1406

0x591A  0x56 0x04 0x0E  PUSHLOCALBB 0x0E04
0x591D  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x5920  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x5922  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1407

0x5924  0x28 0x02       DECSP 0x02
0x5926  0x22 0x10       INCLOCALB 0x10 (BP+16)
0x5928  0x33 0xC0 0xFD  JW 0x56E8 (-576)
0x592B  0x28 0x06       DECSP 0x06

                        // if (!JSON.Write(codePath, dict))                     symbols.hs:1409

0x592D  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0x5930  0x34 0x10 0x02  CALLW 0x0210   // JSON.Write
0x5933  0x2F 0x04       JNZB 0x5937 (+4)

                        // success = false;                                     symbols.hs:1411

0x5935  0x44            PUSHI0
0x5936  0x4D            POPLOCALB02

                        // break;                                               symbols.hs:1413

0x5937  0x28 0x08       DECSP 0x08

                        // return success;                                      symbols.hs:1415

0x5939  0x4F            PUSHLOCALB02
0x593A  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:2032
// ####  Symbols.ExportTouchTree(..)  ####                                      0x00CE

0x593C  0x49            ENTER

                        // <string> contentLines;                               symbols.hs:2033

0x593D  0x1A 0x0F       PUSHIB 0x0F
0x593F  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // <uint> touchesDone;                                  symbols.hs:2034

0x5941  0x1A 0x04       PUSHIB 0x04
0x5943  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint cSize = 0;                                      symbols.hs:2035

0x5945  0x44            PUSHI0

                        // foreach (var kv in fTouches)                         symbols.hs:2036

0x5946  0x20 0x94       PUSHGLOBALB 0x94
0x5948  0x1A 0x04       PUSHIB 0x04
0x594A  0x1A 0x04       PUSHIB 0x04
0x594C  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x594E  0x44            PUSHI0
0x594F  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x5952  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5954  0x1B 0x0A       POPLOCALB 0x0A (BP+10)
0x5956  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x5958  0x2E 0x22       JZB 0x597A (+34)

                        // uint iFrom = kv.key;                                 symbols.hs:2038

0x595A  0x44            PUSHI0
0x595B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x595D  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x595F  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (!touchesDone.Contains(iFrom))                    symbols.hs:2039

0x5961  0x4F            PUSHLOCALB02
0x5962  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5964  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x5966  0x2F 0x10       JNZB 0x5976 (+16)

                        // cSize = cSize + ExportTouchTree(ref contentLines, iFrom, 0, ref touchesDone);

0x5968  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x596A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x596C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x596E  0x44            PUSHI0
0x596F  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x5971  0x2C 0xCD       CALLB 0xCD     // Symbols.ExportTouchTree
0x5973  0x00            ADD
0x5974  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    symbols.hs:2043

0x5976  0x28 0x02       DECSP 0x02
0x5978  0x30 0xD7       JB 0x594F (-41)
0x597A  0x28 0x06       DECSP 0x06

                        // if (File.Exists(path))                               symbols.hs:2044

0x597C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x597E  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x5980  0x2E 0x06       JZB 0x5986 (+6)

                        // File.Delete(path);                                   symbols.hs:2046

0x5982  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5984  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // file touchesFile = File.Create(path);                symbols.hs:2048

0x5986  0x24 0x60       SYSCALL0 0x60  // File.New
0x5988  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x598A  0x24 0x62       SYSCALL0 0x62  // File.Create
0x598C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var line in contentLines)                   symbols.hs:2049

0x598E  0x4E            PUSHLOCALB00
0x598F  0x44            PUSHI0
0x5990  0x44            PUSHI0
0x5991  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x5993  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5995  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5997  0x05            EQ
0x5998  0x2F 0x18       JNZB 0x59B0 (+24)
0x599A  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x599D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x599F  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // touchesFile.Append(char(0x0A) + line);               symbols.hs:2051

0x59A1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x59A3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x59A5  0x44            PUSHI0
0x59A6  0x1A 0x0A       PUSHIB 0x0A
0x59A8  0x24 0x04       SYSCALL0 0x04  // String.InsertChar
0x59AA  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    symbols.hs:2052

0x59AC  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x59AE  0x30 0xE3       JB 0x5991 (-29)
0x59B0  0x28 0x06       DECSP 0x06

                        // touchesFile.Flush();                                 symbols.hs:2053

0x59B2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x59B4  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // }                                                    symbols.hs:2054

0x59B6  0x2A 0x0A       RETB 0x0A


// /source/compiler/symbols.hs:933
// ####  Symbols.GetOverloadStart(..)  ####                                     0x00B6

0x59B8  0x49            ENTER

                        // <string, string> startToken;                         symbols.hs:934

0x59B9  0x1A 0x0F       PUSHIB 0x0F
0x59BB  0x1A 0x0F       PUSHIB 0x0F
0x59BD  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // long pos = fStartPos[iOverload];                     symbols.hs:936

0x59BF  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x59C1  0x20 0x58       PUSHGLOBALB 0x58
0x59C3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x59C5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x59C7  0x5E            POPCOPYLOCALB02

                        // pos = pos - 1;                                       symbols.hs:937

0x59C8  0x4F            PUSHLOCALB02
0x59C9  0x45            PUSHI1
0x59CA  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x59CC  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x59CE  0x5E            POPCOPYLOCALB02

                        // startToken["pos"]    = pos.ToString();               symbols.hs:938

0x59CF  0x4E            PUSHLOCALB00
0x59D0  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x59D3  0x1A 0x03       PUSHIB 0x03
0x59D5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x59D7  0x4F            PUSHLOCALB02
0x59D8  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x59DA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // uint ln = fStartLine[iOverload];                     symbols.hs:939

0x59DC  0x44            PUSHI0
0x59DD  0x20 0x5A       PUSHGLOBALB 0x5A
0x59DF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x59E1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x59E3  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // startToken["line"]   = ln.ToString();                symbols.hs:940

0x59E5  0x4E            PUSHLOCALB00
0x59E6  0x37 0x89 0x06  PUSHIW 0x0689
0x59E9  0x1A 0x04       PUSHIB 0x04
0x59EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x59ED  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x59EF  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x59F2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // startToken["source"] = fSourcePath[iOverload];

0x59F4  0x4E            PUSHLOCALB00
0x59F5  0x37 0x8D 0x06  PUSHIW 0x068D
0x59F8  0x1A 0x06       PUSHIB 0x06
0x59FA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x59FC  0x20 0x5C       PUSHGLOBALB 0x5C
0x59FE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5A00  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5A02  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // return startToken;                                   symbols.hs:942

0x5A04  0x4E            PUSHLOCALB00
0x5A05  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:1925
// ####  Symbols.OverloadWasCompiled(..)  ####                                  0x00CA

0x5A07  0x49            ENTER

                        // overloadsCompiled[iOverload] = true;                 symbols.hs:1926

0x5A08  0x20 0x92       PUSHGLOBALB 0x92
0x5A0A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5A0C  0x45            PUSHI1
0x5A0D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1927

0x5A0F  0x2A 0x02       RETB 0x02


// /source/compiler/symbols.hs:1929
// ####  Symbols.OverloadNextToCompile(..)  ####                                0x00CB

0x5A11  0x49            ENTER

                        // string lastSource;                                   symbols.hs:1930

0x5A12  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <string, string> lastToken = Symbols.GetOverloadStart(iLastOverload);

0x5A14  0x1A 0x0F       PUSHIB 0x0F
0x5A16  0x1A 0x0F       PUSHIB 0x0F
0x5A18  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5A1A  0x20 0x90       PUSHGLOBALB 0x90
0x5A1C  0x2C 0xB6       CALLB 0xB6     // Symbols.GetOverloadStart
0x5A1E  0x5E            POPCOPYLOCALB02

                        // if (lastToken.Count > 0)                             symbols.hs:1932

0x5A1F  0x4F            PUSHLOCALB02
0x5A20  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x5A22  0x44            PUSHI0
0x5A23  0x07            GT
0x5A24  0x2E 0x12       JZB 0x5A36 (+18)

                        // lastSource = lastToken["source"];                    symbols.hs:1934

0x5A26  0x4F            PUSHLOCALB02
0x5A27  0x37 0x8D 0x06  PUSHIW 0x068D
0x5A2A  0x1A 0x06       PUSHIB 0x06
0x5A2C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5A2E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5A30  0x5D            POPCOPYLOCALB00

                        // lastSource = lastSource.ToLower();                   symbols.hs:1935

0x5A31  0x4E            PUSHLOCALB00
0x5A32  0x34 0x9A 0x01  CALLW 0x019A   // String.ToLower
0x5A35  0x5D            POPCOPYLOCALB00

                        // bool oneMore = false;                                symbols.hs:1938

0x5A36  0x44            PUSHI0

                        // for (int pass = 0; pass < 2; pass++)                 symbols.hs:1939

0x5A37  0x44            PUSHI0
0x5A38  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5A3A  0x1A 0x02       PUSHIB 0x02
0x5A3C  0x17            LTI
0x5A3D  0x31 0x75 0x00  JZW 0x5AB2 (+117)

                        // foreach (var kv in overloadsCompiled)                symbols.hs:1941

0x5A40  0x20 0x92       PUSHGLOBALB 0x92
0x5A42  0x1A 0x04       PUSHIB 0x04
0x5A44  0x1A 0x04       PUSHIB 0x04
0x5A46  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5A48  0x44            PUSHI0
0x5A49  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x5A4C  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5A4E  0x1B 0x0C       POPLOCALB 0x0C (BP+12)
0x5A50  0x1B 0x0A       POPLOCALB 0x0A (BP+10)
0x5A52  0x2E 0x51       JZB 0x5AA3 (+81)

                        // if (!kv.value)                                       symbols.hs:1943

0x5A54  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5A56  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5A58  0x2F 0xF1       JNZB 0x5A49 (-15)

                        // iOverload = kv.key;                                  symbols.hs:1945

0x5A5A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5A5C  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5A5E  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // <string, string> nextToken = Symbols.GetOverloadStart(iOverload);

0x5A60  0x1A 0x0F       PUSHIB 0x0F
0x5A62  0x1A 0x0F       PUSHIB 0x0F
0x5A64  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5A66  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x5A68  0x2C 0xB6       CALLB 0xB6     // Symbols.GetOverloadStart
0x5A6A  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string nextSource = nextToken["source"];             symbols.hs:1947

0x5A6C  0x24 0x02       SYSCALL0 0x02  // String.New
0x5A6E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x5A70  0x37 0x8D 0x06  PUSHIW 0x068D
0x5A73  0x1A 0x06       PUSHIB 0x06
0x5A75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5A77  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5A79  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // nextSource = nextSource.ToLower();                   symbols.hs:1948

0x5A7B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5A7D  0x34 0x9A 0x01  CALLW 0x019A   // String.ToLower
0x5A80  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if ((pass == 1) || (nextSource == lastSource))

0x5A82  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5A84  0x45            PUSHI1
0x5A85  0x05            EQ
0x5A86  0x27 0x00       DUP 0x00
0x5A88  0x2F 0x0A       JNZB 0x5A92 (+10)
0x5A8A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5A8C  0x4E            PUSHLOCALB00
0x5A8D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5A8F  0x44            PUSHI0
0x5A90  0x05            EQ
0x5A91  0x0B            BOOLOR
0x5A92  0x2E 0x0D       JZB 0x5A9F (+13)

                        // oneMore = true;                                      symbols.hs:1951

0x5A94  0x45            PUSHI1
0x5A95  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // iLastOverload = iOverload;                           symbols.hs:1952

0x5A97  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x5A99  0x1F 0x90       POPGLOBALB 0x90

                        // break;                                               symbols.hs:1953

0x5A9B  0x28 0x0A       DECSP 0x0A
0x5A9D  0x30 0x08       JB 0x5AA5 (+8)

                        // }                                                    symbols.hs:1955

0x5A9F  0x28 0x04       DECSP 0x04

                        // }                                                    symbols.hs:1956

0x5AA1  0x30 0xA8       JB 0x5A49 (-88)
0x5AA3  0x28 0x06       DECSP 0x06

                        // if (oneMore)                                         symbols.hs:1957

0x5AA5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5AA7  0x2E 0x06       JZB 0x5AAD (+6)

                        // break;                                               symbols.hs:1959

0x5AA9  0x28 0x02       DECSP 0x02
0x5AAB  0x30 0x09       JB 0x5AB4 (+9)

                        // }                                                    symbols.hs:1961

0x5AAD  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x5AAF  0x33 0x89 0xFF  JW 0x5A38 (-119)
0x5AB2  0x28 0x02       DECSP 0x02

                        // return oneMore;                                      symbols.hs:1962

0x5AB4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5AB6  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:952
// ####  Symbols.GetOverloadArguments(..)  ####                                 0x00B8

0x5AB8  0x49            ENTER

                        // < < string > > arguments = fArgumentNamesAndTypes[iOverload];

0x5AB9  0x1A 0x19       PUSHIB 0x19
0x5ABB  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x5ABD  0x20 0x54       PUSHGLOBALB 0x54
0x5ABF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5AC1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5AC3  0x5D            POPCOPYLOCALB00

                        // return arguments;                                    symbols.hs:954

0x5AC4  0x4E            PUSHLOCALB00
0x5AC5  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:946
// ####  Symbols.GetOverloadReturnType(..)  ####                                0x00B7

0x5AC7  0x49            ENTER

                        // string returnType = fReturnTypes[iOverload];

0x5AC8  0x24 0x02       SYSCALL0 0x02  // String.New
0x5ACA  0x20 0x52       PUSHGLOBALB 0x52
0x5ACC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5ACE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5AD0  0x5D            POPCOPYLOCALB00

                        // return returnType;                                   symbols.hs:948

0x5AD1  0x4E            PUSHLOCALB00
0x5AD2  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:900
// ####  Symbols.SetCodeStream(..)  ####                                        0x00B0

0x5AD4  0x49            ENTER

                        // fCodeStream[iOverload] = codeStream;                 symbols.hs:901

0x5AD5  0x20 0x64       PUSHGLOBALB 0x64
0x5AD7  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x5ADA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fDebugInfo[iOverload] = debugInfo;                   symbols.hs:902

0x5ADC  0x20 0x66       PUSHGLOBALB 0x66
0x5ADE  0x56 0xFA 0xFE  PUSHLOCALBB 0xFEFA
0x5AE1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:903

0x5AE3  0x2A 0x06       RETB 0x06


// /source/compiler/symbols.hs:386
// ####  Symbols.GetGlobalCount(..)  ####                                       0x009F

0x5AE5  0x49            ENTER

                        // return gNames.Length;                                symbols.hs:387

0x5AE6  0x20 0x40       PUSHGLOBALB 0x40
0x5AE8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x5AEA  0x4A            RET0


// /source/compiler/symbols.hs:394
// ####  Symbols.GetGlobalType(..)  ####                                        0x00A1

0x5AEB  0x49            ENTER

                        // return gTypes[index];                                symbols.hs:395

0x5AEC  0x20 0x44       PUSHGLOBALB 0x44
0x5AEE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5AF0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5AF2  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:390
// ####  Symbols.GetGlobalName(..)  ####                                        0x00A0

0x5AF4  0x49            ENTER

                        // return gNames[index];                                symbols.hs:391

0x5AF5  0x20 0x40       PUSHGLOBALB 0x40
0x5AF7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5AF9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x5AFB  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:403
// ####  Symbols.GetGlobalStart(..)  ####                                       0x00A3

0x5AFD  0x49            ENTER

                        // <string, string> startToken;                         symbols.hs:404

0x5AFE  0x1A 0x0F       PUSHIB 0x0F
0x5B00  0x1A 0x0F       PUSHIB 0x0F
0x5B02  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (gStartPos.Contains(iGlobal))                     symbols.hs:405

0x5B04  0x20 0x46       PUSHGLOBALB 0x46
0x5B06  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B08  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5B0A  0x2E 0x47       JZB 0x5B51 (+71)

                        // long isp = gStartPos[iGlobal] - 1;                   symbols.hs:408

0x5B0C  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x5B0E  0x20 0x46       PUSHGLOBALB 0x46
0x5B10  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B12  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5B14  0x45            PUSHI1
0x5B15  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x5B17  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x5B19  0x5E            POPCOPYLOCALB02

                        // startToken["pos"]    = isp.ToString();               symbols.hs:409

0x5B1A  0x4E            PUSHLOCALB00
0x5B1B  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x5B1E  0x1A 0x03       PUSHIB 0x03
0x5B20  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5B22  0x4F            PUSHLOCALB02
0x5B23  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x5B25  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // uint isl = gStartLine[iGlobal];                      symbols.hs:410

0x5B27  0x44            PUSHI0
0x5B28  0x20 0x48       PUSHGLOBALB 0x48
0x5B2A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B2C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5B2E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // startToken["line"]   = isl.ToString();               symbols.hs:411

0x5B30  0x4E            PUSHLOCALB00
0x5B31  0x37 0x89 0x06  PUSHIW 0x0689
0x5B34  0x1A 0x04       PUSHIB 0x04
0x5B36  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5B38  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5B3A  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x5B3D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // startToken["source"] = gSourcePath[iGlobal];

0x5B3F  0x4E            PUSHLOCALB00
0x5B40  0x37 0x8D 0x06  PUSHIW 0x068D
0x5B43  0x1A 0x06       PUSHIB 0x06
0x5B45  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5B47  0x20 0x4A       PUSHGLOBALB 0x4A
0x5B49  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B4B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5B4D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:413

0x5B4F  0x28 0x04       DECSP 0x04

                        // return startToken;                                   symbols.hs:414

0x5B51  0x4E            PUSHLOCALB00
0x5B52  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:380
// ####  Symbols.GetGlobalAddress(..)  ####                                     0x009E


                        // uint address = gIndex[name];                         symbols.hs:381

0x5B54  0x5F 0x01       ENTERB 0x01

                        // uint address = gIndex[name];                         symbols.hs:381

0x5B56  0x20 0x42       PUSHGLOBALB 0x42
0x5B58  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B5A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5B5C  0x4C            POPLOCALB00

                        // address = address*2;                                 symbols.hs:382

0x5B5D  0x4E            PUSHLOCALB00
0x5B5E  0x1A 0x02       PUSHIB 0x02
0x5B60  0x03            MUL
0x5B61  0x4C            POPLOCALB00

                        // return address;                                      symbols.hs:383

0x5B62  0x4E            PUSHLOCALB00
0x5B63  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:1891
// ####  Symbols.OverloadToCompile(..)  ####                                    0x00C9

0x5B65  0x49            ENTER

                        // if (!overloadsCompiled.Contains(iOverload))

0x5B66  0x20 0x92       PUSHGLOBALB 0x92
0x5B68  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B6A  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5B6C  0x32 0x77 0x00  JNZW 0x5BE3 (+119)

                        // if (IsSysCall(iOverload))                            symbols.hs:1894

0x5B6F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B71  0x2C 0xB2       CALLB 0xB2     // Symbols.IsSysCall
0x5B73  0x2E 0x0B       JZB 0x5B7E (+11)

                        // overloadsCompiled[iOverload] = true; // syscall : pretend it is already compiled

0x5B75  0x20 0x92       PUSHGLOBALB 0x92
0x5B77  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B79  0x45            PUSHI1
0x5B7A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1897

0x5B7C  0x2A 0x02       RETB 0x02

                        // overloadsCompiled[iOverload] = false;                symbols.hs:1900

0x5B7E  0x20 0x92       PUSHGLOBALB 0x92
0x5B80  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5B82  0x44            PUSHI0
0x5B83  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // <string,variant> methodBlock = Block.GetMethodBlock();

0x5B85  0x1A 0x0F       PUSHIB 0x0F
0x5B87  0x1A 0x14       PUSHIB 0x14
0x5B89  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5B8B  0x34 0x4E 0x01  CALLW 0x014E   // Block.GetMethodBlock
0x5B8E  0x5D            POPCOPYLOCALB00

                        // uint iCaller;                                        symbols.hs:1903

0x5B8F  0x44            PUSHI0

                        // if (methodBlock.Contains("iOverload"))               symbols.hs:1904

0x5B90  0x4E            PUSHLOCALB00
0x5B91  0x37 0x00 0x01  PUSHIW 0x0100
0x5B94  0x1A 0x09       PUSHIB 0x09
0x5B96  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5B98  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5B9A  0x2E 0x47       JZB 0x5BE1 (+71)

                        // string sCaller = methodBlock["iOverload"];           symbols.hs:1906

0x5B9C  0x24 0x02       SYSCALL0 0x02  // String.New
0x5B9E  0x4E            PUSHLOCALB00
0x5B9F  0x37 0x00 0x01  PUSHIW 0x0100
0x5BA2  0x1A 0x09       PUSHIB 0x09
0x5BA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5BA6  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5BA8  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (TryParseUInt(sCaller, ref iCaller))              symbols.hs:1907

0x5BAA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x5BAC  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x5BAE  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x5BB0  0x2E 0x2F       JZB 0x5BDF (+47)

                        // if (!fTouches.Contains(iCaller))                     symbols.hs:1909

0x5BB2  0x20 0x94       PUSHGLOBALB 0x94
0x5BB4  0x4F            PUSHLOCALB02
0x5BB5  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5BB7  0x2F 0x0F       JNZB 0x5BC6 (+15)

                        // <uint> empty;                                        symbols.hs:1911

0x5BB9  0x1A 0x04       PUSHIB 0x04
0x5BBB  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // fTouches[iCaller] = empty;                           symbols.hs:1912

0x5BBD  0x20 0x94       PUSHGLOBALB 0x94
0x5BBF  0x4F            PUSHLOCALB02
0x5BC0  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5BC2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1913

0x5BC4  0x28 0x02       DECSP 0x02

                        // <uint> touchesList = fTouches[iCaller];              symbols.hs:1914

0x5BC6  0x1A 0x04       PUSHIB 0x04
0x5BC8  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x5BCA  0x20 0x94       PUSHGLOBALB 0x94
0x5BCC  0x4F            PUSHLOCALB02
0x5BCD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5BCF  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // touchesList.Append(iOverload);                       symbols.hs:1915

0x5BD1  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0x5BD4  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // fTouches[iCaller] = touchesList;                     symbols.hs:1916

0x5BD6  0x20 0x94       PUSHGLOBALB 0x94
0x5BD8  0x4F            PUSHLOCALB02
0x5BD9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5BDB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1917

0x5BDD  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1918

0x5BDF  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1919

0x5BE1  0x28 0x04       DECSP 0x04

                        // }                                                    symbols.hs:1921

0x5BE3  0x2A 0x02       RETB 0x02


// /source/compiler/symbols.hs:372
// ####  Symbols.GlobalMemberExists(..)  ####                                   0x009C

0x5BE5  0x49            ENTER

                        // return gNames.Contains(name);                        symbols.hs:373

0x5BE6  0x20 0x40       PUSHGLOBALB 0x40
0x5BE8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5BEA  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x5BEC  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:296
// ####  Symbols.DefineExists(..)  ####                                         0x0095


                        // bool exists = false;                                 symbols.hs:297

0x5BEE  0x5F 0x01       ENTERB 0x01

                        // if (pdValues.Contains(name))                         symbols.hs:298

0x5BF0  0x20 0x88       PUSHGLOBALB 0x88
0x5BF2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5BF4  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5BF6  0x2E 0x04       JZB 0x5BFA (+4)

                        // exists = true;                                       symbols.hs:300

0x5BF8  0x45            PUSHI1
0x5BF9  0x4C            POPLOCALB00

                        // return exists;                                       symbols.hs:302

0x5BFA  0x4E            PUSHLOCALB00
0x5BFB  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:914
// ####  Symbols.IsSysCall(..)  ####                                            0x00B2

0x5BFD  0x49            ENTER

                        // return fSysCall.Contains(iOverload);                 symbols.hs:915

0x5BFE  0x20 0x5E       PUSHGLOBALB 0x5E
0x5C00  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5C02  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5C04  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:1600
// ####  Symbols.Import(..)  ####                                               0x00C8


                        // bool success = true;                                 symbols.hs:1601

0x5C06  0x5F 0x01       ENTERB 0x01

                        // bool success = true;                                 symbols.hs:1601

0x5C08  0x45            PUSHI1
0x5C09  0x4C            POPLOCALB00

                        // if (!File.Exists(jsonPath))                          symbols.hs:1604

0x5C0A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x5C0C  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0x5C0E  0x2F 0x07       JNZB 0x5C15 (+7)

                        // success = false;                                     symbols.hs:1606

0x5C10  0x44            PUSHI0
0x5C11  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:1607

0x5C12  0x33 0x23 0x06  JW 0x6235 (+1571)

                        // <string, variant> dict;                              symbols.hs:1609

0x5C15  0x1A 0x0F       PUSHIB 0x0F
0x5C17  0x1A 0x14       PUSHIB 0x14
0x5C19  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (!JSON.Read(jsonPath, ref dict))                  symbols.hs:1610

0x5C1B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x5C1D  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x5C1F  0x34 0x13 0x02  CALLW 0x0213   // JSON.Read
0x5C22  0x2F 0x09       JNZB 0x5C2B (+9)

                        // success = false;                                     symbols.hs:1612

0x5C24  0x44            PUSHI0
0x5C25  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:1613

0x5C26  0x28 0x02       DECSP 0x02
0x5C28  0x33 0x0D 0x06  JW 0x6235 (+1549)

                        // foreach (var kv in dict)                             symbols.hs:1615

0x5C2B  0x4F            PUSHLOCALB02
0x5C2C  0x1A 0x0F       PUSHIB 0x0F
0x5C2E  0x1A 0x0F       PUSHIB 0x0F
0x5C30  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5C32  0x44            PUSHI0
0x5C33  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x5C36  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5C38  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0x5C3A  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x5C3C  0x31 0xF5 0x05  JZW 0x6231 (+1525)

                        // switch (kv.key)                                      symbols.hs:1617

0x5C3F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5C41  0x24 0x22       SYSCALL0 0x22  // Pair.Key

                        // case "constants":                                    symbols.hs:1619

0x5C43  0x37 0xF9 0x0B  PUSHIW 0x0BF9
0x5C46  0x1A 0x09       PUSHIB 0x09
0x5C48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5C4A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5C4C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5C4E  0x2F 0x0F       JNZB 0x5C5D (+15)

                        // if (!onlyNamedTypes)                                 symbols.hs:1621

0x5C50  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5C52  0x2F 0x08       JNZB 0x5C5A (+8)

                        // cValues = kv.value;                                  symbols.hs:1623

0x5C54  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5C56  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5C58  0x59 0x8A       POPCOPYGLOBALB 0x8A

                        // }                                                    symbols.hs:1625

0x5C5A  0x33 0xD2 0x05  JW 0x622C (+1490)

                        // case "symbols": // #define symbols                   symbols.hs:1626

0x5C5D  0x37 0x02 0x0C  PUSHIW 0x0C02
0x5C60  0x1A 0x07       PUSHIB 0x07
0x5C62  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5C64  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5C66  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5C68  0x2F 0x0F       JNZB 0x5C77 (+15)

                        // if (!onlyNamedTypes)                                 symbols.hs:1628

0x5C6A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5C6C  0x2F 0x08       JNZB 0x5C74 (+8)

                        // pdValues = kv.value;                                 symbols.hs:1630

0x5C6E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5C70  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5C72  0x59 0x88       POPCOPYGLOBALB 0x88

                        // }                                                    symbols.hs:1632

0x5C74  0x33 0xB8 0x05  JW 0x622C (+1464)

                        // case "enums":                                        symbols.hs:1633

0x5C77  0x37 0x09 0x0C  PUSHIW 0x0C09
0x5C7A  0x1A 0x05       PUSHIB 0x05
0x5C7C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5C7E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5C80  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5C82  0x32 0x94 0x00  JNZW 0x5D16 (+148)

                        // <string, variant> edict = kv.value;                  symbols.hs:1635

0x5C85  0x1A 0x0F       PUSHIB 0x0F
0x5C87  0x1A 0x14       PUSHIB 0x14
0x5C89  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5C8B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5C8D  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5C8F  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var kv2 in edict)                           symbols.hs:1636

0x5C91  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5C93  0x1A 0x0F       PUSHIB 0x0F
0x5C95  0x1A 0x0F       PUSHIB 0x0F
0x5C97  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5C99  0x44            PUSHI0
0x5C9A  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x5C9D  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5C9F  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x5CA1  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x5CA3  0x2E 0x6C       JZB 0x5D0F (+108)

                        // string name = kv2.key;                               symbols.hs:1638

0x5CA5  0x24 0x02       SYSCALL0 0x02  // String.New
0x5CA7  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5CA9  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5CAB  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string, variant> values = kv2.value;                symbols.hs:1639

0x5CAD  0x1A 0x0F       PUSHIB 0x0F
0x5CAF  0x1A 0x14       PUSHIB 0x14
0x5CB1  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5CB3  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5CB5  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5CB7  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // <string,string> lmembers = values["members"];

0x5CB9  0x1A 0x0F       PUSHIB 0x0F
0x5CBB  0x1A 0x0F       PUSHIB 0x0F
0x5CBD  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5CBF  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x5CC1  0x37 0x0E 0x0C  PUSHIW 0x0C0E
0x5CC4  0x1A 0x07       PUSHIB 0x07
0x5CC6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5CC8  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5CCA  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // <string,uint> members;                               symbols.hs:1641

0x5CCC  0x1A 0x0F       PUSHIB 0x0F
0x5CCE  0x1A 0x04       PUSHIB 0x04
0x5CD0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var kv6 in lmembers)                        symbols.hs:1642

0x5CD2  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x5CD4  0x1A 0x0F       PUSHIB 0x0F
0x5CD6  0x1A 0x0F       PUSHIB 0x0F
0x5CD8  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5CDA  0x44            PUSHI0
0x5CDB  0x56 0x1C 0x20  PUSHLOCALBB 0x201C
0x5CDE  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5CE0  0x1B 0x20       POPLOCALB 0x20 (BP+32)
0x5CE2  0x1B 0x1E       POPLOCALB 0x1E (BP+30)
0x5CE4  0x2E 0x20       JZB 0x5D04 (+32)

                        // string l = kv6.value;                                symbols.hs:1644

0x5CE6  0x24 0x02       SYSCALL0 0x02  // String.New
0x5CE8  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5CEA  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5CEC  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // uint ui;                                             symbols.hs:1645

0x5CEE  0x44            PUSHI0

                        // if (Token.TryParseUInt(l, ref ui))                   symbols.hs:1646

0x5CEF  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x5CF1  0x21 0x24       PUSHSTACKADDRB 0x24 (BP+36)
0x5CF3  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x5CF5  0x2E 0x0B       JZB 0x5D00 (+11)

                        // members[kv6.key] = ui;                               symbols.hs:1648

0x5CF7  0x56 0x1A 0x1E  PUSHLOCALBB 0x1E1A
0x5CFA  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5CFC  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x5CFE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1650

0x5D00  0x28 0x04       DECSP 0x04
0x5D02  0x30 0xD9       JB 0x5CDB (-39)
0x5D04  0x28 0x06       DECSP 0x06

                        // AddEnum(name, members);                              symbols.hs:1651

0x5D06  0x56 0x14 0x1A  PUSHLOCALBB 0x1A14
0x5D09  0x2C 0xC0       CALLB 0xC0     // Symbols.AddEnum

                        // }                                                    symbols.hs:1652

0x5D0B  0x28 0x08       DECSP 0x08
0x5D0D  0x30 0x8D       JB 0x5C9A (-115)
0x5D0F  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1653

0x5D11  0x28 0x02       DECSP 0x02
0x5D13  0x33 0x19 0x05  JW 0x622C (+1305)

                        // case "flags":                                        symbols.hs:1654

0x5D16  0x37 0x15 0x0C  PUSHIW 0x0C15
0x5D19  0x1A 0x05       PUSHIB 0x05
0x5D1B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5D1D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5D1F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5D21  0x32 0x94 0x00  JNZW 0x5DB5 (+148)

                        // <string, variant> fdict = kv.value;                  symbols.hs:1656

0x5D24  0x1A 0x0F       PUSHIB 0x0F
0x5D26  0x1A 0x14       PUSHIB 0x14
0x5D28  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5D2A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5D2C  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5D2E  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var kv2 in fdict)                           symbols.hs:1657

0x5D30  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5D32  0x1A 0x0F       PUSHIB 0x0F
0x5D34  0x1A 0x0F       PUSHIB 0x0F
0x5D36  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5D38  0x44            PUSHI0
0x5D39  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x5D3C  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5D3E  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x5D40  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x5D42  0x2E 0x6C       JZB 0x5DAE (+108)

                        // string name = kv2.key;                               symbols.hs:1659

0x5D44  0x24 0x02       SYSCALL0 0x02  // String.New
0x5D46  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5D48  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5D4A  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string, variant> values = kv2.value;                symbols.hs:1660

0x5D4C  0x1A 0x0F       PUSHIB 0x0F
0x5D4E  0x1A 0x14       PUSHIB 0x14
0x5D50  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5D52  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5D54  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5D56  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // <string,string> lmembers = values["members"];

0x5D58  0x1A 0x0F       PUSHIB 0x0F
0x5D5A  0x1A 0x0F       PUSHIB 0x0F
0x5D5C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5D5E  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x5D60  0x37 0x0E 0x0C  PUSHIW 0x0C0E
0x5D63  0x1A 0x07       PUSHIB 0x07
0x5D65  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5D67  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5D69  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // <string,uint> members;                               symbols.hs:1662

0x5D6B  0x1A 0x0F       PUSHIB 0x0F
0x5D6D  0x1A 0x04       PUSHIB 0x04
0x5D6F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // foreach (var kv6 in lmembers)                        symbols.hs:1663

0x5D71  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0x5D73  0x1A 0x0F       PUSHIB 0x0F
0x5D75  0x1A 0x0F       PUSHIB 0x0F
0x5D77  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5D79  0x44            PUSHI0
0x5D7A  0x56 0x1C 0x20  PUSHLOCALBB 0x201C
0x5D7D  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5D7F  0x1B 0x20       POPLOCALB 0x20 (BP+32)
0x5D81  0x1B 0x1E       POPLOCALB 0x1E (BP+30)
0x5D83  0x2E 0x20       JZB 0x5DA3 (+32)

                        // string l = kv6.value;                                symbols.hs:1665

0x5D85  0x24 0x02       SYSCALL0 0x02  // String.New
0x5D87  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5D89  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5D8B  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // uint ui;                                             symbols.hs:1666

0x5D8D  0x44            PUSHI0

                        // if (Token.TryParseUInt(l, ref ui))                   symbols.hs:1667

0x5D8E  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0x5D90  0x21 0x24       PUSHSTACKADDRB 0x24 (BP+36)
0x5D92  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x5D94  0x2E 0x0B       JZB 0x5D9F (+11)

                        // members[kv6.key] = ui;                               symbols.hs:1669

0x5D96  0x56 0x1A 0x1E  PUSHLOCALBB 0x1E1A
0x5D99  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5D9B  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x5D9D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1671

0x5D9F  0x28 0x04       DECSP 0x04
0x5DA1  0x30 0xD9       JB 0x5D7A (-39)
0x5DA3  0x28 0x06       DECSP 0x06

                        // AddFlags(name, members);                             symbols.hs:1672

0x5DA5  0x56 0x14 0x1A  PUSHLOCALBB 0x1A14
0x5DA8  0x2C 0xC1       CALLB 0xC1     // Symbols.AddFlags

                        // }                                                    symbols.hs:1673

0x5DAA  0x28 0x08       DECSP 0x08
0x5DAC  0x30 0x8D       JB 0x5D39 (-115)
0x5DAE  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1674

0x5DB0  0x28 0x02       DECSP 0x02
0x5DB2  0x33 0x7A 0x04  JW 0x622C (+1146)

                        // case "globals":                                      symbols.hs:1675

0x5DB5  0x37 0x6F 0x01  PUSHIW 0x016F
0x5DB8  0x1A 0x07       PUSHIB 0x07
0x5DBA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5DBC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5DBE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5DC0  0x32 0x98 0x00  JNZW 0x5E58 (+152)

                        // if (!onlyNamedTypes)                                 symbols.hs:1677

0x5DC3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5DC5  0x32 0x67 0x04  JNZW 0x622C (+1127)

                        // <string, variant> gdict = kv.value;                  symbols.hs:1687

0x5DC8  0x1A 0x0F       PUSHIB 0x0F
0x5DCA  0x1A 0x14       PUSHIB 0x14
0x5DCC  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5DCE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5DD0  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5DD2  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var kv2 in gdict)                           symbols.hs:1688

0x5DD4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5DD6  0x1A 0x0F       PUSHIB 0x0F
0x5DD8  0x1A 0x0F       PUSHIB 0x0F
0x5DDA  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5DDC  0x44            PUSHI0
0x5DDD  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x5DE0  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5DE2  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x5DE4  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x5DE6  0x2E 0x6B       JZB 0x5E51 (+107)

                        // string name = kv2.key;                               symbols.hs:1690

0x5DE8  0x24 0x02       SYSCALL0 0x02  // String.New
0x5DEA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5DEC  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5DEE  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string, string> values = kv2.value;                 symbols.hs:1691

0x5DF0  0x1A 0x0F       PUSHIB 0x0F
0x5DF2  0x1A 0x0F       PUSHIB 0x0F
0x5DF4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5DF6  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5DF8  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5DFA  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // string typeString = values["type"];                  symbols.hs:1692

0x5DFC  0x24 0x02       SYSCALL0 0x02  // String.New
0x5DFE  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x5E00  0x37 0x13 0x01  PUSHIW 0x0113
0x5E03  0x1A 0x04       PUSHIB 0x04
0x5E05  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E07  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5E09  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // <string> blockPos;                                   symbols.hs:1693

0x5E0B  0x1A 0x0F       PUSHIB 0x0F
0x5E0D  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (values.Contains("line"))                         symbols.hs:1694

0x5E0F  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x5E11  0x37 0x89 0x06  PUSHIW 0x0689
0x5E14  0x1A 0x04       PUSHIB 0x04
0x5E16  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E18  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5E1A  0x2E 0x2C       JZB 0x5E46 (+44)

                        // blockPos.Append(values["pos"]);                      symbols.hs:1696

0x5E1C  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x5E1F  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x5E22  0x1A 0x03       PUSHIB 0x03
0x5E24  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E26  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5E28  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockPos.Append(values["line"]);                     symbols.hs:1697

0x5E2A  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x5E2D  0x37 0x89 0x06  PUSHIW 0x0689
0x5E30  0x1A 0x04       PUSHIB 0x04
0x5E32  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E34  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5E36  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockPos.Append(values["source"]);                   symbols.hs:1698

0x5E38  0x56 0x1A 0x16  PUSHLOCALBB 0x161A
0x5E3B  0x37 0x8D 0x06  PUSHIW 0x068D
0x5E3E  0x1A 0x06       PUSHIB 0x06
0x5E40  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E42  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5E44  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // AddGlobalMember(name, typeString, blockPos);

0x5E46  0x56 0x14 0x18  PUSHLOCALBB 0x1814
0x5E49  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x5E4B  0x2C 0xBD       CALLB 0xBD     // Symbols.AddGlobalMember

                        // }                                                    symbols.hs:1701

0x5E4D  0x28 0x08       DECSP 0x08
0x5E4F  0x30 0x8E       JB 0x5DDD (-114)
0x5E51  0x28 0x06       DECSP 0x06

                        // } // !onlyNamedTypes                                 symbols.hs:1702

0x5E53  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1703

0x5E55  0x33 0xD7 0x03  JW 0x622C (+983)

                        // case "delegates":                                    symbols.hs:1704

0x5E58  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0x5E5B  0x1A 0x09       PUSHIB 0x09
0x5E5D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5E5F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5E61  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5E63  0x32 0x65 0x01  JNZW 0x5FC8 (+357)

                        // <string, variant> fdict = kv.value;                  symbols.hs:1714

0x5E66  0x1A 0x0F       PUSHIB 0x0F
0x5E68  0x1A 0x14       PUSHIB 0x14
0x5E6A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5E6C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5E6E  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5E70  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var kv2 in fdict)                           symbols.hs:1715

0x5E72  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5E74  0x1A 0x0F       PUSHIB 0x0F
0x5E76  0x1A 0x0F       PUSHIB 0x0F
0x5E78  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5E7A  0x44            PUSHI0
0x5E7B  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x5E7E  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5E80  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x5E82  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x5E84  0x31 0x3D 0x01  JZW 0x5FC1 (+317)

                        // string name = kv2.key;                               symbols.hs:1717

0x5E87  0x24 0x02       SYSCALL0 0x02  // String.New
0x5E89  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5E8B  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5E8D  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string, variant> overloads = kv2.value;             symbols.hs:1718

0x5E8F  0x1A 0x0F       PUSHIB 0x0F
0x5E91  0x1A 0x14       PUSHIB 0x14
0x5E93  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5E95  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x5E97  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5E99  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // foreach (var kv3 in overloads)                       symbols.hs:1719

0x5E9B  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x5E9D  0x1A 0x0F       PUSHIB 0x0F
0x5E9F  0x1A 0x0F       PUSHIB 0x0F
0x5EA1  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5EA3  0x44            PUSHI0
0x5EA4  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x5EA7  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5EA9  0x1B 0x1C       POPLOCALB 0x1C (BP+28)
0x5EAB  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x5EAD  0x31 0x0D 0x01  JZW 0x5FBA (+269)

                        // if (Token.TryParseUInt(kv3.key, ref idNextOverload))

0x5EB0  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x5EB2  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5EB4  0x1A 0x76       PUSHIB 0x76
0x5EB6  0x47            PUSHGP
0x5EB7  0x00            ADD
0x5EB8  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x5EBA  0x2E 0x02       JZB 0x5EBC (+2)

                        // <string, variant> odict = kv3.value;                 symbols.hs:1724

0x5EBC  0x1A 0x0F       PUSHIB 0x0F
0x5EBE  0x1A 0x14       PUSHIB 0x14
0x5EC0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5EC2  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x5EC4  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5EC6  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // string returnType = "void";                          symbols.hs:1725

0x5EC8  0x24 0x02       SYSCALL0 0x02  // String.New
0x5ECA  0x37 0x09 0x01  PUSHIW 0x0109
0x5ECD  0x1A 0x04       PUSHIB 0x04
0x5ECF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5ED1  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (odict.Contains("returntype"))                    symbols.hs:1726

0x5ED3  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5ED5  0x37 0x0D 0x01  PUSHIW 0x010D
0x5ED8  0x1A 0x0A       PUSHIB 0x0A
0x5EDA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5EDC  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5EDE  0x2E 0x0F       JZB 0x5EED (+15)

                        // returnType = odict["returntype"];                    symbols.hs:1728

0x5EE0  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5EE2  0x37 0x0D 0x01  PUSHIW 0x010D
0x5EE5  0x1A 0x0A       PUSHIB 0x0A
0x5EE7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5EE9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5EEB  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // < <string> > arguments;                              symbols.hs:1730

0x5EED  0x1A 0x19       PUSHIB 0x19
0x5EEF  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (odict.Contains("arguments"))                     symbols.hs:1731

0x5EF1  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5EF3  0x1A 0x5E       PUSHIB 0x5E
0x5EF5  0x1A 0x09       PUSHIB 0x09
0x5EF7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5EF9  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x5EFB  0x31 0xB3 0x00  JZW 0x5FAE (+179)

                        // <string,string> adict = odict["arguments"];

0x5EFE  0x1A 0x0F       PUSHIB 0x0F
0x5F00  0x1A 0x0F       PUSHIB 0x0F
0x5F02  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5F04  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x5F06  0x1A 0x5E       PUSHIB 0x5E
0x5F08  0x1A 0x09       PUSHIB 0x09
0x5F0A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5F0C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x5F0E  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // uint argCount = adict.Count;                         symbols.hs:1734

0x5F10  0x44            PUSHI0
0x5F11  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x5F13  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x5F15  0x1B 0x26       POPLOCALB 0x26 (BP+38)

                        // for (uint ai = 0; ai < argCount; ai++)               symbols.hs:1735

0x5F17  0x44            PUSHI0
0x5F18  0x56 0x28 0x26  PUSHLOCALBB 0x2628
0x5F1B  0x08            LT
0x5F1C  0x31 0x8E 0x00  JZW 0x5FAA (+142)

                        // foreach (var kv4 in adict)                           symbols.hs:1737

0x5F1F  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0x5F21  0x1A 0x0F       PUSHIB 0x0F
0x5F23  0x1A 0x0F       PUSHIB 0x0F
0x5F25  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5F27  0x44            PUSHI0
0x5F28  0x56 0x2A 0x2E  PUSHLOCALBB 0x2E2A
0x5F2B  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5F2D  0x1B 0x2E       POPLOCALB 0x2E (BP+46)
0x5F2F  0x1B 0x2C       POPLOCALB 0x2C (BP+44)
0x5F31  0x2E 0x72       JZB 0x5FA3 (+114)

                        // string argName = kv4.key;                            symbols.hs:1740

0x5F33  0x24 0x02       SYSCALL0 0x02  // String.New
0x5F35  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x5F37  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x5F39  0x57 0x30       POPCOPYLOCALB 0x30 (BP+48)

                        // string argOrder = ai.ToString() + ":";               symbols.hs:1741

0x5F3B  0x24 0x02       SYSCALL0 0x02  // String.New
0x5F3D  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0x5F3F  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x5F42  0x1A 0x3A       PUSHIB 0x3A
0x5F44  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x5F46  0x24 0x03       SYSCALL0 0x03  // String.Append
0x5F48  0x57 0x32       POPCOPYLOCALB 0x32 (BP+50)

                        // if (argName.StartsWith(argOrder))                    symbols.hs:1742

0x5F4A  0x56 0x30 0x32  PUSHLOCALBB 0x3230
0x5F4D  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0x5F50  0x2E 0x4E       JZB 0x5F9E (+78)

                        // argName = argName.Substring(argOrder.Length);

0x5F52  0x56 0x30 0x32  PUSHLOCALBB 0x3230
0x5F55  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x5F57  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x5F59  0x57 0x30       POPCOPYLOCALB 0x30 (BP+48)

                        // <string> alist;                                      symbols.hs:1745

0x5F5B  0x1A 0x0F       PUSHIB 0x0F
0x5F5D  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // string rf;                                           symbols.hs:1746

0x5F5F  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string tn = kv4.value;                               symbols.hs:1747

0x5F61  0x24 0x02       SYSCALL0 0x02  // String.New
0x5F63  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x5F65  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5F67  0x57 0x38       POPCOPYLOCALB 0x38 (BP+56)

                        // if (tn.StartsWith("ref "))                           symbols.hs:1748

0x5F69  0x1C 0x38       PUSHLOCALB 0x38 (BP+56)
0x5F6B  0x37 0x23 0x0C  PUSHIW 0x0C23
0x5F6E  0x1A 0x04       PUSHIB 0x04
0x5F70  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5F72  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0x5F75  0x2E 0x13       JZB 0x5F88 (+19)

                        // rf = "ref";                                          symbols.hs:1750

0x5F77  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x5F7A  0x1A 0x03       PUSHIB 0x03
0x5F7C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5F7E  0x57 0x36       POPCOPYLOCALB 0x36 (BP+54)

                        // tn = tn.Substring(4);                                symbols.hs:1751

0x5F80  0x1C 0x38       PUSHLOCALB 0x38 (BP+56)
0x5F82  0x1A 0x04       PUSHIB 0x04
0x5F84  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x5F86  0x57 0x38       POPCOPYLOCALB 0x38 (BP+56)

                        // alist.Append(rf);                                    symbols.hs:1753

0x5F88  0x56 0x34 0x36  PUSHLOCALBB 0x3634
0x5F8B  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // alist.Append(tn);                                    symbols.hs:1754

0x5F8D  0x56 0x34 0x38  PUSHLOCALBB 0x3834
0x5F90  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // alist.Append(argName);                               symbols.hs:1755

0x5F92  0x56 0x34 0x30  PUSHLOCALBB 0x3034
0x5F95  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // arguments.Append(alist);                             symbols.hs:1756

0x5F97  0x56 0x22 0x34  PUSHLOCALBB 0x3422
0x5F9A  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1757

0x5F9C  0x28 0x06       DECSP 0x06

                        // } // kv4                                             symbols.hs:1758

0x5F9E  0x28 0x04       DECSP 0x04
0x5FA0  0x33 0x88 0xFF  JW 0x5F28 (-120)
0x5FA3  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1759

0x5FA5  0x22 0x28       INCLOCALB 0x28 (BP+40)
0x5FA7  0x33 0x71 0xFF  JW 0x5F18 (-143)
0x5FAA  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1760

0x5FAC  0x28 0x04       DECSP 0x04

                        // AddFunctionDelegate(name, arguments, returnType);

0x5FAE  0x56 0x14 0x22  PUSHLOCALBB 0x2214
0x5FB1  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0x5FB3  0x2C 0xC2       CALLB 0xC2     // Symbols.AddFunctionDelegate

                        // } // kv3                                             symbols.hs:1762

0x5FB5  0x28 0x06       DECSP 0x06
0x5FB7  0x33 0xED 0xFE  JW 0x5EA4 (-275)
0x5FBA  0x28 0x06       DECSP 0x06

                        // } // kv2                                             symbols.hs:1763

0x5FBC  0x28 0x04       DECSP 0x04
0x5FBE  0x33 0xBD 0xFE  JW 0x5E7B (-323)
0x5FC1  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1764

0x5FC3  0x28 0x02       DECSP 0x02
0x5FC5  0x33 0x67 0x02  JW 0x622C (+615)

                        // case "functions":                                    symbols.hs:1765

0x5FC8  0x37 0x27 0x0C  PUSHIW 0x0C27
0x5FCB  0x1A 0x09       PUSHIB 0x09
0x5FCD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x5FCF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x5FD1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x5FD3  0x32 0x22 0x02  JNZW 0x61F5 (+546)

                        // if (!onlyNamedTypes)                                 symbols.hs:1767

0x5FD6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x5FD8  0x32 0x54 0x02  JNZW 0x622C (+596)

                        // <string, variant> fdict = kv.value;                  symbols.hs:1780

0x5FDB  0x1A 0x0F       PUSHIB 0x0F
0x5FDD  0x1A 0x14       PUSHIB 0x14
0x5FDF  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x5FE1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x5FE3  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x5FE5  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var kv2 in fdict)                           symbols.hs:1781

0x5FE7  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x5FE9  0x1A 0x0F       PUSHIB 0x0F
0x5FEB  0x1A 0x0F       PUSHIB 0x0F
0x5FED  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x5FEF  0x44            PUSHI0
0x5FF0  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x5FF3  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x5FF5  0x1B 0x12       POPLOCALB 0x12 (BP+18)
0x5FF7  0x1B 0x10       POPLOCALB 0x10 (BP+16)
0x5FF9  0x31 0xF6 0x01  JZW 0x61EF (+502)

                        // string name = kv2.key;                               symbols.hs:1783

0x5FFC  0x24 0x02       SYSCALL0 0x02  // String.New
0x5FFE  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x6000  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x6002  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // <string, variant> overloads = kv2.value;             symbols.hs:1784

0x6004  0x1A 0x0F       PUSHIB 0x0F
0x6006  0x1A 0x14       PUSHIB 0x14
0x6008  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x600A  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x600C  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x600E  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // foreach (var kv3 in overloads)                       symbols.hs:1785

0x6010  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0x6012  0x1A 0x0F       PUSHIB 0x0F
0x6014  0x1A 0x0F       PUSHIB 0x0F
0x6016  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x6018  0x44            PUSHI0
0x6019  0x56 0x18 0x1C  PUSHLOCALBB 0x1C18
0x601C  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x601E  0x1B 0x1C       POPLOCALB 0x1C (BP+28)
0x6020  0x1B 0x1A       POPLOCALB 0x1A (BP+26)
0x6022  0x31 0xC6 0x01  JZW 0x61E8 (+454)

                        // if (!Token.TryParseUInt(kv3.key, ref iNextOverload))

0x6025  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x6027  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x6029  0x1A 0x6A       PUSHIB 0x6A
0x602B  0x47            PUSHGP
0x602C  0x00            ADD
0x602D  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x602F  0x2F 0x0B       JNZB 0x603A (+11)

                        // PrintLn("bad iNextOverload");                        symbols.hs:1789

0x6031  0x37 0x30 0x0C  PUSHIW 0x0C30
0x6034  0x1A 0x11       PUSHIB 0x11
0x6036  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6038  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // <string, variant> odict = kv3.value;                 symbols.hs:1792

0x603A  0x1A 0x0F       PUSHIB 0x0F
0x603C  0x1A 0x14       PUSHIB 0x14
0x603E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x6040  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x6042  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x6044  0x57 0x1E       POPCOPYLOCALB 0x1E (BP+30)

                        // string returnType = "void";                          symbols.hs:1793

0x6046  0x24 0x02       SYSCALL0 0x02  // String.New
0x6048  0x37 0x09 0x01  PUSHIW 0x0109
0x604B  0x1A 0x04       PUSHIB 0x04
0x604D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x604F  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (odict.Contains("returntype"))                    symbols.hs:1794

0x6051  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6053  0x37 0x0D 0x01  PUSHIW 0x010D
0x6056  0x1A 0x0A       PUSHIB 0x0A
0x6058  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x605A  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x605C  0x2E 0x0F       JZB 0x606B (+15)

                        // returnType = odict["returntype"];                    symbols.hs:1796

0x605E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6060  0x37 0x0D 0x01  PUSHIW 0x010D
0x6063  0x1A 0x0A       PUSHIB 0x0A
0x6065  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6067  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6069  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // <string> blockPos;                                   symbols.hs:1798

0x606B  0x1A 0x0F       PUSHIB 0x0F
0x606D  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (odict.Contains("line"))                          symbols.hs:1800

0x606F  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6071  0x37 0x89 0x06  PUSHIW 0x0689
0x6074  0x1A 0x04       PUSHIB 0x04
0x6076  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6078  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x607A  0x2E 0x40       JZB 0x60BA (+64)

                        // string ln  = odict["line"];                          symbols.hs:1802

0x607C  0x24 0x02       SYSCALL0 0x02  // String.New
0x607E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6080  0x37 0x89 0x06  PUSHIW 0x0689
0x6083  0x1A 0x04       PUSHIB 0x04
0x6085  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6087  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6089  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // string pos = odict["pos"];                           symbols.hs:1803

0x608B  0x24 0x02       SYSCALL0 0x02  // String.New
0x608D  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x608F  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x6092  0x1A 0x03       PUSHIB 0x03
0x6094  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6096  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6098  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // string src = odict["source"];                        symbols.hs:1804

0x609A  0x24 0x02       SYSCALL0 0x02  // String.New
0x609C  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x609E  0x37 0x8D 0x06  PUSHIW 0x068D
0x60A1  0x1A 0x06       PUSHIB 0x06
0x60A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x60A5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x60A7  0x57 0x28       POPCOPYLOCALB 0x28 (BP+40)

                        // blockPos.Append(pos);                                symbols.hs:1805

0x60A9  0x56 0x22 0x26  PUSHLOCALBB 0x2622
0x60AC  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockPos.Append(ln);                                 symbols.hs:1806

0x60AE  0x56 0x22 0x24  PUSHLOCALBB 0x2422
0x60B1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockPos.Append(src);                                symbols.hs:1807

0x60B3  0x56 0x22 0x28  PUSHLOCALBB 0x2822
0x60B6  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1808

0x60B8  0x28 0x06       DECSP 0x06

                        // byte iSysCall;                                       symbols.hs:1809

0x60BA  0x44            PUSHI0

                        // byte iSysCallOverload;                               symbols.hs:1810

0x60BB  0x44            PUSHI0

                        // bool isSysCall;                                      symbols.hs:1811

0x60BC  0x44            PUSHI0

                        // if (odict.Contains("syscall"))                       symbols.hs:1812

0x60BD  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x60BF  0x37 0x41 0x0C  PUSHIW 0x0C41
0x60C2  0x1A 0x07       PUSHIB 0x07
0x60C4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x60C6  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x60C8  0x2E 0x42       JZB 0x610A (+66)

                        // string sc = odict["syscall"];                        symbols.hs:1814

0x60CA  0x24 0x02       SYSCALL0 0x02  // String.New
0x60CC  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x60CE  0x37 0x41 0x0C  PUSHIW 0x0C41
0x60D1  0x1A 0x07       PUSHIB 0x07
0x60D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x60D5  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x60D7  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // string ov = odict["overload"];                       symbols.hs:1815

0x60D9  0x24 0x02       SYSCALL0 0x02  // String.New
0x60DB  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x60DD  0x1A 0x37       PUSHIB 0x37
0x60DF  0x1A 0x08       PUSHIB 0x08
0x60E1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x60E3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x60E5  0x57 0x2C       POPCOPYLOCALB 0x2C (BP+44)

                        // uint scui;                                           symbols.hs:1816

0x60E7  0x44            PUSHI0

                        // if (Token.TryParseUInt(sc, ref scui))                symbols.hs:1817

0x60E8  0x1C 0x2A       PUSHLOCALB 0x2A (BP+42)
0x60EA  0x21 0x2E       PUSHSTACKADDRB 0x2E (BP+46)
0x60EC  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x60EE  0x2E 0x08       JZB 0x60F6 (+8)

                        // iSysCall = byte(scui);                               symbols.hs:1819

0x60F0  0x1C 0x2E       PUSHLOCALB 0x2E (BP+46)
0x60F2  0x51 0x03       CAST 0x03
0x60F4  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // uint ovui;                                           symbols.hs:1821

0x60F6  0x44            PUSHI0

                        // if (Token.TryParseUInt(ov, ref ovui))                symbols.hs:1822

0x60F7  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x60F9  0x21 0x30       PUSHSTACKADDRB 0x30 (BP+48)
0x60FB  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x60FD  0x2E 0x08       JZB 0x6105 (+8)

                        // iSysCallOverload = byte(ovui);                       symbols.hs:1824

0x60FF  0x1C 0x30       PUSHLOCALB 0x30 (BP+48)
0x6101  0x51 0x03       CAST 0x03
0x6103  0x1B 0x26       POPLOCALB 0x26 (BP+38)

                        // isSysCall = true;                                    symbols.hs:1826

0x6105  0x45            PUSHI1
0x6106  0x1B 0x28       POPLOCALB 0x28 (BP+40)

                        // }                                                    symbols.hs:1827

0x6108  0x28 0x08       DECSP 0x08

                        // < <string> > arguments;                              symbols.hs:1828

0x610A  0x1A 0x19       PUSHIB 0x19
0x610C  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (odict.Contains("arguments"))                     symbols.hs:1829

0x610E  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6110  0x1A 0x5E       PUSHIB 0x5E
0x6112  0x1A 0x09       PUSHIB 0x09
0x6114  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6116  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x6118  0x31 0xB3 0x00  JZW 0x61CB (+179)

                        // <string,string> adict = odict["arguments"];

0x611B  0x1A 0x0F       PUSHIB 0x0F
0x611D  0x1A 0x0F       PUSHIB 0x0F
0x611F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x6121  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0x6123  0x1A 0x5E       PUSHIB 0x5E
0x6125  0x1A 0x09       PUSHIB 0x09
0x6127  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6129  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x612B  0x57 0x2C       POPCOPYLOCALB 0x2C (BP+44)

                        // uint argCount = adict.Count;                         symbols.hs:1832

0x612D  0x44            PUSHI0
0x612E  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x6130  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x6132  0x1B 0x2E       POPLOCALB 0x2E (BP+46)

                        // for (uint ai = 0; ai < argCount; ai++)               symbols.hs:1833

0x6134  0x44            PUSHI0
0x6135  0x56 0x30 0x2E  PUSHLOCALBB 0x2E30
0x6138  0x08            LT
0x6139  0x31 0x8E 0x00  JZW 0x61C7 (+142)

                        // foreach (var kv4 in adict)                           symbols.hs:1835

0x613C  0x1C 0x2C       PUSHLOCALB 0x2C (BP+44)
0x613E  0x1A 0x0F       PUSHIB 0x0F
0x6140  0x1A 0x0F       PUSHIB 0x0F
0x6142  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x6144  0x44            PUSHI0
0x6145  0x56 0x32 0x36  PUSHLOCALBB 0x3632
0x6148  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x614A  0x1B 0x36       POPLOCALB 0x36 (BP+54)
0x614C  0x1B 0x34       POPLOCALB 0x34 (BP+52)
0x614E  0x2E 0x72       JZB 0x61C0 (+114)

                        // string argName = kv4.key;                            symbols.hs:1838

0x6150  0x24 0x02       SYSCALL0 0x02  // String.New
0x6152  0x1C 0x34       PUSHLOCALB 0x34 (BP+52)
0x6154  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x6156  0x57 0x38       POPCOPYLOCALB 0x38 (BP+56)

                        // string argOrder = ai.ToString() + ":";               symbols.hs:1839

0x6158  0x24 0x02       SYSCALL0 0x02  // String.New
0x615A  0x1C 0x30       PUSHLOCALB 0x30 (BP+48)
0x615C  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x615F  0x1A 0x3A       PUSHIB 0x3A
0x6161  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6163  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6165  0x57 0x3A       POPCOPYLOCALB 0x3A (BP+58)

                        // if (argName.StartsWith(argOrder))                    symbols.hs:1840

0x6167  0x56 0x38 0x3A  PUSHLOCALBB 0x3A38
0x616A  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0x616D  0x2E 0x4E       JZB 0x61BB (+78)

                        // argName = argName.Substring(argOrder.Length);

0x616F  0x56 0x38 0x3A  PUSHLOCALBB 0x3A38
0x6172  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6174  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x6176  0x57 0x38       POPCOPYLOCALB 0x38 (BP+56)

                        // <string> alist;                                      symbols.hs:1843

0x6178  0x1A 0x0F       PUSHIB 0x0F
0x617A  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // string rf;                                           symbols.hs:1844

0x617C  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string tn = kv4.value;                               symbols.hs:1845

0x617E  0x24 0x02       SYSCALL0 0x02  // String.New
0x6180  0x1C 0x34       PUSHLOCALB 0x34 (BP+52)
0x6182  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x6184  0x57 0x40       POPCOPYLOCALB 0x40 (BP+64)

                        // if (tn.StartsWith("ref "))                           symbols.hs:1846

0x6186  0x1C 0x40       PUSHLOCALB 0x40 (BP+64)
0x6188  0x37 0x23 0x0C  PUSHIW 0x0C23
0x618B  0x1A 0x04       PUSHIB 0x04
0x618D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x618F  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0x6192  0x2E 0x13       JZB 0x61A5 (+19)

                        // rf = "ref";                                          symbols.hs:1848

0x6194  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x6197  0x1A 0x03       PUSHIB 0x03
0x6199  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x619B  0x57 0x3E       POPCOPYLOCALB 0x3E (BP+62)

                        // tn = tn.Substring(4);                                symbols.hs:1849

0x619D  0x1C 0x40       PUSHLOCALB 0x40 (BP+64)
0x619F  0x1A 0x04       PUSHIB 0x04
0x61A1  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x61A3  0x57 0x40       POPCOPYLOCALB 0x40 (BP+64)

                        // alist.Append(rf);                                    symbols.hs:1851

0x61A5  0x56 0x3C 0x3E  PUSHLOCALBB 0x3E3C
0x61A8  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // alist.Append(tn);                                    symbols.hs:1852

0x61AA  0x56 0x3C 0x40  PUSHLOCALBB 0x403C
0x61AD  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // alist.Append(argName);                               symbols.hs:1853

0x61AF  0x56 0x3C 0x38  PUSHLOCALBB 0x383C
0x61B2  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // arguments.Append(alist);                             symbols.hs:1854

0x61B4  0x56 0x2A 0x3C  PUSHLOCALBB 0x3C2A
0x61B7  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1855

0x61B9  0x28 0x06       DECSP 0x06

                        // } // kv4                                             symbols.hs:1856

0x61BB  0x28 0x04       DECSP 0x04
0x61BD  0x33 0x88 0xFF  JW 0x6145 (-120)
0x61C0  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1857

0x61C2  0x22 0x30       INCLOCALB 0x30 (BP+48)
0x61C4  0x33 0x71 0xFF  JW 0x6135 (-143)
0x61C7  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1858

0x61C9  0x28 0x04       DECSP 0x04

                        // uint iOverload = iNextOverload;                      symbols.hs:1859

0x61CB  0x44            PUSHI0
0x61CC  0x20 0x6A       PUSHGLOBALB 0x6A
0x61CE  0x1B 0x2C       POPLOCALB 0x2C (BP+44)

                        // AddFunction(name, arguments, returnType, blockPos);

0x61D0  0x56 0x14 0x2A  PUSHLOCALBB 0x2A14
0x61D3  0x56 0x20 0x22  PUSHLOCALBB 0x2220
0x61D6  0x2C 0xBE       CALLB 0xBE     // Symbols.AddFunction

                        // if (isSysCall)                                       symbols.hs:1861

0x61D8  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0x61DA  0x2E 0x09       JZB 0x61E3 (+9)

                        // SetSysCall(iOverload, iSysCall, iSysCallOverload);

0x61DC  0x56 0x2C 0x24  PUSHLOCALBB 0x242C
0x61DF  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0x61E1  0x2C 0xB5       CALLB 0xB5     // Symbols.SetSysCall

                        // } // kv3                                             symbols.hs:1865

0x61E3  0x28 0x10       DECSP 0x10
0x61E5  0x33 0x34 0xFE  JW 0x6019 (-460)
0x61E8  0x28 0x06       DECSP 0x06

                        // } // kv2                                             symbols.hs:1866

0x61EA  0x28 0x04       DECSP 0x04
0x61EC  0x33 0x04 0xFE  JW 0x5FF0 (-508)
0x61EF  0x28 0x06       DECSP 0x06

                        // } // !onlyNamedTypes                                 symbols.hs:1867

0x61F1  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1868

0x61F3  0x30 0x39       JB 0x622C (+57)

                        // case "units":                                        symbols.hs:1869

0x61F5  0x37 0x48 0x0C  PUSHIW 0x0C48
0x61F8  0x1A 0x05       PUSHIB 0x05
0x61FA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x61FC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x61FE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6200  0x2F 0x2C       JNZB 0x622C (+44)

                        // <string> ulist = kv.value;                           symbols.hs:1871

0x6202  0x1A 0x0F       PUSHIB 0x0F
0x6204  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x6206  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6208  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x620A  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var name in ulist)                          symbols.hs:1872

0x620C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x620E  0x44            PUSHI0
0x620F  0x44            PUSHI0
0x6210  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x6212  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6214  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x6216  0x05            EQ
0x6217  0x2F 0x11       JNZB 0x6228 (+17)
0x6219  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x621C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x621E  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // AddNameSpace(name);                                  symbols.hs:1874

0x6220  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x6222  0x2C 0x94       CALLB 0x94     // Symbols.AddNameSpace

                        // }                                                    symbols.hs:1875

0x6224  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x6226  0x30 0xEA       JB 0x6210 (-22)
0x6228  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:1876

0x622A  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1883

0x622C  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:1884

0x622E  0x33 0x05 0xFA  JW 0x5C33 (-1531)
0x6231  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:1885

0x6233  0x28 0x02       DECSP 0x02

                        // return success;                                      symbols.hs:1887

0x6235  0x4E            PUSHLOCALB00
0x6236  0x2B 0x06       RETRETB 0x06


// /source/compiler/symbols.hs:176
// ####  Symbols.GetFunctionName(..)  ####                                      0x008F

0x6238  0x49            ENTER

                        // string name;                                         symbols.hs:180

0x6239  0x24 0x02       SYSCALL0 0x02  // String.New

                        // foreach (var f in fIndex)                            symbols.hs:181

0x623B  0x20 0x4E       PUSHGLOBALB 0x4E
0x623D  0x1A 0x0F       PUSHIB 0x0F
0x623F  0x1A 0x0F       PUSHIB 0x0F
0x6241  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x6243  0x44            PUSHI0
0x6244  0x4F            PUSHLOCALB02
0x6245  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6247  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x6249  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x624B  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x624D  0x2E 0x53       JZB 0x62A0 (+83)

                        // uint index = f.value;                                symbols.hs:183

0x624F  0x44            PUSHI0
0x6250  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6252  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x6254  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // string functionName = f.key;                         symbols.hs:184

0x6256  0x24 0x02       SYSCALL0 0x02  // String.New
0x6258  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x625A  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x625C  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // <uint> overloads = fOverloads[index];                symbols.hs:185

0x625E  0x1A 0x04       PUSHIB 0x04
0x6260  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x6262  0x20 0x50       PUSHGLOBALB 0x50
0x6264  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x6266  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6268  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var overload in overloads)                  symbols.hs:186

0x626A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x626C  0x44            PUSHI0
0x626D  0x44            PUSHI0
0x626E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x6270  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6272  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x6274  0x05            EQ
0x6275  0x2F 0x1A       JNZB 0x628F (+26)
0x6277  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x627A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x627C  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (overload == oi)                                  symbols.hs:188

0x627E  0x56 0x10 0xFE  PUSHLOCALBB 0xFE10
0x6281  0x05            EQ
0x6282  0x2E 0x09       JZB 0x628B (+9)

                        // name = functionName;                                 symbols.hs:190

0x6284  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6286  0x5D            POPCOPYLOCALB00

                        // break;                                               symbols.hs:191

0x6287  0x28 0x06       DECSP 0x06
0x6289  0x30 0x08       JB 0x6291 (+8)

                        // }                                                    symbols.hs:193

0x628B  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x628D  0x30 0xE1       JB 0x626E (-31)
0x628F  0x28 0x06       DECSP 0x06

                        // if (name.Length > 0)                                 symbols.hs:194

0x6291  0x4E            PUSHLOCALB00
0x6292  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6294  0x44            PUSHI0
0x6295  0x07            GT
0x6296  0x2E 0x06       JZB 0x629C (+6)

                        // break;                                               symbols.hs:196

0x6298  0x28 0x0C       DECSP 0x0C
0x629A  0x30 0x08       JB 0x62A2 (+8)

                        // }                                                    symbols.hs:198

0x629C  0x28 0x06       DECSP 0x06
0x629E  0x30 0xA6       JB 0x6244 (-90)
0x62A0  0x28 0x06       DECSP 0x06

                        // return name;                                         symbols.hs:199

0x62A2  0x4E            PUSHLOCALB00
0x62A3  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:1989
// ####  Symbols.ExportTouchTree(..)  ####                                      0x00CD

0x62A5  0x49            ENTER

                        // string pad;                                          symbols.hs:1990

0x62A6  0x24 0x02       SYSCALL0 0x02  // String.New

                        // pad = pad.Pad(' ', indent);                          symbols.hs:1991

0x62A8  0x4E            PUSHLOCALB00
0x62A9  0x1A 0x20       PUSHIB 0x20
0x62AB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x62AD  0x34 0x97 0x01  CALLW 0x0197   // String.Pad
0x62B0  0x5D            POPCOPYLOCALB00

                        // string fromName = getMethodName(iFrom);              symbols.hs:1992

0x62B1  0x24 0x02       SYSCALL0 0x02  // String.New
0x62B3  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x62B5  0x2C 0xCC       CALLB 0xCC     // Symbols.getMethodName
0x62B7  0x5E            POPCOPYLOCALB02

                        // uint cSize = 0;                                      symbols.hs:1994

0x62B8  0x44            PUSHI0

                        // touchesDone.Append(iFrom);                           symbols.hs:1995

0x62B9  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x62BB  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x62BD  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // bool isLeaf = true;                                  symbols.hs:1996

0x62BF  0x44            PUSHI0
0x62C0  0x45            PUSHI1
0x62C1  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (fTouches.Contains(iFrom))                        symbols.hs:1997

0x62C3  0x20 0x94       PUSHGLOBALB 0x94
0x62C5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x62C7  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x62C9  0x2E 0x4C       JZB 0x6315 (+76)

                        // <uint> calls = fTouches[iFrom];                      symbols.hs:1999

0x62CB  0x1A 0x04       PUSHIB 0x04
0x62CD  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x62CF  0x20 0x94       PUSHGLOBALB 0x94
0x62D1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x62D3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x62D5  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // foreach (var t in calls)                             symbols.hs:2000

0x62D7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x62D9  0x44            PUSHI0
0x62DA  0x44            PUSHI0
0x62DB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x62DD  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x62DF  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x62E1  0x05            EQ
0x62E2  0x2F 0x2F       JNZB 0x6311 (+47)
0x62E4  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0x62E7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x62E9  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // uint iTo = t;                                        symbols.hs:2002

0x62EB  0x44            PUSHI0
0x62EC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x62EE  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (!touchesDone.Contains(iTo))                      symbols.hs:2003

0x62F0  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x62F2  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x62F4  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x62F6  0x2F 0x15       JNZB 0x630B (+21)

                        // cSize = cSize + ExportTouchTree(ref contentLines, iTo, indent+2, ref touchesDone);

0x62F8  0x56 0x04 0xF8  PUSHLOCALBB 0xF804
0x62FB  0x56 0x10 0xFC  PUSHLOCALBB 0xFC10
0x62FE  0x1A 0x02       PUSHIB 0x02
0x6300  0x00            ADD
0x6301  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6303  0x2C 0xCD       CALLB 0xCD     // Symbols.ExportTouchTree
0x6305  0x00            ADD
0x6306  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // isLeaf = false;                                      symbols.hs:2006

0x6308  0x44            PUSHI0
0x6309  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    symbols.hs:2008

0x630B  0x28 0x02       DECSP 0x02
0x630D  0x22 0x0E       INCLOCALB 0x0E (BP+14)
0x630F  0x30 0xCC       JB 0x62DB (-52)
0x6311  0x28 0x06       DECSP 0x06

                        // }                                                    symbols.hs:2009

0x6313  0x28 0x02       DECSP 0x02

                        // uint cSizeSelf;                                      symbols.hs:2010

0x6315  0x44            PUSHI0

                        // if (fCodeStream.Contains(iFrom))                     symbols.hs:2011

0x6316  0x20 0x64       PUSHGLOBALB 0x64
0x6318  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x631A  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x631C  0x2E 0x16       JZB 0x6332 (+22)

                        // <byte> codeStream = fCodeStream[iFrom];              symbols.hs:2013

0x631E  0x1A 0x03       PUSHIB 0x03
0x6320  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x6322  0x20 0x64       PUSHGLOBALB 0x64
0x6324  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x6326  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6328  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // cSizeSelf = codeStream.Length;                       symbols.hs:2014

0x632A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x632C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x632E  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    symbols.hs:2015

0x6330  0x28 0x02       DECSP 0x02

                        // cSize = cSize + cSizeSelf;                           symbols.hs:2016

0x6332  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x6335  0x00            ADD
0x6336  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // string content = pad + fromName;                     symbols.hs:2017

0x6338  0x24 0x02       SYSCALL0 0x02  // String.New
0x633A  0x4E            PUSHLOCALB00
0x633B  0x4F            PUSHLOCALB02
0x633C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x633E  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // content = content.Pad(' ', 60);                      symbols.hs:2018

0x6340  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6342  0x1A 0x20       PUSHIB 0x20
0x6344  0x1A 0x3C       PUSHIB 0x3C
0x6346  0x34 0x97 0x01  CALLW 0x0197   // String.Pad
0x6349  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string sSizeSelf = cSizeSelf.ToString();             symbols.hs:2019

0x634B  0x24 0x02       SYSCALL0 0x02  // String.New
0x634D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x634F  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x6352  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // sSizeSelf = sSizeSelf.LeftPad(' ', 6);               symbols.hs:2020

0x6354  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6356  0x1A 0x20       PUSHIB 0x20
0x6358  0x1A 0x06       PUSHIB 0x06
0x635A  0x34 0x98 0x01  CALLW 0x0198   // String.LeftPad
0x635D  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // string sSize = cSize.ToString();                     symbols.hs:2021

0x635F  0x24 0x02       SYSCALL0 0x02  // String.New
0x6361  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6363  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x6366  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // sSize = sSize.LeftPad(' ', 6);                       symbols.hs:2022

0x6368  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x636A  0x1A 0x20       PUSHIB 0x20
0x636C  0x1A 0x06       PUSHIB 0x06
0x636E  0x34 0x98 0x01  CALLW 0x0198   // String.LeftPad
0x6371  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // content = content + sSizeSelf + sSize;               symbols.hs:2023

0x6373  0x56 0x0A 0x0C  PUSHLOCALBB 0x0C0A
0x6376  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6378  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x637A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x637C  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (isLeaf)                                          symbols.hs:2024

0x637E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6380  0x2E 0x0F       JZB 0x638F (+15)

                        // content = content + " <-";                           symbols.hs:2026

0x6382  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6384  0x37 0x4D 0x0C  PUSHIW 0x0C4D
0x6387  0x1A 0x03       PUSHIB 0x03
0x6389  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x638B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x638D  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // contentLines.Insert(0, content);                     symbols.hs:2028

0x638F  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0x6391  0x44            PUSHI0
0x6392  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6394  0x24 0x12       SYSCALL0 0x12  // List.Insert

                        // return cSize;                                        symbols.hs:2029

0x6396  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6398  0x2B 0x18       RETRETB 0x18


// /source/compiler/symbols.hs:1155
// ####  Symbols.AddEnum(..)  ####                                              0x00C0

0x639A  0x49            ENTER

                        // <string, uint> values;                               symbols.hs:1157

0x639B  0x1A 0x0F       PUSHIB 0x0F
0x639D  0x1A 0x04       PUSHIB 0x04
0x639F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // eValues[identifier] = values;                        symbols.hs:1158

0x63A1  0x20 0x78       PUSHGLOBALB 0x78
0x63A3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x63A5  0x4E            PUSHLOCALB00
0x63A6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // uint iNext = eIndex.Count;                           symbols.hs:1159

0x63A8  0x44            PUSHI0
0x63A9  0x20 0x7A       PUSHGLOBALB 0x7A
0x63AB  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x63AD  0x4D            POPLOCALB02

                        // eIndex[identifier] = iNext;                          symbols.hs:1160

0x63AE  0x20 0x7A       PUSHGLOBALB 0x7A
0x63B0  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x63B2  0x4F            PUSHLOCALB02
0x63B3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // eMembers[iNext] = members;                           symbols.hs:1161

0x63B5  0x20 0x7C       PUSHGLOBALB 0x7C
0x63B7  0x4F            PUSHLOCALB02
0x63B8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x63BA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1162

0x63BC  0x2A 0x08       RETB 0x08


// /source/compiler/symbols.hs:1165
// ####  Symbols.AddFlags(..)  ####                                             0x00C1

0x63BE  0x49            ENTER

                        // <string, uint> values;                               symbols.hs:1167

0x63BF  0x1A 0x0F       PUSHIB 0x0F
0x63C1  0x1A 0x04       PUSHIB 0x04
0x63C3  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // flValues[identifier] = values;                       symbols.hs:1168

0x63C5  0x20 0x7E       PUSHGLOBALB 0x7E
0x63C7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x63C9  0x4E            PUSHLOCALB00
0x63CA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // uint iNext = flIndex.Count;                          symbols.hs:1169

0x63CC  0x44            PUSHI0
0x63CD  0x20 0x80       PUSHGLOBALB 0x80
0x63CF  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0x63D1  0x4D            POPLOCALB02

                        // flIndex[identifier] = iNext;                         symbols.hs:1170

0x63D2  0x20 0x80       PUSHGLOBALB 0x80
0x63D4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x63D6  0x4F            PUSHLOCALB02
0x63D7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // flMembers[iNext] = members;                          symbols.hs:1171

0x63D9  0x20 0x82       PUSHGLOBALB 0x82
0x63DB  0x4F            PUSHLOCALB02
0x63DC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x63DE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // <uint, string> membersReversed;                      symbols.hs:1172

0x63E0  0x1A 0x04       PUSHIB 0x04
0x63E2  0x1A 0x0F       PUSHIB 0x0F
0x63E4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // <uint> membersSorted;                                symbols.hs:1173

0x63E6  0x1A 0x04       PUSHIB 0x04
0x63E8  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // foreach (var kv in members)                          symbols.hs:1174

0x63EA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x63EC  0x1A 0x0F       PUSHIB 0x0F
0x63EE  0x1A 0x0F       PUSHIB 0x0F
0x63F0  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x63F2  0x44            PUSHI0
0x63F3  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x63F6  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x63F8  0x1B 0x0C       POPLOCALB 0x0C (BP+12)
0x63FA  0x1B 0x0A       POPLOCALB 0x0A (BP+10)
0x63FC  0x2E 0x52       JZB 0x644E (+82)

                        // uint   key = kv.value;                               symbols.hs:1176

0x63FE  0x44            PUSHI0
0x63FF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6401  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x6403  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // string value = kv.key;                               symbols.hs:1177

0x6405  0x24 0x02       SYSCALL0 0x02  // String.New
0x6407  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6409  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0x640B  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // membersReversed[key] = value;                        symbols.hs:1178

0x640D  0x56 0x04 0x0E  PUSHLOCALBB 0x0E04
0x6410  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x6412  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // uint slength = membersSorted.Length;                 symbols.hs:1179

0x6414  0x44            PUSHI0
0x6415  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6417  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6419  0x1B 0x12       POPLOCALB 0x12 (BP+18)

                        // bool inserted = false;                               symbols.hs:1181

0x641B  0x44            PUSHI0

                        // for (uint i=0; i < slength; i++)                     symbols.hs:1182

0x641C  0x44            PUSHI0
0x641D  0x56 0x16 0x12  PUSHLOCALBB 0x1216
0x6420  0x08            LT
0x6421  0x2E 0x1E       JZB 0x643F (+30)

                        // if (membersSorted[i] < key)                          symbols.hs:1184

0x6423  0x56 0x06 0x16  PUSHLOCALBB 0x1606
0x6426  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6428  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x642A  0x08            LT
0x642B  0x2E 0x10       JZB 0x643B (+16)

                        // membersSorted.Insert(i, key);                        symbols.hs:1186

0x642D  0x56 0x06 0x16  PUSHLOCALBB 0x1606
0x6430  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x6432  0x24 0x12       SYSCALL0 0x12  // List.Insert

                        // inserted = true;                                     symbols.hs:1187

0x6434  0x45            PUSHI1
0x6435  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // break;                                               symbols.hs:1188

0x6437  0x28 0x02       DECSP 0x02
0x6439  0x30 0x08       JB 0x6441 (+8)

                        // }                                                    symbols.hs:1190

0x643B  0x22 0x16       INCLOCALB 0x16 (BP+22)
0x643D  0x30 0xE0       JB 0x641D (-32)
0x643F  0x28 0x02       DECSP 0x02

                        // if (!inserted)                                       symbols.hs:1191

0x6441  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x6443  0x2F 0x07       JNZB 0x644A (+7)

                        // membersSorted.Append(key);                           symbols.hs:1193

0x6445  0x56 0x06 0x0E  PUSHLOCALBB 0x0E06
0x6448  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1195

0x644A  0x28 0x08       DECSP 0x08
0x644C  0x30 0xA7       JB 0x63F3 (-89)
0x644E  0x28 0x06       DECSP 0x06

                        // flMembersReversed[iNext] = membersReversed;

0x6450  0x20 0x84       PUSHGLOBALB 0x84
0x6452  0x4F            PUSHLOCALB02
0x6453  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6455  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // flMembersSorted[iNext] = membersSorted;              symbols.hs:1198

0x6457  0x20 0x86       PUSHGLOBALB 0x86
0x6459  0x4F            PUSHLOCALB02
0x645A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x645C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1199

0x645E  0x2A 0x0C       RETB 0x0C


// /source/compiler/symbols.hs:1007
// ####  Symbols.AddGlobalMember(..)  ####                                      0x00BD

0x6460  0x49            ENTER

                        // if (gNames.Contains(name))                           symbols.hs:1018

0x6461  0x20 0x40       PUSHGLOBALB 0x40
0x6463  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x6465  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x6467  0x2E 0x0D       JZB 0x6474 (+13)

                        // Parser.Error("duplicate global member definition");

0x6469  0x37 0x50 0x0C  PUSHIW 0x0C50
0x646C  0x1A 0x22       PUSHIB 0x22
0x646E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6470  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               symbols.hs:1021

0x6472  0x2A 0x06       RETB 0x06

                        // gNames.Append(name);                                 symbols.hs:1023

0x6474  0x20 0x40       PUSHGLOBALB 0x40
0x6476  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x6478  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // uint iGlobal = gNames.Length-1;                      symbols.hs:1024

0x647A  0x44            PUSHI0
0x647B  0x20 0x40       PUSHGLOBALB 0x40
0x647D  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x647F  0x45            PUSHI1
0x6480  0x01            SUB
0x6481  0x4C            POPLOCALB00

                        // gIndex[name] = iGlobal;                              symbols.hs:1025

0x6482  0x20 0x42       PUSHGLOBALB 0x42
0x6484  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x6486  0x4E            PUSHLOCALB00
0x6487  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // gTypes[iGlobal] = typeString;                        symbols.hs:1026

0x6489  0x20 0x44       PUSHGLOBALB 0x44
0x648B  0x4E            PUSHLOCALB00
0x648C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x648E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (blockPos.Length > 0) // has initialization code?

0x6490  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6492  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6494  0x44            PUSHI0
0x6495  0x07            GT
0x6496  0x2E 0x35       JZB 0x64CB (+53)

                        // long startPos;                                       symbols.hs:1029

0x6498  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // uint startLine;                                      symbols.hs:1030

0x649A  0x44            PUSHI0

                        // if (Token.TryParseLong(blockPos[0], ref startPos))

0x649B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x649D  0x44            PUSHI0
0x649E  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x64A0  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x64A2  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x64A4  0x2E 0x08       JZB 0x64AC (+8)

                        // gStartPos[iGlobal] = startPos; // location of method block '{'

0x64A6  0x20 0x46       PUSHGLOBALB 0x46
0x64A8  0x4E            PUSHLOCALB00
0x64A9  0x4F            PUSHLOCALB02
0x64AA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (Token.TryParseUInt(blockPos[1], ref startLine))

0x64AC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x64AE  0x45            PUSHI1
0x64AF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x64B1  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x64B3  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x64B5  0x2E 0x09       JZB 0x64BE (+9)

                        // gStartLine[iGlobal] = startLine; // location of method block '{'

0x64B7  0x20 0x48       PUSHGLOBALB 0x48
0x64B9  0x4E            PUSHLOCALB00
0x64BA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x64BC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // gSourcePath[iGlobal] = blockPos[2];                  symbols.hs:1039

0x64BE  0x20 0x4A       PUSHGLOBALB 0x4A
0x64C0  0x4E            PUSHLOCALB00
0x64C1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x64C3  0x1A 0x02       PUSHIB 0x02
0x64C5  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x64C7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1040

0x64C9  0x28 0x04       DECSP 0x04

                        // break;                                               symbols.hs:1041

0x64CB  0x28 0x02       DECSP 0x02
0x64CD  0x2A 0x06       RETB 0x06


// /source/compiler/symbols.hs:1203
// ####  Symbols.AddFunctionDelegate(..)  ####                                  0x00C2


                        // uint index = 0;                                      symbols.hs:1213

0x64CF  0x5F 0x01       ENTERB 0x01

                        // if (!GetFunctionDelegateIndex(name, ref index))

0x64D1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x64D3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x64D5  0x2C 0xBB       CALLB 0xBB     // Symbols.GetFunctionDelegateIndex
0x64D7  0x2F 0x16       JNZB 0x64ED (+22)

                        // fdNames.Append(name);                                symbols.hs:1216

0x64D9  0x20 0x6C       PUSHGLOBALB 0x6C
0x64DB  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x64DD  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // index = fdNames.Length-1;                            symbols.hs:1217

0x64DF  0x20 0x6C       PUSHGLOBALB 0x6C
0x64E1  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x64E3  0x45            PUSHI1
0x64E4  0x01            SUB
0x64E5  0x4C            POPLOCALB00

                        // fdIndex[name] = index;                               symbols.hs:1218

0x64E6  0x20 0x6E       PUSHGLOBALB 0x6E
0x64E8  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x64EA  0x4E            PUSHLOCALB00
0x64EB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // <uint> overloads;                                    symbols.hs:1220

0x64ED  0x1A 0x04       PUSHIB 0x04
0x64EF  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (fdOverloads.Contains(index))                     symbols.hs:1222

0x64F1  0x20 0x70       PUSHGLOBALB 0x70
0x64F3  0x4E            PUSHLOCALB00
0x64F4  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x64F6  0x2E 0x08       JZB 0x64FE (+8)

                        // overloads = fdOverloads[index];                      symbols.hs:1224

0x64F8  0x20 0x70       PUSHGLOBALB 0x70
0x64FA  0x4E            PUSHLOCALB00
0x64FB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x64FD  0x5E            POPCOPYLOCALB02

                        // foreach (var overload in overloads)                  symbols.hs:1229

0x64FE  0x4F            PUSHLOCALB02
0x64FF  0x44            PUSHI0
0x6500  0x44            PUSHI0
0x6501  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6503  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6505  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x6507  0x05            EQ
0x6508  0x2F 0x3F       JNZB 0x6547 (+63)
0x650A  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x650D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x650F  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (Types.ArgumentsEqual(fdArgumentNamesAndTypes[overload], arguments, false, false))

0x6511  0x20 0x74       PUSHGLOBALB 0x74
0x6513  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6515  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6517  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6519  0x44            PUSHI0
0x651A  0x44            PUSHI0
0x651B  0x2C 0xEF       CALLB 0xEF     // Types.ArgumentsEqual
0x651D  0x2E 0x26       JZB 0x6543 (+38)

                        // if (fdReturnTypes[overload] == returnType)           symbols.hs:1233

0x651F  0x20 0x72       PUSHGLOBALB 0x72
0x6521  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6523  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6525  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6527  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6529  0x2F 0x0D       JNZB 0x6536 (+13)

                        // Parser.Error("duplicate delegate definition");

0x652B  0x37 0x72 0x0C  PUSHIW 0x0C72
0x652E  0x1A 0x1D       PUSHIB 0x1D
0x6530  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6532  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    symbols.hs:1236

0x6534  0x30 0x0B       JB 0x653F (+11)

                        // Parser.Error("delegate definitions differ only by return type");

0x6536  0x37 0x8F 0x0C  PUSHIW 0x0C8F
0x6539  0x1A 0x2F       PUSHIB 0x2F
0x653B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x653D  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               symbols.hs:1241

0x653F  0x28 0x06       DECSP 0x06
0x6541  0x30 0x08       JB 0x6549 (+8)

                        // }                                                    symbols.hs:1243

0x6543  0x22 0x08       INCLOCALB 0x08 (BP+8)
0x6545  0x30 0xBC       JB 0x6501 (-68)
0x6547  0x28 0x06       DECSP 0x06

                        // overloads.Append(idNextOverload);                    symbols.hs:1244

0x6549  0x4F            PUSHLOCALB02
0x654A  0x20 0x76       PUSHGLOBALB 0x76
0x654C  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // fdArgumentNamesAndTypes[idNextOverload] = arguments;

0x654E  0x52 0x74 0x76  PUSHGLOBALBB 0x7674
0x6551  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6553  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fdReturnTypes[idNextOverload] = returnType;

0x6555  0x52 0x72 0x76  PUSHGLOBALBB 0x7672
0x6558  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x655A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fdOverloads[index] = overloads;                      symbols.hs:1248

0x655C  0x20 0x70       PUSHGLOBALB 0x70
0x655E  0x4E            PUSHLOCALB00
0x655F  0x4F            PUSHLOCALB02
0x6560  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // idNextOverload++;                                    symbols.hs:1249

0x6562  0x53 0x76       INCGLOBALB 0x76

                        // break;                                               symbols.hs:1250

0x6564  0x2A 0x0A       RETB 0x0A


// /source/compiler/symbols.hs:1046
// ####  Symbols.AddFunction(..)  ####                                          0x00BE


                        // uint index = 0;                                      symbols.hs:1062

0x6566  0x5F 0x01       ENTERB 0x01

                        // if (!GetFunctionIndex(name, ref index))              symbols.hs:1064

0x6568  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x656A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x656C  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x656E  0x2F 0x16       JNZB 0x6584 (+22)

                        // fNames.Append(name);                                 symbols.hs:1066

0x6570  0x20 0x4C       PUSHGLOBALB 0x4C
0x6572  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6574  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // index = fNames.Length-1;                             symbols.hs:1067

0x6576  0x20 0x4C       PUSHGLOBALB 0x4C
0x6578  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x657A  0x45            PUSHI1
0x657B  0x01            SUB
0x657C  0x4C            POPLOCALB00

                        // fIndex[name] = index;                                symbols.hs:1068

0x657D  0x20 0x4E       PUSHGLOBALB 0x4E
0x657F  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6581  0x4E            PUSHLOCALB00
0x6582  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // bool isMain = name.EndsWith(".main");                symbols.hs:1070

0x6584  0x44            PUSHI0
0x6585  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6587  0x37 0xBE 0x0C  PUSHIW 0x0CBE
0x658A  0x1A 0x05       PUSHIB 0x05
0x658C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x658E  0x25 0x07       SYSCALL1 0x07  // String.EndsWith
0x6590  0x4D            POPLOCALB02

                        // <uint> overloads;                                    symbols.hs:1072

0x6591  0x1A 0x04       PUSHIB 0x04
0x6593  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (fOverloads.Contains(index))                      symbols.hs:1074

0x6595  0x20 0x50       PUSHGLOBALB 0x50
0x6597  0x4E            PUSHLOCALB00
0x6598  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x659A  0x2E 0x09       JZB 0x65A3 (+9)

                        // overloads = fOverloads[index];                       symbols.hs:1076

0x659C  0x20 0x50       PUSHGLOBALB 0x50
0x659E  0x4E            PUSHLOCALB00
0x659F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x65A1  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // foreach (var overload in overloads)                  symbols.hs:1081

0x65A3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x65A5  0x44            PUSHI0
0x65A6  0x44            PUSHI0
0x65A7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x65A9  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x65AB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x65AD  0x05            EQ
0x65AE  0x2F 0x3F       JNZB 0x65ED (+63)
0x65B0  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x65B3  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x65B5  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (Types.ArgumentsEqual(fArgumentNamesAndTypes[overload], arguments, false, false))

0x65B7  0x20 0x54       PUSHGLOBALB 0x54
0x65B9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x65BB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x65BD  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x65BF  0x44            PUSHI0
0x65C0  0x44            PUSHI0
0x65C1  0x2C 0xEF       CALLB 0xEF     // Types.ArgumentsEqual
0x65C3  0x2E 0x26       JZB 0x65E9 (+38)

                        // if (fReturnTypes[overload] == returnType)            symbols.hs:1085

0x65C5  0x20 0x52       PUSHGLOBALB 0x52
0x65C7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x65C9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x65CB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x65CD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x65CF  0x2F 0x0D       JNZB 0x65DC (+13)

                        // Parser.ErrorAtCurrent("duplicate function definition");

0x65D1  0x37 0xC3 0x0C  PUSHIW 0x0CC3
0x65D4  0x1A 0x1D       PUSHIB 0x1D
0x65D6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x65D8  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    symbols.hs:1088

0x65DA  0x30 0x0B       JB 0x65E5 (+11)

                        // Parser.ErrorAtCurrent("function definitions differ only by return type");

0x65DC  0x37 0xE0 0x0C  PUSHIW 0x0CE0
0x65DF  0x1A 0x2F       PUSHIB 0x2F
0x65E1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x65E3  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               symbols.hs:1093

0x65E5  0x28 0x06       DECSP 0x06
0x65E7  0x30 0x08       JB 0x65EF (+8)

                        // }                                                    symbols.hs:1095

0x65E9  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0x65EB  0x30 0xBC       JB 0x65A7 (-68)
0x65ED  0x28 0x06       DECSP 0x06

                        // uint iCurrentOverload = 0;                           symbols.hs:1096

0x65EF  0x44            PUSHI0

                        // if (!isMain)                                         symbols.hs:1097

0x65F0  0x4F            PUSHLOCALB02
0x65F1  0x2F 0x0F       JNZB 0x6600 (+15)

                        // if (iNextOverload == 0)                              symbols.hs:1099

0x65F3  0x20 0x6A       PUSHGLOBALB 0x6A
0x65F5  0x2F 0x05       JNZB 0x65FA (+5)

                        // iNextOverload = 1;                                   symbols.hs:1101

0x65F7  0x45            PUSHI1
0x65F8  0x1F 0x6A       POPGLOBALB 0x6A

                        // iCurrentOverload = iNextOverload;                    symbols.hs:1103

0x65FA  0x20 0x6A       PUSHGLOBALB 0x6A
0x65FC  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // iNextOverload++;                                     symbols.hs:1104

0x65FE  0x53 0x6A       INCGLOBALB 0x6A

                        // overloads.Append(iCurrentOverload);                  symbols.hs:1107

0x6600  0x56 0x04 0x06  PUSHLOCALBB 0x0604
0x6603  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // fArgumentNamesAndTypes[iCurrentOverload] = arguments;

0x6605  0x20 0x54       PUSHGLOBALB 0x54
0x6607  0x56 0x06 0xFA  PUSHLOCALBB 0xFA06
0x660A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fReturnTypes[iCurrentOverload] = returnType;

0x660C  0x20 0x52       PUSHGLOBALB 0x52
0x660E  0x56 0x06 0xFC  PUSHLOCALBB 0xFC06
0x6611  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (blockPos.Length > 0) // not system               symbols.hs:1111

0x6613  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6615  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6617  0x44            PUSHI0
0x6618  0x07            GT
0x6619  0x2E 0x38       JZB 0x6651 (+56)

                        // long startPos;                                       symbols.hs:1113

0x661B  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // uint startLine;                                      symbols.hs:1114

0x661D  0x44            PUSHI0

                        // if (Token.TryParseLong(blockPos[0], ref startPos))

0x661E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6620  0x44            PUSHI0
0x6621  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6623  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x6625  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x6627  0x2E 0x09       JZB 0x6630 (+9)

                        // fStartPos[iCurrentOverload] = startPos; // location of method block '{'

0x6629  0x20 0x58       PUSHGLOBALB 0x58
0x662B  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x662E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (Token.TryParseUInt(blockPos[1], ref startLine))

0x6630  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6632  0x45            PUSHI1
0x6633  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6635  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x6637  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x6639  0x2E 0x09       JZB 0x6642 (+9)

                        // fStartLine[iCurrentOverload] = startLine; // location of method block '{'

0x663B  0x20 0x5A       PUSHGLOBALB 0x5A
0x663D  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x6640  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fSourcePath[iCurrentOverload] = blockPos[2];

0x6642  0x20 0x5C       PUSHGLOBALB 0x5C
0x6644  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0x6647  0x1A 0x02       PUSHIB 0x02
0x6649  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x664B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1124

0x664D  0x28 0x04       DECSP 0x04
0x664F  0x30 0x53       JB 0x66A2 (+83)

                        // byte iSysCall;                                       symbols.hs:1127

0x6651  0x44            PUSHI0

                        // if (!SysCalls.TryParseSysCall(name, ref iSysCall))

0x6652  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6654  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x6656  0x2C 0x89       CALLB 0x89     // SysCalls.TryParseSysCall
0x6658  0x2F 0x19       JNZB 0x6671 (+25)

                        // Parser.Error("undefined 'system' method '" + name + "'");

0x665A  0x37 0x0F 0x0D  PUSHIW 0x0D0F
0x665D  0x1A 0x1B       PUSHIB 0x1B
0x665F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6661  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6663  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6665  0x1A 0x27       PUSHIB 0x27
0x6667  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6669  0x24 0x03       SYSCALL0 0x03  // String.Append
0x666B  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               symbols.hs:1131

0x666D  0x28 0x04       DECSP 0x04
0x666F  0x2A 0x0E       RETB 0x0E

                        // if (!fSysCallCount.Contains(name))                   symbols.hs:1134

0x6671  0x20 0x62       PUSHGLOBALB 0x62
0x6673  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6675  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x6677  0x2F 0x09       JNZB 0x6680 (+9)

                        // fSysCallCount[name] = 0;                             symbols.hs:1136

0x6679  0x20 0x62       PUSHGLOBALB 0x62
0x667B  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x667D  0x44            PUSHI0
0x667E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // byte iSysCallOverload = fSysCallCount[name];

0x6680  0x44            PUSHI0
0x6681  0x20 0x62       PUSHGLOBALB 0x62
0x6683  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x6685  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6687  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // fSysCallCount[name] = iSysCallOverload+1;            symbols.hs:1139

0x6689  0x20 0x62       PUSHGLOBALB 0x62
0x668B  0x56 0xF8 0x0A  PUSHLOCALBB 0x0AF8
0x668E  0x45            PUSHI1
0x668F  0x00            ADD
0x6690  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fSysCall[iCurrentOverload] = iSysCall;               symbols.hs:1140

0x6692  0x20 0x5E       PUSHGLOBALB 0x5E
0x6694  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x6697  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fSysCallOverload[iCurrentOverload] = iSysCallOverload;

0x6699  0x20 0x60       PUSHGLOBALB 0x60
0x669B  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0x669E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1142

0x66A0  0x28 0x04       DECSP 0x04

                        // fOverloads[index] = overloads;                       symbols.hs:1143

0x66A2  0x20 0x50       PUSHGLOBALB 0x50
0x66A4  0x4E            PUSHLOCALB00
0x66A5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x66A7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // break;                                               symbols.hs:1145

0x66A9  0x28 0x02       DECSP 0x02
0x66AB  0x2A 0x0E       RETB 0x0E


// /source/compiler/symbols.hs:926
// ####  Symbols.SetSysCall(..)  ####                                           0x00B5

0x66AD  0x49            ENTER

                        // fSysCall[iOverload] = iSysCall;                      symbols.hs:927

0x66AE  0x20 0x5E       PUSHGLOBALB 0x5E
0x66B0  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x66B3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // fSysCallOverload[iOverload] = iSysCallOverload;

0x66B5  0x20 0x60       PUSHGLOBALB 0x60
0x66B7  0x56 0xFA 0xFE  PUSHLOCALBB 0xFEFA
0x66BA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:929

0x66BC  0x2A 0x06       RETB 0x06


// /source/compiler/symbols.hs:288
// ####  Symbols.AddNameSpace(..)  ####                                         0x0094

0x66BE  0x49            ENTER

                        // if (!nameSpaces.Contains(name))                      symbols.hs:289

0x66BF  0x20 0x8C       PUSHGLOBALB 0x8C
0x66C1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x66C3  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x66C5  0x2F 0x08       JNZB 0x66CD (+8)

                        // nameSpaces.Append(name);                             symbols.hs:291

0x66C7  0x20 0x8C       PUSHGLOBALB 0x8C
0x66C9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x66CB  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:293

0x66CD  0x2A 0x02       RETB 0x02


// /source/compiler/symbols.hs:1966
// ####  Symbols.getMethodName(..)  ####                                        0x00CC

0x66CF  0x49            ENTER

                        // string name;                                         symbols.hs:1967

0x66D0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // foreach (var f in fIndex)                            symbols.hs:1968

0x66D2  0x20 0x4E       PUSHGLOBALB 0x4E
0x66D4  0x1A 0x0F       PUSHIB 0x0F
0x66D6  0x1A 0x0F       PUSHIB 0x0F
0x66D8  0x24 0x20       SYSCALL0 0x20  // Pair.New
0x66DA  0x44            PUSHI0
0x66DB  0x4F            PUSHLOCALB02
0x66DC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x66DE  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0x66E0  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0x66E2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x66E4  0x2E 0x55       JZB 0x6739 (+85)

                        // <string, variant> fentry;                            symbols.hs:1970

0x66E6  0x1A 0x0F       PUSHIB 0x0F
0x66E8  0x1A 0x14       PUSHIB 0x14
0x66EA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // uint index = f.value;                                symbols.hs:1971

0x66EC  0x44            PUSHI0
0x66ED  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x66EF  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0x66F1  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // <uint> overloads = fOverloads[index];                symbols.hs:1972

0x66F3  0x1A 0x04       PUSHIB 0x04
0x66F5  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x66F7  0x20 0x50       PUSHGLOBALB 0x50
0x66F9  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x66FB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x66FD  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var overload in overloads)                  symbols.hs:1973

0x66FF  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6701  0x44            PUSHI0
0x6702  0x44            PUSHI0
0x6703  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x6705  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6707  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x6709  0x05            EQ
0x670A  0x2F 0x1E       JNZB 0x6728 (+30)
0x670C  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x670F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6711  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (iOverload == overload)                           symbols.hs:1975

0x6713  0x56 0xFE 0x10  PUSHLOCALBB 0x10FE
0x6716  0x05            EQ
0x6717  0x2E 0x0D       JZB 0x6724 (+13)

                        // name = fNames[index];                                symbols.hs:1977

0x6719  0x20 0x4C       PUSHGLOBALB 0x4C
0x671B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x671D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x671F  0x5D            POPCOPYLOCALB00

                        // break;                                               symbols.hs:1978

0x6720  0x28 0x06       DECSP 0x06
0x6722  0x30 0x08       JB 0x672A (+8)

                        // }                                                    symbols.hs:1980

0x6724  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x6726  0x30 0xDD       JB 0x6703 (-35)
0x6728  0x28 0x06       DECSP 0x06

                        // if (name.Length > 0)                                 symbols.hs:1981

0x672A  0x4E            PUSHLOCALB00
0x672B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x672D  0x44            PUSHI0
0x672E  0x07            GT
0x672F  0x2E 0x06       JZB 0x6735 (+6)

                        // break;                                               symbols.hs:1983

0x6731  0x28 0x0C       DECSP 0x0C
0x6733  0x30 0x08       JB 0x673B (+8)

                        // }                                                    symbols.hs:1985

0x6735  0x28 0x06       DECSP 0x06
0x6737  0x30 0xA4       JB 0x66DB (-92)
0x6739  0x28 0x06       DECSP 0x06

                        // return name;                                         symbols.hs:1986

0x673B  0x4E            PUSHLOCALB00
0x673C  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:970
// ####  Symbols.GetFunctionDelegateIndex(..)  ####                             0x00BB


                        // bool found = false;                                  symbols.hs:972

0x673E  0x5F 0x01       ENTERB 0x01

                        // if (fdNames.Contains(name))                          symbols.hs:973

0x6740  0x20 0x6C       PUSHGLOBALB 0x6C
0x6742  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6744  0x24 0x18       SYSCALL0 0x18  // List.Contains
0x6746  0x2E 0x2D       JZB 0x6773 (+45)

                        // uint length = fdNames.Length;                        symbols.hs:975

0x6748  0x44            PUSHI0
0x6749  0x20 0x6C       PUSHGLOBALB 0x6C
0x674B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x674D  0x4D            POPLOCALB02

                        // for (uint i=0; i < length; i++)                      symbols.hs:976

0x674E  0x44            PUSHI0
0x674F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6751  0x4F            PUSHLOCALB02
0x6752  0x08            LT
0x6753  0x2E 0x1C       JZB 0x676F (+28)

                        // if (name == fdNames[i])                              symbols.hs:978

0x6755  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6757  0x20 0x6C       PUSHGLOBALB 0x6C
0x6759  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x675B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x675D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x675F  0x2F 0x0C       JNZB 0x676B (+12)

                        // index = i;                                           symbols.hs:980

0x6761  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6763  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // found = true;                                        symbols.hs:981

0x6765  0x45            PUSHI1
0x6766  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:982

0x6767  0x28 0x02       DECSP 0x02
0x6769  0x30 0x08       JB 0x6771 (+8)

                        // }                                                    symbols.hs:984

0x676B  0x22 0x04       INCLOCALB 0x04 (BP+4)
0x676D  0x30 0xE2       JB 0x674F (-30)
0x676F  0x28 0x02       DECSP 0x02

                        // }                                                    symbols.hs:985

0x6771  0x28 0x02       DECSP 0x02

                        // if (!found && !name.Contains('.'))                   symbols.hs:986

0x6773  0x4E            PUSHLOCALB00
0x6774  0x41            BOOLNOT
0x6775  0x27 0x00       DUP 0x00
0x6777  0x2E 0x0B       JZB 0x6782 (+11)
0x6779  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x677B  0x1A 0x2E       PUSHIB 0x2E
0x677D  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x6780  0x41            BOOLNOT
0x6781  0x0C            BOOLAND
0x6782  0x2E 0x3A       JZB 0x67BC (+58)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:988

0x6784  0x20 0x8C       PUSHGLOBALB 0x8C
0x6786  0x44            PUSHI0
0x6787  0x44            PUSHI0
0x6788  0x4F            PUSHLOCALB02
0x6789  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x678B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x678D  0x05            EQ
0x678E  0x2F 0x2C       JNZB 0x67BA (+44)
0x6790  0x4F            PUSHLOCALB02
0x6791  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6793  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6795  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string candidate = nameSpace + "." + name;           symbols.hs:990

0x6797  0x24 0x02       SYSCALL0 0x02  // String.New
0x6799  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x679B  0x1A 0x2E       PUSHIB 0x2E
0x679D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x679F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x67A1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x67A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x67A5  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (GetFunctionDelegateIndex(candidate, ref index))

0x67A7  0x56 0x08 0xFE  PUSHLOCALBB 0xFE08
0x67AA  0x2C 0xBB       CALLB 0xBB     // Symbols.GetFunctionDelegateIndex
0x67AC  0x2E 0x08       JZB 0x67B4 (+8)

                        // found = true;                                        symbols.hs:993

0x67AE  0x45            PUSHI1
0x67AF  0x4C            POPLOCALB00

                        // break;                                               symbols.hs:994

0x67B0  0x28 0x08       DECSP 0x08
0x67B2  0x30 0x0A       JB 0x67BC (+10)

                        // }                                                    symbols.hs:996

0x67B4  0x28 0x02       DECSP 0x02
0x67B6  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x67B8  0x30 0xD0       JB 0x6788 (-48)
0x67BA  0x28 0x06       DECSP 0x06

                        // return found;                                        symbols.hs:998

0x67BC  0x4E            PUSHLOCALB00
0x67BD  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/scanner.hs:32
// ####  Scanner.New(..)  ####                                                  0x005B

0x67BF  0x49            ENTER

                        // sourceLines.Clear();                                 scanner.hs:33

0x67C0  0x20 0x12       PUSHGLOBALB 0x12
0x67C2  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // Token.Initialize();                                  scanner.hs:34

0x67C4  0x2C 0x4A       CALLB 0x4A     // Token.Initialize

                        // }                                                    scanner.hs:35

0x67C6  0x4A            RET0


// /source/compiler/tokens/scanner.hs:104
// ####  Scanner.Reset(..)  ####                                                0x005E

0x67C7  0x49            ENTER

                        // long pos;                                            scanner.hs:107

0x67C8  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(startToken["pos"], ref pos))

0x67CA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x67CC  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x67CF  0x1A 0x03       PUSHIB 0x03
0x67D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x67D3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x67D5  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x67D7  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x67D9  0x2F 0x1E       JNZB 0x67F7 (+30)

                        // Parser.Error("invalid pos: '" + startToken["pos"] + "'");

0x67DB  0x37 0x2A 0x0D  PUSHIW 0x0D2A
0x67DE  0x1A 0x0E       PUSHIB 0x0E
0x67E0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x67E2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x67E4  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0x67E7  0x1A 0x03       PUSHIB 0x03
0x67E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x67EB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x67ED  0x24 0x03       SYSCALL0 0x03  // String.Append
0x67EF  0x1A 0x27       PUSHIB 0x27
0x67F1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x67F3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x67F5  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // uint ln;                                             scanner.hs:112

0x67F7  0x44            PUSHI0

                        // if (!Token.TryParseUInt(startToken["line"], ref ln))

0x67F8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x67FA  0x37 0x89 0x06  PUSHIW 0x0689
0x67FD  0x1A 0x04       PUSHIB 0x04
0x67FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6801  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6803  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x6805  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x6807  0x2F 0x1E       JNZB 0x6825 (+30)

                        // Parser.Error("invalid line: '" + startToken["line"] + "'");

0x6809  0x37 0x38 0x0D  PUSHIW 0x0D38
0x680C  0x1A 0x0F       PUSHIB 0x0F
0x680E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6810  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6812  0x37 0x89 0x06  PUSHIW 0x0689
0x6815  0x1A 0x04       PUSHIB 0x04
0x6817  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6819  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x681B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x681D  0x1A 0x27       PUSHIB 0x27
0x681F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6821  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6823  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // Scanner.Reset(pos, ln, startToken["source"]);

0x6825  0x4E            PUSHLOCALB00
0x6826  0x4F            PUSHLOCALB02
0x6827  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6829  0x37 0x8D 0x06  PUSHIW 0x068D
0x682C  0x1A 0x06       PUSHIB 0x06
0x682E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6830  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x6832  0x2C 0x5D       CALLB 0x5D     // Scanner.Reset

                        // break;                                               scanner.hs:118

0x6834  0x28 0x04       DECSP 0x04
0x6836  0x2A 0x02       RETB 0x02


// /source/compiler/tokens/scanner.hs:641
// ####  Scanner.Peek(..)  ####                                                 0x006D

0x6838  0x49            ENTER

                        // if (!isPeekedToken)                                  scanner.hs:642

0x6839  0x20 0x2A       PUSHGLOBALB 0x2A
0x683B  0x2F 0x09       JNZB 0x6844 (+9)

                        // peekedToken = Next();                                scanner.hs:644

0x683D  0x2C 0x6C       CALLB 0x6C     // Scanner.Next
0x683F  0x59 0x28       POPCOPYGLOBALB 0x28

                        // isPeekedToken = true;                                scanner.hs:645

0x6841  0x45            PUSHI1
0x6842  0x1F 0x2A       POPGLOBALB 0x2A

                        // return peekedToken;                                  scanner.hs:647

0x6844  0x20 0x28       PUSHGLOBALB 0x28
0x6846  0x4A            RET0


// /source/compiler/tokens/scanner.hs:505
// ####  Scanner.Next(..)  ####                                                 0x006C

0x6847  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Undefined, "", currentLine, currentPos, currentSourcePath);

0x6848  0x1A 0x0F       PUSHIB 0x0F
0x684A  0x1A 0x0F       PUSHIB 0x0F
0x684C  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x684E  0x44            PUSHI0
0x684F  0x24 0x02       SYSCALL0 0x02  // String.New
0x6851  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6854  0x20 0x1E       PUSHGLOBALB 0x1E
0x6856  0x2C 0x59       CALLB 0x59     // Token.New
0x6858  0x5D            POPCOPYLOCALB00

                        // if (isPeekedToken)                                   scanner.hs:509

0x6859  0x20 0x2A       PUSHGLOBALB 0x2A
0x685B  0x2E 0x0B       JZB 0x6866 (+11)

                        // token = peekedToken;                                 scanner.hs:511

0x685D  0x20 0x28       PUSHGLOBALB 0x28
0x685F  0x5D            POPCOPYLOCALB00

                        // isPeekedToken = false;                               scanner.hs:512

0x6860  0x44            PUSHI0
0x6861  0x1F 0x2A       POPGLOBALB 0x2A

                        // break;                                               scanner.hs:513

0x6863  0x33 0x49 0x02  JW 0x6AAC (+585)

                        // if (isAtEnd())                                       scanner.hs:515

0x6866  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6868  0x2E 0x11       JZB 0x6879 (+17)

                        // token = Token.New(HopperToken.EOF, "", currentLine, currentPos, currentSourcePath);

0x686A  0x1A 0x2D       PUSHIB 0x2D
0x686C  0x24 0x02       SYSCALL0 0x02  // String.New
0x686E  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6871  0x20 0x1E       PUSHGLOBALB 0x1E
0x6873  0x2C 0x59       CALLB 0x59     // Token.New
0x6875  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:518

0x6876  0x33 0x36 0x02  JW 0x6AAC (+566)

                        // skipWhitespace();                                    scanner.hs:522

0x6879  0x2C 0x67       CALLB 0x67     // Scanner.skipWhitespace

                        // char c = advance();                                  scanner.hs:523

0x687B  0x44            PUSHI0
0x687C  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x687E  0x4D            POPLOCALB02

                        // if (c.IsDigit())                                     scanner.hs:524

0x687F  0x4F            PUSHLOCALB02
0x6880  0x34 0x60 0x01  CALLW 0x0160   // Char.IsDigit
0x6883  0x2E 0x0B       JZB 0x688E (+11)

                        // token = scanNumber(c);                               scanner.hs:526

0x6885  0x4F            PUSHLOCALB02
0x6886  0x2C 0x6A       CALLB 0x6A     // Scanner.scanNumber
0x6888  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:527

0x6889  0x28 0x02       DECSP 0x02
0x688B  0x33 0x21 0x02  JW 0x6AAC (+545)

                        // if (c.IsLetter() || (c == '#'))                      scanner.hs:529

0x688E  0x4F            PUSHLOCALB02
0x688F  0x34 0x65 0x01  CALLW 0x0165   // Char.IsLetter
0x6892  0x27 0x00       DUP 0x00
0x6894  0x2F 0x07       JNZB 0x689B (+7)
0x6896  0x4F            PUSHLOCALB02
0x6897  0x1A 0x23       PUSHIB 0x23
0x6899  0x05            EQ
0x689A  0x0B            BOOLOR
0x689B  0x2E 0x0B       JZB 0x68A6 (+11)

                        // token = scanIdentifier(c);                           scanner.hs:531

0x689D  0x4F            PUSHLOCALB02
0x689E  0x2C 0x6B       CALLB 0x6B     // Scanner.scanIdentifier
0x68A0  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:532

0x68A1  0x28 0x02       DECSP 0x02
0x68A3  0x33 0x09 0x02  JW 0x6AAC (+521)

                        // HopperToken htoken = HopperToken.Undefined;

0x68A6  0x44            PUSHI0
0x68A7  0x44            PUSHI0
0x68A8  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // switch (c)                                           scanner.hs:535

0x68AA  0x4F            PUSHLOCALB02

                        // case '(': { htoken = HopperToken.LParen; }           scanner.hs:537

0x68AB  0x1A 0x28       PUSHIB 0x28
0x68AD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68AF  0x05            EQ
0x68B0  0x2E 0x09       JZB 0x68B9 (+9)
0x68B2  0x1A 0x10       PUSHIB 0x10
0x68B4  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68B6  0x33 0xE2 0x01  JW 0x6A98 (+482)

                        // case ')': { htoken = HopperToken.RParen; }           scanner.hs:538

0x68B9  0x1A 0x29       PUSHIB 0x29
0x68BB  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68BD  0x05            EQ
0x68BE  0x2E 0x09       JZB 0x68C7 (+9)
0x68C0  0x1A 0x11       PUSHIB 0x11
0x68C2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68C4  0x33 0xD4 0x01  JW 0x6A98 (+468)

                        // case '{': { htoken = HopperToken.LBrace; }           scanner.hs:539

0x68C7  0x1A 0x7B       PUSHIB 0x7B
0x68C9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68CB  0x05            EQ
0x68CC  0x2E 0x09       JZB 0x68D5 (+9)
0x68CE  0x1A 0x12       PUSHIB 0x12
0x68D0  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68D2  0x33 0xC6 0x01  JW 0x6A98 (+454)

                        // case '}': { htoken = HopperToken.RBrace; }           scanner.hs:540

0x68D5  0x1A 0x7D       PUSHIB 0x7D
0x68D7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68D9  0x05            EQ
0x68DA  0x2E 0x09       JZB 0x68E3 (+9)
0x68DC  0x1A 0x13       PUSHIB 0x13
0x68DE  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68E0  0x33 0xB8 0x01  JW 0x6A98 (+440)

                        // case '[': { htoken = HopperToken.LBracket; }

0x68E3  0x1A 0x5B       PUSHIB 0x5B
0x68E5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68E7  0x05            EQ
0x68E8  0x2E 0x09       JZB 0x68F1 (+9)
0x68EA  0x1A 0x14       PUSHIB 0x14
0x68EC  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68EE  0x33 0xAA 0x01  JW 0x6A98 (+426)

                        // case ']': { htoken = HopperToken.RBracket; }

0x68F1  0x1A 0x5D       PUSHIB 0x5D
0x68F3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x68F5  0x05            EQ
0x68F6  0x2E 0x09       JZB 0x68FF (+9)
0x68F8  0x1A 0x15       PUSHIB 0x15
0x68FA  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x68FC  0x33 0x9C 0x01  JW 0x6A98 (+412)

                        // case ';': { htoken = HopperToken.SemiColon; }

0x68FF  0x1A 0x3B       PUSHIB 0x3B
0x6901  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6903  0x05            EQ
0x6904  0x2E 0x09       JZB 0x690D (+9)
0x6906  0x1A 0x0C       PUSHIB 0x0C
0x6908  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x690A  0x33 0x8E 0x01  JW 0x6A98 (+398)

                        // case ':': { htoken = HopperToken.Colon; }            scanner.hs:544

0x690D  0x1A 0x3A       PUSHIB 0x3A
0x690F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6911  0x05            EQ
0x6912  0x2E 0x09       JZB 0x691B (+9)
0x6914  0x1A 0x0E       PUSHIB 0x0E
0x6916  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6918  0x33 0x80 0x01  JW 0x6A98 (+384)

                        // case ',': { htoken = HopperToken.Comma; }            scanner.hs:545

0x691B  0x1A 0x2C       PUSHIB 0x2C
0x691D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x691F  0x05            EQ
0x6920  0x2E 0x09       JZB 0x6929 (+9)
0x6922  0x1A 0x0D       PUSHIB 0x0D
0x6924  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6926  0x33 0x72 0x01  JW 0x6A98 (+370)

                        // case '.': { htoken = HopperToken.Dot; }              scanner.hs:546

0x6929  0x1A 0x2E       PUSHIB 0x2E
0x692B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x692D  0x05            EQ
0x692E  0x2E 0x09       JZB 0x6937 (+9)
0x6930  0x1A 0x04       PUSHIB 0x04
0x6932  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6934  0x33 0x64 0x01  JW 0x6A98 (+356)

                        // case '*': { htoken = HopperToken.Multiply; }

0x6937  0x1A 0x2A       PUSHIB 0x2A
0x6939  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x693B  0x05            EQ
0x693C  0x2E 0x09       JZB 0x6945 (+9)
0x693E  0x1A 0x27       PUSHIB 0x27
0x6940  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6942  0x33 0x56 0x01  JW 0x6A98 (+342)

                        // case '/': { htoken = HopperToken.Divide; }           scanner.hs:548

0x6945  0x1A 0x2F       PUSHIB 0x2F
0x6947  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6949  0x05            EQ
0x694A  0x2E 0x09       JZB 0x6953 (+9)
0x694C  0x1A 0x28       PUSHIB 0x28
0x694E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6950  0x33 0x48 0x01  JW 0x6A98 (+328)

                        // case '%': { htoken = HopperToken.Modulus; }

0x6953  0x1A 0x25       PUSHIB 0x25
0x6955  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6957  0x05            EQ
0x6958  0x2E 0x09       JZB 0x6961 (+9)
0x695A  0x1A 0x29       PUSHIB 0x29
0x695C  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x695E  0x33 0x3A 0x01  JW 0x6A98 (+314)

                        // case '~': { htoken = HopperToken.BitNot; }           scanner.hs:550

0x6961  0x1A 0x7E       PUSHIB 0x7E
0x6963  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6965  0x05            EQ
0x6966  0x2E 0x09       JZB 0x696F (+9)
0x6968  0x1A 0x23       PUSHIB 0x23
0x696A  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x696C  0x33 0x2C 0x01  JW 0x6A98 (+300)

                        // case '-':                                            scanner.hs:552

0x696F  0x1A 0x2D       PUSHIB 0x2D
0x6971  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6973  0x05            EQ
0x6974  0x2E 0x15       JZB 0x6989 (+21)

                        // if (match('-'))                                      scanner.hs:554

0x6976  0x1A 0x2D       PUSHIB 0x2D
0x6978  0x2C 0x66       CALLB 0x66     // Scanner.match
0x697A  0x2E 0x08       JZB 0x6982 (+8)

                        // { htoken = HopperToken.Decrement; }                  scanner.hs:555

0x697C  0x1A 0x2B       PUSHIB 0x2B
0x697E  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6980  0x30 0x06       JB 0x6986 (+6)

                        // { htoken = HopperToken.Subtract; }                   scanner.hs:557

0x6982  0x1A 0x26       PUSHIB 0x26
0x6984  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:558

0x6986  0x33 0x12 0x01  JW 0x6A98 (+274)

                        // case '+':                                            scanner.hs:559

0x6989  0x1A 0x2B       PUSHIB 0x2B
0x698B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x698D  0x05            EQ
0x698E  0x2E 0x15       JZB 0x69A3 (+21)

                        // if (match('+'))                                      scanner.hs:561

0x6990  0x1A 0x2B       PUSHIB 0x2B
0x6992  0x2C 0x66       CALLB 0x66     // Scanner.match
0x6994  0x2E 0x08       JZB 0x699C (+8)

                        // { htoken = HopperToken.Increment; }                  scanner.hs:562

0x6996  0x1A 0x2A       PUSHIB 0x2A
0x6998  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x699A  0x30 0x06       JB 0x69A0 (+6)

                        // { htoken = HopperToken.Add; }                        scanner.hs:564

0x699C  0x1A 0x25       PUSHIB 0x25
0x699E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:565

0x69A0  0x33 0xF8 0x00  JW 0x6A98 (+248)

                        // case '!':                                            scanner.hs:566

0x69A3  0x1A 0x21       PUSHIB 0x21
0x69A5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x69A7  0x05            EQ
0x69A8  0x2E 0x15       JZB 0x69BD (+21)

                        // if (match('='))                                      scanner.hs:568

0x69AA  0x1A 0x3D       PUSHIB 0x3D
0x69AC  0x2C 0x66       CALLB 0x66     // Scanner.match
0x69AE  0x2E 0x08       JZB 0x69B6 (+8)

                        // { htoken = HopperToken.NE; }                         scanner.hs:569

0x69B0  0x1A 0x1B       PUSHIB 0x1B
0x69B2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x69B4  0x30 0x06       JB 0x69BA (+6)

                        // { htoken = HopperToken.BooleanNot; }                 scanner.hs:571

0x69B6  0x1A 0x20       PUSHIB 0x20
0x69B8  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:572

0x69BA  0x33 0xDE 0x00  JW 0x6A98 (+222)

                        // case '=':                                            scanner.hs:573

0x69BD  0x1A 0x3D       PUSHIB 0x3D
0x69BF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x69C1  0x05            EQ
0x69C2  0x2E 0x15       JZB 0x69D7 (+21)

                        // if (match('='))                                      scanner.hs:575

0x69C4  0x1A 0x3D       PUSHIB 0x3D
0x69C6  0x2C 0x66       CALLB 0x66     // Scanner.match
0x69C8  0x2E 0x08       JZB 0x69D0 (+8)

                        // { htoken = HopperToken.EQ; }                         scanner.hs:576

0x69CA  0x1A 0x18       PUSHIB 0x18
0x69CC  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x69CE  0x30 0x06       JB 0x69D4 (+6)

                        // { htoken = HopperToken.Assign; }                     scanner.hs:578

0x69D0  0x1A 0x2C       PUSHIB 0x2C
0x69D2  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:579

0x69D4  0x33 0xC4 0x00  JW 0x6A98 (+196)

                        // case '<':                                            scanner.hs:580

0x69D7  0x1A 0x3C       PUSHIB 0x3C
0x69D9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x69DB  0x05            EQ
0x69DC  0x2E 0x21       JZB 0x69FD (+33)

                        // if (match('='))                                      scanner.hs:582

0x69DE  0x1A 0x3D       PUSHIB 0x3D
0x69E0  0x2C 0x66       CALLB 0x66     // Scanner.match
0x69E2  0x2E 0x08       JZB 0x69EA (+8)

                        // { htoken = HopperToken.LE; }                         scanner.hs:583

0x69E4  0x1A 0x19       PUSHIB 0x19
0x69E6  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x69E8  0x30 0x12       JB 0x69FA (+18)

                        // else if (match('<'))                                 scanner.hs:584

0x69EA  0x1A 0x3C       PUSHIB 0x3C
0x69EC  0x2C 0x66       CALLB 0x66     // Scanner.match
0x69EE  0x2E 0x08       JZB 0x69F6 (+8)

                        // { htoken = HopperToken.ShiftLeft; }                  scanner.hs:585

0x69F0  0x1A 0x1C       PUSHIB 0x1C
0x69F2  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x69F4  0x30 0x06       JB 0x69FA (+6)

                        // { htoken = HopperToken.LT; }                         scanner.hs:587

0x69F6  0x1A 0x16       PUSHIB 0x16
0x69F8  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:588

0x69FA  0x33 0x9E 0x00  JW 0x6A98 (+158)

                        // case '>':                                            scanner.hs:589

0x69FD  0x1A 0x3E       PUSHIB 0x3E
0x69FF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6A01  0x05            EQ
0x6A02  0x2E 0x21       JZB 0x6A23 (+33)

                        // if (match('='))                                      scanner.hs:591

0x6A04  0x1A 0x3D       PUSHIB 0x3D
0x6A06  0x2C 0x66       CALLB 0x66     // Scanner.match
0x6A08  0x2E 0x08       JZB 0x6A10 (+8)

                        // { htoken = HopperToken.GE; }                         scanner.hs:592

0x6A0A  0x1A 0x1A       PUSHIB 0x1A
0x6A0C  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6A0E  0x30 0x12       JB 0x6A20 (+18)

                        // else if (match('>'))                                 scanner.hs:593

0x6A10  0x1A 0x3E       PUSHIB 0x3E
0x6A12  0x2C 0x66       CALLB 0x66     // Scanner.match
0x6A14  0x2E 0x08       JZB 0x6A1C (+8)

                        // { htoken = HopperToken.ShiftRight; }                 scanner.hs:594

0x6A16  0x1A 0x1D       PUSHIB 0x1D
0x6A18  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6A1A  0x30 0x7E       JB 0x6A98 (+126)

                        // { htoken = HopperToken.GT; }                         scanner.hs:596

0x6A1C  0x1A 0x17       PUSHIB 0x17
0x6A1E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:597

0x6A20  0x33 0x78 0x00  JW 0x6A98 (+120)

                        // case '|':                                            scanner.hs:598

0x6A23  0x1A 0x7C       PUSHIB 0x7C
0x6A25  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6A27  0x05            EQ
0x6A28  0x2E 0x14       JZB 0x6A3C (+20)

                        // if (match('|'))                                      scanner.hs:600

0x6A2A  0x1A 0x7C       PUSHIB 0x7C
0x6A2C  0x2C 0x66       CALLB 0x66     // Scanner.match
0x6A2E  0x2E 0x08       JZB 0x6A36 (+8)

                        // { htoken = HopperToken.BooleanOr; }                  scanner.hs:601

0x6A30  0x1A 0x1F       PUSHIB 0x1F
0x6A32  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6A34  0x30 0x64       JB 0x6A98 (+100)

                        // { htoken = HopperToken.BitOr; }                      scanner.hs:603

0x6A36  0x1A 0x22       PUSHIB 0x22
0x6A38  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:604

0x6A3A  0x30 0x5E       JB 0x6A98 (+94)

                        // case '&':                                            scanner.hs:605

0x6A3C  0x1A 0x26       PUSHIB 0x26
0x6A3E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6A40  0x05            EQ
0x6A41  0x2E 0x14       JZB 0x6A55 (+20)

                        // if (match('&'))                                      scanner.hs:607

0x6A43  0x1A 0x26       PUSHIB 0x26
0x6A45  0x2C 0x66       CALLB 0x66     // Scanner.match
0x6A47  0x2E 0x08       JZB 0x6A4F (+8)

                        // { htoken = HopperToken.BooleanAnd; }                 scanner.hs:608

0x6A49  0x1A 0x1E       PUSHIB 0x1E
0x6A4B  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x6A4D  0x30 0x4B       JB 0x6A98 (+75)

                        // { htoken = HopperToken.BitAnd; }                     scanner.hs:610

0x6A4F  0x1A 0x21       PUSHIB 0x21
0x6A51  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:611

0x6A53  0x30 0x45       JB 0x6A98 (+69)

                        // case '"':                                            scanner.hs:612

0x6A55  0x1A 0x22       PUSHIB 0x22
0x6A57  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6A59  0x05            EQ
0x6A5A  0x2E 0x07       JZB 0x6A61 (+7)

                        // token = scanString();                                scanner.hs:614

0x6A5C  0x2C 0x68       CALLB 0x68     // Scanner.scanString
0x6A5E  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:615

0x6A5F  0x30 0x39       JB 0x6A98 (+57)

                        // case '\'':                                           scanner.hs:616

0x6A61  0x1A 0x27       PUSHIB 0x27
0x6A63  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6A65  0x05            EQ
0x6A66  0x2E 0x07       JZB 0x6A6D (+7)

                        // token = scanChar();                                  scanner.hs:618

0x6A68  0x2C 0x69       CALLB 0x69     // Scanner.scanChar
0x6A6A  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:619

0x6A6B  0x30 0x2D       JB 0x6A98 (+45)

                        // uint ui = uint(c);                                   scanner.hs:622

0x6A6D  0x44            PUSHI0
0x6A6E  0x4F            PUSHLOCALB02
0x6A6F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // token = errorToken("unexpected character: '" + c + "' (0x" + ui.ToHexString(2) + ")");

0x6A71  0x37 0x47 0x0D  PUSHIW 0x0D47
0x6A74  0x1A 0x17       PUSHIB 0x17
0x6A76  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6A78  0x4F            PUSHLOCALB02
0x6A79  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6A7B  0x37 0x5E 0x0D  PUSHIW 0x0D5E
0x6A7E  0x1A 0x05       PUSHIB 0x05
0x6A80  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6A82  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6A84  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x6A86  0x1A 0x02       PUSHIB 0x02
0x6A88  0x34 0x71 0x01  CALLW 0x0171   // UInt.ToHexString
0x6A8B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6A8D  0x1A 0x29       PUSHIB 0x29
0x6A8F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6A91  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6A93  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6A95  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:624

0x6A96  0x28 0x02       DECSP 0x02

                        // }                                                    scanner.hs:625

0x6A98  0x28 0x02       DECSP 0x02

                        // if (htoken != HopperToken.Undefined)                 scanner.hs:626

0x6A9A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6A9C  0x2E 0x0E       JZB 0x6AAA (+14)

                        // token = Token.New(htoken, "", currentLine, currentPos, currentSourcePath);

0x6A9E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6AA0  0x24 0x02       SYSCALL0 0x02  // String.New
0x6AA2  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6AA5  0x20 0x1E       PUSHGLOBALB 0x1E
0x6AA7  0x2C 0x59       CALLB 0x59     // Token.New
0x6AA9  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:630

0x6AAA  0x28 0x04       DECSP 0x04

                        // if (dumpTokens)                                      scanner.hs:634

0x6AAC  0x20 0x26       PUSHGLOBALB 0x26
0x6AAE  0x2E 0x14       JZB 0x6AC2 (+20)

                        // PrintLn("  " + Token.ToString(token), Color.Red, Color.Black);

0x6AB0  0x37 0x20 0x20  PUSHIW 0x2020
0x6AB3  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6AB5  0x4E            PUSHLOCALB00
0x6AB6  0x2C 0x5A       CALLB 0x5A     // Token.ToString
0x6AB8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6ABA  0x34 0xDC 0x01  CALLW 0x01DC   // Color.Red_Get
0x6ABD  0x34 0xCD 0x01  CALLW 0x01CD   // Color.Black_Get
0x6AC0  0x2C 0x37       CALLB 0x37     // Screen.PrintLn

                        // return token;                                        scanner.hs:638

0x6AC2  0x4E            PUSHLOCALB00
0x6AC3  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:86
// ####  Scanner.Reset(..)  ####                                                0x005D

0x6AC5  0x49            ENTER

                        // if (sourcePath != currentSourcePath)                 scanner.hs:87

0x6AC6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6AC8  0x20 0x1E       PUSHGLOBALB 0x1E
0x6ACA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6ACC  0x2E 0x06       JZB 0x6AD2 (+6)

                        // Load(sourcePath);                                    scanner.hs:89

0x6ACE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6AD0  0x2C 0x5C       CALLB 0x5C     // Scanner.Load

                        // currentPos = pos;                                    scanner.hs:91

0x6AD2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x6AD4  0x59 0x14       POPCOPYGLOBALB 0x14

                        // currentLine = ln;                                    scanner.hs:92

0x6AD6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6AD8  0x1F 0x16       POPGLOBALB 0x16

                        // <string,string> empty;                               scanner.hs:93

0x6ADA  0x1A 0x0F       PUSHIB 0x0F
0x6ADC  0x1A 0x0F       PUSHIB 0x0F
0x6ADE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // peekedToken = empty;                                 scanner.hs:94

0x6AE0  0x4E            PUSHLOCALB00
0x6AE1  0x59 0x28       POPCOPYGLOBALB 0x28

                        // isPeekedToken = false;                               scanner.hs:95

0x6AE3  0x44            PUSHI0
0x6AE4  0x1F 0x2A       POPGLOBALB 0x2A

                        // iCurrentSourceLine = 0;                              scanner.hs:98

0x6AE6  0x44            PUSHI0
0x6AE7  0x1F 0x1A       POPGLOBALB 0x1A

                        // currentStartPos = 0;                                 scanner.hs:99

0x6AE9  0x44            PUSHI0
0x6AEA  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6AEC  0x59 0x1C       POPCOPYGLOBALB 0x1C

                        // lastPos = 0;                                         scanner.hs:100

0x6AEE  0x44            PUSHI0
0x6AEF  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6AF1  0x59 0x22       POPCOPYGLOBALB 0x22

                        // lastPosSet = false;                                  scanner.hs:101

0x6AF3  0x44            PUSHI0
0x6AF4  0x1F 0x24       POPGLOBALB 0x24

                        // }                                                    scanner.hs:102

0x6AF6  0x2A 0x08       RETB 0x08


// /source/compiler/tokens/scanner.hs:127
// ####  Scanner.isAtEnd(..)  ####                                              0x0060

0x6AF8  0x49            ENTER

                        // return (currentPos == sourceLength);                 scanner.hs:129

0x6AF9  0x52 0x14 0x18  PUSHGLOBALBB 0x1814
0x6AFC  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x6AFE  0x4A            RET0


// /source/compiler/tokens/scanner.hs:231
// ####  Scanner.skipWhitespace(..)  ####                                       0x0067

0x6AFF  0x49            ENTER

                        // char c = peek();                                     scanner.hs:234

0x6B00  0x44            PUSHI0
0x6B01  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6B03  0x4C            POPLOCALB00

                        // if ((c == ' ') || (c == char(0x0D)) || (c == char(0x09)))

0x6B04  0x4E            PUSHLOCALB00
0x6B05  0x1A 0x20       PUSHIB 0x20
0x6B07  0x05            EQ
0x6B08  0x27 0x00       DUP 0x00
0x6B0A  0x2F 0x10       JNZB 0x6B1A (+16)
0x6B0C  0x4E            PUSHLOCALB00
0x6B0D  0x1A 0x0D       PUSHIB 0x0D
0x6B0F  0x05            EQ
0x6B10  0x0B            BOOLOR
0x6B11  0x27 0x00       DUP 0x00
0x6B13  0x2F 0x07       JNZB 0x6B1A (+7)
0x6B15  0x4E            PUSHLOCALB00
0x6B16  0x1A 0x09       PUSHIB 0x09
0x6B18  0x05            EQ
0x6B19  0x0B            BOOLOR
0x6B1A  0x2E 0x08       JZB 0x6B22 (+8)

                        // c = advance();                                       scanner.hs:237

0x6B1C  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B1E  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:238

0x6B1F  0x33 0x97 0x00  JW 0x6BB6 (+151)

                        // else if (c == char(0x0A))                            scanner.hs:239

0x6B22  0x4E            PUSHLOCALB00
0x6B23  0x1A 0x0A       PUSHIB 0x0A
0x6B25  0x05            EQ
0x6B26  0x2E 0x0A       JZB 0x6B30 (+10)

                        // currentLine++;                                       scanner.hs:241

0x6B28  0x53 0x16       INCGLOBALB 0x16

                        // c = advance();                                       scanner.hs:242

0x6B2A  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B2C  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:243

0x6B2D  0x33 0x89 0x00  JW 0x6BB6 (+137)

                        // else if (c == '/')                                   scanner.hs:244

0x6B30  0x4E            PUSHLOCALB00
0x6B31  0x1A 0x2F       PUSHIB 0x2F
0x6B33  0x05            EQ
0x6B34  0x31 0x7F 0x00  JZW 0x6BB3 (+127)

                        // char n = peekNext();                                 scanner.hs:246

0x6B37  0x44            PUSHI0
0x6B38  0x2C 0x65       CALLB 0x65     // Scanner.peekNext
0x6B3A  0x4D            POPLOCALB02

                        // if (n == '/')                                        scanner.hs:247

0x6B3B  0x4F            PUSHLOCALB02
0x6B3C  0x1A 0x2F       PUSHIB 0x2F
0x6B3E  0x05            EQ
0x6B3F  0x2E 0x1F       JZB 0x6B5E (+31)

                        // c = peek();                                          scanner.hs:252

0x6B41  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6B43  0x4C            POPLOCALB00

                        // if ((c == char(0)) || (c == char(0x0A)) || isAtEnd())

0x6B44  0x4E            PUSHLOCALB00
0x6B45  0x44            PUSHI0
0x6B46  0x05            EQ
0x6B47  0x27 0x00       DUP 0x00
0x6B49  0x2F 0x0E       JNZB 0x6B57 (+14)
0x6B4B  0x4E            PUSHLOCALB00
0x6B4C  0x1A 0x0A       PUSHIB 0x0A
0x6B4E  0x05            EQ
0x6B4F  0x0B            BOOLOR
0x6B50  0x27 0x00       DUP 0x00
0x6B52  0x2F 0x05       JNZB 0x6B57 (+5)
0x6B54  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6B56  0x0B            BOOLOR
0x6B57  0x2F 0x58       JNZB 0x6BAF (+88)

                        // c = advance(); // gobble gobble                      scanner.hs:257

0x6B59  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B5B  0x4C            POPLOCALB00

                        // }                                                    scanner.hs:258

0x6B5C  0x30 0xE5       JB 0x6B41 (-27)

                        // else if (n == '*')                                   scanner.hs:260

0x6B5E  0x4F            PUSHLOCALB02
0x6B5F  0x1A 0x2A       PUSHIB 0x2A
0x6B61  0x05            EQ
0x6B62  0x2E 0x4A       JZB 0x6BAC (+74)

                        // c = advance();                                       scanner.hs:264

0x6B64  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B66  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:265

0x6B67  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B69  0x4C            POPLOCALB00

                        // c = peek();                                          scanner.hs:268

0x6B6A  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6B6C  0x4C            POPLOCALB00

                        // if ((c == char(0)) || isAtEnd())                     scanner.hs:269

0x6B6D  0x4E            PUSHLOCALB00
0x6B6E  0x44            PUSHI0
0x6B6F  0x05            EQ
0x6B70  0x27 0x00       DUP 0x00
0x6B72  0x2F 0x05       JNZB 0x6B77 (+5)
0x6B74  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6B76  0x0B            BOOLOR
0x6B77  0x2F 0x38       JNZB 0x6BAF (+56)

                        // n = peekNext();                                      scanner.hs:273

0x6B79  0x2C 0x65       CALLB 0x65     // Scanner.peekNext
0x6B7B  0x4D            POPLOCALB02

                        // if ((n == char(0)) || isAtEnd())                     scanner.hs:274

0x6B7C  0x4F            PUSHLOCALB02
0x6B7D  0x44            PUSHI0
0x6B7E  0x05            EQ
0x6B7F  0x27 0x00       DUP 0x00
0x6B81  0x2F 0x05       JNZB 0x6B86 (+5)
0x6B83  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6B85  0x0B            BOOLOR
0x6B86  0x2F 0x29       JNZB 0x6BAF (+41)

                        // if ((c == '*') && (n == '/'))                        scanner.hs:278

0x6B88  0x4E            PUSHLOCALB00
0x6B89  0x1A 0x2A       PUSHIB 0x2A
0x6B8B  0x05            EQ
0x6B8C  0x27 0x00       DUP 0x00
0x6B8E  0x2E 0x07       JZB 0x6B95 (+7)
0x6B90  0x4F            PUSHLOCALB02
0x6B91  0x1A 0x2F       PUSHIB 0x2F
0x6B93  0x05            EQ
0x6B94  0x0C            BOOLAND
0x6B95  0x2E 0x0A       JZB 0x6B9F (+10)

                        // c = advance();                                       scanner.hs:281

0x6B97  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B99  0x4C            POPLOCALB00

                        // c = advance();                                       scanner.hs:282

0x6B9A  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6B9C  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:283

0x6B9D  0x30 0x12       JB 0x6BAF (+18)

                        // c = advance(); // gobble gobble                      scanner.hs:285

0x6B9F  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6BA1  0x4C            POPLOCALB00

                        // if (c == char(0x0A))                                 scanner.hs:286

0x6BA2  0x4E            PUSHLOCALB00
0x6BA3  0x1A 0x0A       PUSHIB 0x0A
0x6BA5  0x05            EQ
0x6BA6  0x2E 0xC4       JZB 0x6B6A (-60)

                        // currentLine++;                                       scanner.hs:288

0x6BA8  0x53 0x16       INCGLOBALB 0x16

                        // }                                                    scanner.hs:290

0x6BAA  0x30 0xC0       JB 0x6B6A (-64)

                        // break; // just a single '/'                          scanner.hs:294

0x6BAC  0x28 0x04       DECSP 0x04
0x6BAE  0x4A            RET0

                        // }                                                    scanner.hs:296

0x6BAF  0x28 0x02       DECSP 0x02
0x6BB1  0x30 0x05       JB 0x6BB6 (+5)

                        // break;                                               scanner.hs:299

0x6BB3  0x28 0x02       DECSP 0x02
0x6BB5  0x4A            RET0

                        // }                                                    scanner.hs:301

0x6BB6  0x28 0x02       DECSP 0x02
0x6BB8  0x33 0x48 0xFF  JW 0x6B00 (-184)


// /source/compiler/tokens/scanner.hs:199
// ####  Scanner.advance(..)  ####                                              0x0063


                        // char c = sourceGetFromPos(currentPos, true);

0x6BBB  0x5F 0x01       ENTERB 0x01

                        // char c = sourceGetFromPos(currentPos, true);

0x6BBD  0x20 0x14       PUSHGLOBALB 0x14
0x6BBF  0x45            PUSHI1
0x6BC0  0x2C 0x62       CALLB 0x62     // Scanner.sourceGetFromPos
0x6BC2  0x4C            POPLOCALB00

                        // currentPos = currentPos + 1;                         scanner.hs:201

0x6BC3  0x20 0x14       PUSHGLOBALB 0x14
0x6BC5  0x45            PUSHI1
0x6BC6  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6BC8  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6BCA  0x59 0x14       POPCOPYGLOBALB 0x14

                        // return c;                                            scanner.hs:202

0x6BCC  0x4E            PUSHLOCALB00
0x6BCD  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:355
// ####  Scanner.scanNumber(..)  ####                                           0x006A

0x6BCF  0x49            ENTER

                        // <string,string> token;                               scanner.hs:356

0x6BD0  0x1A 0x0F       PUSHIB 0x0F
0x6BD2  0x1A 0x0F       PUSHIB 0x0F
0x6BD4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // string value = c.ToString();                         scanner.hs:357

0x6BD6  0x24 0x02       SYSCALL0 0x02  // String.New
0x6BD8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6BDA  0x34 0x66 0x01  CALLW 0x0166   // Char.ToString
0x6BDD  0x5E            POPCOPYLOCALB02

                        // bool hexOk = false;                                  scanner.hs:358

0x6BDE  0x44            PUSHI0

                        // bool binaryOk = false;                               scanner.hs:359

0x6BDF  0x44            PUSHI0

                        // bool floatOk = false;                                scanner.hs:360

0x6BE0  0x44            PUSHI0

                        // HopperToken ttype = HopperToken.Integer;             scanner.hs:362

0x6BE1  0x44            PUSHI0
0x6BE2  0x1A 0x09       PUSHIB 0x09
0x6BE4  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // c = peek();                                          scanner.hs:367

0x6BE6  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6BE8  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if ((c == 'x') && (value == "0"))                    scanner.hs:368

0x6BEA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6BEC  0x1A 0x78       PUSHIB 0x78
0x6BEE  0x05            EQ
0x6BEF  0x27 0x00       DUP 0x00
0x6BF1  0x2E 0x0C       JZB 0x6BFD (+12)
0x6BF3  0x4F            PUSHLOCALB02
0x6BF4  0x1A 0x30       PUSHIB 0x30
0x6BF6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6BF8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6BFA  0x44            PUSHI0
0x6BFB  0x05            EQ
0x6BFC  0x0C            BOOLAND
0x6BFD  0x2E 0x0D       JZB 0x6C0A (+13)

                        // hexOk = true;                                        scanner.hs:370

0x6BFF  0x45            PUSHI1
0x6C00  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // value = value + advance();                           scanner.hs:371

0x6C02  0x4F            PUSHLOCALB02
0x6C03  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6C05  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6C07  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:372

0x6C08  0x30 0xDE       JB 0x6BE6 (-34)

                        // if ((c == 'b') && (value == "0"))                    scanner.hs:374

0x6C0A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C0C  0x1A 0x62       PUSHIB 0x62
0x6C0E  0x05            EQ
0x6C0F  0x27 0x00       DUP 0x00
0x6C11  0x2E 0x0C       JZB 0x6C1D (+12)
0x6C13  0x4F            PUSHLOCALB02
0x6C14  0x1A 0x30       PUSHIB 0x30
0x6C16  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6C18  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6C1A  0x44            PUSHI0
0x6C1B  0x05            EQ
0x6C1C  0x0C            BOOLAND
0x6C1D  0x2E 0x0D       JZB 0x6C2A (+13)

                        // binaryOk = true;                                     scanner.hs:376

0x6C1F  0x45            PUSHI1
0x6C20  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // value = value + advance();                           scanner.hs:377

0x6C22  0x4F            PUSHLOCALB02
0x6C23  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6C25  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6C27  0x5E            POPCOPYLOCALB02

                        // continue;                                            scanner.hs:378

0x6C28  0x30 0xBE       JB 0x6BE6 (-66)

                        // if (hexOk && c.IsHexDigit())                         scanner.hs:380

0x6C2A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6C2C  0x27 0x00       DUP 0x00
0x6C2E  0x2E 0x08       JZB 0x6C36 (+8)
0x6C30  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C32  0x34 0x64 0x01  CALLW 0x0164   // Char.IsHexDigit
0x6C35  0x0C            BOOLAND
0x6C36  0x2F 0x3F       JNZB 0x6C75 (+63)

                        // else if (binaryOk && ((c == '0') || (c == '1')))

0x6C38  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6C3A  0x27 0x00       DUP 0x00
0x6C3C  0x2E 0x12       JZB 0x6C4E (+18)
0x6C3E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C40  0x1A 0x30       PUSHIB 0x30
0x6C42  0x05            EQ
0x6C43  0x27 0x00       DUP 0x00
0x6C45  0x2F 0x08       JNZB 0x6C4D (+8)
0x6C47  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C49  0x1A 0x31       PUSHIB 0x31
0x6C4B  0x05            EQ
0x6C4C  0x0B            BOOLOR
0x6C4D  0x0C            BOOLAND
0x6C4E  0x2F 0x27       JNZB 0x6C75 (+39)

                        // else if ((c == '.') && !floatOk && (value.Length > 0))

0x6C50  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C52  0x1A 0x2E       PUSHIB 0x2E
0x6C54  0x05            EQ
0x6C55  0x27 0x00       DUP 0x00
0x6C57  0x2E 0x10       JZB 0x6C67 (+16)
0x6C59  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x6C5B  0x41            BOOLNOT
0x6C5C  0x0C            BOOLAND
0x6C5D  0x27 0x00       DUP 0x00
0x6C5F  0x2E 0x08       JZB 0x6C67 (+8)
0x6C61  0x4F            PUSHLOCALB02
0x6C62  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6C64  0x44            PUSHI0
0x6C65  0x07            GT
0x6C66  0x0C            BOOLAND
0x6C67  0x2E 0x07       JZB 0x6C6E (+7)

                        // floatOk = true;                                      scanner.hs:390

0x6C69  0x45            PUSHI1
0x6C6A  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // }                                                    scanner.hs:391

0x6C6C  0x30 0x09       JB 0x6C75 (+9)

                        // else if (!c.IsDigit())                               scanner.hs:392

0x6C6E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6C70  0x34 0x60 0x01  CALLW 0x0160   // Char.IsDigit
0x6C73  0x2E 0x0B       JZB 0x6C7E (+11)

                        // value = value + advance();                           scanner.hs:396

0x6C75  0x4F            PUSHLOCALB02
0x6C76  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6C78  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6C7A  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:397

0x6C7B  0x33 0x6B 0xFF  JW 0x6BE6 (-149)

                        // if (hexOk)                                           scanner.hs:398

0x6C7E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6C80  0x2E 0x39       JZB 0x6CB9 (+57)

                        // if (value.Length < 3)                                scanner.hs:400

0x6C82  0x4F            PUSHLOCALB02
0x6C83  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6C85  0x1A 0x03       PUSHIB 0x03
0x6C87  0x08            LT
0x6C88  0x2E 0x0F       JZB 0x6C97 (+15)

                        // token = errorToken("invalid hex integer literal");

0x6C8A  0x37 0x63 0x0D  PUSHIW 0x0D63
0x6C8D  0x1A 0x1B       PUSHIB 0x1B
0x6C8F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6C91  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6C93  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:403

0x6C94  0x33 0xAF 0x00  JW 0x6D43 (+175)

                        // uint hexValue = 0;                                   scanner.hs:405

0x6C97  0x44            PUSHI0

                        // if (!Token.TryParseHex(value, ref hexValue))

0x6C98  0x4F            PUSHLOCALB02
0x6C99  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x6C9B  0x2C 0x55       CALLB 0x55     // Token.TryParseHex
0x6C9D  0x2F 0x11       JNZB 0x6CAE (+17)

                        // token = errorToken("invalid hex integer literal");

0x6C9F  0x37 0x63 0x0D  PUSHIW 0x0D63
0x6CA2  0x1A 0x1B       PUSHIB 0x1B
0x6CA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6CA6  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6CA8  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:409

0x6CA9  0x28 0x02       DECSP 0x02
0x6CAB  0x33 0x98 0x00  JW 0x6D43 (+152)

                        // value = hexValue.ToString();                         scanner.hs:411

0x6CAE  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6CB0  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x6CB3  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:412

0x6CB4  0x28 0x02       DECSP 0x02
0x6CB6  0x33 0x82 0x00  JW 0x6D38 (+130)

                        // else if (binaryOk)                                   scanner.hs:413

0x6CB9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6CBB  0x2E 0x37       JZB 0x6CF2 (+55)

                        // if (value.Length < 3)                                scanner.hs:415

0x6CBD  0x4F            PUSHLOCALB02
0x6CBE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6CC0  0x1A 0x03       PUSHIB 0x03
0x6CC2  0x08            LT
0x6CC3  0x2E 0x0F       JZB 0x6CD2 (+15)

                        // token = errorToken("invalid binary integer literal");

0x6CC5  0x37 0x7E 0x0D  PUSHIW 0x0D7E
0x6CC8  0x1A 0x1E       PUSHIB 0x1E
0x6CCA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6CCC  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6CCE  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:418

0x6CCF  0x33 0x74 0x00  JW 0x6D43 (+116)

                        // uint binaryValue = 0;                                scanner.hs:420

0x6CD2  0x44            PUSHI0

                        // if (!Token.TryParseBinary(value, ref binaryValue))

0x6CD3  0x4F            PUSHLOCALB02
0x6CD4  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x6CD6  0x2C 0x57       CALLB 0x57     // Token.TryParseBinary
0x6CD8  0x2F 0x10       JNZB 0x6CE8 (+16)

                        // token = errorToken("invalid binary integer literal");

0x6CDA  0x37 0x7E 0x0D  PUSHIW 0x0D7E
0x6CDD  0x1A 0x1E       PUSHIB 0x1E
0x6CDF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6CE1  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6CE3  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:424

0x6CE4  0x28 0x02       DECSP 0x02
0x6CE6  0x30 0x5D       JB 0x6D43 (+93)

                        // value = binaryValue.ToString();                      scanner.hs:426

0x6CE8  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6CEA  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x6CED  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:427

0x6CEE  0x28 0x02       DECSP 0x02
0x6CF0  0x30 0x48       JB 0x6D38 (+72)

                        // else if (floatOk)                                    scanner.hs:428

0x6CF2  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x6CF4  0x2E 0x26       JZB 0x6D1A (+38)

                        // float f;                                             scanner.hs:430

0x6CF6  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (!Token.TryParseFloat(value, ref f))              scanner.hs:431

0x6CF8  0x4F            PUSHLOCALB02
0x6CF9  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x6CFB  0x2C 0x58       CALLB 0x58     // Token.TryParseFloat
0x6CFD  0x2F 0x10       JNZB 0x6D0D (+16)

                        // token = errorToken("invalid float literal");

0x6CFF  0x37 0x9C 0x0D  PUSHIW 0x0D9C
0x6D02  0x1A 0x15       PUSHIB 0x15
0x6D04  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6D06  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6D08  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:434

0x6D09  0x28 0x02       DECSP 0x02
0x6D0B  0x30 0x38       JB 0x6D43 (+56)

                        // value = f.ToString();                                scanner.hs:436

0x6D0D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6D0F  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0x6D11  0x5E            POPCOPYLOCALB02

                        // ttype = HopperToken.Float;                           scanner.hs:437

0x6D12  0x1A 0x0A       PUSHIB 0x0A
0x6D14  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // }                                                    scanner.hs:438

0x6D16  0x28 0x02       DECSP 0x02
0x6D18  0x30 0x20       JB 0x6D38 (+32)

                        // long l;                                              scanner.hs:441

0x6D1A  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(value, ref l))               scanner.hs:442

0x6D1C  0x4F            PUSHLOCALB02
0x6D1D  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x6D1F  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x6D21  0x2F 0x10       JNZB 0x6D31 (+16)

                        // token = errorToken("invalid integer literal");

0x6D23  0x37 0xB1 0x0D  PUSHIW 0x0DB1
0x6D26  0x1A 0x17       PUSHIB 0x17
0x6D28  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6D2A  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6D2C  0x5D            POPCOPYLOCALB00

                        // break;                                               scanner.hs:445

0x6D2D  0x28 0x02       DECSP 0x02
0x6D2F  0x30 0x14       JB 0x6D43 (+20)

                        // value = l.ToString();                                scanner.hs:447

0x6D31  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6D33  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0x6D35  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:448

0x6D36  0x28 0x02       DECSP 0x02

                        // token = Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x6D38  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6D3A  0x4F            PUSHLOCALB02
0x6D3B  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6D3E  0x20 0x1E       PUSHGLOBALB 0x1E
0x6D40  0x2C 0x59       CALLB 0x59     // Token.New
0x6D42  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:453

0x6D43  0x4E            PUSHLOCALB00
0x6D44  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/scanner.hs:456
// ####  Scanner.scanIdentifier(..)  ####                                       0x006B


                        // uint dotSeen = 0;                                    scanner.hs:457

0x6D46  0x5F 0x01       ENTERB 0x01

                        // string value = c.ToString();                         scanner.hs:458

0x6D48  0x24 0x02       SYSCALL0 0x02  // String.New
0x6D4A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6D4C  0x34 0x66 0x01  CALLW 0x0166   // Char.ToString
0x6D4F  0x5E            POPCOPYLOCALB02

                        // HopperToken ttype = HopperToken.Identifier;

0x6D50  0x44            PUSHI0
0x6D51  0x1A 0x03       PUSHIB 0x03
0x6D53  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // c = peek();                                          scanner.hs:462

0x6D55  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6D57  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // if (!c.IsLetter() && !c.IsDigit())                   scanner.hs:463

0x6D59  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6D5B  0x34 0x65 0x01  CALLW 0x0165   // Char.IsLetter
0x6D5E  0x41            BOOLNOT
0x6D5F  0x27 0x00       DUP 0x00
0x6D61  0x2E 0x09       JZB 0x6D6A (+9)
0x6D63  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6D65  0x34 0x60 0x01  CALLW 0x0160   // Char.IsDigit
0x6D68  0x41            BOOLNOT
0x6D69  0x0C            BOOLAND
0x6D6A  0x2E 0x0B       JZB 0x6D75 (+11)

                        // if (c == '.')                                        scanner.hs:465

0x6D6C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6D6E  0x1A 0x2E       PUSHIB 0x2E
0x6D70  0x05            EQ
0x6D71  0x2E 0x0C       JZB 0x6D7D (+12)

                        // dotSeen++;                                           scanner.hs:467

0x6D73  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // value = value + advance();                           scanner.hs:474

0x6D75  0x4F            PUSHLOCALB02
0x6D76  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6D78  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6D7A  0x5E            POPCOPYLOCALB02

                        // }                                                    scanner.hs:475

0x6D7B  0x30 0xDA       JB 0x6D55 (-38)

                        // if (dotSeen > 0)                                     scanner.hs:476

0x6D7D  0x4E            PUSHLOCALB00
0x6D7E  0x44            PUSHI0
0x6D7F  0x07            GT
0x6D80  0x2E 0x06       JZB 0x6D86 (+6)

                        // ttype = HopperToken.DottedIdentifier;                scanner.hs:478

0x6D82  0x1A 0x02       PUSHIB 0x02
0x6D84  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Token.IsKeyword(value))                          scanner.hs:480

0x6D86  0x4F            PUSHLOCALB02
0x6D87  0x2C 0x51       CALLB 0x51     // Token.IsKeyword
0x6D89  0x2E 0x2F       JZB 0x6DB8 (+47)

                        // switch (value)                                       scanner.hs:482

0x6D8B  0x4F            PUSHLOCALB02

                        // case "true":                                         scanner.hs:484

0x6D8C  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0x6D8F  0x1A 0x04       PUSHIB 0x04
0x6D91  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6D93  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6D95  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6D97  0x2F 0x08       JNZB 0x6D9F (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:486

0x6D99  0x1A 0x07       PUSHIB 0x07
0x6D9B  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:487

0x6D9D  0x30 0x19       JB 0x6DB6 (+25)

                        // case "false":                                        scanner.hs:488

0x6D9F  0x37 0x4C 0x05  PUSHIW 0x054C
0x6DA2  0x1A 0x05       PUSHIB 0x05
0x6DA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6DA6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6DA8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x6DAA  0x2F 0x08       JNZB 0x6DB2 (+8)

                        // ttype = HopperToken.Bool;                            scanner.hs:490

0x6DAC  0x1A 0x07       PUSHIB 0x07
0x6DAE  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:491

0x6DB0  0x30 0x06       JB 0x6DB6 (+6)

                        // ttype = HopperToken.Keyword;                         scanner.hs:494

0x6DB2  0x1A 0x05       PUSHIB 0x05
0x6DB4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    scanner.hs:496

0x6DB6  0x28 0x02       DECSP 0x02

                        // if (Token.IsDirectiveKeyword(value))                 scanner.hs:498

0x6DB8  0x4F            PUSHLOCALB02
0x6DB9  0x2C 0x4B       CALLB 0x4B     // Token.IsDirectiveKeyword
0x6DBB  0x2E 0x06       JZB 0x6DC1 (+6)

                        // ttype = HopperToken.Directive;                       scanner.hs:500

0x6DBD  0x1A 0x06       PUSHIB 0x06
0x6DBF  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // return Token.New(ttype, value, currentLine, currentPos, currentSourcePath);

0x6DC1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6DC3  0x4F            PUSHLOCALB02
0x6DC4  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6DC7  0x20 0x1E       PUSHGLOBALB 0x1E
0x6DC9  0x2C 0x59       CALLB 0x59     // Token.New
0x6DCB  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/scanner.hs:218
// ####  Scanner.match(..)  ####                                                0x0066

0x6DCD  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:219

0x6DCE  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6DD0  0x2E 0x05       JZB 0x6DD5 (+5)

                        // return false;                                        scanner.hs:221

0x6DD2  0x44            PUSHI0
0x6DD3  0x2B 0x02       RETRETB 0x02

                        // if (sourceGetFromPos(currentPos, true) != expected)

0x6DD5  0x20 0x14       PUSHGLOBALB 0x14
0x6DD7  0x45            PUSHI1
0x6DD8  0x2C 0x62       CALLB 0x62     // Scanner.sourceGetFromPos
0x6DDA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6DDC  0x06            NE
0x6DDD  0x2E 0x05       JZB 0x6DE2 (+5)

                        // return false;                                        scanner.hs:225

0x6DDF  0x44            PUSHI0
0x6DE0  0x2B 0x02       RETRETB 0x02

                        // currentPos = currentPos + 1;                         scanner.hs:227

0x6DE2  0x20 0x14       PUSHGLOBALB 0x14
0x6DE4  0x45            PUSHI1
0x6DE5  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6DE7  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6DE9  0x59 0x14       POPCOPYGLOBALB 0x14

                        // return true;                                         scanner.hs:228

0x6DEB  0x45            PUSHI1
0x6DEC  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:304
// ####  Scanner.scanString(..)  ####                                           0x0068

0x6DEE  0x49            ENTER

                        // string value;                                        scanner.hs:305

0x6DEF  0x24 0x02       SYSCALL0 0x02  // String.New

                        // while ((peek() != '"') && (peek() != char(0)))

0x6DF1  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6DF3  0x1A 0x22       PUSHIB 0x22
0x6DF5  0x06            NE
0x6DF6  0x27 0x00       DUP 0x00
0x6DF8  0x2E 0x07       JZB 0x6DFF (+7)
0x6DFA  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6DFC  0x44            PUSHI0
0x6DFD  0x06            NE
0x6DFE  0x0C            BOOLAND
0x6DFF  0x2E 0x3B       JZB 0x6E3A (+59)

                        // if (peek() == char(0x0A))                            scanner.hs:308

0x6E01  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6E03  0x1A 0x0A       PUSHIB 0x0A
0x6E05  0x05            EQ
0x6E06  0x2E 0x0D       JZB 0x6E13 (+13)

                        // return errorToken("unexpected EOL in string");

0x6E08  0x37 0xC8 0x0D  PUSHIW 0x0DC8
0x6E0B  0x1A 0x18       PUSHIB 0x18
0x6E0D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6E0F  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6E11  0x2B 0x02       RETRETB 0x02

                        // char c = advance();                                  scanner.hs:312

0x6E13  0x44            PUSHI0
0x6E14  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E16  0x4D            POPLOCALB02

                        // if (c == char(0x5C)) // \                            scanner.hs:313

0x6E17  0x4F            PUSHLOCALB02
0x6E18  0x1A 0x5C       PUSHIB 0x5C
0x6E1A  0x05            EQ
0x6E1B  0x2E 0x16       JZB 0x6E31 (+22)

                        // if (   (peek() == '"') // \"                         scanner.hs:315

0x6E1D  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6E1F  0x1A 0x22       PUSHIB 0x22
0x6E21  0x05            EQ
0x6E22  0x27 0x00       DUP 0x00
0x6E24  0x2F 0x08       JNZB 0x6E2C (+8)
0x6E26  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6E28  0x1A 0x5C       PUSHIB 0x5C
0x6E2A  0x05            EQ
0x6E2B  0x0B            BOOLOR
0x6E2C  0x2E 0x05       JZB 0x6E31 (+5)

                        // c = advance(); // gooble the \                       scanner.hs:319

0x6E2E  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E30  0x4D            POPLOCALB02

                        // value = value + c;                                   scanner.hs:322

0x6E31  0x4E            PUSHLOCALB00
0x6E32  0x4F            PUSHLOCALB02
0x6E33  0x25 0x03       SYSCALL1 0x03  // String.Append
0x6E35  0x5D            POPCOPYLOCALB00

                        // }                                                    scanner.hs:323

0x6E36  0x28 0x02       DECSP 0x02
0x6E38  0x30 0xB9       JB 0x6DF1 (-71)

                        // if (isAtEnd())                                       scanner.hs:324

0x6E3A  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6E3C  0x2E 0x25       JZB 0x6E61 (+37)

                        // if (value.Length > 80)                               scanner.hs:326

0x6E3E  0x4E            PUSHLOCALB00
0x6E3F  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6E41  0x1A 0x50       PUSHIB 0x50
0x6E43  0x07            GT
0x6E44  0x2E 0x09       JZB 0x6E4D (+9)

                        // value = value.Substring(0, 80);                      scanner.hs:328

0x6E46  0x4E            PUSHLOCALB00
0x6E47  0x44            PUSHI0
0x6E48  0x1A 0x50       PUSHIB 0x50
0x6E4A  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x6E4C  0x5D            POPCOPYLOCALB00

                        // return errorToken("unterminated string: '" + value + "'");

0x6E4D  0x37 0xE0 0x0D  PUSHIW 0x0DE0
0x6E50  0x1A 0x16       PUSHIB 0x16
0x6E52  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6E54  0x4E            PUSHLOCALB00
0x6E55  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6E57  0x1A 0x27       PUSHIB 0x27
0x6E59  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6E5B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x6E5D  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6E5F  0x2B 0x02       RETRETB 0x02

                        // char c = advance(); // consume the '"'               scanner.hs:332

0x6E61  0x44            PUSHI0
0x6E62  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E64  0x4D            POPLOCALB02

                        // return Token.New(HopperToken.StringConstant, value, currentLine, currentPos, currentSourcePath);

0x6E65  0x1A 0x0B       PUSHIB 0x0B
0x6E67  0x4E            PUSHLOCALB00
0x6E68  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6E6B  0x20 0x1E       PUSHGLOBALB 0x1E
0x6E6D  0x2C 0x59       CALLB 0x59     // Token.New
0x6E6F  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:336
// ####  Scanner.scanChar(..)  ####                                             0x0069


                        // char c = advance();                                  scanner.hs:337

0x6E71  0x5F 0x01       ENTERB 0x01

                        // char c = advance();                                  scanner.hs:337

0x6E73  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E75  0x4C            POPLOCALB00

                        // if (c == char(0x5C))                                 scanner.hs:338

0x6E76  0x4E            PUSHLOCALB00
0x6E77  0x1A 0x5C       PUSHIB 0x5C
0x6E79  0x05            EQ
0x6E7A  0x2E 0x16       JZB 0x6E90 (+22)

                        // if (   (peek() == char(0x27)) // \'                  scanner.hs:340

0x6E7C  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6E7E  0x1A 0x27       PUSHIB 0x27
0x6E80  0x05            EQ
0x6E81  0x27 0x00       DUP 0x00
0x6E83  0x2F 0x08       JNZB 0x6E8B (+8)
0x6E85  0x2C 0x64       CALLB 0x64     // Scanner.peek
0x6E87  0x1A 0x5C       PUSHIB 0x5C
0x6E89  0x05            EQ
0x6E8A  0x0B            BOOLOR
0x6E8B  0x2E 0x05       JZB 0x6E90 (+5)

                        // c = advance();         // gobble the \               scanner.hs:344

0x6E8D  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E8F  0x4C            POPLOCALB00

                        // char d = advance();                                  scanner.hs:347

0x6E90  0x44            PUSHI0
0x6E91  0x2C 0x63       CALLB 0x63     // Scanner.advance
0x6E93  0x4D            POPLOCALB02

                        // if (isAtEnd() || (d != char(0x27))) // '             scanner.hs:348

0x6E94  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6E96  0x27 0x00       DUP 0x00
0x6E98  0x2F 0x07       JNZB 0x6E9F (+7)
0x6E9A  0x4F            PUSHLOCALB02
0x6E9B  0x1A 0x27       PUSHIB 0x27
0x6E9D  0x06            NE
0x6E9E  0x0B            BOOLOR
0x6E9F  0x2E 0x0D       JZB 0x6EAC (+13)

                        // return errorToken("' expected");                     scanner.hs:350

0x6EA1  0x37 0x1E 0x01  PUSHIW 0x011E
0x6EA4  0x1A 0x0A       PUSHIB 0x0A
0x6EA6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x6EA8  0x2C 0x61       CALLB 0x61     // Scanner.errorToken
0x6EAA  0x2B 0x04       RETRETB 0x04

                        // return Token.New(HopperToken.Char, c.ToString(), currentLine, currentPos, currentSourcePath);

0x6EAC  0x1A 0x08       PUSHIB 0x08
0x6EAE  0x4E            PUSHLOCALB00
0x6EAF  0x34 0x66 0x01  CALLW 0x0166   // Char.ToString
0x6EB2  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6EB5  0x20 0x1E       PUSHGLOBALB 0x1E
0x6EB7  0x2C 0x59       CALLB 0x59     // Token.New
0x6EB9  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:132
// ####  Scanner.errorToken(..)  ####                                           0x0061

0x6EBB  0x49            ENTER

                        // <string,string> token = Token.New(HopperToken.Error, message, currentLine, currentPos, currentSourcePath);

0x6EBC  0x1A 0x0F       PUSHIB 0x0F
0x6EBE  0x1A 0x0F       PUSHIB 0x0F
0x6EC0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x6EC2  0x45            PUSHI1
0x6EC3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6EC5  0x52 0x16 0x14  PUSHGLOBALBB 0x1416
0x6EC8  0x20 0x1E       PUSHGLOBALB 0x1E
0x6ECA  0x2C 0x59       CALLB 0x59     // Token.New
0x6ECC  0x5D            POPCOPYLOCALB00

                        // return token;                                        scanner.hs:134

0x6ECD  0x4E            PUSHLOCALB00
0x6ECE  0x2B 0x04       RETRETB 0x04


// /source/compiler/tokens/scanner.hs:38
// ####  Scanner.Load(..)  ####                                                 0x005C


                        // byte b;                                              scanner.hs:39

0x6ED0  0x5F 0x01       ENTERB 0x01

                        // string ln;                                           scanner.hs:40

0x6ED2  0x24 0x02       SYSCALL0 0x02  // String.New

                        // sourceLines.Clear();                                 scanner.hs:42

0x6ED4  0x20 0x12       PUSHGLOBALB 0x12
0x6ED6  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // sourceLength = 0;                                    scanner.hs:43

0x6ED8  0x44            PUSHI0
0x6ED9  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6EDB  0x59 0x18       POPCOPYGLOBALB 0x18

                        // file sourceFile = File.Open(sourcePath);             scanner.hs:44

0x6EDD  0x24 0x60       SYSCALL0 0x60  // File.New
0x6EDF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6EE1  0x24 0x61       SYSCALL0 0x61  // File.Open
0x6EE3  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint progress = 0;                                   scanner.hs:45

0x6EE5  0x44            PUSHI0

                        // if (sourceFile.IsValid())                            scanner.hs:46

0x6EE6  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6EE8  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x6EEA  0x2E 0x65       JZB 0x6F4F (+101)

                        // String.Build(ref ln); // clear                       scanner.hs:50

0x6EEC  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x6EEE  0x1A 0x02       PUSHIB 0x02
0x6EF0  0x26 0x83       SYSCALL 0x83  // String.Build

                        // b = sourceFile.Read();                               scanner.hs:53

0x6EF2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6EF4  0x24 0x64       SYSCALL0 0x64  // File.Read
0x6EF6  0x4C            POPLOCALB00

                        // if (b == 0)                                          scanner.hs:54

0x6EF7  0x4E            PUSHLOCALB00
0x6EF8  0x2E 0x0D       JZB 0x6F05 (+13)

                        // Build(ref ln, char(b));                              scanner.hs:58

0x6EFA  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x6EFC  0x4E            PUSHLOCALB00
0x6EFD  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // if (b == 0x0A)                                       scanner.hs:59

0x6EFF  0x4E            PUSHLOCALB00
0x6F00  0x1A 0x0A       PUSHIB 0x0A
0x6F02  0x05            EQ
0x6F03  0x2E 0xEF       JZB 0x6EF2 (-17)

                        // if ((ln.Length == 0) && !sourceFile.IsValid())

0x6F05  0x4F            PUSHLOCALB02
0x6F06  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6F08  0x44            PUSHI0
0x6F09  0x05            EQ
0x6F0A  0x27 0x00       DUP 0x00
0x6F0C  0x2E 0x08       JZB 0x6F14 (+8)
0x6F0E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6F10  0x24 0x65       SYSCALL0 0x65  // File.IsValid
0x6F12  0x41            BOOLNOT
0x6F13  0x0C            BOOLAND
0x6F14  0x2F 0x2D       JNZB 0x6F41 (+45)

                        // sourceLength = sourceLength + ln.Length;             scanner.hs:68

0x6F16  0x20 0x18       PUSHGLOBALB 0x18
0x6F18  0x4F            PUSHLOCALB02
0x6F19  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6F1B  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6F1D  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6F1F  0x59 0x18       POPCOPYGLOBALB 0x18

                        // sourceLines.Append(ln);                              scanner.hs:69

0x6F21  0x20 0x12       PUSHGLOBALB 0x12
0x6F23  0x4F            PUSHLOCALB02
0x6F24  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // progress = progress + ln.Length;                     scanner.hs:71

0x6F26  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6F28  0x4F            PUSHLOCALB02
0x6F29  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6F2B  0x00            ADD
0x6F2C  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (progress > 10240)                                scanner.hs:72

0x6F2E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6F30  0x37 0x00 0x28  PUSHIW 0x2800
0x6F33  0x07            GT
0x6F34  0x2E 0xB8       JZB 0x6EEC (-72)

                        // Parser.ProgressTick("+");                            scanner.hs:74

0x6F36  0x1A 0x2B       PUSHIB 0x2B
0x6F38  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6F3A  0x2C 0x71       CALLB 0x71     // Parser.ProgressTick

                        // progress = 0;                                        scanner.hs:75

0x6F3C  0x44            PUSHI0
0x6F3D  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // } // loop                                            scanner.hs:77

0x6F3F  0x30 0xAD       JB 0x6EEC (-83)

                        // if (progress > 2560)                                 scanner.hs:78

0x6F41  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x6F43  0x37 0x00 0x0A  PUSHIW 0x0A00
0x6F46  0x07            GT
0x6F47  0x2E 0x08       JZB 0x6F4F (+8)

                        // Parser.ProgressTick("+");                            scanner.hs:80

0x6F49  0x1A 0x2B       PUSHIB 0x2B
0x6F4B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x6F4D  0x2C 0x71       CALLB 0x71     // Parser.ProgressTick

                        // currentSourcePath = sourcePath;                      scanner.hs:83

0x6F4F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6F51  0x59 0x1E       POPCOPYGLOBALB 0x1E

                        // }                                                    scanner.hs:84

0x6F53  0x2A 0x0A       RETB 0x0A


// /source/compiler/tokens/scanner.hs:205
// ####  Scanner.peek(..)  ####                                                 0x0064

0x6F55  0x49            ENTER

                        // return sourceGetFromPos(currentPos, true);           scanner.hs:206

0x6F56  0x20 0x14       PUSHGLOBALB 0x14
0x6F58  0x45            PUSHI1
0x6F59  0x2C 0x62       CALLB 0x62     // Scanner.sourceGetFromPos
0x6F5B  0x4A            RET0


// /source/compiler/tokens/scanner.hs:209
// ####  Scanner.peekNext(..)  ####                                             0x0065

0x6F5C  0x49            ENTER

                        // if (isAtEnd())                                       scanner.hs:210

0x6F5D  0x2C 0x60       CALLB 0x60     // Scanner.isAtEnd
0x6F5F  0x2E 0x04       JZB 0x6F63 (+4)

                        // return char(0);                                      scanner.hs:212

0x6F61  0x44            PUSHI0
0x6F62  0x4A            RET0

                        // long currentPlusOne = currentPos+1;                  scanner.hs:214

0x6F63  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0x6F65  0x20 0x14       PUSHGLOBALB 0x14
0x6F67  0x45            PUSHI1
0x6F68  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6F6A  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6F6C  0x5D            POPCOPYLOCALB00

                        // return sourceGetFromPos(currentPlusOne, false);

0x6F6D  0x4E            PUSHLOCALB00
0x6F6E  0x44            PUSHI0
0x6F6F  0x2C 0x62       CALLB 0x62     // Scanner.sourceGetFromPos
0x6F71  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/scanner.hs:137
// ####  Scanner.sourceGetFromPos(..)  ####                                     0x0062


                        // char c;                                              scanner.hs:138

0x6F73  0x5F 0x05       ENTERB 0x05

                        // string ln;                                           scanner.hs:143

0x6F75  0x24 0x02       SYSCALL0 0x02  // String.New

                        // long current;                                        scanner.hs:144

0x6F77  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long limit;                                          scanner.hs:145

0x6F79  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // long index;                                          scanner.hs:146

0x6F7B  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (lastPosSet)                                      scanner.hs:150

0x6F7D  0x20 0x24       PUSHGLOBALB 0x24
0x6F7F  0x2E 0x10       JZB 0x6F8F (+16)

                        // if (pos == lastPos)                                  scanner.hs:152

0x6F81  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6F83  0x20 0x22       PUSHGLOBALB 0x22
0x6F85  0x24 0x44       SYSCALL0 0x44  // Long.EQ
0x6F87  0x2E 0x08       JZB 0x6F8F (+8)

                        // c = lastChar;                                        scanner.hs:154

0x6F89  0x20 0x20       PUSHGLOBALB 0x20
0x6F8B  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:155

0x6F8C  0x33 0x84 0x00  JW 0x7010 (+132)

                        // if (pos < currentStartPos)                           scanner.hs:158

0x6F8F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x6F91  0x20 0x1C       PUSHGLOBALB 0x1C
0x6F93  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x6F95  0x2E 0x0A       JZB 0x6F9F (+10)

                        // currentStartPos = 0;                                 scanner.hs:160

0x6F97  0x44            PUSHI0
0x6F98  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6F9A  0x59 0x1C       POPCOPYGLOBALB 0x1C

                        // iCurrentSourceLine = 0;                              scanner.hs:161

0x6F9C  0x44            PUSHI0
0x6F9D  0x1F 0x1A       POPGLOBALB 0x1A

                        // current = currentStartPos;                           scanner.hs:164

0x6F9F  0x20 0x1C       PUSHGLOBALB 0x1C
0x6FA1  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iCurrentSourceLine;                          scanner.hs:165

0x6FA3  0x20 0x1A       PUSHGLOBALB 0x1A
0x6FA5  0x4D            POPLOCALB02

                        // maxLines = sourceLines.Length;                       scanner.hs:166

0x6FA6  0x20 0x12       PUSHGLOBALB 0x12
0x6FA8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x6FAA  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // ln = sourceLines[iLine];                             scanner.hs:169

0x6FAC  0x20 0x12       PUSHGLOBALB 0x12
0x6FAE  0x4F            PUSHLOCALB02
0x6FAF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x6FB1  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // length = ln.Length;                                  scanner.hs:170

0x6FB3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x6FB5  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x6FB7  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // limit = current+length;                              scanner.hs:171

0x6FB9  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x6FBC  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6FBE  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6FC0  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if ((pos >= current) && (pos < limit))               scanner.hs:172

0x6FC2  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x6FC5  0x24 0x48       SYSCALL0 0x48  // Long.GE
0x6FC7  0x27 0x00       DUP 0x00
0x6FC9  0x2E 0x08       JZB 0x6FD1 (+8)
0x6FCB  0x56 0xFC 0x0E  PUSHLOCALBB 0x0EFC
0x6FCE  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x6FD0  0x0C            BOOLAND
0x6FD1  0x2E 0x17       JZB 0x6FE8 (+23)

                        // index = pos - current;                               scanner.hs:174

0x6FD3  0x56 0xFC 0x0C  PUSHLOCALBB 0x0CFC
0x6FD6  0x24 0x40       SYSCALL0 0x40  // Long.Sub
0x6FD8  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // uindex = uint(index);                                scanner.hs:175

0x6FDA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x6FDC  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x6FDE  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // c = ln[uindex];                                      scanner.hs:176

0x6FE0  0x56 0x0A 0x08  PUSHLOCALBB 0x080A
0x6FE3  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x6FE5  0x4C            POPLOCALB00

                        // break;                                               scanner.hs:177

0x6FE6  0x30 0x20       JB 0x7006 (+32)

                        // current = current + length;                          scanner.hs:179

0x6FE8  0x56 0x0C 0x06  PUSHLOCALBB 0x060C
0x6FEB  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x6FED  0x24 0x3F       SYSCALL0 0x3F  // Long.Add
0x6FEF  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // iLine = iLine + 1;                                   scanner.hs:180

0x6FF1  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (iLine == maxLines)                               scanner.hs:181

0x6FF3  0x4F            PUSHLOCALB02
0x6FF4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x6FF6  0x05            EQ
0x6FF7  0x2F 0x0F       JNZB 0x7006 (+15)

                        // if (updateCache)                                     scanner.hs:185

0x6FF9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x6FFB  0x2E 0xB1       JZB 0x6FAC (-79)

                        // currentStartPos = current;                           scanner.hs:187

0x6FFD  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x6FFF  0x59 0x1C       POPCOPYGLOBALB 0x1C

                        // iCurrentSourceLine = iLine;                          scanner.hs:188

0x7001  0x4F            PUSHLOCALB02
0x7002  0x1F 0x1A       POPGLOBALB 0x1A

                        // }                                                    scanner.hs:190

0x7004  0x30 0xA8       JB 0x6FAC (-88)

                        // lastPos = pos;                                       scanner.hs:191

0x7006  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7008  0x59 0x22       POPCOPYGLOBALB 0x22

                        // lastChar = c;                                        scanner.hs:192

0x700A  0x4E            PUSHLOCALB00
0x700B  0x1F 0x20       POPGLOBALB 0x20

                        // lastPosSet = true;                                   scanner.hs:193

0x700D  0x45            PUSHI1
0x700E  0x1F 0x24       POPGLOBALB 0x24

                        // return c;                                            scanner.hs:196

0x7010  0x4E            PUSHLOCALB00
0x7011  0x2B 0x16       RETRETB 0x16


// /source/compiler/codegen/block.hs:122
// ####  Block.PushBlock(..)  ####                                              0x0153

0x7013  0x49            ENTER

                        // <string,variant> blockContext;                       block.hs:123

0x7014  0x1A 0x0F       PUSHIB 0x0F
0x7016  0x1A 0x14       PUSHIB 0x14
0x7018  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // if (isLoopBlock)                                     block.hs:124

0x701A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x701C  0x2E 0x23       JZB 0x703F (+35)

                        // <uint> breakPatches;                                 block.hs:126

0x701E  0x1A 0x04       PUSHIB 0x04
0x7020  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // blockContext["breaks"] = breakPatches;               block.hs:127

0x7022  0x4E            PUSHLOCALB00
0x7023  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x7026  0x1A 0x06       PUSHIB 0x06
0x7028  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x702A  0x4F            PUSHLOCALB02
0x702B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // <uint> continuePatches;                              block.hs:128

0x702D  0x1A 0x04       PUSHIB 0x04
0x702F  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // blockContext["continues"] = continuePatches;

0x7031  0x4E            PUSHLOCALB00
0x7032  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x7035  0x1A 0x09       PUSHIB 0x09
0x7037  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7039  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x703B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    block.hs:130

0x703D  0x28 0x04       DECSP 0x04

                        // < <string> > locals;                                 block.hs:131

0x703F  0x1A 0x19       PUSHIB 0x19
0x7041  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // blockContext["locals"] = locals;                     block.hs:132

0x7043  0x4E            PUSHLOCALB00
0x7044  0x37 0x69 0x01  PUSHIW 0x0169
0x7047  0x1A 0x06       PUSHIB 0x06
0x7049  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x704B  0x4F            PUSHLOCALB02
0x704C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // if (blockList.Length == 0)                           block.hs:133

0x704E  0x20 0xB2       PUSHGLOBALB 0xB2
0x7050  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7052  0x2F 0x14       JNZB 0x7066 (+20)

                        // < <string> > globals;                                block.hs:135

0x7054  0x1A 0x19       PUSHIB 0x19
0x7056  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // blockContext["globals"] = globals;                   block.hs:136

0x7058  0x4E            PUSHLOCALB00
0x7059  0x37 0x6F 0x01  PUSHIW 0x016F
0x705C  0x1A 0x07       PUSHIB 0x07
0x705E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7060  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7062  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    block.hs:137

0x7064  0x28 0x02       DECSP 0x02

                        // blockList.Append(blockContext);                      block.hs:138

0x7066  0x20 0xB2       PUSHGLOBALB 0xB2
0x7068  0x4E            PUSHLOCALB00
0x7069  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    block.hs:139

0x706B  0x2A 0x06       RETB 0x06


// /source/compiler/codegen/block.hs:143
// ####  Block.PopBlock(..)  ####                                               0x0154


                        // PopBlock(0, 0);                                      block.hs:144

0x706D  0x5F 0x02       ENTERB 0x02

                        // PopBlock(0, 0);                                      block.hs:144

0x706F  0x34 0x55 0x01  CALLW 0x0155   // Block.PopBlock

                        // }                                                    block.hs:145

0x7072  0x4A            RET0


// /source/compiler/codegen/block.hs:20
// ####  Block.Top(..)  ####                                                    0x014D


                        // uint iLast = blockList.Length;                       block.hs:21

0x7073  0x5F 0x01       ENTERB 0x01

                        // uint iLast = blockList.Length;                       block.hs:21

0x7075  0x20 0xB2       PUSHGLOBALB 0xB2
0x7077  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7079  0x4C            POPLOCALB00

                        // iLast--;                                             block.hs:22

0x707A  0x23 0x00       DECLOCALB 0x00 (BP+0)

                        // <string,variant> blockContext = blockList[iLast];

0x707C  0x1A 0x0F       PUSHIB 0x0F
0x707E  0x1A 0x14       PUSHIB 0x14
0x7080  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7082  0x20 0xB2       PUSHGLOBALB 0xB2
0x7084  0x4E            PUSHLOCALB00
0x7085  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7087  0x5E            POPCOPYLOCALB02

                        // return blockContext;                                 block.hs:24

0x7088  0x4F            PUSHLOCALB02
0x7089  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/block.hs:65
// ####  Block.ReplaceTop(..)  ####                                             0x0150


                        // uint iLast = blockList.Length;                       block.hs:66

0x708B  0x5F 0x01       ENTERB 0x01

                        // uint iLast = blockList.Length;                       block.hs:66

0x708D  0x20 0xB2       PUSHGLOBALB 0xB2
0x708F  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7091  0x4C            POPLOCALB00

                        // iLast--;                                             block.hs:67

0x7092  0x23 0x00       DECLOCALB 0x00 (BP+0)

                        // blockList.SetItem(iLast, blockContext);              block.hs:68

0x7094  0x20 0xB2       PUSHGLOBALB 0xB2
0x7096  0x4E            PUSHLOCALB00
0x7097  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7099  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    block.hs:69

0x709B  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/block.hs:293
// ####  Block.GetLocalsToPop(..)  ####                                         0x0158


                        // uint localsToPop = 0;                                block.hs:294

0x709D  0x5F 0x02       ENTERB 0x02

                        // uint iLast = blockList.Length;                       block.hs:295

0x709F  0x20 0xB2       PUSHGLOBALB 0xB2
0x70A1  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x70A3  0x4D            POPLOCALB02

                        // if (iLast == 0)                                      block.hs:298

0x70A4  0x4F            PUSHLOCALB02
0x70A5  0x31 0xA1 0x00  JZW 0x7146 (+161)

                        // iLast--;                                             block.hs:302

0x70A8  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // <string,variant> blockContext = blockList[iLast];

0x70AA  0x1A 0x0F       PUSHIB 0x0F
0x70AC  0x1A 0x14       PUSHIB 0x14
0x70AE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x70B0  0x20 0xB2       PUSHGLOBALB 0xB2
0x70B2  0x4F            PUSHLOCALB02
0x70B3  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x70B5  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("locals"))                 block.hs:304

0x70B7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x70B9  0x37 0x69 0x01  PUSHIW 0x0169
0x70BC  0x1A 0x06       PUSHIB 0x06
0x70BE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x70C0  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x70C2  0x2E 0x1F       JZB 0x70E1 (+31)

                        // < < string > > locals = blockContext["locals"];

0x70C4  0x1A 0x19       PUSHIB 0x19
0x70C6  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x70C8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x70CA  0x37 0x69 0x01  PUSHIW 0x0169
0x70CD  0x1A 0x06       PUSHIB 0x06
0x70CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x70D1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x70D3  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // localsToPop = localsToPop + locals.Length * 2; // 2 bytes per stack slot for locals

0x70D5  0x4E            PUSHLOCALB00
0x70D6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x70D8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x70DA  0x1A 0x02       PUSHIB 0x02
0x70DC  0x03            MUL
0x70DD  0x00            ADD
0x70DE  0x4C            POPLOCALB00

                        // }                                                    block.hs:308

0x70DF  0x28 0x02       DECSP 0x02

                        // if (andArguments && blockContext.Contains("arguments"))

0x70E1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x70E3  0x27 0x00       DUP 0x00
0x70E5  0x2E 0x0D       JZB 0x70F2 (+13)
0x70E7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x70E9  0x1A 0x5E       PUSHIB 0x5E
0x70EB  0x1A 0x09       PUSHIB 0x09
0x70ED  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x70EF  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x70F1  0x0C            BOOLAND
0x70F2  0x2E 0x1E       JZB 0x7110 (+30)

                        // < < string > > arguments = blockContext["arguments"];

0x70F4  0x1A 0x19       PUSHIB 0x19
0x70F6  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x70F8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x70FA  0x1A 0x5E       PUSHIB 0x5E
0x70FC  0x1A 0x09       PUSHIB 0x09
0x70FE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7100  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7102  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // localsToPop = localsToPop + arguments.Length * 2; // 2 bytes per stack slot for arguments

0x7104  0x4E            PUSHLOCALB00
0x7105  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7107  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7109  0x1A 0x02       PUSHIB 0x02
0x710B  0x03            MUL
0x710C  0x00            ADD
0x710D  0x4C            POPLOCALB00

                        // }                                                    block.hs:313

0x710E  0x28 0x02       DECSP 0x02

                        // if (andGlobals && blockContext.Contains("globals"))

0x7110  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7112  0x27 0x00       DUP 0x00
0x7114  0x2E 0x0E       JZB 0x7122 (+14)
0x7116  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7118  0x37 0x6F 0x01  PUSHIW 0x016F
0x711B  0x1A 0x07       PUSHIB 0x07
0x711D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x711F  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x7121  0x0C            BOOLAND
0x7122  0x2E 0x1F       JZB 0x7141 (+31)

                        // < < string > > globals = blockContext["globals"];

0x7124  0x1A 0x19       PUSHIB 0x19
0x7126  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x7128  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x712A  0x37 0x6F 0x01  PUSHIW 0x016F
0x712D  0x1A 0x07       PUSHIB 0x07
0x712F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7131  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7133  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // localsToPop = localsToPop + globals.Length * 2; // 2 bytes per stack slot for globals

0x7135  0x4E            PUSHLOCALB00
0x7136  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7138  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x713A  0x1A 0x02       PUSHIB 0x02
0x713C  0x03            MUL
0x713D  0x00            ADD
0x713E  0x4C            POPLOCALB00

                        // }                                                    block.hs:318

0x713F  0x28 0x02       DECSP 0x02

                        // }                                                    block.hs:319

0x7141  0x28 0x02       DECSP 0x02
0x7143  0x33 0x61 0xFF  JW 0x70A4 (-159)

                        // return localsToPop;                                  block.hs:320

0x7146  0x4E            PUSHLOCALB00
0x7147  0x2B 0x08       RETRETB 0x08


// /source/compiler/codegen/block.hs:487
// ####  Block.Export(..)  ####                                                 0x015B

0x7149  0x49            ENTER

                        // if (DefineExists("H6502"))                           block.hs:488

0x714A  0x37 0xEB 0x06  PUSHIW 0x06EB
0x714D  0x1A 0x05       PUSHIB 0x05
0x714F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7151  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x7153  0x31 0xDF 0x00  JZW 0x7232 (+223)

                        // <string,variant> blockContext = blockList[iBlock];

0x7156  0x1A 0x0F       PUSHIB 0x0F
0x7158  0x1A 0x14       PUSHIB 0x14
0x715A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x715C  0x20 0xB2       PUSHGLOBALB 0xB2
0x715E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7160  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7162  0x5D            POPCOPYLOCALB00

                        // < <string> > locals;                                 block.hs:491

0x7163  0x1A 0x19       PUSHIB 0x19
0x7165  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (blockContext.Contains("locals"))                 block.hs:492

0x7167  0x4E            PUSHLOCALB00
0x7168  0x37 0x69 0x01  PUSHIW 0x0169
0x716B  0x1A 0x06       PUSHIB 0x06
0x716D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x716F  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x7171  0x2E 0x0D       JZB 0x717E (+13)

                        // locals = blockContext["locals"];                     block.hs:494

0x7173  0x4E            PUSHLOCALB00
0x7174  0x37 0x69 0x01  PUSHIW 0x0169
0x7177  0x1A 0x06       PUSHIB 0x06
0x7179  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x717B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x717D  0x5E            POPCOPYLOCALB02

                        // if (locals.Length > 0)                               block.hs:496

0x717E  0x4F            PUSHLOCALB02
0x717F  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7181  0x44            PUSHI0
0x7182  0x07            GT
0x7183  0x31 0xAD 0x00  JZW 0x7230 (+173)

                        // < <string> > localNamesAndTypes;                     block.hs:498

0x7186  0x1A 0x19       PUSHIB 0x19
0x7188  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint toAddress = LastInstructionIndex;               block.hs:500

0x718A  0x44            PUSHI0
0x718B  0x34 0x41 0x01  CALLW 0x0141   // Peephole.LastInstructionIndex_Get
0x718E  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // foreach (var local in locals)                        block.hs:501

0x7190  0x4F            PUSHLOCALB02
0x7191  0x44            PUSHI0
0x7192  0x44            PUSHI0
0x7193  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7195  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7197  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x7199  0x05            EQ
0x719A  0x32 0x88 0x00  JNZW 0x7222 (+136)
0x719D  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x71A0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x71A2  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // <string> lstring = local;                            block.hs:503

0x71A4  0x1A 0x0F       PUSHIB 0x0F
0x71A6  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x71A8  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x71AA  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string ltype    = lstring[0];                        block.hs:504

0x71AC  0x24 0x02       SYSCALL0 0x02  // String.New
0x71AE  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x71B0  0x44            PUSHI0
0x71B1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x71B3  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string lname    = lstring[1];                        block.hs:505

0x71B5  0x24 0x02       SYSCALL0 0x02  // String.New
0x71B7  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x71B9  0x45            PUSHI1
0x71BA  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x71BC  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // string laddress = lstring[2];                        block.hs:506

0x71BE  0x24 0x02       SYSCALL0 0x02  // String.New
0x71C0  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x71C2  0x1A 0x02       PUSHIB 0x02
0x71C4  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x71C6  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // bool isRef;                                          block.hs:507

0x71C8  0x44            PUSHI0

                        // int loffset = GetOffset(lname, ref isRef); // always positive for locals (BP+offset)

0x71C9  0x44            PUSHI0
0x71CA  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x71CC  0x21 0x16       PUSHSTACKADDRB 0x16 (BP+22)
0x71CE  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x71D1  0x1B 0x18       POPLOCALB 0x18 (BP+24)

                        // uint fromAddress;                                    block.hs:510

0x71D3  0x44            PUSHI0

                        // if (TryParseUInt(laddress, ref fromAddress))

0x71D4  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x71D6  0x21 0x1A       PUSHSTACKADDRB 0x1A (BP+26)
0x71D8  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x71DA  0x2E 0x02       JZB 0x71DC (+2)

                        // <string> localNameAndType;                           block.hs:514

0x71DC  0x1A 0x0F       PUSHIB 0x0F
0x71DE  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // localNameAndType.Append("0x" + fromAddress.ToHexString(4) + "-0x" + toAddress.ToHexString(4));

0x71E0  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0x71E2  0x37 0x30 0x78  PUSHIW 0x7830
0x71E5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x71E7  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0x71E9  0x1A 0x04       PUSHIB 0x04
0x71EB  0x34 0x71 0x01  CALLW 0x0171   // UInt.ToHexString
0x71EE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x71F0  0x37 0x05 0x0E  PUSHIW 0x0E05
0x71F3  0x1A 0x03       PUSHIB 0x03
0x71F5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x71F7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x71F9  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x71FB  0x1A 0x04       PUSHIB 0x04
0x71FD  0x34 0x71 0x01  CALLW 0x0171   // UInt.ToHexString
0x7200  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7202  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localNameAndType.Append(lname);                      block.hs:517

0x7204  0x56 0x1C 0x12  PUSHLOCALBB 0x121C
0x7207  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localNameAndType.Append(ltype);                      block.hs:518

0x7209  0x56 0x1C 0x10  PUSHLOCALBB 0x101C
0x720C  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localNameAndType.Append(loffset.ToString()); // in theory, could be -ve (but never)

0x720E  0x56 0x1C 0x18  PUSHLOCALBB 0x181C
0x7211  0x34 0x6A 0x01  CALLW 0x016A   // Int.ToString
0x7214  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // localNamesAndTypes.Append(localNameAndType);

0x7216  0x56 0x04 0x1C  PUSHLOCALBB 0x1C04
0x7219  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    block.hs:522

0x721B  0x28 0x10       DECSP 0x10
0x721D  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x721F  0x33 0x74 0xFF  JW 0x7193 (-140)
0x7222  0x28 0x06       DECSP 0x06

                        // uint iOverload = Types.GetCurrentMethod();           block.hs:523

0x7224  0x44            PUSHI0
0x7225  0x2C 0xD0       CALLB 0xD0     // Types.GetCurrentMethod
0x7227  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // Symbols.AppendLocalNamesAndTypes(iOverload, localNamesAndTypes);

0x7229  0x56 0x08 0x04  PUSHLOCALBB 0x0408
0x722C  0x2C 0xC4       CALLB 0xC4     // Symbols.AppendLocalNamesAndTypes

                        // }                                                    block.hs:525

0x722E  0x28 0x06       DECSP 0x06

                        // } // H6502                                           block.hs:526

0x7230  0x28 0x04       DECSP 0x04

                        // }                                                    block.hs:527

0x7232  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/block.hs:27
// ####  Block.GetMethodBlock(..)  ####                                         0x014E

0x7234  0x49            ENTER

                        // <string,variant> methodBlock;                        block.hs:28

0x7235  0x1A 0x0F       PUSHIB 0x0F
0x7237  0x1A 0x14       PUSHIB 0x14
0x7239  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // uint iBlock = blockList.Length;                      block.hs:29

0x723B  0x44            PUSHI0
0x723C  0x20 0xB2       PUSHGLOBALB 0xB2
0x723E  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7240  0x4D            POPLOCALB02

                        // if (iBlock == 0)                                     block.hs:32

0x7241  0x4F            PUSHLOCALB02
0x7242  0x2E 0x28       JZB 0x726A (+40)

                        // iBlock--;                                            block.hs:36

0x7244  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // <string,variant> blockContext = blockList[iBlock];

0x7246  0x1A 0x0F       PUSHIB 0x0F
0x7248  0x1A 0x14       PUSHIB 0x14
0x724A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x724C  0x20 0xB2       PUSHGLOBALB 0xB2
0x724E  0x4F            PUSHLOCALB02
0x724F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7251  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("arguments"))              block.hs:38

0x7253  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7255  0x1A 0x5E       PUSHIB 0x5E
0x7257  0x1A 0x09       PUSHIB 0x09
0x7259  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x725B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x725D  0x2E 0x09       JZB 0x7266 (+9)

                        // methodBlock = blockContext;                          block.hs:40

0x725F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7261  0x5D            POPCOPYLOCALB00

                        // break;                                               block.hs:41

0x7262  0x28 0x02       DECSP 0x02
0x7264  0x30 0x06       JB 0x726A (+6)

                        // }                                                    block.hs:43

0x7266  0x28 0x02       DECSP 0x02
0x7268  0x30 0xD9       JB 0x7241 (-39)

                        // return methodBlock;                                  block.hs:44

0x726A  0x4E            PUSHLOCALB00
0x726B  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/block.hs:247
// ####  Block.GetBytesToPop(..)  ####                                          0x0157


                        // uint bytesToPop = 0;                                 block.hs:248

0x726D  0x5F 0x02       ENTERB 0x02

                        // uint iLast = blockList.Length;                       block.hs:249

0x726F  0x20 0xB2       PUSHGLOBALB 0xB2
0x7271  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7273  0x4D            POPLOCALB02

                        // if (iLast == 0)                                      block.hs:252

0x7274  0x4F            PUSHLOCALB02
0x7275  0x31 0xBC 0x00  JZW 0x7331 (+188)

                        // iLast--;                                             block.hs:256

0x7278  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // <string,variant> blockContext = blockList[iLast];

0x727A  0x1A 0x0F       PUSHIB 0x0F
0x727C  0x1A 0x14       PUSHIB 0x14
0x727E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7280  0x20 0xB2       PUSHGLOBALB 0xB2
0x7282  0x4F            PUSHLOCALB02
0x7283  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7285  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // uint popMore;                                        block.hs:258

0x7287  0x44            PUSHI0

                        // if (blockContext.Contains("arguments"))              block.hs:259

0x7288  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x728A  0x1A 0x5E       PUSHIB 0x5E
0x728C  0x1A 0x09       PUSHIB 0x09
0x728E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7290  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x7292  0x2E 0x1F       JZB 0x72B1 (+31)

                        // < < string > > arguments = blockContext["arguments"];

0x7294  0x1A 0x19       PUSHIB 0x19
0x7296  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x7298  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x729A  0x1A 0x5E       PUSHIB 0x5E
0x729C  0x1A 0x09       PUSHIB 0x09
0x729E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x72A0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x72A2  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // popMore = popMore + arguments.Length * 2; // 2 bytes per stack slot for arguments

0x72A4  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x72A7  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x72A9  0x1A 0x02       PUSHIB 0x02
0x72AB  0x03            MUL
0x72AC  0x00            ADD
0x72AD  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    block.hs:263

0x72AF  0x28 0x02       DECSP 0x02

                        // if (blockContext.Contains("locals"))                 block.hs:264

0x72B1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x72B3  0x37 0x69 0x01  PUSHIW 0x0169
0x72B6  0x1A 0x06       PUSHIB 0x06
0x72B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x72BA  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x72BC  0x2E 0x20       JZB 0x72DC (+32)

                        // < < string > > locals = blockContext["locals"];

0x72BE  0x1A 0x19       PUSHIB 0x19
0x72C0  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x72C2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x72C4  0x37 0x69 0x01  PUSHIW 0x0169
0x72C7  0x1A 0x06       PUSHIB 0x06
0x72C9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x72CB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x72CD  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // popMore = popMore + locals.Length * 2; // 2 bytes per stack slot for locals

0x72CF  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x72D2  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x72D4  0x1A 0x02       PUSHIB 0x02
0x72D6  0x03            MUL
0x72D7  0x00            ADD
0x72D8  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    block.hs:268

0x72DA  0x28 0x02       DECSP 0x02

                        // if (blockContext.Contains("globals"))                block.hs:269

0x72DC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x72DE  0x37 0x6F 0x01  PUSHIW 0x016F
0x72E1  0x1A 0x07       PUSHIB 0x07
0x72E3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x72E5  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x72E7  0x2E 0x20       JZB 0x7307 (+32)

                        // < < string > > globals = blockContext["globals"];

0x72E9  0x1A 0x19       PUSHIB 0x19
0x72EB  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x72ED  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x72EF  0x37 0x6F 0x01  PUSHIW 0x016F
0x72F2  0x1A 0x07       PUSHIB 0x07
0x72F4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x72F6  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x72F8  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // popMore = popMore + globals.Length * 2; // 2 bytes per stack slot for globals

0x72FA  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0x72FD  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x72FF  0x1A 0x02       PUSHIB 0x02
0x7301  0x03            MUL
0x7302  0x00            ADD
0x7303  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // }                                                    block.hs:273

0x7305  0x28 0x02       DECSP 0x02

                        // bytesToPop = bytesToPop + popMore;                   block.hs:274

0x7307  0x3F 0x00 0x06  INCLOCALBB 0x0600

                        // if (!toLoop)                                         block.hs:275

0x730A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x730C  0x2F 0x06       JNZB 0x7312 (+6)

                        // break;                                               block.hs:277

0x730E  0x28 0x04       DECSP 0x04
0x7310  0x30 0x21       JB 0x7331 (+33)

                        // if (blockContext.Contains("breaks")) // loop block

0x7312  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7314  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x7317  0x1A 0x06       PUSHIB 0x06
0x7319  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x731B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x731D  0x2E 0x0F       JZB 0x732C (+15)

                        // if (isContinue)                                      block.hs:281

0x731F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7321  0x2E 0x07       JZB 0x7328 (+7)

                        // bytesToPop = bytesToPop - popMore;                   block.hs:283

0x7323  0x4E            PUSHLOCALB00
0x7324  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7326  0x01            SUB
0x7327  0x4C            POPLOCALB00

                        // break;                                               block.hs:285

0x7328  0x28 0x04       DECSP 0x04
0x732A  0x30 0x07       JB 0x7331 (+7)

                        // }                                                    block.hs:287

0x732C  0x28 0x04       DECSP 0x04
0x732E  0x33 0x46 0xFF  JW 0x7274 (-186)

                        // return bytesToPop;                                   block.hs:289

0x7331  0x4E            PUSHLOCALB00
0x7332  0x2B 0x08       RETRETB 0x08


// /source/compiler/codegen/block.hs:72
// ####  Block.AddBreakPatch(..)  ####                                          0x0151


                        // bool success = false;                                block.hs:73

0x7334  0x5F 0x02       ENTERB 0x02

                        // uint iLoop = blockList.Length;                       block.hs:74

0x7336  0x20 0xB2       PUSHGLOBALB 0xB2
0x7338  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x733A  0x4D            POPLOCALB02

                        // if (iLoop == 0)                                      block.hs:77

0x733B  0x4F            PUSHLOCALB02
0x733C  0x2E 0x52       JZB 0x738E (+82)

                        // iLoop--;                                             block.hs:81

0x733E  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // <string,variant> blockContext = blockList[iLoop];

0x7340  0x1A 0x0F       PUSHIB 0x0F
0x7342  0x1A 0x14       PUSHIB 0x14
0x7344  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7346  0x20 0xB2       PUSHGLOBALB 0xB2
0x7348  0x4F            PUSHLOCALB02
0x7349  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x734B  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("breaks"))                 block.hs:83

0x734D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x734F  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x7352  0x1A 0x06       PUSHIB 0x06
0x7354  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7356  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x7358  0x2E 0x32       JZB 0x738A (+50)

                        // <uint> breakPatches = blockContext["breaks"];

0x735A  0x1A 0x04       PUSHIB 0x04
0x735C  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x735E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7360  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x7363  0x1A 0x06       PUSHIB 0x06
0x7365  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7367  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7369  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // breakPatches.Append(address);                        block.hs:86

0x736B  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0x736E  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockContext["breaks"] = breakPatches;               block.hs:87

0x7370  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7372  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x7375  0x1A 0x06       PUSHIB 0x06
0x7377  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7379  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x737B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // blockList.SetItem(iLoop, blockContext);              block.hs:88

0x737D  0x20 0xB2       PUSHGLOBALB 0xB2
0x737F  0x4F            PUSHLOCALB02
0x7380  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7382  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // success = true;                                      block.hs:89

0x7384  0x45            PUSHI1
0x7385  0x4C            POPLOCALB00

                        // break;                                               block.hs:90

0x7386  0x28 0x04       DECSP 0x04
0x7388  0x30 0x06       JB 0x738E (+6)

                        // }                                                    block.hs:92

0x738A  0x28 0x02       DECSP 0x02
0x738C  0x30 0xAF       JB 0x733B (-81)

                        // return success;                                      block.hs:93

0x738E  0x4E            PUSHLOCALB00
0x738F  0x2B 0x06       RETRETB 0x06


// /source/compiler/codegen/block.hs:97
// ####  Block.AddContinuePatch(..)  ####                                       0x0152


                        // bool success = false;                                block.hs:98

0x7391  0x5F 0x02       ENTERB 0x02

                        // uint iLoop = blockList.Length;                       block.hs:99

0x7393  0x20 0xB2       PUSHGLOBALB 0xB2
0x7395  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7397  0x4D            POPLOCALB02

                        // if (iLoop == 0)                                      block.hs:102

0x7398  0x4F            PUSHLOCALB02
0x7399  0x2E 0x52       JZB 0x73EB (+82)

                        // iLoop--;                                             block.hs:106

0x739B  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // <string,variant> blockContext = blockList[iLoop];

0x739D  0x1A 0x0F       PUSHIB 0x0F
0x739F  0x1A 0x14       PUSHIB 0x14
0x73A1  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x73A3  0x20 0xB2       PUSHGLOBALB 0xB2
0x73A5  0x4F            PUSHLOCALB02
0x73A6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x73A8  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("continues"))              block.hs:108

0x73AA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x73AC  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x73AF  0x1A 0x09       PUSHIB 0x09
0x73B1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x73B3  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x73B5  0x2E 0x32       JZB 0x73E7 (+50)

                        // <uint> continuePatches = blockContext["continues"];

0x73B7  0x1A 0x04       PUSHIB 0x04
0x73B9  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x73BB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x73BD  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x73C0  0x1A 0x09       PUSHIB 0x09
0x73C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x73C4  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x73C6  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // continuePatches.Append(address);                     block.hs:111

0x73C8  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0x73CB  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // blockContext["continues"] = continuePatches;

0x73CD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x73CF  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x73D2  0x1A 0x09       PUSHIB 0x09
0x73D4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x73D6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x73D8  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // blockList.SetItem(iLoop, blockContext);              block.hs:113

0x73DA  0x20 0xB2       PUSHGLOBALB 0xB2
0x73DC  0x4F            PUSHLOCALB02
0x73DD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x73DF  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // success = true;                                      block.hs:114

0x73E1  0x45            PUSHI1
0x73E2  0x4C            POPLOCALB00

                        // break;                                               block.hs:115

0x73E3  0x28 0x04       DECSP 0x04
0x73E5  0x30 0x06       JB 0x73EB (+6)

                        // }                                                    block.hs:117

0x73E7  0x28 0x02       DECSP 0x02
0x73E9  0x30 0xAF       JB 0x7398 (-81)

                        // return success;                                      block.hs:118

0x73EB  0x4E            PUSHLOCALB00
0x73EC  0x2B 0x06       RETRETB 0x06


// /source/compiler/codegen/block.hs:147
// ####  Block.PopBlock(..)  ####                                               0x0155


                        // uint iLast = blockList.Length;                       block.hs:148

0x73EE  0x5F 0x01       ENTERB 0x01

                        // uint iLast = blockList.Length;                       block.hs:148

0x73F0  0x20 0xB2       PUSHGLOBALB 0xB2
0x73F2  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x73F4  0x4C            POPLOCALB00

                        // iLast--;                                             block.hs:149

0x73F5  0x23 0x00       DECLOCALB 0x00 (BP+0)

                        // Export(iLast);                                       block.hs:150

0x73F7  0x4E            PUSHLOCALB00
0x73F8  0x34 0x5B 0x01  CALLW 0x015B   // Block.Export

                        // uint bytesToPop = GetBytesToPop();                   block.hs:152

0x73FB  0x44            PUSHI0
0x73FC  0x34 0x56 0x01  CALLW 0x0156   // Block.GetBytesToPop
0x73FF  0x4D            POPLOCALB02

                        // if (bytesToPop > 0)                                  block.hs:153

0x7400  0x4F            PUSHLOCALB02
0x7401  0x44            PUSHI0
0x7402  0x07            GT
0x7403  0x31 0x88 0x00  JZW 0x748B (+136)

                        // Instruction previousInstruction = CodeStream.GetLastInstruction();

0x7406  0x44            PUSHI0
0x7407  0x34 0x1D 0x01  CALLW 0x011D   // CodeStream.GetLastInstruction
0x740A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if ((previousInstruction != Instruction.RETB)

0x740C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x740E  0x1A 0x2A       PUSHIB 0x2A
0x7410  0x06            NE
0x7411  0x27 0x00       DUP 0x00
0x7413  0x2E 0x26       JZB 0x7439 (+38)
0x7415  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7417  0x1A 0x35       PUSHIB 0x35
0x7419  0x06            NE
0x741A  0x0C            BOOLAND
0x741B  0x27 0x00       DUP 0x00
0x741D  0x2E 0x1C       JZB 0x7439 (+28)
0x741F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7421  0x1A 0x2B       PUSHIB 0x2B
0x7423  0x06            NE
0x7424  0x0C            BOOLAND
0x7425  0x27 0x00       DUP 0x00
0x7427  0x2E 0x12       JZB 0x7439 (+18)
0x7429  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x742B  0x1A 0x36       PUSHIB 0x36
0x742D  0x06            NE
0x742E  0x0C            BOOLAND
0x742F  0x27 0x00       DUP 0x00
0x7431  0x2E 0x08       JZB 0x7439 (+8)
0x7433  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7435  0x1A 0x4A       PUSHIB 0x4A
0x7437  0x06            NE
0x7438  0x0C            BOOLAND
0x7439  0x2E 0x50       JZB 0x7489 (+80)

                        // <string,string> previousToken = Parser.PreviousToken;

0x743B  0x1A 0x0F       PUSHIB 0x0F
0x743D  0x1A 0x0F       PUSHIB 0x0F
0x743F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7441  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0x7443  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // HopperToken tokenType = Token.GetType(previousToken);

0x7445  0x44            PUSHI0
0x7446  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7448  0x2C 0x49       CALLB 0x49     // Token.GetType
0x744A  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (tokenType != HopperToken.RBrace)                 block.hs:165

0x744C  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x744E  0x1A 0x13       PUSHIB 0x13
0x7450  0x06            NE
0x7451  0x2E 0x15       JZB 0x7466 (+21)

                        // if (!Parser.HadError)                                block.hs:167

0x7453  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x7455  0x2F 0x11       JNZB 0x7466 (+17)

                        // Parser.ErrorAt(previousToken, "'}' expected in PopBlock(..)!!");

0x7457  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7459  0x37 0x08 0x0E  PUSHIW 0x0E08
0x745C  0x1A 0x1E       PUSHIB 0x1E
0x745E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7460  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // Die(0x0B);                                           block.hs:170

0x7462  0x1A 0x0B       PUSHIB 0x0B
0x7464  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.InsertDebugInfo(true); // PreviousToken is '{'

0x7466  0x45            PUSHI1
0x7467  0x34 0x3D 0x01  CALLW 0x013D   // CodeStream.InsertDebugInfo

                        // if (bytesToPop > 255)                                block.hs:175

0x746A  0x4F            PUSHLOCALB02
0x746B  0x1A 0xFF       PUSHIB 0xFF
0x746D  0x07            GT
0x746E  0x2E 0x06       JZB 0x7474 (+6)

                        // Die(0x0B); // need multiple calls to DECSP (see untested code below)

0x7470  0x1A 0x0B       PUSHIB 0x0B
0x7472  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // CodeStream.AddInstruction(Instruction.DECSP, byte(bytesToPop));

0x7474  0x1A 0x28       PUSHIB 0x28
0x7476  0x4F            PUSHLOCALB02
0x7477  0x51 0x03       CAST 0x03
0x7479  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // if (breakTarget != 0)                                block.hs:181

0x747C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x747E  0x2E 0x09       JZB 0x7487 (+9)

                        // breakTarget = breakTarget + 2; // break past the above DECSP

0x7480  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7482  0x1A 0x02       PUSHIB 0x02
0x7484  0x00            ADD
0x7485  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    block.hs:205

0x7487  0x28 0x04       DECSP 0x04

                        // }                                                    block.hs:206

0x7489  0x28 0x02       DECSP 0x02

                        // <string,variant> blockContext = blockList[iLast];

0x748B  0x1A 0x0F       PUSHIB 0x0F
0x748D  0x1A 0x14       PUSHIB 0x14
0x748F  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7491  0x20 0xB2       PUSHGLOBALB 0xB2
0x7493  0x4E            PUSHLOCALB00
0x7494  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7496  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("breaks"))                 block.hs:209

0x7498  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x749A  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x749D  0x1A 0x06       PUSHIB 0x06
0x749F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x74A1  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x74A3  0x2E 0x4C       JZB 0x74EF (+76)

                        // if ((continueTarget == 0) && (breakTarget == 0))

0x74A5  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x74A7  0x44            PUSHI0
0x74A8  0x05            EQ
0x74A9  0x27 0x00       DUP 0x00
0x74AB  0x2E 0x07       JZB 0x74B2 (+7)
0x74AD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x74AF  0x44            PUSHI0
0x74B0  0x05            EQ
0x74B1  0x0C            BOOLAND
0x74B2  0x2E 0x0A       JZB 0x74BC (+10)

                        // if (!Parser.HadError)                                block.hs:213

0x74B4  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x74B6  0x2F 0x06       JNZB 0x74BC (+6)

                        // Die(0x0B);                                           block.hs:215

0x74B8  0x1A 0x0B       PUSHIB 0x0B
0x74BA  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // <uint> breakPatches = blockContext["breaks"];

0x74BC  0x1A 0x04       PUSHIB 0x04
0x74BE  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x74C0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x74C2  0x37 0xF6 0x0D  PUSHIW 0x0DF6
0x74C5  0x1A 0x06       PUSHIB 0x06
0x74C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x74C9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x74CB  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var breakJump in breakPatches)              block.hs:219

0x74CD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x74CF  0x44            PUSHI0
0x74D0  0x44            PUSHI0
0x74D1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x74D3  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x74D5  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x74D7  0x05            EQ
0x74D8  0x2F 0x13       JNZB 0x74EB (+19)
0x74DA  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x74DD  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x74DF  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // CodeStream.PatchJump(breakJump, breakTarget);

0x74E1  0x56 0x0A 0xFE  PUSHLOCALBB 0xFE0A
0x74E4  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    block.hs:222

0x74E7  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x74E9  0x30 0xE8       JB 0x74D1 (-24)
0x74EB  0x28 0x06       DECSP 0x06

                        // }                                                    block.hs:223

0x74ED  0x28 0x02       DECSP 0x02

                        // if (blockContext.Contains("continues"))              block.hs:224

0x74EF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x74F1  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x74F4  0x1A 0x09       PUSHIB 0x09
0x74F6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x74F8  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x74FA  0x2E 0x4C       JZB 0x7546 (+76)

                        // if ((continueTarget == 0) && (breakTarget == 0))

0x74FC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x74FE  0x44            PUSHI0
0x74FF  0x05            EQ
0x7500  0x27 0x00       DUP 0x00
0x7502  0x2E 0x07       JZB 0x7509 (+7)
0x7504  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7506  0x44            PUSHI0
0x7507  0x05            EQ
0x7508  0x0C            BOOLAND
0x7509  0x2E 0x0A       JZB 0x7513 (+10)

                        // if (!Parser.HadError)                                block.hs:228

0x750B  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x750D  0x2F 0x06       JNZB 0x7513 (+6)

                        // Die(0x0B);                                           block.hs:230

0x750F  0x1A 0x0B       PUSHIB 0x0B
0x7511  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // <uint> continuePatches = blockContext["continues"];

0x7513  0x1A 0x04       PUSHIB 0x04
0x7515  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x7517  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7519  0x37 0xFC 0x0D  PUSHIW 0x0DFC
0x751C  0x1A 0x09       PUSHIB 0x09
0x751E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7520  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7522  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var continueJump in continuePatches)

0x7524  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7526  0x44            PUSHI0
0x7527  0x44            PUSHI0
0x7528  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x752A  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x752C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x752E  0x05            EQ
0x752F  0x2F 0x13       JNZB 0x7542 (+19)
0x7531  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x7534  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7536  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // PatchJump(continueJump, continueTarget);             block.hs:236

0x7538  0x56 0x0A 0xFC  PUSHLOCALBB 0xFC0A
0x753B  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    block.hs:237

0x753E  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x7540  0x30 0xE8       JB 0x7528 (-24)
0x7542  0x28 0x06       DECSP 0x06

                        // }                                                    block.hs:238

0x7544  0x28 0x02       DECSP 0x02

                        // blockList.Remove(iLast);                             block.hs:239

0x7546  0x20 0xB2       PUSHGLOBALB 0xB2
0x7548  0x4E            PUSHLOCALB00
0x7549  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // }                                                    block.hs:240

0x754B  0x2A 0x0A       RETB 0x0A


// /source/compiler/codegen/block.hs:48
// ####  Block.AddLocal(..)  ####                                               0x014F

0x754D  0x49            ENTER

                        // <string,variant> top = Top();                        block.hs:49

0x754E  0x1A 0x0F       PUSHIB 0x0F
0x7550  0x1A 0x14       PUSHIB 0x14
0x7552  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7554  0x34 0x4D 0x01  CALLW 0x014D   // Block.Top
0x7557  0x5D            POPCOPYLOCALB00

                        // < <string> > locals = top["locals"];                 block.hs:50

0x7558  0x1A 0x19       PUSHIB 0x19
0x755A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x755C  0x4E            PUSHLOCALB00
0x755D  0x37 0x69 0x01  PUSHIW 0x0169
0x7560  0x1A 0x06       PUSHIB 0x06
0x7562  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7564  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7566  0x5E            POPCOPYLOCALB02

                        // <string> local;                                      block.hs:51

0x7567  0x1A 0x0F       PUSHIB 0x0F
0x7569  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // local.Append(variableType);                          block.hs:52

0x756B  0x56 0x04 0xFC  PUSHLOCALBB 0xFC04
0x756E  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // local.Append(identifier);                            block.hs:53

0x7570  0x56 0x04 0xFE  PUSHLOCALBB 0xFE04
0x7573  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // if (DefineExists("H6502"))                           block.hs:54

0x7575  0x37 0xEB 0x06  PUSHIW 0x06EB
0x7578  0x1A 0x05       PUSHIB 0x05
0x757A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x757C  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x757E  0x2E 0x12       JZB 0x7590 (+18)

                        // uint fromAddress = LastInstructionIndex;             block.hs:56

0x7580  0x44            PUSHI0
0x7581  0x34 0x41 0x01  CALLW 0x0141   // Peephole.LastInstructionIndex_Get
0x7584  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // local.Append(fromAddress.ToString());                block.hs:57

0x7586  0x56 0x04 0x06  PUSHLOCALBB 0x0604
0x7589  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x758C  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    block.hs:58

0x758E  0x28 0x02       DECSP 0x02

                        // locals.Append(local);                                block.hs:59

0x7590  0x4F            PUSHLOCALB02
0x7591  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7593  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // top["locals"] = locals;                              block.hs:60

0x7595  0x4E            PUSHLOCALB00
0x7596  0x37 0x69 0x01  PUSHIW 0x0169
0x7599  0x1A 0x06       PUSHIB 0x06
0x759B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x759D  0x4F            PUSHLOCALB02
0x759E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // ReplaceTop(top);                                     block.hs:61

0x75A0  0x4E            PUSHLOCALB00
0x75A1  0x34 0x50 0x01  CALLW 0x0150   // Block.ReplaceTop

                        // }                                                    block.hs:62

0x75A4  0x2A 0x0A       RETB 0x0A


// /source/compiler/codegen/block.hs:326
// ####  Block.GetOffset(..)  ####                                              0x0159


                        // int offset;                                          block.hs:327

0x75A6  0x5F 0x03       ENTERB 0x03

                        // uint iCurrent = blockList.Length;                    block.hs:329

0x75A8  0x20 0xB2       PUSHGLOBALB 0xB2
0x75AA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x75AC  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // < < string > > members;                              block.hs:330

0x75AE  0x1A 0x19       PUSHIB 0x19
0x75B0  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // isRef = false;                                       block.hs:331

0x75B2  0x44            PUSHI0
0x75B3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (iCurrent == 0)                                   block.hs:334

0x75B5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x75B7  0x31 0xFD 0x00  JZW 0x76B4 (+253)

                        // iCurrent--;                                          block.hs:338

0x75BA  0x23 0x04       DECLOCALB 0x04 (BP+4)

                        // <string,variant> blockContext = blockList[iCurrent];

0x75BC  0x1A 0x0F       PUSHIB 0x0F
0x75BE  0x1A 0x14       PUSHIB 0x14
0x75C0  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x75C2  0x20 0xB2       PUSHGLOBALB 0xB2
0x75C4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x75C6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x75C8  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (blockContext.Contains("locals"))                 block.hs:340

0x75CA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x75CC  0x37 0x69 0x01  PUSHIW 0x0169
0x75CF  0x1A 0x06       PUSHIB 0x06
0x75D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x75D3  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x75D5  0x2E 0x50       JZB 0x7625 (+80)

                        // members = blockContext["locals"];                    block.hs:342

0x75D7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x75D9  0x37 0x69 0x01  PUSHIW 0x0169
0x75DC  0x1A 0x06       PUSHIB 0x06
0x75DE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x75E0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x75E2  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint nlocals = members.Length;                       block.hs:343

0x75E4  0x44            PUSHI0
0x75E5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x75E7  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x75E9  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // for (uint i=0; i < nlocals; i++)                     block.hs:344

0x75EB  0x44            PUSHI0
0x75EC  0x56 0x0C 0x0A  PUSHLOCALBB 0x0A0C
0x75EF  0x08            LT
0x75F0  0x2E 0x31       JZB 0x7621 (+49)

                        // <string> local = members[i];                         block.hs:346

0x75F2  0x1A 0x0F       PUSHIB 0x0F
0x75F4  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x75F6  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x75F9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x75FB  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string name = local[1];                              block.hs:347

0x75FD  0x24 0x02       SYSCALL0 0x02  // String.New
0x75FF  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x7601  0x45            PUSHI1
0x7602  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7604  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (name == identifier)                              block.hs:348

0x7606  0x56 0x10 0xFC  PUSHLOCALBB 0xFC10
0x7609  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x760B  0x2F 0x10       JNZB 0x761B (+16)

                        // offset = int(i) * 2;                                 block.hs:350

0x760D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x760F  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x7611  0x1A 0x02       PUSHIB 0x02
0x7613  0x14            MULI
0x7614  0x4C            POPLOCALB00

                        // found = true;                                        block.hs:351

0x7615  0x45            PUSHI1
0x7616  0x4D            POPLOCALB02

                        // break;                                               block.hs:352

0x7617  0x28 0x06       DECSP 0x06
0x7619  0x30 0x0A       JB 0x7623 (+10)

                        // }                                                    block.hs:354

0x761B  0x28 0x04       DECSP 0x04
0x761D  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x761F  0x30 0xCD       JB 0x75EC (-51)
0x7621  0x28 0x02       DECSP 0x02

                        // }                                                    block.hs:355

0x7623  0x28 0x02       DECSP 0x02

                        // if (blockContext.Contains("arguments"))              block.hs:356

0x7625  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7627  0x1A 0x5E       PUSHIB 0x5E
0x7629  0x1A 0x09       PUSHIB 0x09
0x762B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x762D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x762F  0x31 0x79 0x00  JZW 0x76A8 (+121)

                        // members = blockContext["arguments"];                 block.hs:358

0x7632  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7634  0x1A 0x5E       PUSHIB 0x5E
0x7636  0x1A 0x09       PUSHIB 0x09
0x7638  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x763A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x763C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint narguments = members.Length;                    block.hs:359

0x763E  0x44            PUSHI0
0x763F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7641  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7643  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // for (uint i=0; i < narguments; i++)                  block.hs:360

0x7645  0x44            PUSHI0
0x7646  0x56 0x0C 0x0A  PUSHLOCALBB 0x0A0C
0x7649  0x08            LT
0x764A  0x2E 0x5A       JZB 0x76A4 (+90)

                        // <string> argument = members[i];                      block.hs:362

0x764C  0x1A 0x0F       PUSHIB 0x0F
0x764E  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x7650  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0x7653  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7655  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // string reference = argument[0];                      block.hs:363

0x7657  0x24 0x02       SYSCALL0 0x02  // String.New
0x7659  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x765B  0x44            PUSHI0
0x765C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x765E  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string name = argument[2];                           block.hs:364

0x7660  0x24 0x02       SYSCALL0 0x02  // String.New
0x7662  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x7664  0x1A 0x02       PUSHIB 0x02
0x7666  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7668  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (name == identifier)                              block.hs:365

0x766A  0x56 0x12 0xFC  PUSHLOCALBB 0xFC12
0x766D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x766F  0x2F 0x2F       JNZB 0x769E (+47)

                        // if (found)                                           block.hs:367

0x7671  0x4F            PUSHLOCALB02
0x7672  0x2E 0x0A       JZB 0x767C (+10)

                        // if (!Parser.HadError)                                block.hs:369

0x7674  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x7676  0x2F 0x06       JNZB 0x767C (+6)

                        // Die(0x0B); // Compiler should have caught this!

0x7678  0x1A 0x0B       PUSHIB 0x0B
0x767A  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // offset = (int(narguments) - int(i)) * 2;             block.hs:375

0x767C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x767E  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x7680  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x7682  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x7684  0x12            SUBI
0x7685  0x1A 0x02       PUSHIB 0x02
0x7687  0x14            MULI
0x7688  0x4C            POPLOCALB00

                        // offset = 0 - offset;                                 block.hs:376

0x7689  0x44            PUSHI0
0x768A  0x4E            PUSHLOCALB00
0x768B  0x12            SUBI
0x768C  0x4C            POPLOCALB00

                        // if (reference.Length > 0)                            block.hs:377

0x768D  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x768F  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7691  0x44            PUSHI0
0x7692  0x07            GT
0x7693  0x2E 0x05       JZB 0x7698 (+5)

                        // isRef = true; // content of the stack slot is an absolute stack address

0x7695  0x45            PUSHI1
0x7696  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // found = true;                                        block.hs:381

0x7698  0x45            PUSHI1
0x7699  0x4D            POPLOCALB02

                        // break;                                               block.hs:382

0x769A  0x28 0x08       DECSP 0x08
0x769C  0x30 0x0A       JB 0x76A6 (+10)

                        // }                                                    block.hs:384

0x769E  0x28 0x06       DECSP 0x06
0x76A0  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x76A2  0x30 0xA4       JB 0x7646 (-92)
0x76A4  0x28 0x02       DECSP 0x02

                        // }                                                    block.hs:385

0x76A6  0x28 0x02       DECSP 0x02

                        // if (found)                                           block.hs:386

0x76A8  0x4F            PUSHLOCALB02
0x76A9  0x2E 0x06       JZB 0x76AF (+6)

                        // break;                                               block.hs:388

0x76AB  0x28 0x02       DECSP 0x02
0x76AD  0x30 0x07       JB 0x76B4 (+7)

                        // } // loop                                            block.hs:390

0x76AF  0x28 0x02       DECSP 0x02
0x76B1  0x33 0x04 0xFF  JW 0x75B5 (-252)

                        // if (found && (iCurrent != 0))                        block.hs:392

0x76B4  0x4F            PUSHLOCALB02
0x76B5  0x27 0x00       DUP 0x00
0x76B7  0x2E 0x07       JZB 0x76BE (+7)
0x76B9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x76BB  0x44            PUSHI0
0x76BC  0x06            NE
0x76BD  0x0C            BOOLAND
0x76BE  0x2E 0x47       JZB 0x7705 (+71)

                        // if (iCurrent == 0)                                   block.hs:398

0x76C0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x76C2  0x2E 0x43       JZB 0x7705 (+67)

                        // iCurrent--;                                          block.hs:402

0x76C4  0x23 0x04       DECLOCALB 0x04 (BP+4)

                        // <string,variant> blockContext = blockList[iCurrent];

0x76C6  0x1A 0x0F       PUSHIB 0x0F
0x76C8  0x1A 0x14       PUSHIB 0x14
0x76CA  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x76CC  0x20 0xB2       PUSHGLOBALB 0xB2
0x76CE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x76D0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x76D2  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (blockContext.Contains("locals"))                 block.hs:404

0x76D4  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x76D6  0x37 0x69 0x01  PUSHIW 0x0169
0x76D9  0x1A 0x06       PUSHIB 0x06
0x76DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x76DD  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0x76DF  0x2E 0x22       JZB 0x7701 (+34)

                        // members = blockContext["locals"];                    block.hs:406

0x76E1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x76E3  0x37 0x69 0x01  PUSHIW 0x0169
0x76E6  0x1A 0x06       PUSHIB 0x06
0x76E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x76EA  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x76EC  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // uint nlocals = members.Length;                       block.hs:407

0x76EE  0x44            PUSHI0
0x76EF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x76F1  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x76F3  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // offset = offset + int(nlocals) * 2;                  block.hs:408

0x76F5  0x4E            PUSHLOCALB00
0x76F6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x76F8  0x24 0x37       SYSCALL0 0x37  // UInt.ToInt
0x76FA  0x1A 0x02       PUSHIB 0x02
0x76FC  0x14            MULI
0x76FD  0x11            ADDI
0x76FE  0x4C            POPLOCALB00

                        // }                                                    block.hs:409

0x76FF  0x28 0x02       DECSP 0x02

                        // }                                                    block.hs:410

0x7701  0x28 0x02       DECSP 0x02
0x7703  0x30 0xBD       JB 0x76C0 (-67)

                        // if (!found)                                          block.hs:412

0x7705  0x4F            PUSHLOCALB02
0x7706  0x2F 0x1D       JNZB 0x7723 (+29)

                        // if (!Parser.HadError)                                block.hs:414

0x7708  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x770A  0x2F 0x19       JNZB 0x7723 (+25)

                        // Parser.Error("offset not found for '" + identifier + "'");

0x770C  0x37 0x26 0x0E  PUSHIW 0x0E26
0x770F  0x1A 0x16       PUSHIB 0x16
0x7711  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7713  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7715  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7717  0x1A 0x27       PUSHIB 0x27
0x7719  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x771B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x771D  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // Die(0x0B); // Compiler should have caught this!

0x771F  0x1A 0x0B       PUSHIB 0x0B
0x7721  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // return offset;                                       block.hs:421

0x7723  0x4E            PUSHLOCALB00
0x7724  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/codegen/block.hs:243
// ####  Block.GetBytesToPop(..)  ####                                          0x0156


                        // return GetBytesToPop(false, false);                  block.hs:244

0x7726  0x5F 0x02       ENTERB 0x02

                        // return GetBytesToPop(false, false);                  block.hs:244

0x7728  0x34 0x57 0x01  CALLW 0x0157   // Block.GetBytesToPop
0x772B  0x4A            RET0


// /source/system/path.hs:94
// ####  Path.GetExtension(..)  ####                                            0x01C3


                        // uint iDot;                                           path.hs:95

0x772C  0x5F 0x02       ENTERB 0x02

                        // string extension;                                    path.hs:98

0x772E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // extension = "."; // empty "."                        path.hs:101

0x7730  0x1A 0x2E       PUSHIB 0x2E
0x7732  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7734  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (path.LastIndexOf('.', ref iDot))                 path.hs:102

0x7736  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7738  0x1A 0x2E       PUSHIB 0x2E
0x773A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x773C  0x34 0x95 0x01  CALLW 0x0195   // String.LastIndexOf
0x773F  0x2E 0x19       JZB 0x7758 (+25)

                        // if (path.LastIndexOf('/', ref iSlash))               path.hs:104

0x7741  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7743  0x1A 0x2F       PUSHIB 0x2F
0x7745  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x7747  0x34 0x95 0x01  CALLW 0x0195   // String.LastIndexOf
0x774A  0x2E 0x07       JZB 0x7751 (+7)

                        // if (iSlash > iDot)                                   path.hs:106

0x774C  0x4F            PUSHLOCALB02
0x774D  0x4E            PUSHLOCALB00
0x774E  0x07            GT
0x774F  0x2F 0x09       JNZB 0x7758 (+9)

                        // extension = path.Substring(iDot);                    path.hs:111

0x7751  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7753  0x4E            PUSHLOCALB00
0x7754  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x7756  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // return extension;                                    path.hs:115

0x7758  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x775A  0x2B 0x08       RETRETB 0x08


// /source/system/path.hs:66
// ####  Path.Combine(..)  ####                                                 0x01C2


                        // uint length;                                         path.hs:67

0x775C  0x5F 0x01       ENTERB 0x01

                        // string resultPath;                                   path.hs:68

0x775E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // resultPath = partOne;                                path.hs:69

0x7760  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7762  0x5E            POPCOPYLOCALB02

                        // length = resultPath.Length;                          path.hs:70

0x7763  0x4F            PUSHLOCALB02
0x7764  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7766  0x4C            POPLOCALB00

                        // if ((length > 0) && (resultPath[length - 1] == '/'))

0x7767  0x4E            PUSHLOCALB00
0x7768  0x44            PUSHI0
0x7769  0x07            GT
0x776A  0x27 0x00       DUP 0x00
0x776C  0x2E 0x0C       JZB 0x7778 (+12)
0x776E  0x4F            PUSHLOCALB02
0x776F  0x4E            PUSHLOCALB00
0x7770  0x45            PUSHI1
0x7771  0x01            SUB
0x7772  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7774  0x1A 0x2F       PUSHIB 0x2F
0x7776  0x05            EQ
0x7777  0x0C            BOOLAND
0x7778  0x2F 0x08       JNZB 0x7780 (+8)

                        // resultPath = resultPath + '/'; // append trailing slash

0x777A  0x4F            PUSHLOCALB02
0x777B  0x1A 0x2F       PUSHIB 0x2F
0x777D  0x25 0x03       SYSCALL1 0x03  // String.Append
0x777F  0x5E            POPCOPYLOCALB02

                        // if ((0 != partTwo.Length) && (partTwo[0] == '/'))

0x7780  0x44            PUSHI0
0x7781  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7783  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7785  0x06            NE
0x7786  0x27 0x00       DUP 0x00
0x7788  0x2E 0x0B       JZB 0x7793 (+11)
0x778A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x778C  0x44            PUSHI0
0x778D  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x778F  0x1A 0x2F       PUSHIB 0x2F
0x7791  0x05            EQ
0x7792  0x0C            BOOLAND
0x7793  0x2E 0x15       JZB 0x77A8 (+21)

                        // if (partTwo.Length > 1)                              path.hs:82

0x7795  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7797  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7799  0x45            PUSHI1
0x779A  0x07            GT
0x779B  0x2E 0x13       JZB 0x77AE (+19)

                        // resultPath = resultPath + partTwo.Substring(1);

0x779D  0x4F            PUSHLOCALB02
0x779E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x77A0  0x45            PUSHI1
0x77A1  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x77A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x77A5  0x5E            POPCOPYLOCALB02

                        // }                                                    path.hs:86

0x77A6  0x30 0x08       JB 0x77AE (+8)

                        // resultPath = resultPath + partTwo;                   path.hs:89

0x77A8  0x4F            PUSHLOCALB02
0x77A9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x77AB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x77AD  0x5E            POPCOPYLOCALB02

                        // return resultPath;                                   path.hs:91

0x77AE  0x4F            PUSHLOCALB02
0x77AF  0x2B 0x08       RETRETB 0x08


// /source/system/color.hs:42
// ####  Color.ProgressText_Get(..)  ####                                       0x01EB

0x77B1  0x49            ENTER

                        // uint ProgressText        { get { return 0x006; } }

0x77B2  0x1A 0x06       PUSHIB 0x06
0x77B4  0x4A            RET0


// /source/system/color.hs:43
// ####  Color.ProgressFace_Get(..)  ####                                       0x01EC

0x77B5  0x49            ENTER

                        // uint ProgressFace        { get { return 0xDCB; } }

0x77B6  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x77B9  0x4A            RET0


// /source/system/color.hs:44
// ####  Color.ProgressHighlight_Get(..)  ####                                  0x01ED

0x77BA  0x49            ENTER

                        // uint ProgressHighlight   { get { return 0x3A8; }}

0x77BB  0x37 0xA8 0x03  PUSHIW 0x03A8
0x77BE  0x4A            RET0


// /source/system/color.hs:66
// ####  Color.StatusText_Get(..)  ####                                         0x01FD

0x77BF  0x49            ENTER

                        // uint StatusText   { get { return 0x006; } }

0x77C0  0x1A 0x06       PUSHIB 0x06
0x77C2  0x4A            RET0


// /source/system/color.hs:65
// ####  Color.StatusFace_Get(..)  ####                                         0x01FC

0x77C3  0x49            ENTER

                        // uint StatusFace   { get { return 0xDCB; } }

0x77C4  0x37 0xCB 0x0D  PUSHIW 0x0DCB
0x77C7  0x4A            RET0


// /source/system/color.hs:40
// ####  Color.ProgressTick_Get(..)  ####                                       0x01E9

0x77C8  0x49            ENTER

                        // uint ProgressTick        { get { return 0x258; } }

0x77C9  0x37 0x58 0x02  PUSHIW 0x0258
0x77CC  0x4A            RET0


// /source/system/color.hs:41
// ####  Color.ProgressBackground_Get(..)  ####                                 0x01EA

0x77CD  0x49            ENTER

                        // uint ProgressBackground  { get { return 0x68A; } }

0x77CE  0x37 0x8A 0x06  PUSHIW 0x068A
0x77D1  0x4A            RET0


// /source/system/color.hs:21
// ####  Color.Red_Get(..)  ####                                                0x01DC

0x77D2  0x49            ENTER

                        // uint Red         { get { return 0xF00; }}            color.hs:21

0x77D3  0x37 0x00 0x0F  PUSHIW 0x0F00
0x77D6  0x4A            RET0


// /source/system/color.hs:4
// ####  Color.Black_Get(..)  ####                                              0x01CD


                        // uint Black        { get { return 0x000; } }

0x77D7  0x5F 0x01       ENTERB 0x01

                        // uint Black        { get { return 0x000; } }

0x77D9  0x4A            RET0


// /source/system/screen.hs:39
// ####  Screen.PrintLn(..)  ####                                               0x0037

0x77DA  0x49            ENTER

                        // Print(s, foreColour, backColour);                    screen.hs:40

0x77DB  0x56 0xFA 0xFC  PUSHLOCALBB 0xFCFA
0x77DE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x77E0  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:41

0x77E2  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:42

0x77E4  0x2A 0x06       RETB 0x06


// /source/system/screen.hs:60
// ####  Screen.PrintLn(..)  ####                                               0x003B

0x77E6  0x49            ENTER

                        // Print(s, Color.MatrixGreen, Color.Black);            screen.hs:61

0x77E7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x77E9  0x34 0xE5 0x01  CALLW 0x01E5   // Color.MatrixGreen_Get
0x77EC  0x34 0xCD 0x01  CALLW 0x01CD   // Color.Black_Get
0x77EF  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // PrintLn();                                           screen.hs:62

0x77F1  0x24 0x2A       SYSCALL0 0x2A  // Screen.PrintLn

                        // }                                                    screen.hs:63

0x77F3  0x2A 0x02       RETB 0x02


// /source/compiler/directives.hs:12
// ####  Directives.New(..)  ####                                               0x010D

0x77F5  0x49            ENTER

                        // defineNesting.Clear();                               directives.hs:13

0x77F6  0x20 0x9A       PUSHGLOBALB 0x9A
0x77F8  0x24 0x16       SYSCALL0 0x16  // List.Clear

                        // }                                                    directives.hs:14

0x77FA  0x4A            RET0


// /source/compiler/directives.hs:16
// ####  Directives.IsStillOpen_Get(..)  ####                                   0x010E

0x77FB  0x49            ENTER

                        // bool IsStillOpen { get { return (defineNesting.Length > 0); }}

0x77FC  0x20 0x9A       PUSHGLOBALB 0x9A
0x77FE  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7800  0x44            PUSHI0
0x7801  0x07            GT
0x7802  0x4A            RET0


// /source/compiler/directives.hs:108
// ####  Directives.Directive(..)  ####                                         0x0113

0x7803  0x49            ENTER

                        // <string,string> currentToken = Parser.CurrentToken;

0x7804  0x1A 0x0F       PUSHIB 0x0F
0x7806  0x1A 0x0F       PUSHIB 0x0F
0x7808  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x780A  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x780C  0x5D            POPCOPYLOCALB00

                        // string ln = currentToken["line"];                    directives.hs:110

0x780D  0x24 0x02       SYSCALL0 0x02  // String.New
0x780F  0x4E            PUSHLOCALB00
0x7810  0x37 0x89 0x06  PUSHIW 0x0689
0x7813  0x1A 0x04       PUSHIB 0x04
0x7815  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7817  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7819  0x5E            POPCOPYLOCALB02

                        // string directive = currentToken["lexeme"];           directives.hs:111

0x781A  0x24 0x02       SYSCALL0 0x02  // String.New
0x781C  0x4E            PUSHLOCALB00
0x781D  0x37 0x06 0x02  PUSHIW 0x0206
0x7820  0x1A 0x06       PUSHIB 0x06
0x7822  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7824  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7826  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance(); // #ifdef, etc                     directives.hs:114

0x7828  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (directive == "#ifdef")                           directives.hs:115

0x782A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x782C  0x37 0x3C 0x0E  PUSHIW 0x0E3C
0x782F  0x1A 0x06       PUSHIB 0x06
0x7831  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7833  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7835  0x2F 0x13       JNZB 0x7848 (+19)

                        // bool value = defined(ln);                            directives.hs:117

0x7837  0x44            PUSHI0
0x7838  0x4F            PUSHLOCALB02
0x7839  0x34 0x10 0x01  CALLW 0x0110   // Directives.defined
0x783C  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // defineNesting.Append(value);                         directives.hs:118

0x783E  0x20 0x9A       PUSHGLOBALB 0x9A
0x7840  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7842  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    directives.hs:119

0x7844  0x28 0x02       DECSP 0x02
0x7846  0x2A 0x06       RETB 0x06

                        // else if (directive == "#ifndef")                     directives.hs:120

0x7848  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x784A  0x37 0x42 0x0E  PUSHIW 0x0E42
0x784D  0x1A 0x07       PUSHIB 0x07
0x784F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7851  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7853  0x2F 0x14       JNZB 0x7867 (+20)

                        // bool value = !defined(ln);                           directives.hs:122

0x7855  0x44            PUSHI0
0x7856  0x4F            PUSHLOCALB02
0x7857  0x34 0x10 0x01  CALLW 0x0110   // Directives.defined
0x785A  0x41            BOOLNOT
0x785B  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // defineNesting.Append(value);                         directives.hs:123

0x785D  0x20 0x9A       PUSHGLOBALB 0x9A
0x785F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7861  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    directives.hs:124

0x7863  0x28 0x02       DECSP 0x02
0x7865  0x2A 0x06       RETB 0x06

                        // else if (directive == "#if")                         directives.hs:125

0x7867  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7869  0x37 0x3C 0x0E  PUSHIW 0x0E3C
0x786C  0x1A 0x03       PUSHIB 0x03
0x786E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7870  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7872  0x2F 0x29       JNZB 0x789B (+41)

                        // string value = expression(ln);                       directives.hs:127

0x7874  0x24 0x02       SYSCALL0 0x02  // String.New
0x7876  0x4F            PUSHLOCALB02
0x7877  0x34 0x11 0x01  CALLW 0x0111   // Directives.expression
0x787A  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // defineNesting.Append(false); // TODO                 directives.hs:128

0x787C  0x20 0x9A       PUSHGLOBALB 0x9A
0x787E  0x44            PUSHI0
0x787F  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // Parser.ErrorAtCurrent("preprocessorDirective '" + directive + "' not yet implemented");

0x7881  0x37 0x49 0x0E  PUSHIW 0x0E49
0x7884  0x1A 0x17       PUSHIB 0x17
0x7886  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7888  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x788A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x788C  0x37 0x60 0x0E  PUSHIW 0x0E60
0x788F  0x1A 0x15       PUSHIB 0x15
0x7891  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7893  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7895  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    directives.hs:130

0x7897  0x28 0x02       DECSP 0x02
0x7899  0x2A 0x06       RETB 0x06

                        // else if (directive == "#else")                       directives.hs:131

0x789B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x789D  0x37 0x75 0x0E  PUSHIW 0x0E75
0x78A0  0x1A 0x05       PUSHIB 0x05
0x78A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x78A4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x78A6  0x2F 0x28       JNZB 0x78CE (+40)

                        // if (defineNesting.Length == 0)                       directives.hs:133

0x78A8  0x20 0x9A       PUSHGLOBALB 0x9A
0x78AA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x78AC  0x2F 0x0D       JNZB 0x78B9 (+13)

                        // Parser.ErrorAtCurrent("unexpected '#else'");

0x78AE  0x37 0x7A 0x0E  PUSHIW 0x0E7A
0x78B1  0x1A 0x12       PUSHIB 0x12
0x78B3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x78B5  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               directives.hs:136

0x78B7  0x2A 0x06       RETB 0x06

                        // defineNesting.SetItem(defineNesting.Length-1, !defineNesting[defineNesting.Length-1]);

0x78B9  0x52 0x9A 0x9A  PUSHGLOBALBB 0x9A9A
0x78BC  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x78BE  0x45            PUSHI1
0x78BF  0x01            SUB
0x78C0  0x52 0x9A 0x9A  PUSHGLOBALBB 0x9A9A
0x78C3  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x78C5  0x45            PUSHI1
0x78C6  0x01            SUB
0x78C7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x78C9  0x41            BOOLNOT
0x78CA  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    directives.hs:139

0x78CC  0x2A 0x06       RETB 0x06

                        // else if (directive == "#endif")                      directives.hs:140

0x78CE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x78D0  0x37 0x18 0x01  PUSHIW 0x0118
0x78D3  0x1A 0x06       PUSHIB 0x06
0x78D5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x78D7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x78D9  0x2F 0x1E       JNZB 0x78F7 (+30)

                        // if (defineNesting.Length == 0)                       directives.hs:142

0x78DB  0x20 0x9A       PUSHGLOBALB 0x9A
0x78DD  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x78DF  0x2F 0x0D       JNZB 0x78EC (+13)

                        // Parser.ErrorAtCurrent("unexpected '#endif'");

0x78E1  0x37 0x8C 0x0E  PUSHIW 0x0E8C
0x78E4  0x1A 0x13       PUSHIB 0x13
0x78E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x78E8  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               directives.hs:145

0x78EA  0x2A 0x06       RETB 0x06

                        // defineNesting.Remove(defineNesting.Length-1);

0x78EC  0x52 0x9A 0x9A  PUSHGLOBALBB 0x9A9A
0x78EF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x78F1  0x45            PUSHI1
0x78F2  0x01            SUB
0x78F3  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // break;                                               directives.hs:149

0x78F5  0x2A 0x06       RETB 0x06

                        // }                                                    directives.hs:151

0x78F7  0x2A 0x06       RETB 0x06


// /source/compiler/directives.hs:19
// ####  Directives.IsAllDefined(..)  ####                                      0x010F


                        // bool allDefined = true;                              directives.hs:20

0x78F9  0x5F 0x01       ENTERB 0x01

                        // bool allDefined = true;                              directives.hs:20

0x78FB  0x45            PUSHI1
0x78FC  0x4C            POPLOCALB00

                        // if (defineNesting.Length > 0)                        directives.hs:21

0x78FD  0x20 0x9A       PUSHGLOBALB 0x9A
0x78FF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7901  0x44            PUSHI0
0x7902  0x07            GT
0x7903  0x2E 0x25       JZB 0x7928 (+37)

                        // foreach (var defined in defineNesting)               directives.hs:23

0x7905  0x20 0x9A       PUSHGLOBALB 0x9A
0x7907  0x44            PUSHI0
0x7908  0x44            PUSHI0
0x7909  0x4F            PUSHLOCALB02
0x790A  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x790C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x790E  0x05            EQ
0x790F  0x2F 0x17       JNZB 0x7926 (+23)
0x7911  0x4F            PUSHLOCALB02
0x7912  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7914  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7916  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (!defined)                                        directives.hs:25

0x7918  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x791A  0x2F 0x08       JNZB 0x7922 (+8)

                        // allDefined = false;                                  directives.hs:27

0x791C  0x44            PUSHI0
0x791D  0x4C            POPLOCALB00

                        // break;                                               directives.hs:28

0x791E  0x28 0x06       DECSP 0x06
0x7920  0x30 0x08       JB 0x7928 (+8)

                        // }                                                    directives.hs:30

0x7922  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x7924  0x30 0xE5       JB 0x7909 (-27)
0x7926  0x28 0x06       DECSP 0x06

                        // return allDefined;                                   directives.hs:32

0x7928  0x4E            PUSHLOCALB00
0x7929  0x2B 0x02       RETRETB 0x02


// /source/compiler/directives.hs:36
// ####  Directives.defined(..)  ####                                           0x0110


                        // bool value;                                          directives.hs:37

0x792B  0x5F 0x01       ENTERB 0x01

                        // <string,string> idToken = Parser.CurrentToken;

0x792D  0x1A 0x0F       PUSHIB 0x0F
0x792F  0x1A 0x0F       PUSHIB 0x0F
0x7931  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x7933  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x7935  0x5E            POPCOPYLOCALB02

                        // if (idToken["line"] != ln)                           directives.hs:41

0x7936  0x4F            PUSHLOCALB02
0x7937  0x37 0x89 0x06  PUSHIW 0x0689
0x793A  0x1A 0x04       PUSHIB 0x04
0x793C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x793E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x7940  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7942  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7944  0x2E 0x0F       JZB 0x7953 (+15)

                        // Parser.ErrorAtCurrent("preprocessor directive must be on one line");

0x7946  0x37 0x9F 0x0E  PUSHIW 0x0E9F
0x7949  0x1A 0x2A       PUSHIB 0x2A
0x794B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x794D  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               directives.hs:44

0x794F  0x28 0x02       DECSP 0x02
0x7951  0x30 0x18       JB 0x7969 (+24)

                        // value = false;                                       directives.hs:46

0x7953  0x44            PUSHI0
0x7954  0x4C            POPLOCALB00

                        // if (Symbols.DefineExists(idToken["lexeme"]))

0x7955  0x4F            PUSHLOCALB02
0x7956  0x37 0x06 0x02  PUSHIW 0x0206
0x7959  0x1A 0x06       PUSHIB 0x06
0x795B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x795D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x795F  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x7961  0x2E 0x04       JZB 0x7965 (+4)

                        // value = true;                                        directives.hs:49

0x7963  0x45            PUSHI1
0x7964  0x4C            POPLOCALB00

                        // Parser.Advance();                                    directives.hs:51

0x7965  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               directives.hs:52

0x7967  0x28 0x02       DECSP 0x02

                        // return value;                                        directives.hs:54

0x7969  0x4E            PUSHLOCALB00
0x796A  0x2B 0x04       RETRETB 0x04


// /source/compiler/directives.hs:58
// ####  Directives.expression(..)  ####                                        0x0111

0x796C  0x49            ENTER

                        // string value;                                        directives.hs:59

0x796D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // Parser.ErrorAtCurrent("preprocessorExpression not yet implemented");

0x796F  0x37 0xC9 0x0E  PUSHIW 0x0EC9
0x7972  0x1A 0x2A       PUSHIB 0x2A
0x7974  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7976  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return value;                                        directives.hs:65

0x7978  0x4E            PUSHLOCALB00
0x7979  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:18
// ####  Types.SetCurrentMethod(..)  ####                                       0x00CF

0x797B  0x49            ENTER

                        // iCurrentOverload = iOverload;                        types.hs:19

0x797C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x797E  0x1F 0x96       POPGLOBALB 0x96

                        // currentNamespace = Symbols.GetNamespace(iOverload);

0x7980  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7982  0x2C 0x8E       CALLB 0x8E     // Symbols.GetNamespace
0x7984  0x59 0x98       POPCOPYGLOBALB 0x98

                        // }                                                    types.hs:21

0x7986  0x2A 0x02       RETB 0x02


// /source/compiler/types.hs:306
// ####  Types.AutomaticUpCastTop(..)  ####                                     0x00D4

0x7988  0x49            ENTER

                        // return AutomaticUpCast(actualType, desiredType, true, false);

0x7989  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0x798C  0x45            PUSHI1
0x798D  0x44            PUSHI0
0x798E  0x2C 0xD3       CALLB 0xD3     // Types.AutomaticUpCast
0x7990  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:816
// ####  Types.IsEnum(..)  ####                                                 0x00EB

0x7992  0x49            ENTER

                        // return Symbols.IsEnumType(identifier, currentNamespace);

0x7993  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7995  0x20 0x98       PUSHGLOBALB 0x98
0x7997  0x2C 0xA4       CALLB 0xA4     // Symbols.IsEnumType
0x7999  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:821
// ####  Types.IsFlags(..)  ####                                                0x00EC

0x799B  0x49            ENTER

                        // return Symbols.IsFlagsType(identifier, currentNamespace);

0x799C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x799E  0x20 0x98       PUSHGLOBALB 0x98
0x79A0  0x2C 0xA5       CALLB 0xA5     // Symbols.IsFlagsType
0x79A2  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:1052
// ####  Types.GetTypeString(..)  ####                                          0x00F1

0x79A4  0x49            ENTER

                        // string variableType = Block.GetType(variableName);

0x79A5  0x24 0x02       SYSCALL0 0x02  // String.New
0x79A7  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79A9  0x34 0x5A 0x01  CALLW 0x015A   // Block.GetType
0x79AC  0x5D            POPCOPYLOCALB00

                        // if (variableType.Length > 0)                         types.hs:1055

0x79AD  0x4E            PUSHLOCALB00
0x79AE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x79B0  0x44            PUSHI0
0x79B1  0x07            GT
0x79B2  0x2E 0x06       JZB 0x79B8 (+6)

                        // fullName = variableName; // local?                   types.hs:1057

0x79B4  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79B6  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // if ((variableType.Length == 0) && !variableName.Contains('.') && (variableName.Length > 0))

0x79B8  0x4E            PUSHLOCALB00
0x79B9  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x79BB  0x44            PUSHI0
0x79BC  0x05            EQ
0x79BD  0x27 0x00       DUP 0x00
0x79BF  0x2E 0x16       JZB 0x79D5 (+22)
0x79C1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79C3  0x1A 0x2E       PUSHIB 0x2E
0x79C5  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x79C8  0x41            BOOLNOT
0x79C9  0x0C            BOOLAND
0x79CA  0x27 0x00       DUP 0x00
0x79CC  0x2E 0x09       JZB 0x79D5 (+9)
0x79CE  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79D0  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x79D2  0x44            PUSHI0
0x79D3  0x07            GT
0x79D4  0x0C            BOOLAND
0x79D5  0x31 0xA5 0x00  JZW 0x7A7A (+165)

                        // char f = variableName[0];                            types.hs:1061

0x79D8  0x44            PUSHI0
0x79D9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79DB  0x44            PUSHI0
0x79DC  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x79DE  0x4D            POPLOCALB02

                        // bool private = f.IsLower();                          types.hs:1062

0x79DF  0x44            PUSHI0
0x79E0  0x4F            PUSHLOCALB02
0x79E1  0x34 0x5D 0x01  CALLW 0x015D   // Char.IsLower
0x79E4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // string qualifiedName = currentNamespace + "." + variableName;

0x79E6  0x24 0x02       SYSCALL0 0x02  // String.New
0x79E8  0x20 0x98       PUSHGLOBALB 0x98
0x79EA  0x1A 0x2E       PUSHIB 0x2E
0x79EC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x79EE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x79F0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x79F2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x79F4  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // string qVariableType = Block.GetType(qualifiedName);

0x79F6  0x24 0x02       SYSCALL0 0x02  // String.New
0x79F8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x79FA  0x34 0x5A 0x01  CALLW 0x015A   // Block.GetType
0x79FD  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (qVariableType.Length > 0)                        types.hs:1067

0x79FF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7A01  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7A03  0x44            PUSHI0
0x7A04  0x07            GT
0x7A05  0x2E 0x0B       JZB 0x7A10 (+11)

                        // variableType = qVariableType;                        types.hs:1069

0x7A07  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7A09  0x5D            POPCOPYLOCALB00

                        // fullName = qualifiedName;                            types.hs:1070

0x7A0A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7A0C  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // }                                                    types.hs:1071

0x7A0E  0x30 0x6A       JB 0x7A78 (+106)

                        // else if (!private)                                   types.hs:1072

0x7A10  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7A12  0x2F 0x66       JNZB 0x7A78 (+102)

                        // int winners = 0;                                     types.hs:1075

0x7A14  0x44            PUSHI0

                        // <string> nameSpaces = Symbols.GetNameSpaces();

0x7A15  0x1A 0x0F       PUSHIB 0x0F
0x7A17  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x7A19  0x2C 0xA2       CALLB 0xA2     // Symbols.GetNameSpaces
0x7A1B  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var nameSpace in nameSpaces)                types.hs:1077

0x7A1D  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x7A1F  0x44            PUSHI0
0x7A20  0x44            PUSHI0
0x7A21  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x7A23  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x7A25  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x7A27  0x05            EQ
0x7A28  0x2F 0x33       JNZB 0x7A5B (+51)
0x7A2A  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x7A2D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x7A2F  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // qualifiedName = nameSpace + "." + variableName;

0x7A31  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x7A33  0x1A 0x2E       PUSHIB 0x2E
0x7A35  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7A37  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A39  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x7A3B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A3D  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // qVariableType = Block.GetType(qualifiedName);

0x7A3F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7A41  0x34 0x5A 0x01  CALLW 0x015A   // Block.GetType
0x7A44  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (qVariableType.Length > 0)                        types.hs:1081

0x7A46  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7A48  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7A4A  0x44            PUSHI0
0x7A4B  0x07            GT
0x7A4C  0x2E 0x0B       JZB 0x7A57 (+11)

                        // variableType = qVariableType;                        types.hs:1083

0x7A4E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7A50  0x5D            POPCOPYLOCALB00

                        // fullName = qualifiedName;                            types.hs:1084

0x7A51  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7A53  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // winners++;                                           types.hs:1085

0x7A55  0x22 0x0A       INCLOCALB 0x0A (BP+10)

                        // }                                                    types.hs:1087

0x7A57  0x22 0x12       INCLOCALB 0x12 (BP+18)
0x7A59  0x30 0xC8       JB 0x7A21 (-56)
0x7A5B  0x28 0x06       DECSP 0x06

                        // if (winners > 1)                                     types.hs:1088

0x7A5D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x7A5F  0x45            PUSHI1
0x7A60  0x16            GTI
0x7A61  0x2E 0x15       JZB 0x7A76 (+21)

                        // Parser.Error("ambiguous unqualified identifier '" + variableName + "'");

0x7A63  0x37 0xF3 0x0E  PUSHIW 0x0EF3
0x7A66  0x1A 0x22       PUSHIB 0x22
0x7A68  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7A6A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x7A6C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A6E  0x1A 0x27       PUSHIB 0x27
0x7A70  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7A72  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A74  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    types.hs:1092

0x7A76  0x28 0x04       DECSP 0x04

                        // }                                                    types.hs:1093

0x7A78  0x28 0x08       DECSP 0x08

                        // if (mustExist && (variableType.Length == 0))

0x7A7A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7A7C  0x27 0x00       DUP 0x00
0x7A7E  0x2E 0x08       JZB 0x7A86 (+8)
0x7A80  0x4E            PUSHLOCALB00
0x7A81  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7A83  0x44            PUSHI0
0x7A84  0x05            EQ
0x7A85  0x0C            BOOLAND
0x7A86  0x2E 0x15       JZB 0x7A9B (+21)

                        // Parser.Error("undefined identifier '" + variableName + "'");

0x7A88  0x37 0x15 0x0F  PUSHIW 0x0F15
0x7A8B  0x1A 0x16       PUSHIB 0x16
0x7A8D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7A8F  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x7A91  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A93  0x1A 0x27       PUSHIB 0x27
0x7A95  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7A97  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7A99  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // return variableType;                                 types.hs:1098

0x7A9B  0x4E            PUSHLOCALB00
0x7A9C  0x2B 0x08       RETRETB 0x08


// /source/compiler/types.hs:788
// ####  Types.IsArray(..)  ####                                                0x00E6


                        // bool isArray= false;                                 types.hs:789

0x7A9E  0x5F 0x01       ENTERB 0x01

                        // if (typeString.Contains('['))                        types.hs:790

0x7AA0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7AA2  0x1A 0x5B       PUSHIB 0x5B
0x7AA4  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x7AA7  0x2E 0x04       JZB 0x7AAB (+4)

                        // isArray = true;                                      types.hs:792

0x7AA9  0x45            PUSHI1
0x7AAA  0x4C            POPLOCALB00

                        // return isArray;                                      types.hs:794

0x7AAB  0x4E            PUSHLOCALB00
0x7AAC  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:751
// ####  Types.IsList(..)  ####                                                 0x00E5


                        // uint length = typeString.Length;                     types.hs:753

0x7AAE  0x5F 0x01       ENTERB 0x01

                        // uint length = typeString.Length;                     types.hs:753

0x7AB0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7AB2  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7AB4  0x4C            POPLOCALB00

                        // bool isList = (length > 2);                          types.hs:754

0x7AB5  0x44            PUSHI0
0x7AB6  0x4E            PUSHLOCALB00
0x7AB7  0x1A 0x02       PUSHIB 0x02
0x7AB9  0x07            GT
0x7ABA  0x4D            POPLOCALB02

                        // uint i = 0;                                          types.hs:755

0x7ABB  0x44            PUSHI0

                        // uint nesting = 0;                                    types.hs:756

0x7ABC  0x44            PUSHI0

                        // if (i == length)                                     types.hs:759

0x7ABD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7ABF  0x4E            PUSHLOCALB00
0x7AC0  0x05            EQ
0x7AC1  0x2F 0x35       JNZB 0x7AF6 (+53)

                        // char c = typeString[i];                              types.hs:763

0x7AC3  0x44            PUSHI0
0x7AC4  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0x7AC7  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7AC9  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (c == '<')                                        types.hs:764

0x7ACB  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7ACD  0x1A 0x3C       PUSHIB 0x3C
0x7ACF  0x05            EQ
0x7AD0  0x2E 0x06       JZB 0x7AD6 (+6)

                        // nesting++;                                           types.hs:766

0x7AD2  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // }                                                    types.hs:767

0x7AD4  0x30 0x1C       JB 0x7AF0 (+28)

                        // else if (c == '>')                                   types.hs:768

0x7AD6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7AD8  0x1A 0x3E       PUSHIB 0x3E
0x7ADA  0x05            EQ
0x7ADB  0x2E 0x06       JZB 0x7AE1 (+6)

                        // nesting--;                                           types.hs:770

0x7ADD  0x23 0x06       DECLOCALB 0x06 (BP+6)

                        // }                                                    types.hs:771

0x7ADF  0x30 0x11       JB 0x7AF0 (+17)

                        // else if (c == ',')                                   types.hs:772

0x7AE1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7AE3  0x1A 0x2C       PUSHIB 0x2C
0x7AE5  0x05            EQ
0x7AE6  0x2E 0x0A       JZB 0x7AF0 (+10)

                        // if (nesting == 1)                                    types.hs:774

0x7AE8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7AEA  0x45            PUSHI1
0x7AEB  0x05            EQ
0x7AEC  0x2E 0x04       JZB 0x7AF0 (+4)

                        // isList = false;                                      types.hs:776

0x7AEE  0x44            PUSHI0
0x7AEF  0x4D            POPLOCALB02

                        // i++;                                                 types.hs:779

0x7AF0  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    types.hs:780

0x7AF2  0x28 0x02       DECSP 0x02
0x7AF4  0x30 0xC9       JB 0x7ABD (-55)

                        // if (isList)                                          types.hs:781

0x7AF6  0x4F            PUSHLOCALB02
0x7AF7  0x2E 0x23       JZB 0x7B1A (+35)

                        // isList = (typeString[0] == '<') && (typeString[length-1] == '>') && (nesting == 0);

0x7AF9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7AFB  0x44            PUSHI0
0x7AFC  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7AFE  0x1A 0x3C       PUSHIB 0x3C
0x7B00  0x05            EQ
0x7B01  0x27 0x00       DUP 0x00
0x7B03  0x2E 0x16       JZB 0x7B19 (+22)
0x7B05  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B07  0x4E            PUSHLOCALB00
0x7B08  0x45            PUSHI1
0x7B09  0x01            SUB
0x7B0A  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7B0C  0x1A 0x3E       PUSHIB 0x3E
0x7B0E  0x05            EQ
0x7B0F  0x0C            BOOLAND
0x7B10  0x27 0x00       DUP 0x00
0x7B12  0x2E 0x07       JZB 0x7B19 (+7)
0x7B14  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7B16  0x44            PUSHI0
0x7B17  0x05            EQ
0x7B18  0x0C            BOOLAND
0x7B19  0x4D            POPLOCALB02

                        // return isList;                                       types.hs:785

0x7B1A  0x4F            PUSHLOCALB02
0x7B1B  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/types.hs:713
// ####  Types.IsDictionary(..)  ####                                           0x00E4


                        // bool isDictionary = false;                           types.hs:714

0x7B1D  0x5F 0x02       ENTERB 0x02

                        // uint length = typeString.Length;                     types.hs:716

0x7B1F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B21  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7B23  0x4D            POPLOCALB02

                        // uint i = 0;                                          types.hs:717

0x7B24  0x44            PUSHI0

                        // uint nesting = 0;                                    types.hs:718

0x7B25  0x44            PUSHI0

                        // if (i == length)                                     types.hs:721

0x7B26  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7B28  0x4F            PUSHLOCALB02
0x7B29  0x05            EQ
0x7B2A  0x2F 0x35       JNZB 0x7B5F (+53)

                        // char c = typeString[i];                              types.hs:725

0x7B2C  0x44            PUSHI0
0x7B2D  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0x7B30  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7B32  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (c == '<')                                        types.hs:726

0x7B34  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7B36  0x1A 0x3C       PUSHIB 0x3C
0x7B38  0x05            EQ
0x7B39  0x2E 0x06       JZB 0x7B3F (+6)

                        // nesting++;                                           types.hs:728

0x7B3B  0x22 0x06       INCLOCALB 0x06 (BP+6)

                        // }                                                    types.hs:729

0x7B3D  0x30 0x1C       JB 0x7B59 (+28)

                        // else if (c == '>')                                   types.hs:730

0x7B3F  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7B41  0x1A 0x3E       PUSHIB 0x3E
0x7B43  0x05            EQ
0x7B44  0x2E 0x06       JZB 0x7B4A (+6)

                        // nesting--;                                           types.hs:732

0x7B46  0x23 0x06       DECLOCALB 0x06 (BP+6)

                        // }                                                    types.hs:733

0x7B48  0x30 0x11       JB 0x7B59 (+17)

                        // else if (c == ',')                                   types.hs:734

0x7B4A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x7B4C  0x1A 0x2C       PUSHIB 0x2C
0x7B4E  0x05            EQ
0x7B4F  0x2E 0x0A       JZB 0x7B59 (+10)

                        // if (nesting == 1)                                    types.hs:736

0x7B51  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7B53  0x45            PUSHI1
0x7B54  0x05            EQ
0x7B55  0x2E 0x04       JZB 0x7B59 (+4)

                        // isDictionary = true;                                 types.hs:738

0x7B57  0x45            PUSHI1
0x7B58  0x4C            POPLOCALB00

                        // i++;                                                 types.hs:741

0x7B59  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    types.hs:742

0x7B5B  0x28 0x02       DECSP 0x02
0x7B5D  0x30 0xC9       JB 0x7B26 (-55)

                        // if (isDictionary)                                    types.hs:743

0x7B5F  0x4E            PUSHLOCALB00
0x7B60  0x2E 0x23       JZB 0x7B83 (+35)

                        // isDictionary = (typeString[0] == '<') && (typeString[length-1] == '>') && (nesting == 0);

0x7B62  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B64  0x44            PUSHI0
0x7B65  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7B67  0x1A 0x3C       PUSHIB 0x3C
0x7B69  0x05            EQ
0x7B6A  0x27 0x00       DUP 0x00
0x7B6C  0x2E 0x16       JZB 0x7B82 (+22)
0x7B6E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B70  0x4F            PUSHLOCALB02
0x7B71  0x45            PUSHI1
0x7B72  0x01            SUB
0x7B73  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x7B75  0x1A 0x3E       PUSHIB 0x3E
0x7B77  0x05            EQ
0x7B78  0x0C            BOOLAND
0x7B79  0x27 0x00       DUP 0x00
0x7B7B  0x2E 0x07       JZB 0x7B82 (+7)
0x7B7D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7B7F  0x44            PUSHI0
0x7B80  0x05            EQ
0x7B81  0x0C            BOOLAND
0x7B82  0x4C            POPLOCALB00

                        // return isDictionary;                                 types.hs:747

0x7B83  0x4E            PUSHLOCALB00
0x7B84  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/types.hs:632
// ####  Types.GetKeyFromCollection(..)  ####                                   0x00E1

0x7B86  0x49            ENTER

                        // string keyType;                                      types.hs:634

0x7B87  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint cIndex;                                         types.hs:635

0x7B89  0x44            PUSHI0

                        // if (IsDictionary(collectionType) && collectionType.IndexOf(',', ref cIndex))

0x7B8A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B8C  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x7B8E  0x27 0x00       DUP 0x00
0x7B90  0x2E 0x0C       JZB 0x7B9C (+12)
0x7B92  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7B94  0x1A 0x2C       PUSHIB 0x2C
0x7B96  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x7B98  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0x7B9B  0x0C            BOOLAND
0x7B9C  0x2E 0x0D       JZB 0x7BA9 (+13)

                        // keyType = collectionType.Substring(1, cIndex-1);

0x7B9E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BA0  0x45            PUSHI1
0x7BA1  0x4F            PUSHLOCALB02
0x7BA2  0x45            PUSHI1
0x7BA3  0x01            SUB
0x7BA4  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7BA6  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:639

0x7BA7  0x30 0x15       JB 0x7BBC (+21)

                        // Parser.ErrorAtCurrent("invalid collection type for key '" + collectionType + "'");

0x7BA9  0x37 0x2B 0x0F  PUSHIW 0x0F2B
0x7BAC  0x1A 0x21       PUSHIB 0x21
0x7BAE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7BB0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BB2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7BB4  0x1A 0x27       PUSHIB 0x27
0x7BB6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7BB8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7BBA  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return keyType;                                      types.hs:644

0x7BBC  0x4E            PUSHLOCALB00
0x7BBD  0x2B 0x06       RETRETB 0x06


// /source/compiler/types.hs:648
// ####  Types.GetValueFromCollection(..)  ####                                 0x00E2

0x7BBF  0x49            ENTER

                        // string valueType;                                    types.hs:650

0x7BC0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint cIndex;                                         types.hs:651

0x7BC2  0x44            PUSHI0

                        // if (IsDictionary(collectionType) && collectionType.IndexOf(',', ref cIndex))

0x7BC3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BC5  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x7BC7  0x27 0x00       DUP 0x00
0x7BC9  0x2E 0x0C       JZB 0x7BD5 (+12)
0x7BCB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BCD  0x1A 0x2C       PUSHIB 0x2C
0x7BCF  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x7BD1  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0x7BD4  0x0C            BOOLAND
0x7BD5  0x2E 0x16       JZB 0x7BEB (+22)

                        // valueType = collectionType.Substring(cIndex+1);

0x7BD7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BD9  0x4F            PUSHLOCALB02
0x7BDA  0x45            PUSHI1
0x7BDB  0x00            ADD
0x7BDC  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x7BDE  0x5D            POPCOPYLOCALB00

                        // valueType = valueType.Substring(0, valueType.Length-1);

0x7BDF  0x4E            PUSHLOCALB00
0x7BE0  0x44            PUSHI0
0x7BE1  0x4E            PUSHLOCALB00
0x7BE2  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7BE4  0x45            PUSHI1
0x7BE5  0x01            SUB
0x7BE6  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7BE8  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:656

0x7BE9  0x30 0x60       JB 0x7C49 (+96)

                        // else if (IsList(collectionType))                     types.hs:657

0x7BEB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BED  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x7BEF  0x2E 0x14       JZB 0x7C03 (+20)

                        // valueType = collectionType.Substring(1);             types.hs:659

0x7BF1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7BF3  0x45            PUSHI1
0x7BF4  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x7BF6  0x5D            POPCOPYLOCALB00

                        // valueType = valueType.Substring(0, valueType.Length-1);

0x7BF7  0x4E            PUSHLOCALB00
0x7BF8  0x44            PUSHI0
0x7BF9  0x4E            PUSHLOCALB00
0x7BFA  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7BFC  0x45            PUSHI1
0x7BFD  0x01            SUB
0x7BFE  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7C00  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:661

0x7C01  0x30 0x48       JB 0x7C49 (+72)

                        // else if (IsArray(collectionType))                    types.hs:662

0x7C03  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C05  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x7C07  0x2E 0x2F       JZB 0x7C36 (+47)

                        // uint fb;                                             types.hs:664

0x7C09  0x44            PUSHI0

                        // if (!collectionType.IndexOf('[', ref fb))            types.hs:665

0x7C0A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C0C  0x1A 0x5B       PUSHIB 0x5B
0x7C0E  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x7C10  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0x7C13  0x2F 0x17       JNZB 0x7C2A (+23)

                        // Parser.ErrorAtCurrent("invalid collection type for value '" + collectionType + "'");

0x7C15  0x37 0x4C 0x0F  PUSHIW 0x0F4C
0x7C18  0x1A 0x23       PUSHIB 0x23
0x7C1A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7C1C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C1E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C20  0x1A 0x27       PUSHIB 0x27
0x7C22  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7C24  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C26  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    types.hs:668

0x7C28  0x30 0x0A       JB 0x7C32 (+10)

                        // valueType = collectionType.Substring(0, fb);

0x7C2A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C2C  0x44            PUSHI0
0x7C2D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7C2F  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7C31  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:673

0x7C32  0x28 0x02       DECSP 0x02
0x7C34  0x30 0x15       JB 0x7C49 (+21)

                        // Parser.ErrorAtCurrent("invalid collection type for value '" + collectionType + "'");

0x7C36  0x37 0x4C 0x0F  PUSHIW 0x0F4C
0x7C39  0x1A 0x23       PUSHIB 0x23
0x7C3B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7C3D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C3F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C41  0x1A 0x27       PUSHIB 0x27
0x7C43  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7C45  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C47  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return valueType;                                    types.hs:678

0x7C49  0x4E            PUSHLOCALB00
0x7C4A  0x2B 0x06       RETRETB 0x06


// /source/compiler/types.hs:365
// ####  Types.IsValueType(..)  ####                                            0x00DB


                        // bool isValue;                                        types.hs:366

0x7C4C  0x5F 0x01       ENTERB 0x01

                        // string valueTypes = "|bool|byte|char|uint|int|type|delegate|";

0x7C4E  0x24 0x02       SYSCALL0 0x02  // String.New
0x7C50  0x37 0x6F 0x0F  PUSHIW 0x0F6F
0x7C53  0x1A 0x27       PUSHIB 0x27
0x7C55  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7C57  0x5E            POPCOPYLOCALB02

                        // string keyString = "|" + typeString + "|";           types.hs:368

0x7C58  0x24 0x02       SYSCALL0 0x02  // String.New
0x7C5A  0x1A 0x7C       PUSHIB 0x7C
0x7C5C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7C5E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C60  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C62  0x1A 0x7C       PUSHIB 0x7C
0x7C64  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7C66  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7C68  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // isValue = valueTypes.Contains(keyString);            types.hs:369

0x7C6A  0x4F            PUSHLOCALB02
0x7C6B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7C6D  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x7C70  0x4C            POPLOCALB00

                        // if (!isValue)                                        types.hs:370

0x7C71  0x4E            PUSHLOCALB00
0x7C72  0x2F 0x19       JNZB 0x7C8B (+25)

                        // isValue = Types.IsEnum(typeString)                   types.hs:372

0x7C74  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C76  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x7C78  0x27 0x00       DUP 0x00
0x7C7A  0x2F 0x10       JNZB 0x7C8A (+16)
0x7C7C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C7E  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x7C80  0x0B            BOOLOR
0x7C81  0x27 0x00       DUP 0x00
0x7C83  0x2F 0x07       JNZB 0x7C8A (+7)
0x7C85  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7C87  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x7C89  0x0B            BOOLOR
0x7C8A  0x4C            POPLOCALB00

                        // return isValue;                                      types.hs:376

0x7C8B  0x4E            PUSHLOCALB00
0x7C8C  0x2B 0x08       RETRETB 0x08


// /source/compiler/types.hs:387
// ####  Types.ToByte(..)  ####                                                 0x00DD


                        // byte b;                                              types.hs:388

0x7C8E  0x5F 0x01       ENTERB 0x01

                        // switch (typeName)                                    types.hs:389

0x7C90  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "byte":                                         types.hs:391

0x7C92  0x37 0x51 0x05  PUSHIW 0x0551
0x7C95  0x1A 0x04       PUSHIB 0x04
0x7C97  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7C99  0x4F            PUSHLOCALB02
0x7C9A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7C9C  0x2F 0x08       JNZB 0x7CA4 (+8)

                        // b = byte(byte);                                      types.hs:393

0x7C9E  0x1A 0x03       PUSHIB 0x03
0x7CA0  0x4C            POPLOCALB00

                        // }                                                    types.hs:394

0x7CA1  0x33 0x8E 0x01  JW 0x7E2F (+398)

                        // case "char":                                         types.hs:395

0x7CA4  0x37 0x15 0x04  PUSHIW 0x0415
0x7CA7  0x1A 0x04       PUSHIB 0x04
0x7CA9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7CAB  0x4F            PUSHLOCALB02
0x7CAC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7CAE  0x2F 0x07       JNZB 0x7CB5 (+7)

                        // b = byte(char);                                      types.hs:397

0x7CB0  0x45            PUSHI1
0x7CB1  0x4C            POPLOCALB00

                        // }                                                    types.hs:398

0x7CB2  0x33 0x7D 0x01  JW 0x7E2F (+381)

                        // case "bool":                                         types.hs:399

0x7CB5  0x37 0x6F 0x03  PUSHIW 0x036F
0x7CB8  0x1A 0x04       PUSHIB 0x04
0x7CBA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7CBC  0x4F            PUSHLOCALB02
0x7CBD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7CBF  0x2F 0x08       JNZB 0x7CC7 (+8)

                        // b = byte(bool);                                      types.hs:401

0x7CC1  0x1A 0x06       PUSHIB 0x06
0x7CC3  0x4C            POPLOCALB00

                        // }                                                    types.hs:402

0x7CC4  0x33 0x6B 0x01  JW 0x7E2F (+363)

                        // case "int":                                          types.hs:403

0x7CC7  0x37 0x30 0x02  PUSHIW 0x0230
0x7CCA  0x1A 0x03       PUSHIB 0x03
0x7CCC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7CCE  0x4F            PUSHLOCALB02
0x7CCF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7CD1  0x2F 0x08       JNZB 0x7CD9 (+8)

                        // b = byte(int);                                       types.hs:405

0x7CD3  0x1A 0x02       PUSHIB 0x02
0x7CD5  0x4C            POPLOCALB00

                        // }                                                    types.hs:406

0x7CD6  0x33 0x59 0x01  JW 0x7E2F (+345)

                        // case "uint":                                         types.hs:407

0x7CD9  0x37 0x2F 0x02  PUSHIW 0x022F
0x7CDC  0x1A 0x04       PUSHIB 0x04
0x7CDE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7CE0  0x4F            PUSHLOCALB02
0x7CE1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7CE3  0x2F 0x08       JNZB 0x7CEB (+8)

                        // b = byte(uint);                                      types.hs:409

0x7CE5  0x1A 0x04       PUSHIB 0x04
0x7CE7  0x4C            POPLOCALB00

                        // }                                                    types.hs:410

0x7CE8  0x33 0x47 0x01  JW 0x7E2F (+327)

                        // case "long":                                         types.hs:411

0x7CEB  0x37 0xF7 0x05  PUSHIW 0x05F7
0x7CEE  0x1A 0x04       PUSHIB 0x04
0x7CF0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7CF2  0x4F            PUSHLOCALB02
0x7CF3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7CF5  0x2F 0x08       JNZB 0x7CFD (+8)

                        // b = byte(long);                                      types.hs:413

0x7CF7  0x1A 0x0E       PUSHIB 0x0E
0x7CF9  0x4C            POPLOCALB00

                        // }                                                    types.hs:414

0x7CFA  0x33 0x35 0x01  JW 0x7E2F (+309)

                        // case "float":                                        types.hs:415

0x7CFD  0x37 0x08 0x06  PUSHIW 0x0608
0x7D00  0x1A 0x05       PUSHIB 0x05
0x7D02  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D04  0x4F            PUSHLOCALB02
0x7D05  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D07  0x2F 0x08       JNZB 0x7D0F (+8)

                        // b = byte(float);                                     types.hs:417

0x7D09  0x1A 0x0D       PUSHIB 0x0D
0x7D0B  0x4C            POPLOCALB00

                        // }                                                    types.hs:418

0x7D0C  0x33 0x23 0x01  JW 0x7E2F (+291)

                        // case "file":                                         types.hs:419

0x7D0F  0x37 0x96 0x0F  PUSHIW 0x0F96
0x7D12  0x1A 0x04       PUSHIB 0x04
0x7D14  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D16  0x4F            PUSHLOCALB02
0x7D17  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D19  0x2F 0x08       JNZB 0x7D21 (+8)

                        // b = byte(file);                                      types.hs:421

0x7D1B  0x1A 0x15       PUSHIB 0x15
0x7D1D  0x4C            POPLOCALB00

                        // }                                                    types.hs:422

0x7D1E  0x33 0x11 0x01  JW 0x7E2F (+273)

                        // case "directory":                                    types.hs:423

0x7D21  0x37 0x9A 0x0F  PUSHIW 0x0F9A
0x7D24  0x1A 0x09       PUSHIB 0x09
0x7D26  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D28  0x4F            PUSHLOCALB02
0x7D29  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D2B  0x2F 0x08       JNZB 0x7D33 (+8)

                        // b = byte(directory);                                 types.hs:425

0x7D2D  0x1A 0x16       PUSHIB 0x16
0x7D2F  0x4C            POPLOCALB00

                        // }                                                    types.hs:426

0x7D30  0x33 0xFF 0x00  JW 0x7E2F (+255)

                        // case "string":                                       types.hs:427

0x7D33  0x37 0x62 0x02  PUSHIW 0x0262
0x7D36  0x1A 0x06       PUSHIB 0x06
0x7D38  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D3A  0x4F            PUSHLOCALB02
0x7D3B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D3D  0x2F 0x08       JNZB 0x7D45 (+8)

                        // b = byte(string);                                    types.hs:429

0x7D3F  0x1A 0x0F       PUSHIB 0x0F
0x7D41  0x4C            POPLOCALB00

                        // }                                                    types.hs:430

0x7D42  0x33 0xED 0x00  JW 0x7E2F (+237)

                        // case "variant":                                      types.hs:431

0x7D45  0x37 0xC3 0x02  PUSHIW 0x02C3
0x7D48  0x1A 0x07       PUSHIB 0x07
0x7D4A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D4C  0x4F            PUSHLOCALB02
0x7D4D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D4F  0x2F 0x08       JNZB 0x7D57 (+8)

                        // b = byte(variant);                                   types.hs:433

0x7D51  0x1A 0x14       PUSHIB 0x14
0x7D53  0x4C            POPLOCALB00

                        // }                                                    types.hs:434

0x7D54  0x33 0xDB 0x00  JW 0x7E2F (+219)

                        // case "type":                                         types.hs:435

0x7D57  0x37 0x13 0x01  PUSHIW 0x0113
0x7D5A  0x1A 0x04       PUSHIB 0x04
0x7D5C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D5E  0x4F            PUSHLOCALB02
0x7D5F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D61  0x2F 0x08       JNZB 0x7D69 (+8)

                        // b = byte(type);                                      types.hs:437

0x7D63  0x1A 0x0C       PUSHIB 0x0C
0x7D65  0x4C            POPLOCALB00

                        // }                                                    types.hs:438

0x7D66  0x33 0xC9 0x00  JW 0x7E2F (+201)

                        // case "list":                                         types.hs:439

0x7D69  0x37 0x4B 0x02  PUSHIW 0x024B
0x7D6C  0x1A 0x04       PUSHIB 0x04
0x7D6E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D70  0x4F            PUSHLOCALB02
0x7D71  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D73  0x2F 0x08       JNZB 0x7D7B (+8)

                        // b = byte(list);                                      types.hs:441

0x7D75  0x1A 0x19       PUSHIB 0x19
0x7D77  0x4C            POPLOCALB00

                        // }                                                    types.hs:442

0x7D78  0x33 0xB7 0x00  JW 0x7E2F (+183)

                        // case "array":                                        types.hs:443

0x7D7B  0x37 0x33 0x02  PUSHIW 0x0233
0x7D7E  0x1A 0x05       PUSHIB 0x05
0x7D80  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D82  0x4F            PUSHLOCALB02
0x7D83  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D85  0x2F 0x08       JNZB 0x7D8D (+8)

                        // b = byte(array);                                     types.hs:445

0x7D87  0x1A 0x12       PUSHIB 0x12
0x7D89  0x4C            POPLOCALB00

                        // }                                                    types.hs:446

0x7D8A  0x33 0xA5 0x00  JW 0x7E2F (+165)

                        // case "dictionary":                                   types.hs:447

0x7D8D  0x37 0x68 0x02  PUSHIW 0x0268
0x7D90  0x1A 0x0A       PUSHIB 0x0A
0x7D92  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7D94  0x4F            PUSHLOCALB02
0x7D95  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7D97  0x2F 0x08       JNZB 0x7D9F (+8)

                        // b = byte(dictionary);                                types.hs:449

0x7D99  0x1A 0x13       PUSHIB 0x13
0x7D9B  0x4C            POPLOCALB00

                        // }                                                    types.hs:450

0x7D9C  0x33 0x93 0x00  JW 0x7E2F (+147)

                        // case "enum":                                         types.hs:451

0x7D9F  0x37 0x09 0x0C  PUSHIW 0x0C09
0x7DA2  0x1A 0x04       PUSHIB 0x04
0x7DA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7DA6  0x4F            PUSHLOCALB02
0x7DA7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7DA9  0x2F 0x08       JNZB 0x7DB1 (+8)

                        // b = byte(enum);                                      types.hs:453

0x7DAB  0x1A 0x07       PUSHIB 0x07
0x7DAD  0x4C            POPLOCALB00

                        // }                                                    types.hs:454

0x7DAE  0x33 0x81 0x00  JW 0x7E2F (+129)

                        // case "flags":                                        types.hs:455

0x7DB1  0x37 0x15 0x0C  PUSHIW 0x0C15
0x7DB4  0x1A 0x05       PUSHIB 0x05
0x7DB6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7DB8  0x4F            PUSHLOCALB02
0x7DB9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7DBB  0x2F 0x08       JNZB 0x7DC3 (+8)

                        // b = byte(flags);                                     types.hs:457

0x7DBD  0x1A 0x08       PUSHIB 0x08
0x7DBF  0x4C            POPLOCALB00

                        // }                                                    types.hs:458

0x7DC0  0x33 0x6F 0x00  JW 0x7E2F (+111)

                        // case "pair":                                         types.hs:459

0x7DC3  0x37 0xA3 0x0F  PUSHIW 0x0FA3
0x7DC6  0x1A 0x04       PUSHIB 0x04
0x7DC8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7DCA  0x4F            PUSHLOCALB02
0x7DCB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7DCD  0x2F 0x07       JNZB 0x7DD4 (+7)

                        // b = byte(pair);                                      types.hs:461

0x7DCF  0x1A 0x10       PUSHIB 0x10
0x7DD1  0x4C            POPLOCALB00

                        // }                                                    types.hs:462

0x7DD2  0x30 0x5D       JB 0x7E2F (+93)

                        // case "delegate":                                     types.hs:463

0x7DD4  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0x7DD7  0x1A 0x08       PUSHIB 0x08
0x7DD9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7DDB  0x4F            PUSHLOCALB02
0x7DDC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7DDE  0x2F 0x07       JNZB 0x7DE5 (+7)

                        // b = byte(delegate);                                  types.hs:465

0x7DE0  0x1A 0x0B       PUSHIB 0x0B
0x7DE2  0x4C            POPLOCALB00

                        // }                                                    types.hs:466

0x7DE3  0x30 0x4C       JB 0x7E2F (+76)

                        // if (Types.IsList(typeName))                          types.hs:470

0x7DE5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7DE7  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x7DE9  0x2E 0x07       JZB 0x7DF0 (+7)

                        // b = byte(list);                                      types.hs:472

0x7DEB  0x1A 0x19       PUSHIB 0x19
0x7DED  0x4C            POPLOCALB00

                        // }                                                    types.hs:473

0x7DEE  0x30 0x41       JB 0x7E2F (+65)

                        // else if (Types.IsArray(typeName))                    types.hs:474

0x7DF0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7DF2  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x7DF4  0x2E 0x07       JZB 0x7DFB (+7)

                        // b = byte(array);                                     types.hs:476

0x7DF6  0x1A 0x12       PUSHIB 0x12
0x7DF8  0x4C            POPLOCALB00

                        // }                                                    types.hs:477

0x7DF9  0x30 0x36       JB 0x7E2F (+54)

                        // else if (Types.IsDictionary(typeName))               types.hs:478

0x7DFB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7DFD  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x7DFF  0x2E 0x07       JZB 0x7E06 (+7)

                        // b = byte(dictionary);                                types.hs:480

0x7E01  0x1A 0x13       PUSHIB 0x13
0x7E03  0x4C            POPLOCALB00

                        // }                                                    types.hs:481

0x7E04  0x30 0x2B       JB 0x7E2F (+43)

                        // else if (Types.IsEnum(typeName))                     types.hs:484

0x7E06  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E08  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x7E0A  0x2E 0x07       JZB 0x7E11 (+7)

                        // b = byte(enum);                                      types.hs:486

0x7E0C  0x1A 0x07       PUSHIB 0x07
0x7E0E  0x4C            POPLOCALB00

                        // }                                                    types.hs:487

0x7E0F  0x30 0x20       JB 0x7E2F (+32)

                        // else if (Types.IsFlags(typeName))                    types.hs:488

0x7E11  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E13  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x7E15  0x2E 0x07       JZB 0x7E1C (+7)

                        // b = byte(flags);                                     types.hs:490

0x7E17  0x1A 0x08       PUSHIB 0x08
0x7E19  0x4C            POPLOCALB00

                        // }                                                    types.hs:491

0x7E1A  0x30 0x15       JB 0x7E2F (+21)

                        // else if (Types.IsDelegate(typeName))                 types.hs:492

0x7E1C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E1E  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x7E20  0x2E 0x07       JZB 0x7E27 (+7)

                        // b = byte(delegate);                                  types.hs:494

0x7E22  0x1A 0x0B       PUSHIB 0x0B
0x7E24  0x4C            POPLOCALB00

                        // }                                                    types.hs:495

0x7E25  0x30 0x0A       JB 0x7E2F (+10)

                        // PrintLn(typeName);                                   types.hs:498

0x7E27  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E29  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:499

0x7E2B  0x1A 0x0A       PUSHIB 0x0A
0x7E2D  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:502

0x7E2F  0x28 0x02       DECSP 0x02

                        // if (b == 26)                                         types.hs:503

0x7E31  0x4E            PUSHLOCALB00
0x7E32  0x1A 0x1A       PUSHIB 0x1A
0x7E34  0x05            EQ
0x7E35  0x2E 0x05       JZB 0x7E3A (+5)

                        // b = 19; // tHashDictionary -> tDictionary            types.hs:505

0x7E37  0x1A 0x13       PUSHIB 0x13
0x7E39  0x4C            POPLOCALB00

                        // if (b == 27)                                         types.hs:507

0x7E3A  0x4E            PUSHLOCALB00
0x7E3B  0x1A 0x1B       PUSHIB 0x1B
0x7E3D  0x05            EQ
0x7E3E  0x2E 0x05       JZB 0x7E43 (+5)

                        // b = 16; // tHashPair -> tPair                        types.hs:509

0x7E40  0x1A 0x10       PUSHIB 0x10
0x7E42  0x4C            POPLOCALB00

                        // return b;                                            types.hs:511

0x7E43  0x4E            PUSHLOCALB00
0x7E44  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:682
// ####  Types.GetIteratorFromCollection(..)  ####                              0x00E3

0x7E46  0x49            ENTER

                        // string iteratorType;                                 types.hs:683

0x7E47  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint bIndex;                                         types.hs:684

0x7E49  0x44            PUSHI0

                        // uint cIndex;                                         types.hs:685

0x7E4A  0x44            PUSHI0

                        // if (collectionType == "string")                      types.hs:686

0x7E4B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E4D  0x37 0x62 0x02  PUSHIW 0x0262
0x7E50  0x1A 0x06       PUSHIB 0x06
0x7E52  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7E54  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x7E56  0x2F 0x0C       JNZB 0x7E62 (+12)

                        // iteratorType = "char";                               types.hs:688

0x7E58  0x37 0x15 0x04  PUSHIW 0x0415
0x7E5B  0x1A 0x04       PUSHIB 0x04
0x7E5D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7E5F  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:689

0x7E60  0x30 0x63       JB 0x7EC3 (+99)

                        // else if (collectionType.IndexOf('[', ref bIndex))

0x7E62  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E64  0x1A 0x5B       PUSHIB 0x5B
0x7E66  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x7E68  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0x7E6B  0x2E 0x0B       JZB 0x7E76 (+11)

                        // iteratorType = collectionType.Substring(0, bIndex);

0x7E6D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E6F  0x44            PUSHI0
0x7E70  0x4F            PUSHLOCALB02
0x7E71  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7E73  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:694

0x7E74  0x30 0x4F       JB 0x7EC3 (+79)

                        // else if (IsDictionary(collectionType) && collectionType.IndexOf(',', ref bIndex))

0x7E76  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E78  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x7E7A  0x27 0x00       DUP 0x00
0x7E7C  0x2E 0x0C       JZB 0x7E88 (+12)
0x7E7E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E80  0x1A 0x2C       PUSHIB 0x2C
0x7E82  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0x7E84  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0x7E87  0x0C            BOOLAND
0x7E88  0x2E 0x07       JZB 0x7E8F (+7)

                        // iteratorType = collectionType;                       types.hs:698

0x7E8A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E8C  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:699

0x7E8D  0x30 0x36       JB 0x7EC3 (+54)

                        // else if (IsList(collectionType) && collectionType.StartsWith('<'))

0x7E8F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E91  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x7E93  0x27 0x00       DUP 0x00
0x7E95  0x2E 0x0A       JZB 0x7E9F (+10)
0x7E97  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7E99  0x1A 0x3C       PUSHIB 0x3C
0x7E9B  0x34 0x8C 0x01  CALLW 0x018C   // String.StartsWith
0x7E9E  0x0C            BOOLAND
0x7E9F  0x2E 0x11       JZB 0x7EB0 (+17)

                        // iteratorType = collectionType.Substring(1, collectionType.Length-2);

0x7EA1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7EA3  0x45            PUSHI1
0x7EA4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7EA6  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x7EA8  0x1A 0x02       PUSHIB 0x02
0x7EAA  0x01            SUB
0x7EAB  0x25 0x08       SYSCALL1 0x08  // String.Substring
0x7EAD  0x5D            POPCOPYLOCALB00

                        // }                                                    types.hs:704

0x7EAE  0x30 0x15       JB 0x7EC3 (+21)

                        // Parser.ErrorAtCurrent("invalid collection type for iterator '" + collectionType + "'");

0x7EB0  0x37 0xA7 0x0F  PUSHIW 0x0FA7
0x7EB3  0x1A 0x26       PUSHIB 0x26
0x7EB5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7EB7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7EB9  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7EBB  0x1A 0x27       PUSHIB 0x27
0x7EBD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7EBF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7EC1  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return iteratorType;                                 types.hs:709

0x7EC3  0x4E            PUSHLOCALB00
0x7EC4  0x2B 0x08       RETRETB 0x08


// /source/compiler/types.hs:601
// ####  Types.ParseType(..)  ####                                              0x00DF

0x7EC6  0x49            ENTER

                        // string typeString;                                   types.hs:602

0x7EC7  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (tryParseTypeString(ref typeString))              types.hs:603

0x7EC9  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x7ECB  0x2C 0xDE       CALLB 0xDE     // Types.tryParseTypeString
0x7ECD  0x2E 0x02       JZB 0x7ECF (+2)

                        // return typeString;                                   types.hs:606

0x7ECF  0x4E            PUSHLOCALB00
0x7ED0  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:807
// ####  Types.QualifyMethodName(..)  ####                                      0x00E9

0x7ED2  0x49            ENTER

                        // return Symbols.QualifyMethodName(identifier, currentNamespace);

0x7ED3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7ED5  0x20 0x98       PUSHGLOBALB 0x98
0x7ED7  0x2C 0xA6       CALLB 0xA6     // Symbols.QualifyMethodName
0x7ED9  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:379
// ####  Types.IsSimpleType(..)  ####                                           0x00DC


                        // bool isValue;                                        types.hs:380

0x7EDB  0x5F 0x01       ENTERB 0x01

                        // string simpleTypes = "|bool|byte|char|uint|int|long|float|string|type|file|directory|delegate|";

0x7EDD  0x24 0x02       SYSCALL0 0x02  // String.New
0x7EDF  0x37 0xCD 0x0F  PUSHIW 0x0FCD
0x7EE2  0x1A 0x48       PUSHIB 0x48
0x7EE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7EE6  0x5E            POPCOPYLOCALB02

                        // string keyString = "|" + typeString + "|";           types.hs:382

0x7EE7  0x24 0x02       SYSCALL0 0x02  // String.New
0x7EE9  0x1A 0x7C       PUSHIB 0x7C
0x7EEB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7EED  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7EEF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7EF1  0x1A 0x7C       PUSHIB 0x7C
0x7EF3  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7EF5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7EF7  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // isValue = simpleTypes.Contains(keyString);           types.hs:383

0x7EF9  0x4F            PUSHLOCALB02
0x7EFA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x7EFC  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x7EFF  0x4C            POPLOCALB00

                        // return isValue;                                      types.hs:384

0x7F00  0x4E            PUSHLOCALB00
0x7F01  0x2B 0x08       RETRETB 0x08


// /source/compiler/types.hs:1230
// ####  Types.VerifyTopType(..)  ####                                          0x00F7

0x7F03  0x49            ENTER

                        // if (CodeStream.CheckedBuild)                         types.hs:1231

0x7F04  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0x7F07  0x2E 0x3C       JZB 0x7F43 (+60)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0)); // copy of [top]

0x7F09  0x1A 0x27       PUSHIB 0x27
0x7F0B  0x44            PUSHI0
0x7F0C  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Types", prefix + "TypeOf");

0x7F0F  0x37 0x4E 0x09  PUSHIW 0x094E
0x7F12  0x1A 0x05       PUSHIB 0x05
0x7F14  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F16  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x7F18  0x37 0x53 0x09  PUSHIW 0x0953
0x7F1B  0x1A 0x06       PUSHIB 0x06
0x7F1D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F1F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x7F21  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // byte vt = Types.ToByte(variableType);                types.hs:1237

0x7F24  0x44            PUSHI0
0x7F25  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7F27  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x7F29  0x4C            POPLOCALB00

                        // CodeStream.AddInstructionPUSHI(vt);                  types.hs:1238

0x7F2A  0x4E            PUSHLOCALB00
0x7F2B  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.EQ);           types.hs:1239

0x7F2E  0x1A 0x05       PUSHIB 0x05
0x7F30  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJumpOffset(Instruction.JNZB, byte(4));

0x7F33  0x1A 0x2F       PUSHIB 0x2F
0x7F35  0x1A 0x04       PUSHIB 0x04
0x7F37  0x34 0x33 0x01  CALLW 0x0133   // CodeStream.AddInstructionJumpOffset

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x09)); // invalid variant type

0x7F3A  0x1A 0x29       PUSHIB 0x29
0x7F3C  0x1A 0x09       PUSHIB 0x09
0x7F3E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    types.hs:1242

0x7F41  0x28 0x02       DECSP 0x02

                        // }                                                    types.hs:1243

0x7F43  0x2A 0x04       RETB 0x04


// /source/compiler/types.hs:1142
// ####  Types.VerifyTopValueType(..)  ####                                     0x00F3

0x7F45  0x49            ENTER

                        // if (CodeStream.CheckedBuild)                         types.hs:1143

0x7F46  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0x7F49  0x31 0xA3 0x00  JZW 0x7FEC (+163)

                        // byte vt = Types.ToByte(variableType);                types.hs:1145

0x7F4C  0x44            PUSHI0
0x7F4D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x7F4F  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x7F51  0x4C            POPLOCALB00

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0)); // copy of [top]

0x7F52  0x1A 0x27       PUSHIB 0x27
0x7F54  0x44            PUSHI0
0x7F55  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0)); // 2nd copy

0x7F58  0x1A 0x27       PUSHIB 0x27
0x7F5A  0x44            PUSHI0
0x7F5B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Types", "ValueTypeOf");

0x7F5E  0x37 0x4E 0x09  PUSHIW 0x094E
0x7F61  0x1A 0x05       PUSHIB 0x05
0x7F63  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F65  0x37 0x59 0x09  PUSHIW 0x0959
0x7F68  0x1A 0x0B       PUSHIB 0x0B
0x7F6A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F6C  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionPUSHI(byte(variant));

0x7F6F  0x1A 0x14       PUSHIB 0x14
0x7F71  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.EQ);           // is it a variant?

0x7F74  0x1A 0x05       PUSHIB 0x05
0x7F76  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpValue = CodeStream.NextAddress;             types.hs:1152

0x7F79  0x44            PUSHI0
0x7F7A  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x7F7D  0x4D            POPLOCALB02

                        // CodeStream.AddInstructionJump(Instruction.JZB); // if not, jump past to valuetype

0x7F7E  0x1A 0x2E       PUSHIB 0x2E
0x7F80  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstructionPUSHI(vt);                  types.hs:1155

0x7F83  0x4E            PUSHLOCALB00
0x7F84  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Types", "VerifyValueTypes");

0x7F87  0x37 0x4E 0x09  PUSHIW 0x094E
0x7F8A  0x1A 0x05       PUSHIB 0x05
0x7F8C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F8E  0x37 0x76 0x09  PUSHIW 0x0976
0x7F91  0x1A 0x10       PUSHIB 0x10
0x7F93  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7F95  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // uint jumpEnd = CodeStream.NextAddress;               types.hs:1157

0x7F98  0x44            PUSHI0
0x7F99  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x7F9C  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // CodeStream.AddInstructionJump(Instruction.JNZB);

0x7F9E  0x1A 0x2F       PUSHIB 0x2F
0x7FA0  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x09)); // invalid value type/s

0x7FA3  0x1A 0x29       PUSHIB 0x29
0x7FA5  0x1A 0x09       PUSHIB 0x09
0x7FA7  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // uint valueAddress = CodeStream.NextAddress;

0x7FAA  0x44            PUSHI0
0x7FAB  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x7FAE  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // CodeStream.PatchJump(jumpValue, valueAddress);

0x7FB0  0x4F            PUSHLOCALB02
0x7FB1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x7FB3  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // CodeStream.AddInstructionSysCall0("Types", "ValueTypeOf");

0x7FB6  0x37 0x4E 0x09  PUSHIW 0x094E
0x7FB9  0x1A 0x05       PUSHIB 0x05
0x7FBB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7FBD  0x37 0x59 0x09  PUSHIW 0x0959
0x7FC0  0x1A 0x0B       PUSHIB 0x0B
0x7FC2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7FC4  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionPUSHI(vt);                  types.hs:1166

0x7FC7  0x4E            PUSHLOCALB00
0x7FC8  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.EQ);           types.hs:1167

0x7FCB  0x1A 0x05       PUSHIB 0x05
0x7FCD  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJumpOffset(Instruction.JNZB, byte(4));

0x7FD0  0x1A 0x2F       PUSHIB 0x2F
0x7FD2  0x1A 0x04       PUSHIB 0x04
0x7FD4  0x34 0x33 0x01  CALLW 0x0133   // CodeStream.AddInstructionJumpOffset

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x09)); // invalid variant type

0x7FD7  0x1A 0x29       PUSHIB 0x29
0x7FD9  0x1A 0x09       PUSHIB 0x09
0x7FDB  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // uint endAddress = CodeStream.NextAddress;            types.hs:1171

0x7FDE  0x44            PUSHI0
0x7FDF  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x7FE2  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.PatchJump(jumpEnd, endAddress);           types.hs:1172

0x7FE4  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0x7FE7  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    types.hs:1173

0x7FEA  0x28 0x0A       DECSP 0x0A

                        // }                                                    types.hs:1174

0x7FEC  0x2A 0x04       RETB 0x04


// /source/compiler/types.hs:315
// ####  Types.IsNumericType(..)  ####                                          0x00D6

0x7FEE  0x49            ENTER

                        // string valueTypes = "|byte|uint|int|+int|-int|long|float|";

0x7FEF  0x24 0x02       SYSCALL0 0x02  // String.New
0x7FF1  0x37 0x15 0x10  PUSHIW 0x1015
0x7FF4  0x1A 0x24       PUSHIB 0x24
0x7FF6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x7FF8  0x5D            POPCOPYLOCALB00

                        // return valueTypes.Contains("|" + typeString + "|");

0x7FF9  0x4E            PUSHLOCALB00
0x7FFA  0x1A 0x7C       PUSHIB 0x7C
0x7FFC  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x7FFE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8000  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8002  0x1A 0x7C       PUSHIB 0x7C
0x8004  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8006  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8008  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x800B  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:321
// ####  Types.IsSignedIntType(..)  ####                                        0x00D7

0x800D  0x49            ENTER

                        // string valueTypes = "|int|+int|-int|";               types.hs:322

0x800E  0x24 0x02       SYSCALL0 0x02  // String.New
0x8010  0x37 0x1F 0x10  PUSHIW 0x101F
0x8013  0x1A 0x0F       PUSHIB 0x0F
0x8015  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8017  0x5D            POPCOPYLOCALB00

                        // return valueTypes.Contains("|" + typeString + "|");

0x8018  0x4E            PUSHLOCALB00
0x8019  0x1A 0x7C       PUSHIB 0x7C
0x801B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x801D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x801F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8021  0x1A 0x7C       PUSHIB 0x7C
0x8023  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8025  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8027  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0x802A  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:835
// ####  Types.ArgumentsEqual(..)  ####                                         0x00EF


                        // bool equal = true;                                   types.hs:836

0x802C  0x5F 0x01       ENTERB 0x01

                        // bool equal = true;                                   types.hs:836

0x802E  0x45            PUSHI1
0x802F  0x4C            POPLOCALB00

                        // uint lActual = actual.Length;                        types.hs:839

0x8030  0x44            PUSHI0
0x8031  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8033  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x8035  0x4D            POPLOCALB02

                        // uint lTarget = target.Length;                        types.hs:840

0x8036  0x44            PUSHI0
0x8037  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8039  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x803B  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (lActual != lTarget)                              types.hs:841

0x803D  0x4F            PUSHLOCALB02
0x803E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8040  0x06            NE
0x8041  0x2E 0x09       JZB 0x804A (+9)

                        // equal = false;                                       types.hs:843

0x8043  0x44            PUSHI0
0x8044  0x4C            POPLOCALB00

                        // break;                                               types.hs:844

0x8045  0x28 0x04       DECSP 0x04
0x8047  0x33 0x0E 0x02  JW 0x8255 (+526)

                        // for (uint i=0; i < lActual; i++)                     types.hs:846

0x804A  0x44            PUSHI0
0x804B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x804D  0x4F            PUSHLOCALB02
0x804E  0x08            LT
0x804F  0x31 0x02 0x02  JZW 0x8251 (+514)

                        // <string> actualList = actual[i];                     types.hs:848

0x8052  0x1A 0x0F       PUSHIB 0x0F
0x8054  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x8056  0x56 0xF8 0x06  PUSHLOCALBB 0x06F8
0x8059  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x805B  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // <string> targetList = target[i];                     types.hs:849

0x805D  0x1A 0x0F       PUSHIB 0x0F
0x805F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x8061  0x56 0xFA 0x06  PUSHLOCALBB 0x06FA
0x8064  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8066  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (actualList.Length != 3)                          types.hs:850

0x8068  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x806A  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x806C  0x1A 0x03       PUSHIB 0x03
0x806E  0x06            NE
0x806F  0x2E 0x09       JZB 0x8078 (+9)

                        // equal = false;                                       types.hs:852

0x8071  0x44            PUSHI0
0x8072  0x4C            POPLOCALB00

                        // break;                                               types.hs:853

0x8073  0x28 0x06       DECSP 0x06
0x8075  0x33 0xDE 0x01  JW 0x8253 (+478)

                        // if (targetList.Length != 3)                          types.hs:855

0x8078  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x807A  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x807C  0x1A 0x03       PUSHIB 0x03
0x807E  0x06            NE
0x807F  0x2E 0x09       JZB 0x8088 (+9)

                        // equal = false;                                       types.hs:857

0x8081  0x44            PUSHI0
0x8082  0x4C            POPLOCALB00

                        // break;                                               types.hs:858

0x8083  0x28 0x06       DECSP 0x06
0x8085  0x33 0xCE 0x01  JW 0x8253 (+462)

                        // if (actualList[0] != targetList[0]) // ref           types.hs:860

0x8088  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x808A  0x44            PUSHI0
0x808B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x808D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x808F  0x44            PUSHI0
0x8090  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8092  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8094  0x2E 0x09       JZB 0x809D (+9)

                        // equal = false;                                       types.hs:862

0x8096  0x44            PUSHI0
0x8097  0x4C            POPLOCALB00

                        // break;                                               types.hs:863

0x8098  0x28 0x06       DECSP 0x06
0x809A  0x33 0xB9 0x01  JW 0x8253 (+441)

                        // bool localUpCastAllowed = upCastAllowed;             types.hs:866

0x809D  0x44            PUSHI0
0x809E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x80A0  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (!localUpCastAllowed && nameCastAllowed)

0x80A2  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x80A4  0x41            BOOLNOT
0x80A5  0x27 0x00       DUP 0x00
0x80A7  0x2E 0x05       JZB 0x80AC (+5)
0x80A9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x80AB  0x0C            BOOLAND
0x80AC  0x31 0x7E 0x00  JZW 0x812A (+126)

                        // localUpCastAllowed = (actualList[1] == "enum") ||

0x80AF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x80B1  0x45            PUSHI1
0x80B2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x80B4  0x37 0x09 0x0C  PUSHIW 0x0C09
0x80B7  0x1A 0x04       PUSHIB 0x04
0x80B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x80BB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x80BD  0x44            PUSHI0
0x80BE  0x05            EQ
0x80BF  0x27 0x00       DUP 0x00
0x80C1  0x2F 0x67       JNZB 0x8128 (+103)
0x80C3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x80C5  0x45            PUSHI1
0x80C6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x80C8  0x37 0x15 0x0C  PUSHIW 0x0C15
0x80CB  0x1A 0x05       PUSHIB 0x05
0x80CD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x80CF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x80D1  0x44            PUSHI0
0x80D2  0x05            EQ
0x80D3  0x0B            BOOLOR
0x80D4  0x27 0x00       DUP 0x00
0x80D6  0x2F 0x52       JNZB 0x8128 (+82)
0x80D8  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x80DA  0x45            PUSHI1
0x80DB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x80DD  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0x80E0  0x1A 0x08       PUSHIB 0x08
0x80E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x80E4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x80E6  0x44            PUSHI0
0x80E7  0x05            EQ
0x80E8  0x0B            BOOLOR
0x80E9  0x27 0x00       DUP 0x00
0x80EB  0x2F 0x3D       JNZB 0x8128 (+61)
0x80ED  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x80EF  0x45            PUSHI1
0x80F0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x80F2  0x37 0x09 0x0C  PUSHIW 0x0C09
0x80F5  0x1A 0x04       PUSHIB 0x04
0x80F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x80F9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x80FB  0x44            PUSHI0
0x80FC  0x05            EQ
0x80FD  0x0B            BOOLOR
0x80FE  0x27 0x00       DUP 0x00
0x8100  0x2F 0x28       JNZB 0x8128 (+40)
0x8102  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8104  0x45            PUSHI1
0x8105  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8107  0x37 0x15 0x0C  PUSHIW 0x0C15
0x810A  0x1A 0x05       PUSHIB 0x05
0x810C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x810E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8110  0x44            PUSHI0
0x8111  0x05            EQ
0x8112  0x0B            BOOLOR
0x8113  0x27 0x00       DUP 0x00
0x8115  0x2F 0x13       JNZB 0x8128 (+19)
0x8117  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8119  0x45            PUSHI1
0x811A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x811C  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0x811F  0x1A 0x08       PUSHIB 0x08
0x8121  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8123  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8125  0x44            PUSHI0
0x8126  0x05            EQ
0x8127  0x0B            BOOLOR
0x8128  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (actualList[0] == "ref")                          types.hs:876

0x812A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x812C  0x44            PUSHI0
0x812D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x812F  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x8132  0x1A 0x03       PUSHIB 0x03
0x8134  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8136  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8138  0x2F 0x05       JNZB 0x813D (+5)

                        // localUpCastAllowed = false;                          types.hs:878

0x813A  0x44            PUSHI0
0x813B  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (actualList[1] != targetList[1]) // type

0x813D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x813F  0x45            PUSHI1
0x8140  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8142  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8144  0x45            PUSHI1
0x8145  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8147  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8149  0x31 0x01 0x01  JZW 0x824A (+257)

                        // if (!localUpCastAllowed)                             types.hs:890

0x814C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x814E  0x2F 0x09       JNZB 0x8157 (+9)

                        // equal = false;                                       types.hs:892

0x8150  0x44            PUSHI0
0x8151  0x4C            POPLOCALB00

                        // break;                                               types.hs:893

0x8152  0x28 0x08       DECSP 0x08
0x8154  0x33 0xFF 0x00  JW 0x8253 (+255)

                        // else if (AutomaticUpCast(actualList[1], targetList[1], false, false))

0x8157  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8159  0x45            PUSHI1
0x815A  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x815C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x815E  0x45            PUSHI1
0x815F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8161  0x44            PUSHI0
0x8162  0x44            PUSHI0
0x8163  0x2C 0xD3       CALLB 0xD3     // Types.AutomaticUpCast
0x8165  0x32 0xE5 0x00  JNZW 0x824A (+229)

                        // string targetString = targetList[1];                 types.hs:901

0x8168  0x24 0x02       SYSCALL0 0x02  // String.New
0x816A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x816C  0x45            PUSHI1
0x816D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x816F  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if ( (targetString == "K")                           types.hs:902

0x8171  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8173  0x1A 0x4B       PUSHIB 0x4B
0x8175  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8177  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8179  0x44            PUSHI0
0x817A  0x05            EQ
0x817B  0x27 0x00       DUP 0x00
0x817D  0x2F 0x43       JNZB 0x81C0 (+67)
0x817F  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8181  0x1A 0x56       PUSHIB 0x56
0x8183  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8185  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8187  0x44            PUSHI0
0x8188  0x05            EQ
0x8189  0x0B            BOOLOR
0x818A  0x27 0x00       DUP 0x00
0x818C  0x2F 0x34       JNZB 0x81C0 (+52)
0x818E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8190  0x37 0x39 0x10  PUSHIW 0x1039
0x8193  0x1A 0x05       PUSHIB 0x05
0x8195  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8197  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8199  0x44            PUSHI0
0x819A  0x05            EQ
0x819B  0x0B            BOOLOR
0x819C  0x27 0x00       DUP 0x00
0x819E  0x2F 0x22       JNZB 0x81C0 (+34)
0x81A0  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x81A2  0x37 0x3E 0x10  PUSHIW 0x103E
0x81A5  0x1A 0x03       PUSHIB 0x03
0x81A7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x81A9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x81AB  0x44            PUSHI0
0x81AC  0x05            EQ
0x81AD  0x0B            BOOLOR
0x81AE  0x27 0x00       DUP 0x00
0x81B0  0x2F 0x10       JNZB 0x81C0 (+16)
0x81B2  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x81B4  0x37 0x41 0x10  PUSHIW 0x1041
0x81B7  0x1A 0x03       PUSHIB 0x03
0x81B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x81BB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x81BD  0x44            PUSHI0
0x81BE  0x05            EQ
0x81BF  0x0B            BOOLOR
0x81C0  0x32 0x88 0x00  JNZW 0x8248 (+136)

                        // else if (Types.IsEnum(actualList[1]) && Types.IsEnum(targetList[1]))

0x81C3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x81C5  0x45            PUSHI1
0x81C6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x81C8  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x81CA  0x27 0x00       DUP 0x00
0x81CC  0x2E 0x0A       JZB 0x81D6 (+10)
0x81CE  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x81D0  0x45            PUSHI1
0x81D1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x81D3  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x81D5  0x0C            BOOLAND
0x81D6  0x2E 0x0D       JZB 0x81E3 (+13)

                        // Die(10);                                             types.hs:914

0x81D8  0x1A 0x0A       PUSHIB 0x0A
0x81DA  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // equal = false;                                       types.hs:915

0x81DC  0x44            PUSHI0
0x81DD  0x4C            POPLOCALB00

                        // break;                                               types.hs:916

0x81DE  0x28 0x0A       DECSP 0x0A
0x81E0  0x33 0x73 0x00  JW 0x8253 (+115)

                        // else if (Types.IsFlags(actualList[1]) && Types.IsFlags(targetList[1]))

0x81E3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x81E5  0x45            PUSHI1
0x81E6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x81E8  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x81EA  0x27 0x00       DUP 0x00
0x81EC  0x2E 0x0A       JZB 0x81F6 (+10)
0x81EE  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x81F0  0x45            PUSHI1
0x81F1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x81F3  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x81F5  0x0C            BOOLAND
0x81F6  0x2E 0x0C       JZB 0x8202 (+12)

                        // Die(10);                                             types.hs:921

0x81F8  0x1A 0x0A       PUSHIB 0x0A
0x81FA  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // equal = false;                                       types.hs:922

0x81FC  0x44            PUSHI0
0x81FD  0x4C            POPLOCALB00

                        // break;                                               types.hs:923

0x81FE  0x28 0x0A       DECSP 0x0A
0x8200  0x30 0x53       JB 0x8253 (+83)

                        // else if (Types.IsDelegate(actualList[1]) && Types.IsDelegate(targetList[1]))

0x8202  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8204  0x45            PUSHI1
0x8205  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8207  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x8209  0x27 0x00       DUP 0x00
0x820B  0x2E 0x0A       JZB 0x8215 (+10)
0x820D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x820F  0x45            PUSHI1
0x8210  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8212  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x8214  0x0C            BOOLAND
0x8215  0x2E 0x2D       JZB 0x8242 (+45)

                        // string leftType  = Symbols.QualifyDelegate(actualList[1], currentNamespace);

0x8217  0x24 0x02       SYSCALL0 0x02  // String.New
0x8219  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x821B  0x45            PUSHI1
0x821C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x821E  0x20 0x98       PUSHGLOBALB 0x98
0x8220  0x2C 0xA7       CALLB 0xA7     // Symbols.QualifyDelegate
0x8222  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string rightType = Symbols.QualifyDelegate(targetList[1], currentNamespace);

0x8224  0x24 0x02       SYSCALL0 0x02  // String.New
0x8226  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8228  0x45            PUSHI1
0x8229  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x822B  0x20 0x98       PUSHGLOBALB 0x98
0x822D  0x2C 0xA7       CALLB 0xA7     // Symbols.QualifyDelegate
0x822F  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (leftType == rightType)                           types.hs:930

0x8231  0x56 0x10 0x12  PUSHLOCALBB 0x1210
0x8234  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8236  0x2E 0x08       JZB 0x823E (+8)

                        // equal = false;                                       types.hs:936

0x8238  0x44            PUSHI0
0x8239  0x4C            POPLOCALB00

                        // break;                                               types.hs:937

0x823A  0x28 0x0E       DECSP 0x0E
0x823C  0x30 0x17       JB 0x8253 (+23)

                        // }                                                    types.hs:939

0x823E  0x28 0x04       DECSP 0x04
0x8240  0x30 0x08       JB 0x8248 (+8)

                        // equal = false;                                       types.hs:942

0x8242  0x44            PUSHI0
0x8243  0x4C            POPLOCALB00

                        // break;                                               types.hs:943

0x8244  0x28 0x0A       DECSP 0x0A
0x8246  0x30 0x0D       JB 0x8253 (+13)

                        // }                                                    types.hs:945

0x8248  0x28 0x02       DECSP 0x02

                        // }                                                    types.hs:948

0x824A  0x28 0x06       DECSP 0x06
0x824C  0x22 0x06       INCLOCALB 0x06 (BP+6)
0x824E  0x33 0xFD 0xFD  JW 0x804B (-515)
0x8251  0x28 0x02       DECSP 0x02

                        // break;                                               types.hs:949

0x8253  0x28 0x04       DECSP 0x04

                        // return equal;                                        types.hs:951

0x8255  0x4E            PUSHLOCALB00
0x8256  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/types.hs:23
// ####  Types.GetCurrentMethod(..)  ####                                       0x00D0

0x8258  0x49            ENTER

                        // return iCurrentOverload;                             types.hs:24

0x8259  0x20 0x96       PUSHGLOBALB 0x96
0x825B  0x4A            RET0


// /source/compiler/types.hs:104
// ####  Types.AutomaticUpCast(..)  ####                                        0x00D3


                        // bool ok = false;                                     types.hs:107

0x825C  0x5F 0x02       ENTERB 0x02

                        // if (actualType == "byte")                            types.hs:111

0x825E  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8260  0x37 0x51 0x05  PUSHIW 0x0551
0x8263  0x1A 0x04       PUSHIB 0x04
0x8265  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8267  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8269  0x2F 0x69       JNZB 0x82D2 (+105)

                        // ok = ((desiredType == "+int")                        types.hs:113

0x826B  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x826D  0x37 0x24 0x10  PUSHIW 0x1024
0x8270  0x1A 0x04       PUSHIB 0x04
0x8272  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8274  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8276  0x44            PUSHI0
0x8277  0x05            EQ
0x8278  0x27 0x00       DUP 0x00
0x827A  0x2F 0x46       JNZB 0x82C0 (+70)
0x827C  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x827E  0x37 0x30 0x02  PUSHIW 0x0230
0x8281  0x1A 0x03       PUSHIB 0x03
0x8283  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8285  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8287  0x44            PUSHI0
0x8288  0x05            EQ
0x8289  0x0B            BOOLOR
0x828A  0x27 0x00       DUP 0x00
0x828C  0x2F 0x34       JNZB 0x82C0 (+52)
0x828E  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8290  0x37 0x2F 0x02  PUSHIW 0x022F
0x8293  0x1A 0x04       PUSHIB 0x04
0x8295  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8297  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8299  0x44            PUSHI0
0x829A  0x05            EQ
0x829B  0x0B            BOOLOR
0x829C  0x27 0x00       DUP 0x00
0x829E  0x2F 0x22       JNZB 0x82C0 (+34)
0x82A0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x82A2  0x37 0xF7 0x05  PUSHIW 0x05F7
0x82A5  0x1A 0x04       PUSHIB 0x04
0x82A7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82A9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82AB  0x44            PUSHI0
0x82AC  0x05            EQ
0x82AD  0x0B            BOOLOR
0x82AE  0x27 0x00       DUP 0x00
0x82B0  0x2F 0x10       JNZB 0x82C0 (+16)
0x82B2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x82B4  0x37 0x08 0x06  PUSHIW 0x0608
0x82B7  0x1A 0x05       PUSHIB 0x05
0x82B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82BB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82BD  0x44            PUSHI0
0x82BE  0x05            EQ
0x82BF  0x0B            BOOLOR
0x82C0  0x4C            POPLOCALB00

                        // nop = (desiredType == "uint");                       types.hs:119

0x82C1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x82C3  0x37 0x2F 0x02  PUSHIW 0x022F
0x82C6  0x1A 0x04       PUSHIB 0x04
0x82C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82CA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82CC  0x44            PUSHI0
0x82CD  0x05            EQ
0x82CE  0x4D            POPLOCALB02

                        // }                                                    types.hs:120

0x82CF  0x33 0x32 0x01  JW 0x8401 (+306)

                        // else if (actualType == "+int")                       types.hs:121

0x82D2  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x82D4  0x37 0x24 0x10  PUSHIW 0x1024
0x82D7  0x1A 0x04       PUSHIB 0x04
0x82D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82DB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82DD  0x2F 0x57       JNZB 0x8334 (+87)

                        // ok = ((desiredType == "int")                         types.hs:123

0x82DF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x82E1  0x37 0x30 0x02  PUSHIW 0x0230
0x82E4  0x1A 0x03       PUSHIB 0x03
0x82E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82E8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82EA  0x44            PUSHI0
0x82EB  0x05            EQ
0x82EC  0x27 0x00       DUP 0x00
0x82EE  0x2F 0x34       JNZB 0x8322 (+52)
0x82F0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x82F2  0x37 0x2F 0x02  PUSHIW 0x022F
0x82F5  0x1A 0x04       PUSHIB 0x04
0x82F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x82F9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x82FB  0x44            PUSHI0
0x82FC  0x05            EQ
0x82FD  0x0B            BOOLOR
0x82FE  0x27 0x00       DUP 0x00
0x8300  0x2F 0x22       JNZB 0x8322 (+34)
0x8302  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8304  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8307  0x1A 0x04       PUSHIB 0x04
0x8309  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x830B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x830D  0x44            PUSHI0
0x830E  0x05            EQ
0x830F  0x0B            BOOLOR
0x8310  0x27 0x00       DUP 0x00
0x8312  0x2F 0x10       JNZB 0x8322 (+16)
0x8314  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8316  0x37 0x08 0x06  PUSHIW 0x0608
0x8319  0x1A 0x05       PUSHIB 0x05
0x831B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x831D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x831F  0x44            PUSHI0
0x8320  0x05            EQ
0x8321  0x0B            BOOLOR
0x8322  0x4C            POPLOCALB00

                        // nop = (desiredType == "uint");                       types.hs:128

0x8323  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8325  0x37 0x2F 0x02  PUSHIW 0x022F
0x8328  0x1A 0x04       PUSHIB 0x04
0x832A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x832C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x832E  0x44            PUSHI0
0x832F  0x05            EQ
0x8330  0x4D            POPLOCALB02

                        // }                                                    types.hs:129

0x8331  0x33 0xD0 0x00  JW 0x8401 (+208)

                        // else if (actualType == "int")                        types.hs:130

0x8334  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8336  0x37 0x30 0x02  PUSHIW 0x0230
0x8339  0x1A 0x03       PUSHIB 0x03
0x833B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x833D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x833F  0x2F 0x25       JNZB 0x8364 (+37)

                        // ok = ((desiredType == "long")                        types.hs:132

0x8341  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8343  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8346  0x1A 0x04       PUSHIB 0x04
0x8348  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x834A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x834C  0x44            PUSHI0
0x834D  0x05            EQ
0x834E  0x27 0x00       DUP 0x00
0x8350  0x2F 0x10       JNZB 0x8360 (+16)
0x8352  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8354  0x37 0x08 0x06  PUSHIW 0x0608
0x8357  0x1A 0x05       PUSHIB 0x05
0x8359  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x835B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x835D  0x44            PUSHI0
0x835E  0x05            EQ
0x835F  0x0B            BOOLOR
0x8360  0x4C            POPLOCALB00

                        // }                                                    types.hs:135

0x8361  0x33 0xA0 0x00  JW 0x8401 (+160)

                        // else if (actualType == "uint")                       types.hs:136

0x8364  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8366  0x37 0x2F 0x02  PUSHIW 0x022F
0x8369  0x1A 0x04       PUSHIB 0x04
0x836B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x836D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x836F  0x2F 0x24       JNZB 0x8393 (+36)

                        // ok = ((desiredType == "long")                        types.hs:138

0x8371  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8373  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8376  0x1A 0x04       PUSHIB 0x04
0x8378  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x837A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x837C  0x44            PUSHI0
0x837D  0x05            EQ
0x837E  0x27 0x00       DUP 0x00
0x8380  0x2F 0x10       JNZB 0x8390 (+16)
0x8382  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8384  0x37 0x08 0x06  PUSHIW 0x0608
0x8387  0x1A 0x05       PUSHIB 0x05
0x8389  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x838B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x838D  0x44            PUSHI0
0x838E  0x05            EQ
0x838F  0x0B            BOOLOR
0x8390  0x4C            POPLOCALB00

                        // }                                                    types.hs:141

0x8391  0x30 0x70       JB 0x8401 (+112)

                        // else if (actualType == "-int")                       types.hs:142

0x8393  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8395  0x37 0x29 0x10  PUSHIW 0x1029
0x8398  0x1A 0x04       PUSHIB 0x04
0x839A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x839C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x839E  0x2F 0x36       JNZB 0x83D4 (+54)

                        // ok = ((desiredType == "int")                         types.hs:144

0x83A0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x83A2  0x37 0x30 0x02  PUSHIW 0x0230
0x83A5  0x1A 0x03       PUSHIB 0x03
0x83A7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83A9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83AB  0x44            PUSHI0
0x83AC  0x05            EQ
0x83AD  0x27 0x00       DUP 0x00
0x83AF  0x2F 0x22       JNZB 0x83D1 (+34)
0x83B1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x83B3  0x37 0xF7 0x05  PUSHIW 0x05F7
0x83B6  0x1A 0x04       PUSHIB 0x04
0x83B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83BA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83BC  0x44            PUSHI0
0x83BD  0x05            EQ
0x83BE  0x0B            BOOLOR
0x83BF  0x27 0x00       DUP 0x00
0x83C1  0x2F 0x10       JNZB 0x83D1 (+16)
0x83C3  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x83C5  0x37 0x08 0x06  PUSHIW 0x0608
0x83C8  0x1A 0x05       PUSHIB 0x05
0x83CA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83CC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83CE  0x44            PUSHI0
0x83CF  0x05            EQ
0x83D0  0x0B            BOOLOR
0x83D1  0x4C            POPLOCALB00

                        // }                                                    types.hs:148

0x83D2  0x30 0x2F       JB 0x8401 (+47)

                        // else if (actualType == "long")                       types.hs:149

0x83D4  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x83D6  0x37 0xF7 0x05  PUSHIW 0x05F7
0x83D9  0x1A 0x04       PUSHIB 0x04
0x83DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83DD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83DF  0x2F 0x22       JNZB 0x8401 (+34)

                        // ok = ((desiredType == "float")                       types.hs:151

0x83E1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x83E3  0x37 0x08 0x06  PUSHIW 0x0608
0x83E6  0x1A 0x05       PUSHIB 0x05
0x83E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83EA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83EC  0x44            PUSHI0
0x83ED  0x05            EQ
0x83EE  0x27 0x00       DUP 0x00
0x83F0  0x2F 0x10       JNZB 0x8400 (+16)
0x83F2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x83F4  0x37 0x2F 0x02  PUSHIW 0x022F
0x83F7  0x1A 0x04       PUSHIB 0x04
0x83F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x83FB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x83FD  0x44            PUSHI0
0x83FE  0x05            EQ
0x83FF  0x0B            BOOLOR
0x8400  0x4C            POPLOCALB00

                        // if (!nop && ok && ((desiredType == "long") || (desiredType == "float") || (desiredType == "uint"))) // cast to new reference types?

0x8401  0x4F            PUSHLOCALB02
0x8402  0x41            BOOLNOT
0x8403  0x27 0x00       DUP 0x00
0x8405  0x2E 0x3A       JZB 0x843F (+58)
0x8407  0x4E            PUSHLOCALB00
0x8408  0x0C            BOOLAND
0x8409  0x27 0x00       DUP 0x00
0x840B  0x2E 0x34       JZB 0x843F (+52)
0x840D  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x840F  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8412  0x1A 0x04       PUSHIB 0x04
0x8414  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8416  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8418  0x44            PUSHI0
0x8419  0x05            EQ
0x841A  0x27 0x00       DUP 0x00
0x841C  0x2F 0x22       JNZB 0x843E (+34)
0x841E  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8420  0x37 0x08 0x06  PUSHIW 0x0608
0x8423  0x1A 0x05       PUSHIB 0x05
0x8425  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8427  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8429  0x44            PUSHI0
0x842A  0x05            EQ
0x842B  0x0B            BOOLOR
0x842C  0x27 0x00       DUP 0x00
0x842E  0x2F 0x10       JNZB 0x843E (+16)
0x8430  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8432  0x37 0x2F 0x02  PUSHIW 0x022F
0x8435  0x1A 0x04       PUSHIB 0x04
0x8437  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8439  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x843B  0x44            PUSHI0
0x843C  0x05            EQ
0x843D  0x0B            BOOLOR
0x843E  0x0C            BOOLAND
0x843F  0x31 0xE1 0x02  JZW 0x8720 (+737)

                        // if (codeGenNext)                                     types.hs:159

0x8442  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8444  0x2E 0x07       JZB 0x844B (+7)

                        // CodeStream.AddInstruction(Instruction.SWAP); // [next] <-> [top]

0x8446  0x1A 0x43       PUSHIB 0x43
0x8448  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // switch (actualType)                                  types.hs:163

0x844B  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)

                        // case "long":                                         types.hs:165

0x844D  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8450  0x1A 0x04       PUSHIB 0x04
0x8452  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8454  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8456  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8458  0x2F 0x5A       JNZB 0x84B2 (+90)

                        // if (desiredType == "float")                          types.hs:167

0x845A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x845C  0x37 0x08 0x06  PUSHIW 0x0608
0x845F  0x1A 0x05       PUSHIB 0x05
0x8461  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8463  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8465  0x2F 0x15       JNZB 0x847A (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "ToFloat");

0x8467  0x37 0x01 0x06  PUSHIW 0x0601
0x846A  0x1A 0x04       PUSHIB 0x04
0x846C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x846E  0x37 0x0D 0x06  PUSHIW 0x060D
0x8471  0x1A 0x07       PUSHIB 0x07
0x8473  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8475  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:170

0x8478  0x30 0x37       JB 0x84AF (+55)

                        // else if (desiredType == "uint")                      types.hs:171

0x847A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x847C  0x37 0x2F 0x02  PUSHIW 0x022F
0x847F  0x1A 0x04       PUSHIB 0x04
0x8481  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8483  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8485  0x2F 0x15       JNZB 0x849A (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "ToUInt");

0x8487  0x37 0x01 0x06  PUSHIW 0x0601
0x848A  0x1A 0x04       PUSHIB 0x04
0x848C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x848E  0x37 0xF4 0x07  PUSHIW 0x07F4
0x8491  0x1A 0x06       PUSHIB 0x06
0x8493  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8495  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:174

0x8498  0x30 0x17       JB 0x84AF (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x849A  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x849C  0x37 0x44 0x10  PUSHIW 0x1044
0x849F  0x1A 0x04       PUSHIB 0x04
0x84A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x84A5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x84A7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x84A9  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:178

0x84AB  0x1A 0x0A       PUSHIB 0x0A
0x84AD  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:180

0x84AF  0x33 0x66 0x02  JW 0x8715 (+614)

                        // case "float":                                        types.hs:181

0x84B2  0x37 0x08 0x06  PUSHIW 0x0608
0x84B5  0x1A 0x05       PUSHIB 0x05
0x84B7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84B9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x84BB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x84BD  0x2F 0x3A       JNZB 0x84F7 (+58)

                        // if (desiredType == "long")                           types.hs:183

0x84BF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x84C1  0x37 0xF7 0x05  PUSHIW 0x05F7
0x84C4  0x1A 0x04       PUSHIB 0x04
0x84C6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84C8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x84CA  0x2F 0x15       JNZB 0x84DF (+21)

                        // CodeStream.AddInstructionSysCall0("Float", "ToLong");

0x84CC  0x37 0x0F 0x06  PUSHIW 0x060F
0x84CF  0x1A 0x05       PUSHIB 0x05
0x84D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84D3  0x37 0xFF 0x05  PUSHIW 0x05FF
0x84D6  0x1A 0x06       PUSHIB 0x06
0x84D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84DA  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:186

0x84DD  0x30 0x17       JB 0x84F4 (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x84DF  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x84E1  0x37 0x44 0x10  PUSHIW 0x1044
0x84E4  0x1A 0x04       PUSHIB 0x04
0x84E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84E8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x84EA  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x84EC  0x24 0x03       SYSCALL0 0x03  // String.Append
0x84EE  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:190

0x84F0  0x1A 0x0A       PUSHIB 0x0A
0x84F2  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:192

0x84F4  0x33 0x21 0x02  JW 0x8715 (+545)

                        // case "byte":                                         types.hs:193

0x84F7  0x37 0x51 0x05  PUSHIW 0x0551
0x84FA  0x1A 0x04       PUSHIB 0x04
0x84FC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x84FE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8500  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8502  0x2F 0x5A       JNZB 0x855C (+90)

                        // if (desiredType == "float")                          types.hs:195

0x8504  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8506  0x37 0x08 0x06  PUSHIW 0x0608
0x8509  0x1A 0x05       PUSHIB 0x05
0x850B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x850D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x850F  0x2F 0x15       JNZB 0x8524 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToFloat");

0x8511  0x37 0xFC 0x05  PUSHIW 0x05FC
0x8514  0x1A 0x03       PUSHIB 0x03
0x8516  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8518  0x37 0x0D 0x06  PUSHIW 0x060D
0x851B  0x1A 0x07       PUSHIB 0x07
0x851D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x851F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:198

0x8522  0x30 0x37       JB 0x8559 (+55)

                        // else if (desiredType == "long")                      types.hs:199

0x8524  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8526  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8529  0x1A 0x04       PUSHIB 0x04
0x852B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x852D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x852F  0x2F 0x15       JNZB 0x8544 (+21)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x8531  0x37 0xFB 0x05  PUSHIW 0x05FB
0x8534  0x1A 0x04       PUSHIB 0x04
0x8536  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8538  0x37 0xFF 0x05  PUSHIW 0x05FF
0x853B  0x1A 0x06       PUSHIB 0x06
0x853D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x853F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:202

0x8542  0x30 0x17       JB 0x8559 (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x8544  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8546  0x37 0x44 0x10  PUSHIW 0x1044
0x8549  0x1A 0x04       PUSHIB 0x04
0x854B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x854D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x854F  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8551  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8553  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:206

0x8555  0x1A 0x0A       PUSHIB 0x0A
0x8557  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:208

0x8559  0x33 0xBC 0x01  JW 0x8715 (+444)

                        // case "uint":                                         types.hs:209

0x855C  0x37 0x2F 0x02  PUSHIW 0x022F
0x855F  0x1A 0x04       PUSHIB 0x04
0x8561  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8563  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8565  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8567  0x2F 0x6B       JNZB 0x85D2 (+107)

                        // if (desiredType == "float")                          types.hs:211

0x8569  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x856B  0x37 0x08 0x06  PUSHIW 0x0608
0x856E  0x1A 0x05       PUSHIB 0x05
0x8570  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8572  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8574  0x2F 0x26       JNZB 0x859A (+38)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x8576  0x37 0xFB 0x05  PUSHIW 0x05FB
0x8579  0x1A 0x04       PUSHIB 0x04
0x857B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x857D  0x37 0xFF 0x05  PUSHIW 0x05FF
0x8580  0x1A 0x06       PUSHIB 0x06
0x8582  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8584  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Long", "ToFloat");

0x8587  0x37 0x01 0x06  PUSHIW 0x0601
0x858A  0x1A 0x04       PUSHIB 0x04
0x858C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x858E  0x37 0x0D 0x06  PUSHIW 0x060D
0x8591  0x1A 0x07       PUSHIB 0x07
0x8593  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8595  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:215

0x8598  0x30 0x37       JB 0x85CF (+55)

                        // else if (desiredType == "long")                      types.hs:216

0x859A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x859C  0x37 0xF7 0x05  PUSHIW 0x05F7
0x859F  0x1A 0x04       PUSHIB 0x04
0x85A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85A3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x85A5  0x2F 0x15       JNZB 0x85BA (+21)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x85A7  0x37 0xFB 0x05  PUSHIW 0x05FB
0x85AA  0x1A 0x04       PUSHIB 0x04
0x85AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85AE  0x37 0xFF 0x05  PUSHIW 0x05FF
0x85B1  0x1A 0x06       PUSHIB 0x06
0x85B3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85B5  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:219

0x85B8  0x30 0x17       JB 0x85CF (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x85BA  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x85BC  0x37 0x44 0x10  PUSHIW 0x1044
0x85BF  0x1A 0x04       PUSHIB 0x04
0x85C1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85C3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x85C5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x85C7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x85C9  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:223

0x85CB  0x1A 0x0A       PUSHIB 0x0A
0x85CD  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:225

0x85CF  0x33 0x46 0x01  JW 0x8715 (+326)

                        // case "int":                                          types.hs:226

0x85D2  0x37 0x30 0x02  PUSHIW 0x0230
0x85D5  0x1A 0x03       PUSHIB 0x03
0x85D7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85D9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x85DB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x85DD  0x2F 0x5A       JNZB 0x8637 (+90)

                        // if (desiredType == "float")                          types.hs:228

0x85DF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x85E1  0x37 0x08 0x06  PUSHIW 0x0608
0x85E4  0x1A 0x05       PUSHIB 0x05
0x85E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85E8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x85EA  0x2F 0x15       JNZB 0x85FF (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToFloat");

0x85EC  0x37 0xFC 0x05  PUSHIW 0x05FC
0x85EF  0x1A 0x03       PUSHIB 0x03
0x85F1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85F3  0x37 0x0D 0x06  PUSHIW 0x060D
0x85F6  0x1A 0x07       PUSHIB 0x07
0x85F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x85FA  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:231

0x85FD  0x30 0x37       JB 0x8634 (+55)

                        // else if (desiredType == "long")                      types.hs:232

0x85FF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8601  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8604  0x1A 0x04       PUSHIB 0x04
0x8606  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8608  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x860A  0x2F 0x15       JNZB 0x861F (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToLong");

0x860C  0x37 0xFC 0x05  PUSHIW 0x05FC
0x860F  0x1A 0x03       PUSHIB 0x03
0x8611  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8613  0x37 0xFF 0x05  PUSHIW 0x05FF
0x8616  0x1A 0x06       PUSHIB 0x06
0x8618  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x861A  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:235

0x861D  0x30 0x17       JB 0x8634 (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x861F  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8621  0x37 0x44 0x10  PUSHIW 0x1044
0x8624  0x1A 0x04       PUSHIB 0x04
0x8626  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8628  0x24 0x03       SYSCALL0 0x03  // String.Append
0x862A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x862C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x862E  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:239

0x8630  0x1A 0x0A       PUSHIB 0x0A
0x8632  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:241

0x8634  0x33 0xE1 0x00  JW 0x8715 (+225)

                        // case "+int":                                         types.hs:242

0x8637  0x37 0x24 0x10  PUSHIW 0x1024
0x863A  0x1A 0x04       PUSHIB 0x04
0x863C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x863E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8640  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8642  0x2F 0x5A       JNZB 0x869C (+90)

                        // if (desiredType == "float")                          types.hs:244

0x8644  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8646  0x37 0x08 0x06  PUSHIW 0x0608
0x8649  0x1A 0x05       PUSHIB 0x05
0x864B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x864D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x864F  0x2F 0x15       JNZB 0x8664 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToFloat");

0x8651  0x37 0xFC 0x05  PUSHIW 0x05FC
0x8654  0x1A 0x03       PUSHIB 0x03
0x8656  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8658  0x37 0x0D 0x06  PUSHIW 0x060D
0x865B  0x1A 0x07       PUSHIB 0x07
0x865D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x865F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:247

0x8662  0x30 0x37       JB 0x8699 (+55)

                        // else if (desiredType == "long")                      types.hs:248

0x8664  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8666  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8669  0x1A 0x04       PUSHIB 0x04
0x866B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x866D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x866F  0x2F 0x15       JNZB 0x8684 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToLong");

0x8671  0x37 0xFC 0x05  PUSHIW 0x05FC
0x8674  0x1A 0x03       PUSHIB 0x03
0x8676  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8678  0x37 0xFF 0x05  PUSHIW 0x05FF
0x867B  0x1A 0x06       PUSHIB 0x06
0x867D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x867F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:251

0x8682  0x30 0x17       JB 0x8699 (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x8684  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8686  0x37 0x44 0x10  PUSHIW 0x1044
0x8689  0x1A 0x04       PUSHIB 0x04
0x868B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x868D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x868F  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8691  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8693  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:255

0x8695  0x1A 0x0A       PUSHIB 0x0A
0x8697  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:257

0x8699  0x33 0x7C 0x00  JW 0x8715 (+124)

                        // case "-int":                                         types.hs:258

0x869C  0x37 0x29 0x10  PUSHIW 0x1029
0x869F  0x1A 0x04       PUSHIB 0x04
0x86A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86A3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x86A5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x86A7  0x2F 0x59       JNZB 0x8700 (+89)

                        // if (desiredType == "float")                          types.hs:260

0x86A9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x86AB  0x37 0x08 0x06  PUSHIW 0x0608
0x86AE  0x1A 0x05       PUSHIB 0x05
0x86B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86B2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x86B4  0x2F 0x15       JNZB 0x86C9 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToFloat");

0x86B6  0x37 0xFC 0x05  PUSHIW 0x05FC
0x86B9  0x1A 0x03       PUSHIB 0x03
0x86BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86BD  0x37 0x0D 0x06  PUSHIW 0x060D
0x86C0  0x1A 0x07       PUSHIB 0x07
0x86C2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86C4  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:263

0x86C7  0x30 0x4E       JB 0x8715 (+78)

                        // else if (desiredType == "long")                      types.hs:264

0x86C9  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x86CB  0x37 0xF7 0x05  PUSHIW 0x05F7
0x86CE  0x1A 0x04       PUSHIB 0x04
0x86D0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86D2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x86D4  0x2F 0x15       JNZB 0x86E9 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToLong");

0x86D6  0x37 0xFC 0x05  PUSHIW 0x05FC
0x86D9  0x1A 0x03       PUSHIB 0x03
0x86DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86DD  0x37 0xFF 0x05  PUSHIW 0x05FF
0x86E0  0x1A 0x06       PUSHIB 0x06
0x86E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86E4  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    types.hs:267

0x86E7  0x30 0x2E       JB 0x8715 (+46)

                        // PrintLn(actualType + " -> " + desiredType);

0x86E9  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x86EB  0x37 0x44 0x10  PUSHIW 0x1044
0x86EE  0x1A 0x04       PUSHIB 0x04
0x86F0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x86F2  0x24 0x03       SYSCALL0 0x03  // String.Append
0x86F4  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x86F6  0x24 0x03       SYSCALL0 0x03  // String.Append
0x86F8  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:271

0x86FA  0x1A 0x0A       PUSHIB 0x0A
0x86FC  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:273

0x86FE  0x30 0x17       JB 0x8715 (+23)

                        // PrintLn(actualType + " -> " + desiredType);

0x8700  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8702  0x37 0x44 0x10  PUSHIW 0x1044
0x8705  0x1A 0x04       PUSHIB 0x04
0x8707  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8709  0x24 0x03       SYSCALL0 0x03  // String.Append
0x870B  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x870D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x870F  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Die(0x0A);                                           types.hs:278

0x8711  0x1A 0x0A       PUSHIB 0x0A
0x8713  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    types.hs:280

0x8715  0x28 0x02       DECSP 0x02

                        // if (codeGenNext)                                     types.hs:281

0x8717  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8719  0x2E 0x07       JZB 0x8720 (+7)

                        // CodeStream.AddInstruction(Instruction.SWAP); // [next] <-> [top]

0x871B  0x1A 0x43       PUSHIB 0x43
0x871D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // if (!ok && (actualType == "enum"))                   types.hs:286

0x8720  0x4E            PUSHLOCALB00
0x8721  0x41            BOOLNOT
0x8722  0x27 0x00       DUP 0x00
0x8724  0x2E 0x10       JZB 0x8734 (+16)
0x8726  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8728  0x37 0x09 0x0C  PUSHIW 0x0C09
0x872B  0x1A 0x04       PUSHIB 0x04
0x872D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x872F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8731  0x44            PUSHI0
0x8732  0x05            EQ
0x8733  0x0C            BOOLAND
0x8734  0x2E 0x07       JZB 0x873B (+7)

                        // ok = Types.IsEnum(desiredType);                      types.hs:288

0x8736  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8738  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x873A  0x4C            POPLOCALB00

                        // if (!ok && (actualType == "flags"))                  types.hs:290

0x873B  0x4E            PUSHLOCALB00
0x873C  0x41            BOOLNOT
0x873D  0x27 0x00       DUP 0x00
0x873F  0x2E 0x10       JZB 0x874F (+16)
0x8741  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8743  0x37 0x15 0x0C  PUSHIW 0x0C15
0x8746  0x1A 0x05       PUSHIB 0x05
0x8748  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x874A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x874C  0x44            PUSHI0
0x874D  0x05            EQ
0x874E  0x0C            BOOLAND
0x874F  0x2E 0x07       JZB 0x8756 (+7)

                        // ok = Types.IsFlags(desiredType);                     types.hs:292

0x8751  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8753  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x8755  0x4C            POPLOCALB00

                        // if (!ok && (desiredType == "enum"))                  types.hs:294

0x8756  0x4E            PUSHLOCALB00
0x8757  0x41            BOOLNOT
0x8758  0x27 0x00       DUP 0x00
0x875A  0x2E 0x10       JZB 0x876A (+16)
0x875C  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x875E  0x37 0x09 0x0C  PUSHIW 0x0C09
0x8761  0x1A 0x04       PUSHIB 0x04
0x8763  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8765  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8767  0x44            PUSHI0
0x8768  0x05            EQ
0x8769  0x0C            BOOLAND
0x876A  0x2E 0x07       JZB 0x8771 (+7)

                        // ok = Types.IsEnum(actualType);                       types.hs:296

0x876C  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x876E  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x8770  0x4C            POPLOCALB00

                        // if (!ok && (desiredType == "flags"))                 types.hs:298

0x8771  0x4E            PUSHLOCALB00
0x8772  0x41            BOOLNOT
0x8773  0x27 0x00       DUP 0x00
0x8775  0x2E 0x10       JZB 0x8785 (+16)
0x8777  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0x8779  0x37 0x15 0x0C  PUSHIW 0x0C15
0x877C  0x1A 0x05       PUSHIB 0x05
0x877E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8780  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8782  0x44            PUSHI0
0x8783  0x05            EQ
0x8784  0x0C            BOOLAND
0x8785  0x2E 0x07       JZB 0x878C (+7)

                        // ok = Types.IsFlags(actualType);                      types.hs:300

0x8787  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0x8789  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x878B  0x4C            POPLOCALB00

                        // return ok;                                           types.hs:302

0x878C  0x4E            PUSHLOCALB00
0x878D  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/types.hs:825
// ####  Types.IsDelegate(..)  ####                                             0x00ED

0x878F  0x49            ENTER

                        // return Symbols.IsDelegateType(identifier, currentNamespace);

0x8790  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8792  0x20 0x98       PUSHGLOBALB 0x98
0x8794  0x2C 0xAA       CALLB 0xAA     // Symbols.IsDelegateType
0x8796  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:514
// ####  Types.tryParseTypeString(..)  ####                                     0x00DE


                        // bool success = false;                                types.hs:515

0x8798  0x5F 0x02       ENTERB 0x02

                        // <string,string> typeToken = Parser.CurrentToken; // Keyword, Identifier (named type) or '<'

0x879A  0x1A 0x0F       PUSHIB 0x0F
0x879C  0x1A 0x0F       PUSHIB 0x0F
0x879E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x87A0  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x87A2  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (Parser.Check(HopperToken.Keyword, "|bool|byte|char|delegate|uint|int|long|float|string|type|variant|file|directory|"))

0x87A4  0x1A 0x05       PUSHIB 0x05
0x87A6  0x37 0x48 0x10  PUSHIW 0x1048
0x87A9  0x1A 0x50       PUSHIB 0x50
0x87AB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x87AD  0x2C 0x84       CALLB 0x84     // Parser.Check
0x87AF  0x2E 0x06       JZB 0x87B5 (+6)

                        // isSimple = true;                                     types.hs:522

0x87B1  0x45            PUSHI1
0x87B2  0x4D            POPLOCALB02

                        // }                                                    types.hs:523

0x87B3  0x30 0x43       JB 0x87F6 (+67)

                        // else if (Parser.Check(HopperToken.Identifier) || Parser.Check(HopperToken.DottedIdentifier))

0x87B5  0x1A 0x03       PUSHIB 0x03
0x87B7  0x2C 0x83       CALLB 0x83     // Parser.Check
0x87B9  0x27 0x00       DUP 0x00
0x87BB  0x2F 0x07       JNZB 0x87C2 (+7)
0x87BD  0x1A 0x02       PUSHIB 0x02
0x87BF  0x2C 0x83       CALLB 0x83     // Parser.Check
0x87C1  0x0B            BOOLOR
0x87C2  0x2E 0x34       JZB 0x87F6 (+52)

                        // isSimple = Types.IsEnum(typeToken["lexeme"])

0x87C4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x87C6  0x37 0x06 0x02  PUSHIW 0x0206
0x87C9  0x1A 0x06       PUSHIB 0x06
0x87CB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x87CD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x87CF  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x87D1  0x27 0x00       DUP 0x00
0x87D3  0x2F 0x22       JNZB 0x87F5 (+34)
0x87D5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x87D7  0x37 0x06 0x02  PUSHIW 0x0206
0x87DA  0x1A 0x06       PUSHIB 0x06
0x87DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x87DE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x87E0  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x87E2  0x0B            BOOLOR
0x87E3  0x27 0x00       DUP 0x00
0x87E5  0x2F 0x10       JNZB 0x87F5 (+16)
0x87E7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x87E9  0x37 0x06 0x02  PUSHIW 0x0206
0x87EC  0x1A 0x06       PUSHIB 0x06
0x87EE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x87F0  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x87F2  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x87F4  0x0B            BOOLOR
0x87F5  0x4D            POPLOCALB02

                        // if (isSimple)                                        types.hs:531

0x87F6  0x4F            PUSHLOCALB02
0x87F7  0x31 0x82 0x00  JZW 0x8879 (+130)

                        // success = true;                                      types.hs:533

0x87FA  0x45            PUSHI1
0x87FB  0x4C            POPLOCALB00

                        // typeString = typeString + typeToken["lexeme"];

0x87FC  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x87FE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8800  0x37 0x06 0x02  PUSHIW 0x0206
0x8803  0x1A 0x06       PUSHIB 0x06
0x8805  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8807  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x8809  0x24 0x03       SYSCALL0 0x03  // String.Append
0x880B  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // Parser.Advance();                                    types.hs:535

0x880D  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (Parser.Check(HopperToken.LBracket))              types.hs:536

0x880F  0x1A 0x14       PUSHIB 0x14
0x8811  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8813  0x2E 0x64       JZB 0x8877 (+100)

                        // if (!IsValueType(typeString))                        types.hs:539

0x8815  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x8817  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x8819  0x2F 0x12       JNZB 0x882B (+18)

                        // Parser.ErrorAtCurrent("arrays can only contain value types");

0x881B  0x37 0x98 0x10  PUSHIW 0x1098
0x881E  0x1A 0x23       PUSHIB 0x23
0x8820  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8822  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // success = false;                                     types.hs:542

0x8824  0x44            PUSHI0
0x8825  0x4C            POPLOCALB00

                        // break;                                               types.hs:543

0x8826  0x28 0x04       DECSP 0x04
0x8828  0x33 0xAD 0x00  JW 0x88D5 (+173)

                        // Parser.Advance(); // [                               types.hs:545

0x882B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeString = typeString + "[";                       types.hs:546

0x882D  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x882F  0x1A 0x5B       PUSHIB 0x5B
0x8831  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8833  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8835  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // string size = ParseConstantExpression("uint");

0x8837  0x24 0x02       SYSCALL0 0x02  // String.New
0x8839  0x37 0x2F 0x02  PUSHIW 0x022F
0x883C  0x1A 0x04       PUSHIB 0x04
0x883E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8840  0x34 0x0C 0x01  CALLW 0x010C   // Constant.ParseConstantExpression
0x8843  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (Parser.HadError)                                 types.hs:548

0x8845  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8847  0x2E 0x09       JZB 0x8850 (+9)

                        // success = false;                                     types.hs:550

0x8849  0x44            PUSHI0
0x884A  0x4C            POPLOCALB00

                        // break;                                               types.hs:551

0x884B  0x28 0x06       DECSP 0x06
0x884D  0x33 0x88 0x00  JW 0x88D5 (+136)

                        // typeString = typeString + size;                      types.hs:553

0x8850  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x8852  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8854  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8856  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // if (!Parser.Check(HopperToken.RBracket))             types.hs:554

0x8858  0x1A 0x15       PUSHIB 0x15
0x885A  0x2C 0x83       CALLB 0x83     // Parser.Check
0x885C  0x2F 0x0D       JNZB 0x8869 (+13)

                        // Parser.ErrorAtCurrent(']');                          types.hs:556

0x885E  0x1A 0x5D       PUSHIB 0x5D
0x8860  0x2C 0x7D       CALLB 0x7D     // Parser.ErrorAtCurrent

                        // success = false;                                     types.hs:557

0x8862  0x44            PUSHI0
0x8863  0x4C            POPLOCALB00

                        // break;                                               types.hs:558

0x8864  0x28 0x06       DECSP 0x06
0x8866  0x33 0x6F 0x00  JW 0x88D5 (+111)

                        // Parser.Advance(); // ]                               types.hs:560

0x8869  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeString = typeString + "]";                       types.hs:561

0x886B  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x886D  0x1A 0x5D       PUSHIB 0x5D
0x886F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8871  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8873  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // }                                                    types.hs:562

0x8875  0x28 0x02       DECSP 0x02

                        // }                                                    types.hs:563

0x8877  0x30 0x5C       JB 0x88D3 (+92)

                        // else if (Parser.Check(HopperToken.LT)) // <

0x8879  0x1A 0x16       PUSHIB 0x16
0x887B  0x2C 0x83       CALLB 0x83     // Parser.Check
0x887D  0x2E 0x56       JZB 0x88D3 (+86)

                        // success = true;                                      types.hs:566

0x887F  0x45            PUSHI1
0x8880  0x4C            POPLOCALB00

                        // Parser.Advance(); // <                               types.hs:567

0x8881  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeString = typeString + "<";                       types.hs:569

0x8883  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x8885  0x1A 0x3C       PUSHIB 0x3C
0x8887  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8889  0x24 0x03       SYSCALL0 0x03  // String.Append
0x888B  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // if (!tryParseTypeString(ref typeString))             types.hs:571

0x888D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x888F  0x2C 0xDE       CALLB 0xDE     // Types.tryParseTypeString
0x8891  0x2F 0x08       JNZB 0x8899 (+8)

                        // success = false;                                     types.hs:573

0x8893  0x44            PUSHI0
0x8894  0x4C            POPLOCALB00

                        // break;                                               types.hs:574

0x8895  0x28 0x04       DECSP 0x04
0x8897  0x30 0x3E       JB 0x88D5 (+62)

                        // if (Parser.Check(HopperToken.Comma)) // ,            types.hs:576

0x8899  0x1A 0x0D       PUSHIB 0x0D
0x889B  0x2C 0x83       CALLB 0x83     // Parser.Check
0x889D  0x2E 0x1A       JZB 0x88B7 (+26)

                        // Parser.Advance(); // ,                               types.hs:579

0x889F  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeString = typeString + ",";                       types.hs:580

0x88A1  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x88A3  0x1A 0x2C       PUSHIB 0x2C
0x88A5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x88A7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x88A9  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // if (!tryParseTypeString(ref typeString))             types.hs:581

0x88AB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x88AD  0x2C 0xDE       CALLB 0xDE     // Types.tryParseTypeString
0x88AF  0x2F 0x08       JNZB 0x88B7 (+8)

                        // success = false;                                     types.hs:583

0x88B1  0x44            PUSHI0
0x88B2  0x4C            POPLOCALB00

                        // break;                                               types.hs:584

0x88B3  0x28 0x04       DECSP 0x04
0x88B5  0x30 0x20       JB 0x88D5 (+32)

                        // if (!Parser.Check(HopperToken.GT))                   types.hs:587

0x88B7  0x1A 0x17       PUSHIB 0x17
0x88B9  0x2C 0x83       CALLB 0x83     // Parser.Check
0x88BB  0x2F 0x0C       JNZB 0x88C7 (+12)

                        // Parser.ErrorAtCurrent('>');                          types.hs:589

0x88BD  0x1A 0x3E       PUSHIB 0x3E
0x88BF  0x2C 0x7D       CALLB 0x7D     // Parser.ErrorAtCurrent

                        // success = false;                                     types.hs:590

0x88C1  0x44            PUSHI0
0x88C2  0x4C            POPLOCALB00

                        // break;                                               types.hs:591

0x88C3  0x28 0x04       DECSP 0x04
0x88C5  0x30 0x10       JB 0x88D5 (+16)

                        // Parser.Advance(); // >                               types.hs:593

0x88C7  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeString = typeString + ">";                       types.hs:594

0x88C9  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0x88CB  0x1A 0x3E       PUSHIB 0x3E
0x88CD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x88CF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x88D1  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // break;                                               types.hs:596

0x88D3  0x28 0x04       DECSP 0x04

                        // return success;                                      types.hs:598

0x88D5  0x4E            PUSHLOCALB00
0x88D6  0x2B 0x04       RETRETB 0x04


// /source/system/uint.hs:4
// ####  UInt.ToString(..)  ####                                                0x016E


                        // uint digit;                                          uint.hs:5

0x88D8  0x5F 0x02       ENTERB 0x02

                        // string result;                                       uint.hs:7

0x88DA  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (this == 0)                                       uint.hs:8

0x88DC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x88DE  0x2F 0x08       JNZB 0x88E6 (+8)

                        // String.Build(ref result, '0');                       uint.hs:10

0x88E0  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x88E2  0x1A 0x30       PUSHIB 0x30
0x88E4  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // while (this != 0)                                    uint.hs:12

0x88E6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x88E8  0x2E 0x1F       JZB 0x8907 (+31)

                        // digit = this % 10;                                   uint.hs:14

0x88EA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x88EC  0x1A 0x0A       PUSHIB 0x0A
0x88EE  0x04            MOD
0x88EF  0x4C            POPLOCALB00

                        // digit = digit + 48;                                  uint.hs:15

0x88F0  0x4E            PUSHLOCALB00
0x88F1  0x1A 0x30       PUSHIB 0x30
0x88F3  0x00            ADD
0x88F4  0x4C            POPLOCALB00

                        // c = char(digit);                                     uint.hs:16

0x88F5  0x4E            PUSHLOCALB00
0x88F6  0x51 0x03       CAST 0x03
0x88F8  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:17

0x88F9  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0x88FB  0x4F            PUSHLOCALB02
0x88FC  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 10;                                    uint.hs:18

0x88FE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8900  0x1A 0x0A       PUSHIB 0x0A
0x8902  0x02            DIV
0x8903  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    uint.hs:19

0x8905  0x30 0xE1       JB 0x88E6 (-31)

                        // return result;                                       uint.hs:20

0x8907  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8909  0x2B 0x08       RETRETB 0x08


// /source/system/uint.hs:43
// ####  UInt.ToHexString(..)  ####                                             0x0171


                        // uint digit;                                          uint.hs:44

0x890B  0x5F 0x03       ENTERB 0x03

                        // string result;                                       uint.hs:47

0x890D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         uint.hs:48

0x890F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8911  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0x8913  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8915  0x44            PUSHI0
0x8916  0x07            GT
0x8917  0x2E 0x1F       JZB 0x8936 (+31)

                        // digit = this % 16;                                   uint.hs:50

0x8919  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x891B  0x1A 0x10       PUSHIB 0x10
0x891D  0x04            MOD
0x891E  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         uint.hs:51

0x891F  0x4E            PUSHLOCALB00
0x8920  0x51 0x03       CAST 0x03
0x8922  0x34 0x62 0x01  CALLW 0x0162   // Char.ToHex
0x8925  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    uint.hs:52

0x8926  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x8928  0x4F            PUSHLOCALB02
0x8929  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    uint.hs:53

0x892B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x892D  0x1A 0x10       PUSHIB 0x10
0x892F  0x02            DIV
0x8930  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    uint.hs:54

0x8932  0x23 0x04       DECLOCALB 0x04 (BP+4)
0x8934  0x30 0xDF       JB 0x8913 (-33)

                        // return result;                                       uint.hs:55

0x8936  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8938  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/expression.hs:23
// ####  Expression.InitializeVariable(..)  ####                                0x00F9

0x893A  0x49            ENTER

                        // string name;                                         expression.hs:24

0x893B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Types.IsValueType(variableType) || Types.IsDelegate(variableType))

0x893D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x893F  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0x8941  0x27 0x00       DUP 0x00
0x8943  0x2F 0x07       JNZB 0x894A (+7)
0x8945  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8947  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x8949  0x0B            BOOLOR
0x894A  0x2E 0x0A       JZB 0x8954 (+10)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x894C  0x1A 0x44       PUSHIB 0x44
0x894E  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:29

0x8951  0x33 0x08 0x01  JW 0x8A59 (+264)

                        // else if (Types.IsArray(variableType))                expression.hs:30

0x8954  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8956  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x8958  0x2E 0x25       JZB 0x897D (+37)

                        // uint sz = Types.GetArraySizeFromCollection(variableType);

0x895A  0x44            PUSHI0
0x895B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x895D  0x2C 0xE0       CALLB 0xE0     // Types.GetArraySizeFromCollection
0x895F  0x4D            POPLOCALB02

                        // CodeStream.AddInstructionPUSHI(sz);                  expression.hs:34

0x8960  0x4F            PUSHLOCALB02
0x8961  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // string valueType = Types.GetValueFromCollection(variableType);

0x8964  0x24 0x02       SYSCALL0 0x02  // String.New
0x8966  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8968  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x896A  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // PushTypeFromString(valueType);                       expression.hs:38

0x896C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x896E  0x2C 0xF8       CALLB 0xF8     // Expression.PushTypeFromString

                        // name = "Array";                                      expression.hs:40

0x8970  0x37 0x01 0x03  PUSHIW 0x0301
0x8973  0x1A 0x05       PUSHIB 0x05
0x8975  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8977  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:41

0x8978  0x28 0x04       DECSP 0x04
0x897A  0x33 0xDF 0x00  JW 0x8A59 (+223)

                        // else if (Types.IsList(variableType))                 expression.hs:42

0x897D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x897F  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x8981  0x2E 0x19       JZB 0x899A (+25)

                        // string valueType = Types.GetValueFromCollection(variableType);

0x8983  0x24 0x02       SYSCALL0 0x02  // String.New
0x8985  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8987  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x8989  0x5E            POPCOPYLOCALB02

                        // PushTypeFromString(valueType);                       expression.hs:46

0x898A  0x4F            PUSHLOCALB02
0x898B  0x2C 0xF8       CALLB 0xF8     // Expression.PushTypeFromString

                        // name = "List";                                       expression.hs:47

0x898D  0x37 0x17 0x03  PUSHIW 0x0317
0x8990  0x1A 0x04       PUSHIB 0x04
0x8992  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8994  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:48

0x8995  0x28 0x02       DECSP 0x02
0x8997  0x33 0xC2 0x00  JW 0x8A59 (+194)

                        // else if (Types.IsDictionary(variableType))           expression.hs:49

0x899A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x899C  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x899E  0x2E 0x25       JZB 0x89C3 (+37)

                        // string keyType = Types.GetKeyFromCollection(variableType);

0x89A0  0x24 0x02       SYSCALL0 0x02  // String.New
0x89A2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89A4  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0x89A6  0x5E            POPCOPYLOCALB02

                        // PushTypeFromString(keyType);                         expression.hs:53

0x89A7  0x4F            PUSHLOCALB02
0x89A8  0x2C 0xF8       CALLB 0xF8     // Expression.PushTypeFromString

                        // string valueType = Types.GetValueFromCollection(variableType);

0x89AA  0x24 0x02       SYSCALL0 0x02  // String.New
0x89AC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89AE  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0x89B0  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // PushTypeFromString(valueType);                       expression.hs:57

0x89B2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x89B4  0x2C 0xF8       CALLB 0xF8     // Expression.PushTypeFromString

                        // name = "Dictionary";                                 expression.hs:58

0x89B6  0x37 0x0D 0x03  PUSHIW 0x030D
0x89B9  0x1A 0x0A       PUSHIB 0x0A
0x89BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x89BD  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:59

0x89BE  0x28 0x04       DECSP 0x04
0x89C0  0x33 0x99 0x00  JW 0x8A59 (+153)

                        // else if (  (variableType == "file")                  expression.hs:60

0x89C3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89C5  0x37 0x96 0x0F  PUSHIW 0x0F96
0x89C8  0x1A 0x04       PUSHIB 0x04
0x89CA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x89CC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x89CE  0x44            PUSHI0
0x89CF  0x05            EQ
0x89D0  0x27 0x00       DUP 0x00
0x89D2  0x2F 0x46       JNZB 0x8A18 (+70)
0x89D4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89D6  0x37 0x9A 0x0F  PUSHIW 0x0F9A
0x89D9  0x1A 0x09       PUSHIB 0x09
0x89DB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x89DD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x89DF  0x44            PUSHI0
0x89E0  0x05            EQ
0x89E1  0x0B            BOOLOR
0x89E2  0x27 0x00       DUP 0x00
0x89E4  0x2F 0x34       JNZB 0x8A18 (+52)
0x89E6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89E8  0x37 0x08 0x06  PUSHIW 0x0608
0x89EB  0x1A 0x05       PUSHIB 0x05
0x89ED  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x89EF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x89F1  0x44            PUSHI0
0x89F2  0x05            EQ
0x89F3  0x0B            BOOLOR
0x89F4  0x27 0x00       DUP 0x00
0x89F6  0x2F 0x22       JNZB 0x8A18 (+34)
0x89F8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x89FA  0x37 0xF7 0x05  PUSHIW 0x05F7
0x89FD  0x1A 0x04       PUSHIB 0x04
0x89FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8A01  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8A03  0x44            PUSHI0
0x8A04  0x05            EQ
0x8A05  0x0B            BOOLOR
0x8A06  0x27 0x00       DUP 0x00
0x8A08  0x2F 0x10       JNZB 0x8A18 (+16)
0x8A0A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A0C  0x37 0x62 0x02  PUSHIW 0x0262
0x8A0F  0x1A 0x06       PUSHIB 0x06
0x8A11  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8A13  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8A15  0x44            PUSHI0
0x8A16  0x05            EQ
0x8A17  0x0B            BOOLOR
0x8A18  0x2E 0x1C       JZB 0x8A34 (+28)

                        // name = "" + variableType[0];                         expression.hs:67

0x8A1A  0x24 0x02       SYSCALL0 0x02  // String.New
0x8A1C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A1E  0x44            PUSHI0
0x8A1F  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x8A21  0x25 0x03       SYSCALL1 0x03  // String.Append
0x8A23  0x5D            POPCOPYLOCALB00

                        // name = name.ToUpper();                               expression.hs:68

0x8A24  0x4E            PUSHLOCALB00
0x8A25  0x34 0x99 0x01  CALLW 0x0199   // String.ToUpper
0x8A28  0x5D            POPCOPYLOCALB00

                        // name = name + variableType.Substring(1);             expression.hs:69

0x8A29  0x4E            PUSHLOCALB00
0x8A2A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A2C  0x45            PUSHI1
0x8A2D  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x8A2F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8A31  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:70

0x8A32  0x30 0x27       JB 0x8A59 (+39)

                        // else if (variableType == "variant")                  expression.hs:71

0x8A34  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A36  0x37 0xC3 0x02  PUSHIW 0x02C3
0x8A39  0x1A 0x07       PUSHIB 0x07
0x8A3B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8A3D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8A3F  0x2F 0x09       JNZB 0x8A48 (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHI0); // null placeholder

0x8A41  0x1A 0x44       PUSHIB 0x44
0x8A43  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:74

0x8A46  0x30 0x13       JB 0x8A59 (+19)

                        // PrintLn(variableType);                               expression.hs:77

0x8A48  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A4A  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // Parser.ErrorAtCurrent("not implemented");            expression.hs:78

0x8A4C  0x37 0x59 0x06  PUSHIW 0x0659
0x8A4F  0x1A 0x0F       PUSHIB 0x0F
0x8A51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8A53  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Die(0x0A);                                           expression.hs:79

0x8A55  0x1A 0x0A       PUSHIB 0x0A
0x8A57  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // if (name.Length > 0)                                 expression.hs:81

0x8A59  0x4E            PUSHLOCALB00
0x8A5A  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8A5C  0x44            PUSHI0
0x8A5D  0x07            GT
0x8A5E  0x2E 0x0D       JZB 0x8A6B (+13)

                        // CodeStream.AddInstructionSysCall0(name, "New");

0x8A60  0x4E            PUSHLOCALB00
0x8A61  0x37 0x45 0x06  PUSHIW 0x0645
0x8A64  0x1A 0x03       PUSHIB 0x03
0x8A66  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8A68  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:85

0x8A6B  0x2A 0x04       RETB 0x04


// /source/compiler/expression.hs:2380
// ####  Expression.CompileExpression(..)  ####                                 0x010A

0x8A6D  0x49            ENTER

                        // string actualType;                                   expression.hs:2381

0x8A6E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // actualType = compileEquality(expectedType);

0x8A70  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8A72  0x34 0x09 0x01  CALLW 0x0109   // Expression.compileEquality
0x8A75  0x5D            POPCOPYLOCALB00

                        // return actualType;                                   expression.hs:2385

0x8A76  0x4E            PUSHLOCALB00
0x8A77  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:357
// ####  Expression.CompileMethodCall(..)  ####                                 0x00FC

0x8A79  0x49            ENTER

                        // string returnType;                                   expression.hs:358

0x8A7A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // < <string > > arguments;                             expression.hs:359

0x8A7C  0x1A 0x19       PUSHIB 0x19
0x8A7E  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // bool isDelegateType = false;                         expression.hs:360

0x8A80  0x44            PUSHI0

                        // string qualifiedName;                                expression.hs:364

0x8A81  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType = Types.GetTypeString(methodName, false, ref qualifiedName);

0x8A83  0x24 0x02       SYSCALL0 0x02  // String.New
0x8A85  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8A87  0x44            PUSHI0
0x8A88  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x8A8A  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x8A8C  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (variableType.Length > 0)                         expression.hs:366

0x8A8E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8A90  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8A92  0x44            PUSHI0
0x8A93  0x07            GT
0x8A94  0x2E 0x0B       JZB 0x8A9F (+11)

                        // if (Types.IsDelegate(variableType))                  expression.hs:368

0x8A96  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8A98  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0x8A9A  0x2E 0x05       JZB 0x8A9F (+5)

                        // isDelegateType = true;                               expression.hs:370

0x8A9C  0x45            PUSHI1
0x8A9D  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (!methodName.Contains('.'))                       expression.hs:373

0x8A9F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8AA1  0x1A 0x2E       PUSHIB 0x2E
0x8AA3  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x8AA6  0x2F 0x14       JNZB 0x8ABA (+20)

                        // if (!isDelegateType)                                 expression.hs:375

0x8AA8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8AAA  0x2F 0x0A       JNZB 0x8AB4 (+10)

                        // methodName = Types.QualifyMethodName(methodName);

0x8AAC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8AAE  0x2C 0xE9       CALLB 0xE9     // Types.QualifyMethodName
0x8AB0  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    expression.hs:378

0x8AB2  0x30 0x08       JB 0x8ABA (+8)

                        // methodName = Types.QualifyDelegateName(methodName);

0x8AB4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8AB6  0x2C 0xEA       CALLB 0xEA     // Types.QualifyDelegateName
0x8AB8  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // if (methodName.EndsWith("_Get"))                     expression.hs:384

0x8ABA  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8ABC  0x37 0x1D 0x06  PUSHIW 0x061D
0x8ABF  0x1A 0x04       PUSHIB 0x04
0x8AC1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8AC3  0x25 0x07       SYSCALL1 0x07  // String.EndsWith
0x8AC5  0x2E 0x4C       JZB 0x8B11 (+76)

                        // if (thisVariable.Length > 0)                         expression.hs:386

0x8AC7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8AC9  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8ACB  0x44            PUSHI0
0x8ACC  0x07            GT
0x8ACD  0x2E 0x3F       JZB 0x8B0C (+63)

                        // string qualifiedThis;                                expression.hs:389

0x8ACF  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string thisType = Types.GetTypeString(thisVariable, true, ref qualifiedThis);

0x8AD1  0x24 0x02       SYSCALL0 0x02  // String.New
0x8AD3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8AD5  0x45            PUSHI1
0x8AD6  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x8AD8  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x8ADA  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPushVariable(qualifiedThis); // push this

0x8ADC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8ADE  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // uint fIndex;                                         expression.hs:393

0x8AE1  0x44            PUSHI0

                        // if (!Symbols.GetFunctionIndex(methodName, ref fIndex))

0x8AE2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8AE4  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x8AE6  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x8AE8  0x2F 0x10       JNZB 0x8AF8 (+16)

                        // Parser.ErrorAtCurrent("getter method not found");

0x8AEA  0x37 0xBB 0x10  PUSHIW 0x10BB
0x8AED  0x1A 0x17       PUSHIB 0x17
0x8AEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8AF1  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:397

0x8AF3  0x28 0x0A       DECSP 0x0A
0x8AF5  0x33 0x17 0x02  JW 0x8D0C (+535)

                        // <uint> overloads = GetFunctionOverloads(fIndex);

0x8AF8  0x1A 0x04       PUSHIB 0x04
0x8AFA  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x8AFC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8AFE  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0x8B00  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // arguments = Symbols.GetOverloadArguments(overloads[0]);

0x8B02  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x8B04  0x44            PUSHI0
0x8B05  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8B07  0x2C 0xB8       CALLB 0xB8     // Symbols.GetOverloadArguments
0x8B09  0x5E            POPCOPYLOCALB02

                        // }                                                    expression.hs:402

0x8B0A  0x28 0x08       DECSP 0x08

                        // break; // no other arguments                         expression.hs:403

0x8B0C  0x28 0x04       DECSP 0x04
0x8B0E  0x33 0xFE 0x01  JW 0x8D0C (+510)

                        // else if (methodName.EndsWith("_Set"))                expression.hs:405

0x8B11  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B13  0x37 0x55 0x05  PUSHIW 0x0555
0x8B16  0x1A 0x04       PUSHIB 0x04
0x8B18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8B1A  0x25 0x07       SYSCALL1 0x07  // String.EndsWith
0x8B1C  0x2E 0x30       JZB 0x8B4C (+48)

                        // uint fIndex;                                         expression.hs:408

0x8B1E  0x44            PUSHI0

                        // if (!Symbols.GetFunctionIndex(methodName, ref fIndex))

0x8B1F  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B21  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x8B23  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x8B25  0x2F 0x10       JNZB 0x8B35 (+16)

                        // Parser.ErrorAtCurrent("setter method not found");

0x8B27  0x37 0xD2 0x10  PUSHIW 0x10D2
0x8B2A  0x1A 0x17       PUSHIB 0x17
0x8B2C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8B2E  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:412

0x8B30  0x28 0x06       DECSP 0x06
0x8B32  0x33 0xDA 0x01  JW 0x8D0C (+474)

                        // <uint> overloads = GetFunctionOverloads(fIndex);

0x8B35  0x1A 0x04       PUSHIB 0x04
0x8B37  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x8B39  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8B3B  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0x8B3D  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // arguments = Symbols.GetOverloadArguments(overloads[0]);

0x8B3F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8B41  0x44            PUSHI0
0x8B42  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8B44  0x2C 0xB8       CALLB 0xB8     // Symbols.GetOverloadArguments
0x8B46  0x5E            POPCOPYLOCALB02

                        // break;                                               expression.hs:416

0x8B47  0x28 0x08       DECSP 0x08
0x8B49  0x33 0xC3 0x01  JW 0x8D0C (+451)

                        // uint fIndex;                                         expression.hs:418

0x8B4C  0x44            PUSHI0

                        // if (!isDelegateType && !GetFunctionIndex(methodName, ref fIndex) && (methodName.Length > 0))

0x8B4D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8B4F  0x41            BOOLNOT
0x8B50  0x27 0x00       DUP 0x00
0x8B52  0x2E 0x15       JZB 0x8B67 (+21)
0x8B54  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B56  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x8B58  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0x8B5A  0x41            BOOLNOT
0x8B5B  0x0C            BOOLAND
0x8B5C  0x27 0x00       DUP 0x00
0x8B5E  0x2E 0x09       JZB 0x8B67 (+9)
0x8B60  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B62  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8B64  0x44            PUSHI0
0x8B65  0x07            GT
0x8B66  0x0C            BOOLAND
0x8B67  0x31 0xD1 0x00  JZW 0x8C38 (+209)

                        // char fChar = methodName[0];                          expression.hs:421

0x8B6A  0x44            PUSHI0
0x8B6B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B6D  0x44            PUSHI0
0x8B6E  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x8B70  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (fChar.IsLower() && methodName.Contains('.') && (thisVariable.Length == 0))

0x8B72  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8B74  0x34 0x5D 0x01  CALLW 0x015D   // Char.IsLower
0x8B77  0x27 0x00       DUP 0x00
0x8B79  0x2E 0x15       JZB 0x8B8E (+21)
0x8B7B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B7D  0x1A 0x2E       PUSHIB 0x2E
0x8B7F  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0x8B82  0x0C            BOOLAND
0x8B83  0x27 0x00       DUP 0x00
0x8B85  0x2E 0x09       JZB 0x8B8E (+9)
0x8B87  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8B89  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8B8B  0x44            PUSHI0
0x8B8C  0x05            EQ
0x8B8D  0x0C            BOOLAND
0x8B8E  0x31 0xA8 0x00  JZW 0x8C36 (+168)

                        // <string> parts = methodName.Split('.');              expression.hs:425

0x8B91  0x1A 0x0F       PUSHIB 0x0F
0x8B93  0x24 0x0F       SYSCALL0 0x0F  // List.New
0x8B95  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8B97  0x1A 0x2E       PUSHIB 0x2E
0x8B99  0x34 0x9E 0x01  CALLW 0x019E   // String.Split
0x8B9C  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // thisVariable = parts[0];                             expression.hs:426

0x8B9E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8BA0  0x44            PUSHI0
0x8BA1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8BA3  0x57 0xFE       POPCOPYLOCALB 0xFE (BP-2)

                        // string qualifiedThis;                                expression.hs:427

0x8BA5  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string typeString = Types.GetTypeString(thisVariable, false, ref qualifiedThis);

0x8BA7  0x24 0x02       SYSCALL0 0x02  // String.New
0x8BA9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8BAB  0x44            PUSHI0
0x8BAC  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0x8BAE  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x8BB0  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (Parser.HadError)                                 expression.hs:429

0x8BB2  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8BB4  0x2E 0x07       JZB 0x8BBB (+7)

                        // break;                                               expression.hs:431

0x8BB6  0x28 0x0E       DECSP 0x0E
0x8BB8  0x33 0x54 0x01  JW 0x8D0C (+340)

                        // if (Types.IsDictionary(typeString))                  expression.hs:433

0x8BBB  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8BBD  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0x8BBF  0x2E 0x14       JZB 0x8BD3 (+20)

                        // methodName = "Dictionary." + parts[1];               expression.hs:435

0x8BC1  0x37 0xE9 0x10  PUSHIW 0x10E9
0x8BC4  0x1A 0x0B       PUSHIB 0x0B
0x8BC6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8BC8  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8BCA  0x45            PUSHI1
0x8BCB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8BCD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8BCF  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    expression.hs:436

0x8BD1  0x30 0x63       JB 0x8C34 (+99)

                        // else if (Types.IsList(typeString))                   expression.hs:437

0x8BD3  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8BD5  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0x8BD7  0x2E 0x14       JZB 0x8BEB (+20)

                        // methodName = "List." + parts[1];                     expression.hs:439

0x8BD9  0x37 0xF4 0x10  PUSHIW 0x10F4
0x8BDC  0x1A 0x05       PUSHIB 0x05
0x8BDE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8BE0  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8BE2  0x45            PUSHI1
0x8BE3  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8BE5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8BE7  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    expression.hs:440

0x8BE9  0x30 0x4B       JB 0x8C34 (+75)

                        // else if (Types.IsArray(typeString))                  expression.hs:441

0x8BEB  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8BED  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0x8BEF  0x2E 0x14       JZB 0x8C03 (+20)

                        // methodName = "Array." + parts[1];                    expression.hs:443

0x8BF1  0x37 0xF9 0x10  PUSHIW 0x10F9
0x8BF4  0x1A 0x06       PUSHIB 0x06
0x8BF6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8BF8  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8BFA  0x45            PUSHI1
0x8BFB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8BFD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8BFF  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    expression.hs:444

0x8C01  0x30 0x33       JB 0x8C34 (+51)

                        // else if (Types.IsSimpleType(typeString))             expression.hs:445

0x8C03  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8C05  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0x8C07  0x2E 0x2D       JZB 0x8C34 (+45)

                        // char f = typeString[0];                              expression.hs:448

0x8C09  0x44            PUSHI0
0x8C0A  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8C0C  0x44            PUSHI0
0x8C0D  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x8C0F  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // f = f.ToUpper();                                     expression.hs:449

0x8C11  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0x8C13  0x34 0x5E 0x01  CALLW 0x015E   // Char.ToUpper
0x8C16  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // methodName = f + typeString.Substring(1) + "." + parts[1];

0x8C18  0x56 0x14 0x12  PUSHLOCALBB 0x1214
0x8C1B  0x45            PUSHI1
0x8C1C  0x24 0x08       SYSCALL0 0x08  // String.Substring
0x8C1E  0x43            SWAP
0x8C1F  0x44            PUSHI0
0x8C20  0x43            SWAP
0x8C21  0x24 0x04       SYSCALL0 0x04  // String.InsertChar
0x8C23  0x1A 0x2E       PUSHIB 0x2E
0x8C25  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8C27  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8C29  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8C2B  0x45            PUSHI1
0x8C2C  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x8C2E  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8C30  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // }                                                    expression.hs:451

0x8C32  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:452

0x8C34  0x28 0x06       DECSP 0x06

                        // }                                                    expression.hs:453

0x8C36  0x28 0x02       DECSP 0x02

                        // Parser.Consume(HopperToken.LParen, '(');             expression.hs:455

0x8C38  0x1A 0x10       PUSHIB 0x10
0x8C3A  0x1A 0x28       PUSHIB 0x28
0x8C3C  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:456

0x8C3E  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8C40  0x2E 0x07       JZB 0x8C47 (+7)

                        // break;                                               expression.hs:458

0x8C42  0x28 0x06       DECSP 0x06
0x8C44  0x33 0xC8 0x00  JW 0x8D0C (+200)

                        // uint n = 0;                                          expression.hs:461

0x8C47  0x44            PUSHI0

                        // if (thisVariable.Length > 0)                         expression.hs:462

0x8C48  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8C4A  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x8C4C  0x44            PUSHI0
0x8C4D  0x07            GT
0x8C4E  0x2E 0x3B       JZB 0x8C89 (+59)

                        // string qualifiedThis;                                expression.hs:464

0x8C50  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string thisType = Types.GetTypeString(thisVariable, true, ref qualifiedThis);

0x8C52  0x24 0x02       SYSCALL0 0x02  // String.New
0x8C54  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8C56  0x45            PUSHI1
0x8C57  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0x8C59  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x8C5B  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // CodeStream.AddInstructionPushVariable(qualifiedThis); // push this

0x8C5D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8C5F  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // <string> argument;                                   expression.hs:467

0x8C62  0x1A 0x0F       PUSHIB 0x0F
0x8C64  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // argument.Append(""); // no "ref"                     expression.hs:468

0x8C66  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8C68  0x24 0x02       SYSCALL0 0x02  // String.New
0x8C6A  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argument.Append(thisType);                           expression.hs:469

0x8C6C  0x56 0x12 0x10  PUSHLOCALBB 0x1012
0x8C6F  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argument.Append("a" + n.ToString());                 expression.hs:470

0x8C71  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8C73  0x1A 0x61       PUSHIB 0x61
0x8C75  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8C77  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8C79  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x8C7C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8C7E  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // arguments.Append(argument);                          expression.hs:471

0x8C80  0x4F            PUSHLOCALB02
0x8C81  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0x8C83  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // n++;                                                 expression.hs:472

0x8C85  0x22 0x0C       INCLOCALB 0x0C (BP+12)

                        // }                                                    expression.hs:473

0x8C87  0x28 0x06       DECSP 0x06

                        // if (Parser.HadError)                                 expression.hs:476

0x8C89  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8C8B  0x32 0x7F 0x00  JNZW 0x8D0A (+127)

                        // if (Parser.Check(HopperToken.RParen))                expression.hs:480

0x8C8E  0x1A 0x11       PUSHIB 0x11
0x8C90  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8C92  0x2E 0x07       JZB 0x8C99 (+7)

                        // Parser.Advance();                                    expression.hs:482

0x8C94  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               expression.hs:483

0x8C96  0x33 0x74 0x00  JW 0x8D0A (+116)

                        // <string> argument;                                   expression.hs:485

0x8C99  0x1A 0x0F       PUSHIB 0x0F
0x8C9B  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // bool isRef = false;                                  expression.hs:486

0x8C9D  0x44            PUSHI0

                        // if (Parser.Check(HopperToken.Keyword, "ref"))

0x8C9E  0x1A 0x05       PUSHIB 0x05
0x8CA0  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x8CA3  0x1A 0x03       PUSHIB 0x03
0x8CA5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8CA7  0x2C 0x84       CALLB 0x84     // Parser.Check
0x8CA9  0x2E 0x14       JZB 0x8CBD (+20)

                        // Parser.Advance();                                    expression.hs:489

0x8CAB  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // argument.Append("ref");                              expression.hs:490

0x8CAD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8CAF  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0x8CB2  0x1A 0x03       PUSHIB 0x03
0x8CB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8CB6  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // isRef = true;                                        expression.hs:491

0x8CB8  0x45            PUSHI1
0x8CB9  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // }                                                    expression.hs:492

0x8CBB  0x30 0x08       JB 0x8CC3 (+8)

                        // argument.Append(""); // no "ref"                     expression.hs:495

0x8CBD  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8CBF  0x24 0x02       SYSCALL0 0x02  // String.New
0x8CC1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // string argumentType;                                 expression.hs:497

0x8CC3  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (isRef)                                           expression.hs:498

0x8CC5  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x8CC7  0x2E 0x08       JZB 0x8CCF (+8)

                        // argumentType = CompileReferenceArgument();           expression.hs:500

0x8CC9  0x2C 0xFB       CALLB 0xFB     // Expression.CompileReferenceArgument
0x8CCB  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // }                                                    expression.hs:501

0x8CCD  0x30 0x09       JB 0x8CD6 (+9)

                        // argumentType = CompileExpression("");                expression.hs:504

0x8CCF  0x24 0x02       SYSCALL0 0x02  // String.New
0x8CD1  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x8CD4  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (Parser.HadError)                                 expression.hs:506

0x8CD6  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8CD8  0x2E 0x06       JZB 0x8CDE (+6)

                        // break;                                               expression.hs:508

0x8CDA  0x28 0x06       DECSP 0x06
0x8CDC  0x30 0x2E       JB 0x8D0A (+46)

                        // argument.Append(argumentType);                       expression.hs:510

0x8CDE  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0x8CE1  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // argument.Append("a" + n.ToString());                 expression.hs:511

0x8CE3  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8CE5  0x1A 0x61       PUSHIB 0x61
0x8CE7  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8CE9  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8CEB  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x8CEE  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8CF0  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // arguments.Append(argument);                          expression.hs:512

0x8CF2  0x4F            PUSHLOCALB02
0x8CF3  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x8CF5  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // n++;                                                 expression.hs:513

0x8CF7  0x22 0x0C       INCLOCALB 0x0C (BP+12)

                        // if (!Parser.Check(HopperToken.RParen))               expression.hs:514

0x8CF9  0x1A 0x11       PUSHIB 0x11
0x8CFB  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8CFD  0x2F 0x08       JNZB 0x8D05 (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              expression.hs:516

0x8CFF  0x1A 0x0D       PUSHIB 0x0D
0x8D01  0x1A 0x2C       PUSHIB 0x2C
0x8D03  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // continue; // next argument                           expression.hs:518

0x8D05  0x28 0x06       DECSP 0x06
0x8D07  0x33 0x82 0xFF  JW 0x8C89 (-126)

                        // break;                                               expression.hs:520

0x8D0A  0x28 0x08       DECSP 0x08

                        // if (isDelegateType)                                  expression.hs:524

0x8D0C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8D0E  0x2E 0x24       JZB 0x8D32 (+36)

                        // uint iOverload = Types.FindOverload(methodName, arguments, ref returnType);

0x8D10  0x44            PUSHI0
0x8D11  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8D13  0x4F            PUSHLOCALB02
0x8D14  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x8D16  0x2C 0xF0       CALLB 0xF0     // Types.FindOverload
0x8D18  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (Parser.HadError)                                 expression.hs:527

0x8D1A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8D1C  0x2E 0x07       JZB 0x8D23 (+7)

                        // break;                                               expression.hs:529

0x8D1E  0x28 0x02       DECSP 0x02
0x8D20  0x33 0xD9 0x00  JW 0x8DF9 (+217)

                        // CodeStream.AddInstructionPushVariable(methodName);

0x8D23  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8D25  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // CodeStream.AddInstruction(Instruction.CALLREL);

0x8D28  0x1A 0x4B       PUSHIB 0x4B
0x8D2A  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // break;                                               expression.hs:533

0x8D2D  0x28 0x02       DECSP 0x02
0x8D2F  0x33 0xCA 0x00  JW 0x8DF9 (+202)

                        // if (Parser.HadError)                                 expression.hs:535

0x8D32  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8D34  0x32 0xC5 0x00  JNZW 0x8DF9 (+197)

                        // uint iOverload = Types.FindOverload(methodName, arguments, ref returnType);

0x8D37  0x44            PUSHI0
0x8D38  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8D3A  0x4F            PUSHLOCALB02
0x8D3B  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0x8D3D  0x2C 0xF0       CALLB 0xF0     // Types.FindOverload
0x8D3F  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (Parser.HadError)                                 expression.hs:541

0x8D41  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8D43  0x2E 0x07       JZB 0x8D4A (+7)

                        // break;                                               expression.hs:543

0x8D45  0x28 0x02       DECSP 0x02
0x8D47  0x33 0xB2 0x00  JW 0x8DF9 (+178)

                        // Symbols.OverloadToCompile(iOverload); // CompileMethodCall(methodName): Setters, function calls, actual method calls

0x8D4A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8D4C  0x2C 0xC9       CALLB 0xC9     // Symbols.OverloadToCompile

                        // Symbols.AddFunctionCall(iOverload);   // CompileMethodCall(methodName)

0x8D4E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8D50  0x2C 0xB1       CALLB 0xB1     // Symbols.AddFunctionCall

                        // if (Symbols.IsSysCall(iOverload))                    expression.hs:548

0x8D52  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8D54  0x2C 0xB2       CALLB 0xB2     // Symbols.IsSysCall
0x8D56  0x2E 0x49       JZB 0x8D9F (+73)

                        // byte iSysCall = Symbols.GetSysCallIndex(iOverload);

0x8D58  0x44            PUSHI0
0x8D59  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8D5B  0x2C 0xB3       CALLB 0xB3     // Symbols.GetSysCallIndex
0x8D5D  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // byte iSysOverload = Symbols.GetSysCallOverload(iOverload);

0x8D5F  0x44            PUSHI0
0x8D60  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8D62  0x2C 0xB4       CALLB 0xB4     // Symbols.GetSysCallOverload
0x8D64  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // switch (iSysOverload)                                expression.hs:552

0x8D66  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)

                        // case 0:                                              expression.hs:554

0x8D68  0x44            PUSHI0
0x8D69  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8D6B  0x05            EQ
0x8D6C  0x2E 0x12       JZB 0x8D7E (+18)

                        // if (!TryUserSysCall(methodName))                     expression.hs:556

0x8D6E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0x8D70  0x34 0x30 0x01  CALLW 0x0130   // CodeStream.TryUserSysCall
0x8D73  0x2F 0x26       JNZB 0x8D99 (+38)

                        // CodeStream.AddInstruction(Instruction.SYSCALL0, iSysCall);

0x8D75  0x1A 0x24       PUSHIB 0x24
0x8D77  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8D79  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:560

0x8D7C  0x30 0x1D       JB 0x8D99 (+29)

                        // case 1:                                              expression.hs:561

0x8D7E  0x45            PUSHI1
0x8D7F  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x8D81  0x05            EQ
0x8D82  0x2E 0x0B       JZB 0x8D8D (+11)

                        // CodeStream.AddInstruction(Instruction.SYSCALL1, iSysCall);

0x8D84  0x1A 0x25       PUSHIB 0x25
0x8D86  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8D88  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:564

0x8D8B  0x30 0x0E       JB 0x8D99 (+14)

                        // CodeStream.AddInstructionPUSHI(iSysOverload);

0x8D8D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8D8F  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.SYSCALL, iSysCall);

0x8D92  0x1A 0x26       PUSHIB 0x26
0x8D94  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8D96  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:570

0x8D99  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:571

0x8D9B  0x28 0x04       DECSP 0x04
0x8D9D  0x30 0x5A       JB 0x8DF7 (+90)

                        // if (DefineExists("H6502"))                           expression.hs:574

0x8D9F  0x37 0xEB 0x06  PUSHIW 0x06EB
0x8DA2  0x1A 0x05       PUSHIB 0x05
0x8DA4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8DA6  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0x8DA8  0x2E 0x36       JZB 0x8DDE (+54)

                        // if (iOverload <= 0x3FFF)                             expression.hs:576

0x8DAA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DAC  0x40 0xFF 0x3F  PUSHIWLE 0x3FFF
0x8DAF  0x2E 0x16       JZB 0x8DC5 (+22)

                        // uint beOverload = 0xC000 | iOverload;                expression.hs:578

0x8DB1  0x44            PUSHI0
0x8DB2  0x37 0x00 0xC0  PUSHIW 0xC000
0x8DB5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DB7  0x0D            BITOR
0x8DB8  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstruction(Instruction.CALLW, beOverload);

0x8DBA  0x1A 0x34       PUSHIB 0x34
0x8DBC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8DBE  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    expression.hs:580

0x8DC1  0x28 0x02       DECSP 0x02
0x8DC3  0x30 0x34       JB 0x8DF7 (+52)

                        // Parser.Error("H6502 has a limit of 16383 for function indices, (was '" + iOverload.ToString() + "')");

0x8DC5  0x37 0xF0 0x06  PUSHIW 0x06F0
0x8DC8  0x1A 0x37       PUSHIB 0x37
0x8DCA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8DCC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DCE  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0x8DD1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8DD3  0x37 0x27 0x29  PUSHIW 0x2927
0x8DD6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8DD8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8DDA  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    expression.hs:585

0x8DDC  0x30 0x1B       JB 0x8DF7 (+27)

                        // else if (iOverload < 256)                            expression.hs:586

0x8DDE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DE0  0x55 0x00 0x01  PUSHIWLT 0x0100
0x8DE3  0x2E 0x0D       JZB 0x8DF0 (+13)

                        // CodeStream.AddInstruction(Instruction.CALLB, byte(iOverload));

0x8DE5  0x1A 0x2C       PUSHIB 0x2C
0x8DE7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DE9  0x51 0x03       CAST 0x03
0x8DEB  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:589

0x8DEE  0x30 0x09       JB 0x8DF7 (+9)

                        // CodeStream.AddInstruction(Instruction.CALLW, iOverload);

0x8DF0  0x1A 0x34       PUSHIB 0x34
0x8DF2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8DF4  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // break;                                               expression.hs:595

0x8DF7  0x28 0x02       DECSP 0x02

                        // return returnType;                                   expression.hs:597

0x8DF9  0x4E            PUSHLOCALB00
0x8DFA  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/expression.hs:17
// ####  Expression.PushTypeFromString(..)  ####                                0x00F8


                        // byte b = ToByte(typeName);                           expression.hs:18

0x8DFC  0x5F 0x01       ENTERB 0x01

                        // byte b = ToByte(typeName);                           expression.hs:18

0x8DFE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8E00  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0x8E02  0x4C            POPLOCALB00

                        // CodeStream.AddInstructionPUSHI(b);                   expression.hs:19

0x8E03  0x4E            PUSHLOCALB00
0x8E04  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // }                                                    expression.hs:20

0x8E07  0x2A 0x04       RETB 0x04


// /source/compiler/expression.hs:2271
// ####  Expression.compileEquality(..)  ####                                   0x0109

0x8E09  0x49            ENTER

                        // string actualType;                                   expression.hs:2272

0x8E0A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileBooleanOr(expectedType);

0x8E0C  0x24 0x02       SYSCALL0 0x02  // String.New
0x8E0E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8E10  0x34 0x08 0x01  CALLW 0x0108   // Expression.compileBooleanOr
0x8E13  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:2276

0x8E14  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8E16  0x2E 0x07       JZB 0x8E1D (+7)

                        // break;                                               expression.hs:2278

0x8E18  0x28 0x02       DECSP 0x02
0x8E1A  0x33 0x90 0x01  JW 0x8FAA (+400)

                        // actualType = leftType;                               expression.hs:2280

0x8E1D  0x4F            PUSHLOCALB02
0x8E1E  0x5D            POPCOPYLOCALB00

                        // if (Parser.Check(HopperToken.EQ) || Parser.Check(HopperToken.NE))

0x8E1F  0x1A 0x18       PUSHIB 0x18
0x8E21  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8E23  0x27 0x00       DUP 0x00
0x8E25  0x2F 0x07       JNZB 0x8E2C (+7)
0x8E27  0x1A 0x1B       PUSHIB 0x1B
0x8E29  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8E2B  0x0B            BOOLOR
0x8E2C  0x31 0x7C 0x01  JZW 0x8FA8 (+380)

                        // if (IsEqualityType(leftType))                        expression.hs:2285

0x8E2F  0x4F            PUSHLOCALB02
0x8E30  0x2C 0xDA       CALLB 0xDA     // Types.IsEqualityType
0x8E32  0x2F 0x17       JNZB 0x8E49 (+23)

                        // Parser.ErrorAtCurrent("equality operation not only legal for '" + leftType + "'");

0x8E34  0x37 0xFF 0x10  PUSHIW 0x10FF
0x8E37  0x1A 0x27       PUSHIB 0x27
0x8E39  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8E3B  0x4F            PUSHLOCALB02
0x8E3C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8E3E  0x1A 0x27       PUSHIB 0x27
0x8E40  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8E42  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8E44  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:2292

0x8E46  0x33 0x62 0x01  JW 0x8FA8 (+354)

                        // <string,string> equalityToken = Parser.CurrentToken;

0x8E49  0x1A 0x0F       PUSHIB 0x0F
0x8E4B  0x1A 0x0F       PUSHIB 0x0F
0x8E4D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x8E4F  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x8E51  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // HopperToken operation = Token.GetType(equalityToken);

0x8E53  0x44            PUSHI0
0x8E54  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8E56  0x2C 0x49       CALLB 0x49     // Token.GetType
0x8E58  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // actualType = "bool"; // result                       expression.hs:2296

0x8E5A  0x37 0x6F 0x03  PUSHIW 0x036F
0x8E5D  0x1A 0x04       PUSHIB 0x04
0x8E5F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8E61  0x5D            POPCOPYLOCALB00

                        // Parser.Advance(); // != or ==                        expression.hs:2297

0x8E62  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileBooleanOr(expectedType);

0x8E64  0x24 0x02       SYSCALL0 0x02  // String.New
0x8E66  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x8E68  0x34 0x08 0x01  CALLW 0x0108   // Expression.compileBooleanOr
0x8E6B  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (leftType != rightType)                           expression.hs:2299

0x8E6D  0x4F            PUSHLOCALB02
0x8E6E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8E70  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8E72  0x2E 0x3A       JZB 0x8EAC (+58)

                        // if (Types.AutomaticUpCastTop(rightType, leftType))

0x8E74  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8E76  0x4F            PUSHLOCALB02
0x8E77  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x8E79  0x2E 0x07       JZB 0x8E80 (+7)

                        // rightType = leftType;                                expression.hs:2303

0x8E7B  0x4F            PUSHLOCALB02
0x8E7C  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // }                                                    expression.hs:2304

0x8E7E  0x30 0x2E       JB 0x8EAC (+46)

                        // else if (Types.AutomaticUpCastNext(leftType, rightType))

0x8E80  0x4F            PUSHLOCALB02
0x8E81  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8E83  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x8E85  0x2E 0x07       JZB 0x8E8C (+7)

                        // leftType = rightType;                                expression.hs:2307

0x8E87  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8E89  0x5E            POPCOPYLOCALB02

                        // }                                                    expression.hs:2308

0x8E8A  0x30 0x22       JB 0x8EAC (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + leftType + "' expected (was '" + rightType + "')");

0x8E8C  0x37 0x26 0x11  PUSHIW 0x1126
0x8E8F  0x1A 0x10       PUSHIB 0x10
0x8E91  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8E93  0x4F            PUSHLOCALB02
0x8E94  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8E96  0x37 0x36 0x11  PUSHIW 0x1136
0x8E99  0x1A 0x11       PUSHIB 0x11
0x8E9B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8E9D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8E9F  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x8EA1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8EA3  0x37 0x27 0x29  PUSHIW 0x2927
0x8EA6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8EA8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x8EAA  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:2314

0x8EAC  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8EAE  0x2E 0x07       JZB 0x8EB5 (+7)

                        // break;                                               expression.hs:2316

0x8EB0  0x28 0x06       DECSP 0x06
0x8EB2  0x33 0xF6 0x00  JW 0x8FA8 (+246)

                        // if (operation == HopperToken.EQ)                     expression.hs:2318

0x8EB5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8EB7  0x1A 0x18       PUSHIB 0x18
0x8EB9  0x05            EQ
0x8EBA  0x31 0x74 0x00  JZW 0x8F2E (+116)

                        // switch (leftType)                                    expression.hs:2320

0x8EBD  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:2322

0x8EBE  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8EC1  0x1A 0x04       PUSHIB 0x04
0x8EC3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8EC5  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8EC7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8EC9  0x2F 0x13       JNZB 0x8EDC (+19)

                        // CodeStream.AddInstructionSysCall0("Long", "EQ");

0x8ECB  0x37 0x01 0x06  PUSHIW 0x0601
0x8ECE  0x1A 0x04       PUSHIB 0x04
0x8ED0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8ED2  0x37 0x45 0x51  PUSHIW 0x5145
0x8ED5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8ED7  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:2325

0x8EDA  0x30 0x4F       JB 0x8F29 (+79)

                        // case "float":                                        expression.hs:2326

0x8EDC  0x37 0x08 0x06  PUSHIW 0x0608
0x8EDF  0x1A 0x05       PUSHIB 0x05
0x8EE1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8EE3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8EE5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8EE7  0x2F 0x13       JNZB 0x8EFA (+19)

                        // CodeStream.AddInstructionSysCall0("Float", "EQ");

0x8EE9  0x37 0x0F 0x06  PUSHIW 0x060F
0x8EEC  0x1A 0x05       PUSHIB 0x05
0x8EEE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8EF0  0x37 0x45 0x51  PUSHIW 0x5145
0x8EF3  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8EF5  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:2329

0x8EF8  0x30 0x31       JB 0x8F29 (+49)

                        // case "string":                                       expression.hs:2330

0x8EFA  0x37 0x62 0x02  PUSHIW 0x0262
0x8EFD  0x1A 0x06       PUSHIB 0x06
0x8EFF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F01  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8F03  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8F05  0x2F 0x1F       JNZB 0x8F24 (+31)

                        // CodeStream.AddInstructionSysCall0("String", "Compare");

0x8F07  0x37 0xDD 0x04  PUSHIW 0x04DD
0x8F0A  0x1A 0x06       PUSHIB 0x06
0x8F0C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F0E  0x37 0xE3 0x04  PUSHIW 0x04E3
0x8F11  0x1A 0x07       PUSHIB 0x07
0x8F13  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F15  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x8F18  0x1A 0x44       PUSHIB 0x44
0x8F1A  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.EQ);           expression.hs:2334

0x8F1D  0x1A 0x05       PUSHIB 0x05
0x8F1F  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2335

0x8F22  0x30 0x07       JB 0x8F29 (+7)

                        // CodeStream.AddInstruction(Instruction.EQ);           expression.hs:2339

0x8F24  0x1A 0x05       PUSHIB 0x05
0x8F26  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2341

0x8F29  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2342

0x8F2B  0x33 0x7B 0x00  JW 0x8FA6 (+123)

                        // switch (leftType)                                    expression.hs:2346

0x8F2E  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:2348

0x8F2F  0x37 0xF7 0x05  PUSHIW 0x05F7
0x8F32  0x1A 0x04       PUSHIB 0x04
0x8F34  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F36  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8F38  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8F3A  0x2F 0x18       JNZB 0x8F52 (+24)

                        // CodeStream.AddInstructionSysCall0("Long", "EQ");

0x8F3C  0x37 0x01 0x06  PUSHIW 0x0601
0x8F3F  0x1A 0x04       PUSHIB 0x04
0x8F41  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F43  0x37 0x45 0x51  PUSHIW 0x5145
0x8F46  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8F48  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.BOOLNOT);

0x8F4B  0x1A 0x41       PUSHIB 0x41
0x8F4D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2352

0x8F50  0x30 0x54       JB 0x8FA4 (+84)

                        // case "float":                                        expression.hs:2353

0x8F52  0x37 0x08 0x06  PUSHIW 0x0608
0x8F55  0x1A 0x05       PUSHIB 0x05
0x8F57  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F59  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8F5B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8F5D  0x2F 0x18       JNZB 0x8F75 (+24)

                        // CodeStream.AddInstructionSysCall0("Float", "EQ");

0x8F5F  0x37 0x0F 0x06  PUSHIW 0x060F
0x8F62  0x1A 0x05       PUSHIB 0x05
0x8F64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F66  0x37 0x45 0x51  PUSHIW 0x5145
0x8F69  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x8F6B  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.BOOLNOT);

0x8F6E  0x1A 0x41       PUSHIB 0x41
0x8F70  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2357

0x8F73  0x30 0x31       JB 0x8FA4 (+49)

                        // case "string":                                       expression.hs:2358

0x8F75  0x37 0x62 0x02  PUSHIW 0x0262
0x8F78  0x1A 0x06       PUSHIB 0x06
0x8F7A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F7C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x8F7E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x8F80  0x2F 0x1F       JNZB 0x8F9F (+31)

                        // CodeStream.AddInstructionSysCall0("String", "Compare");

0x8F82  0x37 0xDD 0x04  PUSHIW 0x04DD
0x8F85  0x1A 0x06       PUSHIB 0x06
0x8F87  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F89  0x37 0xE3 0x04  PUSHIW 0x04E3
0x8F8C  0x1A 0x07       PUSHIB 0x07
0x8F8E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8F90  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x8F93  0x1A 0x44       PUSHIB 0x44
0x8F95  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.NE);           expression.hs:2362

0x8F98  0x1A 0x06       PUSHIB 0x06
0x8F9A  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2363

0x8F9D  0x30 0x07       JB 0x8FA4 (+7)

                        // CodeStream.AddInstruction(Instruction.NE);           expression.hs:2367

0x8F9F  0x1A 0x06       PUSHIB 0x06
0x8FA1  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2369

0x8FA4  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2371

0x8FA6  0x28 0x06       DECSP 0x06

                        // break;                                               expression.hs:2374

0x8FA8  0x28 0x02       DECSP 0x02

                        // return actualType;                                   expression.hs:2376

0x8FAA  0x4E            PUSHLOCALB00
0x8FAB  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:291
// ####  Expression.CompileReferenceArgument(..)  ####                          0x00FB

0x8FAD  0x49            ENTER

                        // string argumentType = "";                            expression.hs:292

0x8FAE  0x24 0x02       SYSCALL0 0x02  // String.New
0x8FB0  0x24 0x02       SYSCALL0 0x02  // String.New
0x8FB2  0x5D            POPCOPYLOCALB00

                        // if (!Parser.Check(HopperToken.Identifier) && !Parser.Check(HopperToken.DottedIdentifier))

0x8FB3  0x1A 0x03       PUSHIB 0x03
0x8FB5  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8FB7  0x41            BOOLNOT
0x8FB8  0x27 0x00       DUP 0x00
0x8FBA  0x2E 0x08       JZB 0x8FC2 (+8)
0x8FBC  0x1A 0x02       PUSHIB 0x02
0x8FBE  0x2C 0x83       CALLB 0x83     // Parser.Check
0x8FC0  0x41            BOOLNOT
0x8FC1  0x0C            BOOLAND
0x8FC2  0x2E 0x0E       JZB 0x8FD0 (+14)

                        // Parser.ErrorAtCurrent("variable identifier expected");

0x8FC4  0x37 0x47 0x11  PUSHIW 0x1147
0x8FC7  0x1A 0x1C       PUSHIB 0x1C
0x8FC9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8FCB  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:298

0x8FCD  0x33 0xD2 0x00  JW 0x909F (+210)

                        // <string,string> currentToken = Parser.CurrentToken;

0x8FD0  0x1A 0x0F       PUSHIB 0x0F
0x8FD2  0x1A 0x0F       PUSHIB 0x0F
0x8FD4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x8FD6  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x8FD8  0x5E            POPCOPYLOCALB02

                        // string variableName = currentToken["lexeme"];

0x8FD9  0x24 0x02       SYSCALL0 0x02  // String.New
0x8FDB  0x4F            PUSHLOCALB02
0x8FDC  0x37 0x06 0x02  PUSHIW 0x0206
0x8FDF  0x1A 0x06       PUSHIB 0x06
0x8FE1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x8FE3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x8FE5  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance(); // identifier                      expression.hs:302

0x8FE7  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string fullName;                                     expression.hs:303

0x8FE9  0x24 0x02       SYSCALL0 0x02  // String.New

                        // argumentType = Types.GetTypeString(variableName, true, ref fullName);

0x8FEB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x8FED  0x45            PUSHI1
0x8FEE  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0x8FF0  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x8FF2  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:305

0x8FF3  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x8FF5  0x2E 0x07       JZB 0x8FFC (+7)

                        // break;                                               expression.hs:307

0x8FF7  0x28 0x06       DECSP 0x06
0x8FF9  0x33 0xA6 0x00  JW 0x909F (+166)

                        // if (Symbols.GlobalMemberExists(fullName))            expression.hs:309

0x8FFC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x8FFE  0x2C 0x9C       CALLB 0x9C     // Symbols.GlobalMemberExists
0x9000  0x2E 0x1C       JZB 0x901C (+28)

                        // uint globalAddress = Symbols.GetGlobalAddress(fullName);

0x9002  0x44            PUSHI0
0x9003  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9005  0x2C 0x9E       CALLB 0x9E     // Symbols.GetGlobalAddress
0x9007  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(globalAddress);

0x9009  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x900B  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.PUSHGP);

0x900E  0x1A 0x47       PUSHIB 0x47
0x9010  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.ADD);

0x9013  0x44            PUSHI0
0x9014  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:316

0x9017  0x28 0x02       DECSP 0x02
0x9019  0x33 0x84 0x00  JW 0x909D (+132)

                        // bool isRef;                                          expression.hs:319

0x901C  0x44            PUSHI0

                        // int offset = Block.GetOffset(variableName, ref isRef);

0x901D  0x44            PUSHI0
0x901E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9020  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x9022  0x34 0x59 0x01  CALLW 0x0159   // Block.GetOffset
0x9025  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (isRef)                                           expression.hs:321

0x9027  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9029  0x2E 0x3B       JZB 0x9064 (+59)

                        // if ((offset > -129) && (offset < 128))               expression.hs:324

0x902B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x902D  0x44            PUSHI0
0x902E  0x1A 0x81       PUSHIB 0x81
0x9030  0x12            SUBI
0x9031  0x16            GTI
0x9032  0x27 0x00       DUP 0x00
0x9034  0x2E 0x08       JZB 0x903C (+8)
0x9036  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9038  0x1A 0x80       PUSHIB 0x80
0x903A  0x17            LTI
0x903B  0x0C            BOOLAND
0x903C  0x2E 0x15       JZB 0x9051 (+21)

                        // byte operand =  CodeStream.IntToByte(offset);

0x903E  0x44            PUSHI0
0x903F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9041  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x9044  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALB, operand);

0x9046  0x1A 0x1C       PUSHIB 0x1C
0x9048  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x904A  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:328

0x904D  0x28 0x02       DECSP 0x02
0x904F  0x30 0x4C       JB 0x909B (+76)

                        // uint operand =  CodeStream.IntToUInt(offset);

0x9051  0x44            PUSHI0
0x9052  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9054  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x9057  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHLOCALW, operand);

0x9059  0x1A 0x39       PUSHIB 0x39
0x905B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x905D  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    expression.hs:333

0x9060  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:334

0x9062  0x30 0x39       JB 0x909B (+57)

                        // if ((offset > -129) && (offset < 128))               expression.hs:338

0x9064  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9066  0x44            PUSHI0
0x9067  0x1A 0x81       PUSHIB 0x81
0x9069  0x12            SUBI
0x906A  0x16            GTI
0x906B  0x27 0x00       DUP 0x00
0x906D  0x2E 0x08       JZB 0x9075 (+8)
0x906F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9071  0x1A 0x80       PUSHIB 0x80
0x9073  0x17            LTI
0x9074  0x0C            BOOLAND
0x9075  0x2E 0x15       JZB 0x908A (+21)

                        // byte operand =  CodeStream.IntToByte(offset);

0x9077  0x44            PUSHI0
0x9078  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x907A  0x34 0x21 0x01  CALLW 0x0121   // CodeStream.IntToByte
0x907D  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHSTACKADDRB, operand);

0x907F  0x1A 0x21       PUSHIB 0x21
0x9081  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9083  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:342

0x9086  0x28 0x02       DECSP 0x02
0x9088  0x30 0x13       JB 0x909B (+19)

                        // uint operand =  CodeStream.IntToUInt(offset);

0x908A  0x44            PUSHI0
0x908B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x908D  0x34 0x22 0x01  CALLW 0x0122   // CodeStream.IntToUInt
0x9090  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHSTACKADDRW, operand);

0x9092  0x1A 0x3E       PUSHIB 0x3E
0x9094  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9096  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    expression.hs:347

0x9099  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:349

0x909B  0x28 0x04       DECSP 0x04

                        // break;                                               expression.hs:351

0x909D  0x28 0x06       DECSP 0x06

                        // return argumentType;                                 expression.hs:353

0x909F  0x4E            PUSHLOCALB00
0x90A0  0x2B 0x02       RETRETB 0x02


// /source/compiler/expression.hs:2222
// ####  Expression.compileBooleanOr(..)  ####                                  0x0108

0x90A2  0x49            ENTER

                        // string actualType;                                   expression.hs:2223

0x90A3  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileBooleanAnd(expectedType);

0x90A5  0x24 0x02       SYSCALL0 0x02  // String.New
0x90A7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x90A9  0x34 0x07 0x01  CALLW 0x0107   // Expression.compileBooleanAnd
0x90AC  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:2227

0x90AD  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x90AF  0x2E 0x07       JZB 0x90B6 (+7)

                        // break;                                               expression.hs:2229

0x90B1  0x28 0x02       DECSP 0x02
0x90B3  0x33 0x8C 0x00  JW 0x913F (+140)

                        // actualType = leftType;                               expression.hs:2231

0x90B6  0x4F            PUSHLOCALB02
0x90B7  0x5D            POPCOPYLOCALB00

                        // <uint> jumpShortCircuits;                            expression.hs:2232

0x90B8  0x1A 0x04       PUSHIB 0x04
0x90BA  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (Parser.Check(HopperToken.BooleanOr))             expression.hs:2235

0x90BC  0x1A 0x1F       PUSHIB 0x1F
0x90BE  0x2C 0x83       CALLB 0x83     // Parser.Check
0x90C0  0x2E 0x55       JZB 0x9115 (+85)

                        // if (leftType != "bool")                              expression.hs:2237

0x90C2  0x4F            PUSHLOCALB02
0x90C3  0x37 0x6F 0x03  PUSHIW 0x036F
0x90C6  0x1A 0x04       PUSHIB 0x04
0x90C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x90CA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x90CC  0x2E 0x0D       JZB 0x90D9 (+13)

                        // Parser.ErrorAtCurrent("boolean expression expected");

0x90CE  0x37 0x73 0x03  PUSHIW 0x0373
0x90D1  0x1A 0x1B       PUSHIB 0x1B
0x90D3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x90D5  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:2240

0x90D7  0x30 0x66       JB 0x913D (+102)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0));

0x90D9  0x1A 0x27       PUSHIB 0x27
0x90DB  0x44            PUSHI0
0x90DC  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // jumpShortCircuits.Append(CodeStream.NextAddress);

0x90DF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x90E1  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x90E4  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // CodeStream.AddInstructionJump(Instruction.JNZW);

0x90E6  0x1A 0x32       PUSHIB 0x32
0x90E8  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // Parser.Advance(); // ||                              expression.hs:2248

0x90EB  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileBooleanAnd(expectedType);

0x90ED  0x24 0x02       SYSCALL0 0x02  // String.New
0x90EF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x90F1  0x34 0x07 0x01  CALLW 0x0107   // Expression.compileBooleanAnd
0x90F4  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (rightType != "bool")                             expression.hs:2250

0x90F6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x90F8  0x37 0x6F 0x03  PUSHIW 0x036F
0x90FB  0x1A 0x04       PUSHIB 0x04
0x90FD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x90FF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9101  0x2E 0x0B       JZB 0x910C (+11)

                        // Parser.ErrorAtCurrent("boolean expression expected");

0x9103  0x37 0x73 0x03  PUSHIW 0x0373
0x9106  0x1A 0x1B       PUSHIB 0x1B
0x9108  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x910A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // CodeStream.AddInstruction(Instruction.BOOLOR);

0x910C  0x1A 0x0B       PUSHIB 0x0B
0x910E  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // continue;                                            expression.hs:2255

0x9111  0x28 0x02       DECSP 0x02
0x9113  0x30 0xA9       JB 0x90BC (-87)

                        // uint pastAddress = CodeStream.NextAddress;           expression.hs:2258

0x9115  0x44            PUSHI0
0x9116  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x9119  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // foreach (var jumpShortCircuit in jumpShortCircuits)

0x911B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x911D  0x44            PUSHI0
0x911E  0x44            PUSHI0
0x911F  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9121  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x9123  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9125  0x05            EQ
0x9126  0x2F 0x13       JNZB 0x9139 (+19)
0x9128  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x912B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x912D  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // CodeStream.PatchJump(jumpShortCircuit, pastAddress);

0x912F  0x56 0x0A 0x06  PUSHLOCALBB 0x060A
0x9132  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    expression.hs:2262

0x9135  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x9137  0x30 0xE8       JB 0x911F (-24)
0x9139  0x28 0x06       DECSP 0x06

                        // break;                                               expression.hs:2263

0x913B  0x28 0x02       DECSP 0x02

                        // break;                                               expression.hs:2265

0x913D  0x28 0x04       DECSP 0x04

                        // return actualType;                                   expression.hs:2267

0x913F  0x4E            PUSHLOCALB00
0x9140  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:2172
// ####  Expression.compileBooleanAnd(..)  ####                                 0x0107

0x9142  0x49            ENTER

                        // string actualType;                                   expression.hs:2173

0x9143  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileBitOr(expectedType);

0x9145  0x24 0x02       SYSCALL0 0x02  // String.New
0x9147  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9149  0x34 0x06 0x01  CALLW 0x0106   // Expression.compileBitOr
0x914C  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:2177

0x914D  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x914F  0x2E 0x07       JZB 0x9156 (+7)

                        // break;                                               expression.hs:2179

0x9151  0x28 0x02       DECSP 0x02
0x9153  0x33 0x8C 0x00  JW 0x91DF (+140)

                        // actualType = leftType;                               expression.hs:2181

0x9156  0x4F            PUSHLOCALB02
0x9157  0x5D            POPCOPYLOCALB00

                        // <uint> jumpShortCircuits;                            expression.hs:2182

0x9158  0x1A 0x04       PUSHIB 0x04
0x915A  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (Parser.Check(HopperToken.BooleanAnd))            expression.hs:2185

0x915C  0x1A 0x1E       PUSHIB 0x1E
0x915E  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9160  0x2E 0x55       JZB 0x91B5 (+85)

                        // if (leftType != "bool")                              expression.hs:2187

0x9162  0x4F            PUSHLOCALB02
0x9163  0x37 0x6F 0x03  PUSHIW 0x036F
0x9166  0x1A 0x04       PUSHIB 0x04
0x9168  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x916A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x916C  0x2E 0x0D       JZB 0x9179 (+13)

                        // Parser.ErrorAtCurrent("boolean expression expected");

0x916E  0x37 0x73 0x03  PUSHIW 0x0373
0x9171  0x1A 0x1B       PUSHIB 0x1B
0x9173  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9175  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:2190

0x9177  0x30 0x66       JB 0x91DD (+102)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0));

0x9179  0x1A 0x27       PUSHIB 0x27
0x917B  0x44            PUSHI0
0x917C  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // jumpShortCircuits.Append(CodeStream.NextAddress);

0x917F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9181  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x9184  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // CodeStream.AddInstructionJump(Instruction.JZW);

0x9186  0x1A 0x31       PUSHIB 0x31
0x9188  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // Parser.Advance(); // &&                              expression.hs:2198

0x918B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileBitOr(expectedType);

0x918D  0x24 0x02       SYSCALL0 0x02  // String.New
0x918F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9191  0x34 0x06 0x01  CALLW 0x0106   // Expression.compileBitOr
0x9194  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (rightType != "bool")                             expression.hs:2200

0x9196  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9198  0x37 0x6F 0x03  PUSHIW 0x036F
0x919B  0x1A 0x04       PUSHIB 0x04
0x919D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x919F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x91A1  0x2E 0x0B       JZB 0x91AC (+11)

                        // Parser.ErrorAtCurrent("boolean expression expected");

0x91A3  0x37 0x73 0x03  PUSHIW 0x0373
0x91A6  0x1A 0x1B       PUSHIB 0x1B
0x91A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x91AA  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // CodeStream.AddInstruction(Instruction.BOOLAND);

0x91AC  0x1A 0x0C       PUSHIB 0x0C
0x91AE  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // continue;                                            expression.hs:2206

0x91B1  0x28 0x02       DECSP 0x02
0x91B3  0x30 0xA9       JB 0x915C (-87)

                        // uint pastAddress = CodeStream.NextAddress;           expression.hs:2209

0x91B5  0x44            PUSHI0
0x91B6  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0x91B9  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // foreach (var jumpShortCircuit in jumpShortCircuits)

0x91BB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x91BD  0x44            PUSHI0
0x91BE  0x44            PUSHI0
0x91BF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x91C1  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0x91C3  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x91C5  0x05            EQ
0x91C6  0x2F 0x13       JNZB 0x91D9 (+19)
0x91C8  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0x91CB  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0x91CD  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // CodeStream.PatchJump(jumpShortCircuit, pastAddress);

0x91CF  0x56 0x0A 0x06  PUSHLOCALBB 0x060A
0x91D2  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    expression.hs:2213

0x91D5  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0x91D7  0x30 0xE8       JB 0x91BF (-24)
0x91D9  0x28 0x06       DECSP 0x06

                        // break;                                               expression.hs:2214

0x91DB  0x28 0x02       DECSP 0x02

                        // break;                                               expression.hs:2216

0x91DD  0x28 0x04       DECSP 0x04

                        // return actualType;                                   expression.hs:2218

0x91DF  0x4E            PUSHLOCALB00
0x91E0  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:2119
// ####  Expression.compileBitOr(..)  ####                                      0x0106

0x91E2  0x49            ENTER

                        // string actualType;                                   expression.hs:2120

0x91E3  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileBitAnd(expectedType);

0x91E5  0x24 0x02       SYSCALL0 0x02  // String.New
0x91E7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x91E9  0x34 0x05 0x01  CALLW 0x0105   // Expression.compileBitAnd
0x91EC  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:2125

0x91ED  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x91EF  0x2E 0x07       JZB 0x91F6 (+7)

                        // break;                                               expression.hs:2127

0x91F1  0x28 0x02       DECSP 0x02
0x91F3  0x33 0x84 0x00  JW 0x9277 (+132)

                        // actualType = leftType;                               expression.hs:2129

0x91F6  0x4F            PUSHLOCALB02
0x91F7  0x5D            POPCOPYLOCALB00

                        // if (Parser.Check(HopperToken.BitOr))                 expression.hs:2132

0x91F8  0x1A 0x22       PUSHIB 0x22
0x91FA  0x2C 0x83       CALLB 0x83     // Parser.Check
0x91FC  0x31 0x79 0x00  JZW 0x9275 (+121)

                        // if (!IsBitwiseType(leftType))                        expression.hs:2134

0x91FF  0x4F            PUSHLOCALB02
0x9200  0x2C 0xD9       CALLB 0xD9     // Types.IsBitwiseType
0x9202  0x2F 0x17       JNZB 0x9219 (+23)

                        // Parser.ErrorAtCurrent("bitwise operations only legal for 'uint', 'int', 'flags' and 'byte', (not '" + leftType + "')");

0x9204  0x37 0x63 0x11  PUSHIW 0x1163
0x9207  0x1A 0x4B       PUSHIB 0x4B
0x9209  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x920B  0x4F            PUSHLOCALB02
0x920C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x920E  0x37 0x27 0x29  PUSHIW 0x2927
0x9211  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9213  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9215  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:2137

0x9217  0x30 0x5E       JB 0x9275 (+94)

                        // Parser.Advance(); // |                               expression.hs:2139

0x9219  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileBitAnd(expectedType);

0x921B  0x24 0x02       SYSCALL0 0x02  // String.New
0x921D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x921F  0x34 0x05 0x01  CALLW 0x0105   // Expression.compileBitAnd
0x9222  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (actualType != rightType)                         expression.hs:2142

0x9224  0x4E            PUSHLOCALB00
0x9225  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9227  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9229  0x2E 0x3A       JZB 0x9263 (+58)

                        // if (Types.AutomaticUpCastTop(rightType, actualType))

0x922B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x922D  0x4E            PUSHLOCALB00
0x922E  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x9230  0x2E 0x07       JZB 0x9237 (+7)

                        // rightType = actualType;                              expression.hs:2146

0x9232  0x4E            PUSHLOCALB00
0x9233  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    expression.hs:2147

0x9235  0x30 0x2E       JB 0x9263 (+46)

                        // else if (Types.AutomaticUpCastNext(actualType, rightType))

0x9237  0x4E            PUSHLOCALB00
0x9238  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x923A  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x923C  0x2E 0x07       JZB 0x9243 (+7)

                        // actualType = rightType;                              expression.hs:2150

0x923E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9240  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:2151

0x9241  0x30 0x22       JB 0x9263 (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + actualType + "' expected (was '" + rightType + "')");

0x9243  0x37 0x26 0x11  PUSHIW 0x1126
0x9246  0x1A 0x10       PUSHIB 0x10
0x9248  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x924A  0x4E            PUSHLOCALB00
0x924B  0x24 0x03       SYSCALL0 0x03  // String.Append
0x924D  0x37 0x36 0x11  PUSHIW 0x1136
0x9250  0x1A 0x11       PUSHIB 0x11
0x9252  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9254  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9256  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9258  0x24 0x03       SYSCALL0 0x03  // String.Append
0x925A  0x37 0x27 0x29  PUSHIW 0x2927
0x925D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x925F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9261  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:2157

0x9263  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9265  0x2E 0x06       JZB 0x926B (+6)

                        // break;                                               expression.hs:2159

0x9267  0x28 0x02       DECSP 0x02
0x9269  0x30 0x0C       JB 0x9275 (+12)

                        // CodeStream.AddInstruction(Instruction.BITOR);

0x926B  0x1A 0x0D       PUSHIB 0x0D
0x926D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // continue;                                            expression.hs:2162

0x9270  0x28 0x02       DECSP 0x02
0x9272  0x33 0x86 0xFF  JW 0x91F8 (-122)

                        // break;                                               expression.hs:2166

0x9275  0x28 0x02       DECSP 0x02

                        // return actualType;                                   expression.hs:2168

0x9277  0x4E            PUSHLOCALB00
0x9278  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:2045
// ####  Expression.compileBitAnd(..)  ####                                     0x0105

0x927A  0x49            ENTER

                        // string actualType;                                   expression.hs:2046

0x927B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileComparison(expectedType);

0x927D  0x24 0x02       SYSCALL0 0x02  // String.New
0x927F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9281  0x34 0x04 0x01  CALLW 0x0104   // Expression.compileComparison
0x9284  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:2050

0x9285  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9287  0x2E 0x07       JZB 0x928E (+7)

                        // break;                                               expression.hs:2052

0x9289  0x28 0x02       DECSP 0x02
0x928B  0x33 0x84 0x00  JW 0x930F (+132)

                        // actualType = leftType;                               expression.hs:2054

0x928E  0x4F            PUSHLOCALB02
0x928F  0x5D            POPCOPYLOCALB00

                        // if (Parser.Check(HopperToken.BitAnd))                expression.hs:2057

0x9290  0x1A 0x21       PUSHIB 0x21
0x9292  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9294  0x31 0x79 0x00  JZW 0x930D (+121)

                        // if (!IsBitwiseType(leftType))                        expression.hs:2059

0x9297  0x4F            PUSHLOCALB02
0x9298  0x2C 0xD9       CALLB 0xD9     // Types.IsBitwiseType
0x929A  0x2F 0x17       JNZB 0x92B1 (+23)

                        // Parser.ErrorAtCurrent("bitwise operations only legal for 'uint', 'int', 'flags' and 'byte', (not '" + leftType + "')");

0x929C  0x37 0x63 0x11  PUSHIW 0x1163
0x929F  0x1A 0x4B       PUSHIB 0x4B
0x92A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x92A3  0x4F            PUSHLOCALB02
0x92A4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92A6  0x37 0x27 0x29  PUSHIW 0x2927
0x92A9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x92AB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92AD  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:2062

0x92AF  0x30 0x5E       JB 0x930D (+94)

                        // Parser.Advance(); // &                               expression.hs:2064

0x92B1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileComparison(expectedType);

0x92B3  0x24 0x02       SYSCALL0 0x02  // String.New
0x92B5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x92B7  0x34 0x04 0x01  CALLW 0x0104   // Expression.compileComparison
0x92BA  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (actualType != rightType)                         expression.hs:2066

0x92BC  0x4E            PUSHLOCALB00
0x92BD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x92BF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x92C1  0x2E 0x3A       JZB 0x92FB (+58)

                        // if (Types.AutomaticUpCastTop(rightType, actualType))

0x92C3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x92C5  0x4E            PUSHLOCALB00
0x92C6  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x92C8  0x2E 0x07       JZB 0x92CF (+7)

                        // rightType = actualType;                              expression.hs:2070

0x92CA  0x4E            PUSHLOCALB00
0x92CB  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    expression.hs:2071

0x92CD  0x30 0x2E       JB 0x92FB (+46)

                        // else if (Types.AutomaticUpCastNext(actualType, rightType))

0x92CF  0x4E            PUSHLOCALB00
0x92D0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x92D2  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x92D4  0x2E 0x07       JZB 0x92DB (+7)

                        // actualType = rightType;                              expression.hs:2074

0x92D6  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x92D8  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:2075

0x92D9  0x30 0x22       JB 0x92FB (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + actualType + "' expected (was '" + rightType + "')");

0x92DB  0x37 0x26 0x11  PUSHIW 0x1126
0x92DE  0x1A 0x10       PUSHIB 0x10
0x92E0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x92E2  0x4E            PUSHLOCALB00
0x92E3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92E5  0x37 0x36 0x11  PUSHIW 0x1136
0x92E8  0x1A 0x11       PUSHIB 0x11
0x92EA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x92EC  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92EE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x92F0  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92F2  0x37 0x27 0x29  PUSHIW 0x2927
0x92F5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x92F7  0x24 0x03       SYSCALL0 0x03  // String.Append
0x92F9  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:2081

0x92FB  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x92FD  0x2E 0x06       JZB 0x9303 (+6)

                        // break;                                               expression.hs:2083

0x92FF  0x28 0x02       DECSP 0x02
0x9301  0x30 0x0C       JB 0x930D (+12)

                        // CodeStream.AddInstruction(Instruction.BITAND);

0x9303  0x1A 0x0E       PUSHIB 0x0E
0x9305  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // continue;                                            expression.hs:2086

0x9308  0x28 0x02       DECSP 0x02
0x930A  0x33 0x86 0xFF  JW 0x9290 (-122)

                        // break;                                               expression.hs:2090

0x930D  0x28 0x02       DECSP 0x02

                        // return actualType;                                   expression.hs:2092

0x930F  0x4E            PUSHLOCALB00
0x9310  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:1849
// ####  Expression.compileComparison(..)  ####                                 0x0104

0x9312  0x49            ENTER

                        // string actualType;                                   expression.hs:1850

0x9313  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string leftType = compileTerm(expectedType);

0x9315  0x24 0x02       SYSCALL0 0x02  // String.New
0x9317  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9319  0x34 0x03 0x01  CALLW 0x0103   // Expression.compileTerm
0x931C  0x5E            POPCOPYLOCALB02

                        // if (Parser.HadError)                                 expression.hs:1854

0x931D  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x931F  0x2E 0x07       JZB 0x9326 (+7)

                        // break;                                               expression.hs:1856

0x9321  0x28 0x02       DECSP 0x02
0x9323  0x33 0xA3 0x02  JW 0x95C6 (+675)

                        // actualType = leftType;                               expression.hs:1858

0x9326  0x4F            PUSHLOCALB02
0x9327  0x5D            POPCOPYLOCALB00

                        // if (Parser.Check(HopperToken.LT) || Parser.Check(HopperToken.LE) || Parser.Check(HopperToken.GT) || Parser.Check(HopperToken.GE))

0x9328  0x1A 0x16       PUSHIB 0x16
0x932A  0x2C 0x83       CALLB 0x83     // Parser.Check
0x932C  0x27 0x00       DUP 0x00
0x932E  0x2F 0x19       JNZB 0x9347 (+25)
0x9330  0x1A 0x19       PUSHIB 0x19
0x9332  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9334  0x0B            BOOLOR
0x9335  0x27 0x00       DUP 0x00
0x9337  0x2F 0x10       JNZB 0x9347 (+16)
0x9339  0x1A 0x17       PUSHIB 0x17
0x933B  0x2C 0x83       CALLB 0x83     // Parser.Check
0x933D  0x0B            BOOLOR
0x933E  0x27 0x00       DUP 0x00
0x9340  0x2F 0x07       JNZB 0x9347 (+7)
0x9342  0x1A 0x1A       PUSHIB 0x1A
0x9344  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9346  0x0B            BOOLOR
0x9347  0x31 0x7D 0x02  JZW 0x95C4 (+637)

                        // actualType = "bool";                                 expression.hs:1861

0x934A  0x37 0x6F 0x03  PUSHIW 0x036F
0x934D  0x1A 0x04       PUSHIB 0x04
0x934F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9351  0x5D            POPCOPYLOCALB00

                        // if (!Types.IsOrdinalType(leftType))                  expression.hs:1862

0x9352  0x4F            PUSHLOCALB02
0x9353  0x2C 0xD8       CALLB 0xD8     // Types.IsOrdinalType
0x9355  0x2F 0x10       JNZB 0x9365 (+16)

                        // Parser.ErrorAtCurrent("comparison operations only legal for ordinal types");

0x9357  0x37 0xAE 0x11  PUSHIW 0x11AE
0x935A  0x1A 0x32       PUSHIB 0x32
0x935C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x935E  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1865

0x9360  0x28 0x02       DECSP 0x02
0x9362  0x33 0x64 0x02  JW 0x95C6 (+612)

                        // <string,string> comparisonToken = Parser.CurrentToken;

0x9365  0x1A 0x0F       PUSHIB 0x0F
0x9367  0x1A 0x0F       PUSHIB 0x0F
0x9369  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x936B  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x936D  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // HopperToken operation = Token.GetType(comparisonToken);

0x936F  0x44            PUSHI0
0x9370  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9372  0x2C 0x49       CALLB 0x49     // Token.GetType
0x9374  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // Advance(); // <, <=, >, >=                           expression.hs:1869

0x9376  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileTerm(expectedType);

0x9378  0x24 0x02       SYSCALL0 0x02  // String.New
0x937A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x937C  0x34 0x03 0x01  CALLW 0x0103   // Expression.compileTerm
0x937F  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (leftType != rightType)                           expression.hs:1871

0x9381  0x4F            PUSHLOCALB02
0x9382  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9384  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9386  0x2E 0x3A       JZB 0x93C0 (+58)

                        // if (Types.AutomaticUpCastTop(rightType, leftType))

0x9388  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x938A  0x4F            PUSHLOCALB02
0x938B  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x938D  0x2E 0x07       JZB 0x9394 (+7)

                        // rightType = leftType;                                expression.hs:1875

0x938F  0x4F            PUSHLOCALB02
0x9390  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // }                                                    expression.hs:1876

0x9392  0x30 0x2E       JB 0x93C0 (+46)

                        // else if (Types.AutomaticUpCastNext(leftType, rightType))

0x9394  0x4F            PUSHLOCALB02
0x9395  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9397  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x9399  0x2E 0x07       JZB 0x93A0 (+7)

                        // leftType = rightType;                                expression.hs:1879

0x939B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x939D  0x5E            POPCOPYLOCALB02

                        // }                                                    expression.hs:1880

0x939E  0x30 0x22       JB 0x93C0 (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + leftType + "' expected (was '" + rightType + "')");

0x93A0  0x37 0x26 0x11  PUSHIW 0x1126
0x93A3  0x1A 0x10       PUSHIB 0x10
0x93A5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93A7  0x4F            PUSHLOCALB02
0x93A8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93AA  0x37 0x36 0x11  PUSHIW 0x1136
0x93AD  0x1A 0x11       PUSHIB 0x11
0x93AF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93B1  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93B3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x93B5  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93B7  0x37 0x27 0x29  PUSHIW 0x2927
0x93BA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x93BC  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93BE  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:1886

0x93C0  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x93C2  0x2E 0x07       JZB 0x93C9 (+7)

                        // break;                                               expression.hs:1888

0x93C4  0x28 0x08       DECSP 0x08
0x93C6  0x33 0x00 0x02  JW 0x95C6 (+512)

                        // if (leftType == "string")                            expression.hs:1890

0x93C9  0x4F            PUSHLOCALB02
0x93CA  0x37 0x62 0x02  PUSHIW 0x0262
0x93CD  0x1A 0x06       PUSHIB 0x06
0x93CF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93D1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x93D3  0x32 0x83 0x00  JNZW 0x9456 (+131)

                        // if (rightType != "string")                           expression.hs:1892

0x93D6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x93D8  0x37 0x62 0x02  PUSHIW 0x0262
0x93DB  0x1A 0x06       PUSHIB 0x06
0x93DD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93DF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x93E1  0x2E 0x22       JZB 0x9403 (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + leftType + "' expected (was '" + rightType + "')");

0x93E3  0x37 0x26 0x11  PUSHIW 0x1126
0x93E6  0x1A 0x10       PUSHIB 0x10
0x93E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93EA  0x4F            PUSHLOCALB02
0x93EB  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93ED  0x37 0x36 0x11  PUSHIW 0x1136
0x93F0  0x1A 0x11       PUSHIB 0x11
0x93F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x93F4  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93F6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x93F8  0x24 0x03       SYSCALL0 0x03  // String.Append
0x93FA  0x37 0x27 0x29  PUSHIW 0x2927
0x93FD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x93FF  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9401  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // CodeStream.AddInstructionSysCall0("String", "Compare"); //-1|0|1 -> [top]

0x9403  0x37 0xDD 0x04  PUSHIW 0x04DD
0x9406  0x1A 0x06       PUSHIB 0x06
0x9408  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x940A  0x37 0xE3 0x04  PUSHIW 0x04E3
0x940D  0x1A 0x07       PUSHIB 0x07
0x940F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9411  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // Instruction pushInstruction = Instruction.PUSHI1;

0x9414  0x44            PUSHI0
0x9415  0x1A 0x45       PUSHIB 0x45
0x9417  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // Instruction compareInstruction = Instruction.EQ;

0x9419  0x44            PUSHI0
0x941A  0x1A 0x05       PUSHIB 0x05
0x941C  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (operation == HopperToken.LT)                     expression.hs:1907

0x941E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9420  0x1A 0x16       PUSHIB 0x16
0x9422  0x05            EQ
0x9423  0x2E 0x08       JZB 0x942B (+8)

                        // pushInstruction = Instruction.PUSHIM1;               expression.hs:1911

0x9425  0x1A 0x46       PUSHIB 0x46
0x9427  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // }                                                    expression.hs:1912

0x9429  0x30 0x1E       JB 0x9447 (+30)

                        // else if (operation == HopperToken.GE)                expression.hs:1913

0x942B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x942D  0x1A 0x1A       PUSHIB 0x1A
0x942F  0x05            EQ
0x9430  0x2E 0x0C       JZB 0x943C (+12)

                        // pushInstruction    = Instruction.PUSHIM1;            expression.hs:1918

0x9432  0x1A 0x46       PUSHIB 0x46
0x9434  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // compareInstruction = Instruction.NE;                 expression.hs:1919

0x9436  0x1A 0x06       PUSHIB 0x06
0x9438  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // }                                                    expression.hs:1920

0x943A  0x30 0x0D       JB 0x9447 (+13)

                        // else if (operation == HopperToken.LE)                expression.hs:1921

0x943C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x943E  0x1A 0x19       PUSHIB 0x19
0x9440  0x05            EQ
0x9441  0x2E 0x06       JZB 0x9447 (+6)

                        // compareInstruction = Instruction.NE;                 expression.hs:1926

0x9443  0x1A 0x06       PUSHIB 0x06
0x9445  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(pushInstruction);

0x9447  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9449  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(compareInstruction);

0x944C  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x944E  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // } // string                                          expression.hs:1930

0x9451  0x28 0x04       DECSP 0x04
0x9453  0x33 0x6F 0x01  JW 0x95C2 (+367)

                        // bool signedInt = Types.IsSignedIntType(leftType);

0x9456  0x44            PUSHI0
0x9457  0x4F            PUSHLOCALB02
0x9458  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x945A  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // switch (operation)                                   expression.hs:1934

0x945C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)

                        // case HopperToken.LT:                                 expression.hs:1936

0x945E  0x1A 0x16       PUSHIB 0x16
0x9460  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9462  0x05            EQ
0x9463  0x2E 0x54       JZB 0x94B7 (+84)

                        // switch (leftType)                                    expression.hs:1938

0x9465  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:1940

0x9466  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9469  0x1A 0x04       PUSHIB 0x04
0x946B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x946D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x946F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9471  0x2F 0x13       JNZB 0x9484 (+19)

                        // CodeStream.AddInstructionSysCall0("Long", "LT");

0x9473  0x37 0x01 0x06  PUSHIW 0x0601
0x9476  0x1A 0x04       PUSHIB 0x04
0x9478  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x947A  0x37 0x4C 0x54  PUSHIW 0x544C
0x947D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x947F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1943

0x9482  0x30 0x30       JB 0x94B2 (+48)

                        // case "float":                                        expression.hs:1944

0x9484  0x37 0x08 0x06  PUSHIW 0x0608
0x9487  0x1A 0x05       PUSHIB 0x05
0x9489  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x948B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x948D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x948F  0x2F 0x13       JNZB 0x94A2 (+19)

                        // CodeStream.AddInstructionSysCall0("Float", "LT");

0x9491  0x37 0x0F 0x06  PUSHIW 0x060F
0x9494  0x1A 0x05       PUSHIB 0x05
0x9496  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9498  0x37 0x4C 0x54  PUSHIW 0x544C
0x949B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x949D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1947

0x94A0  0x30 0x12       JB 0x94B2 (+18)

                        // if (signedInt)                                       expression.hs:1950

0x94A2  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x94A4  0x2E 0x09       JZB 0x94AD (+9)

                        // CodeStream.AddInstruction(Instruction.LTI);

0x94A6  0x1A 0x17       PUSHIB 0x17
0x94A8  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1953

0x94AB  0x30 0x07       JB 0x94B2 (+7)

                        // CodeStream.AddInstruction(Instruction.LT);           expression.hs:1956

0x94AD  0x1A 0x08       PUSHIB 0x08
0x94AF  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1959

0x94B2  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1960

0x94B4  0x33 0x0A 0x01  JW 0x95BE (+266)

                        // case HopperToken.LE:                                 expression.hs:1961

0x94B7  0x1A 0x19       PUSHIB 0x19
0x94B9  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x94BB  0x05            EQ
0x94BC  0x2E 0x54       JZB 0x9510 (+84)

                        // switch (leftType)                                    expression.hs:1963

0x94BE  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:1965

0x94BF  0x37 0xF7 0x05  PUSHIW 0x05F7
0x94C2  0x1A 0x04       PUSHIB 0x04
0x94C4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x94C6  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x94C8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x94CA  0x2F 0x13       JNZB 0x94DD (+19)

                        // CodeStream.AddInstructionSysCall0("Long", "LE");

0x94CC  0x37 0x01 0x06  PUSHIW 0x0601
0x94CF  0x1A 0x04       PUSHIB 0x04
0x94D1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x94D3  0x37 0x4C 0x45  PUSHIW 0x454C
0x94D6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x94D8  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1968

0x94DB  0x30 0x30       JB 0x950B (+48)

                        // case "float":                                        expression.hs:1969

0x94DD  0x37 0x08 0x06  PUSHIW 0x0608
0x94E0  0x1A 0x05       PUSHIB 0x05
0x94E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x94E4  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x94E6  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x94E8  0x2F 0x13       JNZB 0x94FB (+19)

                        // CodeStream.AddInstructionSysCall0("Float", "LE");

0x94EA  0x37 0x0F 0x06  PUSHIW 0x060F
0x94ED  0x1A 0x05       PUSHIB 0x05
0x94EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x94F1  0x37 0x4C 0x45  PUSHIW 0x454C
0x94F4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x94F6  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1972

0x94F9  0x30 0x12       JB 0x950B (+18)

                        // if (signedInt)                                       expression.hs:1975

0x94FB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x94FD  0x2E 0x09       JZB 0x9506 (+9)

                        // CodeStream.AddInstruction(Instruction.LEI);

0x94FF  0x1A 0x19       PUSHIB 0x19
0x9501  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1978

0x9504  0x30 0x07       JB 0x950B (+7)

                        // CodeStream.AddInstruction(Instruction.LE);           expression.hs:1981

0x9506  0x1A 0x0A       PUSHIB 0x0A
0x9508  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1984

0x950B  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1985

0x950D  0x33 0xB1 0x00  JW 0x95BE (+177)

                        // case HopperToken.GT:                                 expression.hs:1986

0x9510  0x1A 0x17       PUSHIB 0x17
0x9512  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9514  0x05            EQ
0x9515  0x2E 0x53       JZB 0x9568 (+83)

                        // switch (leftType)                                    expression.hs:1988

0x9517  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:1990

0x9518  0x37 0xF7 0x05  PUSHIW 0x05F7
0x951B  0x1A 0x04       PUSHIB 0x04
0x951D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x951F  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x9521  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9523  0x2F 0x13       JNZB 0x9536 (+19)

                        // CodeStream.AddInstructionSysCall0("Long", "GT");

0x9525  0x37 0x01 0x06  PUSHIW 0x0601
0x9528  0x1A 0x04       PUSHIB 0x04
0x952A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x952C  0x37 0x47 0x54  PUSHIW 0x5447
0x952F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9531  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1993

0x9534  0x30 0x30       JB 0x9564 (+48)

                        // case "float":                                        expression.hs:1994

0x9536  0x37 0x08 0x06  PUSHIW 0x0608
0x9539  0x1A 0x05       PUSHIB 0x05
0x953B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x953D  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x953F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9541  0x2F 0x13       JNZB 0x9554 (+19)

                        // CodeStream.AddInstructionSysCall0("Float", "GT");

0x9543  0x37 0x0F 0x06  PUSHIW 0x060F
0x9546  0x1A 0x05       PUSHIB 0x05
0x9548  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x954A  0x37 0x47 0x54  PUSHIW 0x5447
0x954D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x954F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1997

0x9552  0x30 0x12       JB 0x9564 (+18)

                        // if (signedInt)                                       expression.hs:2000

0x9554  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9556  0x2E 0x09       JZB 0x955F (+9)

                        // CodeStream.AddInstruction(Instruction.GTI);

0x9558  0x1A 0x16       PUSHIB 0x16
0x955A  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2003

0x955D  0x30 0x07       JB 0x9564 (+7)

                        // CodeStream.AddInstruction(Instruction.GT);           expression.hs:2006

0x955F  0x1A 0x07       PUSHIB 0x07
0x9561  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2009

0x9564  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2010

0x9566  0x30 0x58       JB 0x95BE (+88)

                        // case HopperToken.GE:                                 expression.hs:2011

0x9568  0x1A 0x1A       PUSHIB 0x1A
0x956A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x956C  0x05            EQ
0x956D  0x2E 0x51       JZB 0x95BE (+81)

                        // switch (leftType)                                    expression.hs:2013

0x956F  0x4F            PUSHLOCALB02

                        // case "long":                                         expression.hs:2015

0x9570  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9573  0x1A 0x04       PUSHIB 0x04
0x9575  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9577  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x9579  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x957B  0x2F 0x13       JNZB 0x958E (+19)

                        // CodeStream.AddInstructionSysCall0("Long", "GE");

0x957D  0x37 0x01 0x06  PUSHIW 0x0601
0x9580  0x1A 0x04       PUSHIB 0x04
0x9582  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9584  0x37 0x47 0x45  PUSHIW 0x4547
0x9587  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9589  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:2018

0x958C  0x30 0x30       JB 0x95BC (+48)

                        // case "float":                                        expression.hs:2019

0x958E  0x37 0x08 0x06  PUSHIW 0x0608
0x9591  0x1A 0x05       PUSHIB 0x05
0x9593  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9595  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x9597  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9599  0x2F 0x13       JNZB 0x95AC (+19)

                        // CodeStream.AddInstructionSysCall0("Float", "GE");

0x959B  0x37 0x0F 0x06  PUSHIW 0x060F
0x959E  0x1A 0x05       PUSHIB 0x05
0x95A0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x95A2  0x37 0x47 0x45  PUSHIW 0x4547
0x95A5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x95A7  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:2022

0x95AA  0x30 0x12       JB 0x95BC (+18)

                        // if (signedInt)                                       expression.hs:2025

0x95AC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x95AE  0x2E 0x09       JZB 0x95B7 (+9)

                        // CodeStream.AddInstruction(Instruction.GEI);

0x95B0  0x1A 0x18       PUSHIB 0x18
0x95B2  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2028

0x95B5  0x30 0x07       JB 0x95BC (+7)

                        // CodeStream.AddInstruction(Instruction.GE);           expression.hs:2031

0x95B7  0x1A 0x09       PUSHIB 0x09
0x95B9  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:2034

0x95BC  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2036

0x95BE  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2037

0x95C0  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:2038

0x95C2  0x28 0x06       DECSP 0x06

                        // break;                                               expression.hs:2039

0x95C4  0x28 0x02       DECSP 0x02

                        // return actualType;                                   expression.hs:2041

0x95C6  0x4E            PUSHLOCALB00
0x95C7  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:1697
// ####  Expression.compileTerm(..)  ####                                       0x0103

0x95C9  0x49            ENTER

                        // string actualType;                                   expression.hs:1698

0x95CA  0x24 0x02       SYSCALL0 0x02  // String.New

                        // actualType = compileShift(expectedType);             expression.hs:1701

0x95CC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x95CE  0x34 0x02 0x01  CALLW 0x0102   // Expression.compileShift
0x95D1  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1702

0x95D2  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x95D4  0x32 0x28 0x02  JNZW 0x97FC (+552)

                        // if (Parser.Check(HopperToken.Add) || Parser.Check(HopperToken.Subtract))

0x95D7  0x1A 0x25       PUSHIB 0x25
0x95D9  0x2C 0x83       CALLB 0x83     // Parser.Check
0x95DB  0x27 0x00       DUP 0x00
0x95DD  0x2F 0x07       JNZB 0x95E4 (+7)
0x95DF  0x1A 0x26       PUSHIB 0x26
0x95E1  0x2C 0x83       CALLB 0x83     // Parser.Check
0x95E3  0x0B            BOOLOR
0x95E4  0x31 0x18 0x02  JZW 0x97FC (+536)

                        // <string,string> operationToken = Parser.CurrentToken;

0x95E7  0x1A 0x0F       PUSHIB 0x0F
0x95E9  0x1A 0x0F       PUSHIB 0x0F
0x95EB  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x95ED  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x95EF  0x5E            POPCOPYLOCALB02

                        // HopperToken operation = Token.GetType(operationToken);

0x95F0  0x44            PUSHI0
0x95F1  0x4F            PUSHLOCALB02
0x95F2  0x2C 0x49       CALLB 0x49     // Token.GetType
0x95F4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (!Types.IsNumericType(actualType))                expression.hs:1713

0x95F6  0x4E            PUSHLOCALB00
0x95F7  0x2C 0xD6       CALLB 0xD6     // Types.IsNumericType
0x95F9  0x2F 0x39       JNZB 0x9632 (+57)

                        // if ((operation == HopperToken.Add) && ((actualType == "string") || (actualType == "char")))

0x95FB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x95FD  0x1A 0x25       PUSHIB 0x25
0x95FF  0x05            EQ
0x9600  0x27 0x00       DUP 0x00
0x9602  0x2E 0x20       JZB 0x9622 (+32)
0x9604  0x4E            PUSHLOCALB00
0x9605  0x37 0x62 0x02  PUSHIW 0x0262
0x9608  0x1A 0x06       PUSHIB 0x06
0x960A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x960C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x960E  0x44            PUSHI0
0x960F  0x05            EQ
0x9610  0x27 0x00       DUP 0x00
0x9612  0x2F 0x0F       JNZB 0x9621 (+15)
0x9614  0x4E            PUSHLOCALB00
0x9615  0x37 0x15 0x04  PUSHIW 0x0415
0x9618  0x1A 0x04       PUSHIB 0x04
0x961A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x961C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x961E  0x44            PUSHI0
0x961F  0x05            EQ
0x9620  0x0B            BOOLOR
0x9621  0x0C            BOOLAND
0x9622  0x2F 0x10       JNZB 0x9632 (+16)

                        // Parser.ErrorAtCurrent("add and subtract operations only legal for numeric types");

0x9624  0x37 0xE0 0x11  PUSHIW 0x11E0
0x9627  0x1A 0x38       PUSHIB 0x38
0x9629  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x962B  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1722

0x962D  0x28 0x04       DECSP 0x04
0x962F  0x33 0xCD 0x01  JW 0x97FC (+461)

                        // Advance(); // +, -                                   expression.hs:1725

0x9632  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileShift(expectedType);

0x9634  0x24 0x02       SYSCALL0 0x02  // String.New
0x9636  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9638  0x34 0x02 0x01  CALLW 0x0102   // Expression.compileShift
0x963B  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (actualType != rightType)                         expression.hs:1727

0x963D  0x4E            PUSHLOCALB00
0x963E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9640  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9642  0x2E 0x65       JZB 0x96A7 (+101)

                        // if ((operation == HopperToken.Add) && ((rightType == "string") || (rightType == "char")))

0x9644  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9646  0x1A 0x25       PUSHIB 0x25
0x9648  0x05            EQ
0x9649  0x27 0x00       DUP 0x00
0x964B  0x2E 0x22       JZB 0x966D (+34)
0x964D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x964F  0x37 0x62 0x02  PUSHIW 0x0262
0x9652  0x1A 0x06       PUSHIB 0x06
0x9654  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9656  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9658  0x44            PUSHI0
0x9659  0x05            EQ
0x965A  0x27 0x00       DUP 0x00
0x965C  0x2F 0x10       JNZB 0x966C (+16)
0x965E  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9660  0x37 0x15 0x04  PUSHIW 0x0415
0x9663  0x1A 0x04       PUSHIB 0x04
0x9665  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9667  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9669  0x44            PUSHI0
0x966A  0x05            EQ
0x966B  0x0B            BOOLOR
0x966C  0x0C            BOOLAND
0x966D  0x2F 0x3A       JNZB 0x96A7 (+58)

                        // else if (Types.AutomaticUpCastTop(rightType, actualType))

0x966F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9671  0x4E            PUSHLOCALB00
0x9672  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x9674  0x2E 0x07       JZB 0x967B (+7)

                        // rightType = actualType;                              expression.hs:1735

0x9676  0x4E            PUSHLOCALB00
0x9677  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    expression.hs:1736

0x9679  0x30 0x2E       JB 0x96A7 (+46)

                        // else if (Types.AutomaticUpCastNext(actualType, rightType))

0x967B  0x4E            PUSHLOCALB00
0x967C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x967E  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x9680  0x2E 0x07       JZB 0x9687 (+7)

                        // actualType = rightType;                              expression.hs:1739

0x9682  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9684  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1740

0x9685  0x30 0x22       JB 0x96A7 (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + actualType + "' expected (was '" + rightType + "')");

0x9687  0x37 0x26 0x11  PUSHIW 0x1126
0x968A  0x1A 0x10       PUSHIB 0x10
0x968C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x968E  0x4E            PUSHLOCALB00
0x968F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9691  0x37 0x36 0x11  PUSHIW 0x1136
0x9694  0x1A 0x11       PUSHIB 0x11
0x9696  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9698  0x24 0x03       SYSCALL0 0x03  // String.Append
0x969A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x969C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x969E  0x37 0x27 0x29  PUSHIW 0x2927
0x96A1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x96A3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x96A5  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:1746

0x96A7  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x96A9  0x2E 0x07       JZB 0x96B0 (+7)

                        // break;                                               expression.hs:1748

0x96AB  0x28 0x06       DECSP 0x06
0x96AD  0x33 0x4F 0x01  JW 0x97FC (+335)

                        // if (operation == HopperToken.Add)                    expression.hs:1750

0x96B0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x96B2  0x1A 0x25       PUSHIB 0x25
0x96B4  0x05            EQ
0x96B5  0x31 0xEF 0x00  JZW 0x97A4 (+239)

                        // switch (actualType)                                  expression.hs:1752

0x96B8  0x4E            PUSHLOCALB00

                        // case "string":                                       expression.hs:1754

0x96B9  0x37 0x62 0x02  PUSHIW 0x0262
0x96BC  0x1A 0x06       PUSHIB 0x06
0x96BE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x96C0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x96C2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x96C4  0x2F 0x42       JNZB 0x9706 (+66)

                        // byte iSysCall;                                       expression.hs:1756

0x96C6  0x44            PUSHI0

                        // if (!TryParseSysCall("String.Append", ref iSysCall))

0x96C7  0x37 0x18 0x12  PUSHIW 0x1218
0x96CA  0x1A 0x0D       PUSHIB 0x0D
0x96CC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x96CE  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x96D0  0x2C 0x89       CALLB 0x89     // SysCalls.TryParseSysCall
0x96D2  0x2F 0x06       JNZB 0x96D8 (+6)

                        // Die(3); // key not found                             expression.hs:1759

0x96D4  0x1A 0x03       PUSHIB 0x03
0x96D6  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // if (rightType == "char")                             expression.hs:1761

0x96D8  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x96DA  0x37 0x15 0x04  PUSHIW 0x0415
0x96DD  0x1A 0x04       PUSHIB 0x04
0x96DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x96E1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x96E3  0x2F 0x0B       JNZB 0x96EE (+11)

                        // CodeStream.AddInstruction(Instruction.SYSCALL1, iSysCall);

0x96E5  0x1A 0x25       PUSHIB 0x25
0x96E7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x96E9  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1767

0x96EC  0x30 0x15       JB 0x9701 (+21)

                        // if (!TryUserSysCall("String.Append"))                expression.hs:1771

0x96EE  0x37 0x18 0x12  PUSHIW 0x1218
0x96F1  0x1A 0x0D       PUSHIB 0x0D
0x96F3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x96F5  0x34 0x30 0x01  CALLW 0x0130   // CodeStream.TryUserSysCall
0x96F8  0x2F 0x09       JNZB 0x9701 (+9)

                        // CodeStream.AddInstruction(Instruction.SYSCALL0, iSysCall);

0x96FA  0x1A 0x24       PUSHIB 0x24
0x96FC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x96FE  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1776

0x9701  0x28 0x02       DECSP 0x02
0x9703  0x33 0x9D 0x00  JW 0x97A0 (+157)

                        // case "char":                                         expression.hs:1777

0x9706  0x37 0x15 0x04  PUSHIW 0x0415
0x9709  0x1A 0x04       PUSHIB 0x04
0x970B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x970D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x970F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9711  0x2F 0x3F       JNZB 0x9750 (+63)

                        // if (rightType == "string")                           expression.hs:1779

0x9713  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9715  0x37 0x62 0x02  PUSHIW 0x0262
0x9718  0x1A 0x06       PUSHIB 0x06
0x971A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x971C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x971E  0x2F 0x24       JNZB 0x9742 (+36)

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9720  0x1A 0x43       PUSHIB 0x43
0x9722  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9725  0x1A 0x44       PUSHIB 0x44
0x9727  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x972A  0x1A 0x43       PUSHIB 0x43
0x972C  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("String", "InsertChar");

0x972F  0x37 0xDD 0x04  PUSHIW 0x04DD
0x9732  0x1A 0x06       PUSHIB 0x06
0x9734  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9736  0x37 0x38 0x07  PUSHIW 0x0738
0x9739  0x1A 0x0A       PUSHIB 0x0A
0x973B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x973D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1786

0x9740  0x30 0x06       JB 0x9746 (+6)

                        // Die(0x0A);                                           expression.hs:1789

0x9742  0x1A 0x0A       PUSHIB 0x0A
0x9744  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // actualType = "string";                               expression.hs:1791

0x9746  0x37 0x62 0x02  PUSHIW 0x0262
0x9749  0x1A 0x06       PUSHIB 0x06
0x974B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x974D  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1792

0x974E  0x30 0x52       JB 0x97A0 (+82)

                        // case "long":                                         expression.hs:1793

0x9750  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9753  0x1A 0x04       PUSHIB 0x04
0x9755  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9757  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9759  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x975B  0x2F 0x15       JNZB 0x9770 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "Add");

0x975D  0x37 0x01 0x06  PUSHIW 0x0601
0x9760  0x1A 0x04       PUSHIB 0x04
0x9762  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9764  0x37 0x05 0x06  PUSHIW 0x0605
0x9767  0x1A 0x03       PUSHIB 0x03
0x9769  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x976B  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1796

0x976E  0x30 0x32       JB 0x97A0 (+50)

                        // case "float":                                        expression.hs:1797

0x9770  0x37 0x08 0x06  PUSHIW 0x0608
0x9773  0x1A 0x05       PUSHIB 0x05
0x9775  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9777  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9779  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x977B  0x2F 0x15       JNZB 0x9790 (+21)

                        // CodeStream.AddInstructionSysCall0("Float", "Add");

0x977D  0x37 0x0F 0x06  PUSHIW 0x060F
0x9780  0x1A 0x05       PUSHIB 0x05
0x9782  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9784  0x37 0x05 0x06  PUSHIW 0x0605
0x9787  0x1A 0x03       PUSHIB 0x03
0x9789  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x978B  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1800

0x978E  0x30 0x12       JB 0x97A0 (+18)

                        // if (Types.IsSignedIntType(actualType))               expression.hs:1803

0x9790  0x4E            PUSHLOCALB00
0x9791  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x9793  0x2E 0x09       JZB 0x979C (+9)

                        // CodeStream.AddInstruction(Instruction.ADDI);

0x9795  0x1A 0x11       PUSHIB 0x11
0x9797  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1806

0x979A  0x30 0x06       JB 0x97A0 (+6)

                        // CodeStream.AddInstruction(Instruction.ADD);

0x979C  0x44            PUSHI0
0x979D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1812

0x97A0  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1813

0x97A2  0x30 0x55       JB 0x97F7 (+85)

                        // switch (actualType)                                  expression.hs:1817

0x97A4  0x4E            PUSHLOCALB00

                        // case "long":                                         expression.hs:1819

0x97A5  0x37 0xF7 0x05  PUSHIW 0x05F7
0x97A8  0x1A 0x04       PUSHIB 0x04
0x97AA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97AC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x97AE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x97B0  0x2F 0x15       JNZB 0x97C5 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "Sub");

0x97B2  0x37 0x01 0x06  PUSHIW 0x0601
0x97B5  0x1A 0x04       PUSHIB 0x04
0x97B7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97B9  0x37 0x14 0x06  PUSHIW 0x0614
0x97BC  0x1A 0x03       PUSHIB 0x03
0x97BE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97C0  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1822

0x97C3  0x30 0x32       JB 0x97F5 (+50)

                        // case "float":                                        expression.hs:1823

0x97C5  0x37 0x08 0x06  PUSHIW 0x0608
0x97C8  0x1A 0x05       PUSHIB 0x05
0x97CA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97CC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x97CE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x97D0  0x2F 0x15       JNZB 0x97E5 (+21)

                        // CodeStream.AddInstructionSysCall0("Float", "Sub");

0x97D2  0x37 0x0F 0x06  PUSHIW 0x060F
0x97D5  0x1A 0x05       PUSHIB 0x05
0x97D7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97D9  0x37 0x14 0x06  PUSHIW 0x0614
0x97DC  0x1A 0x03       PUSHIB 0x03
0x97DE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x97E0  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1826

0x97E3  0x30 0x12       JB 0x97F5 (+18)

                        // if (Types.IsSignedIntType(actualType))               expression.hs:1829

0x97E5  0x4E            PUSHLOCALB00
0x97E6  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x97E8  0x2E 0x09       JZB 0x97F1 (+9)

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x97EA  0x1A 0x12       PUSHIB 0x12
0x97EC  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1832

0x97EF  0x30 0x06       JB 0x97F5 (+6)

                        // CodeStream.AddInstruction(Instruction.SUB);

0x97F1  0x45            PUSHI1
0x97F2  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1838

0x97F5  0x28 0x02       DECSP 0x02

                        // continue;                                            expression.hs:1840

0x97F7  0x28 0x06       DECSP 0x06
0x97F9  0x33 0xDE 0xFD  JW 0x95D7 (-546)

                        // return actualType;                                   expression.hs:1846

0x97FC  0x4E            PUSHLOCALB00
0x97FD  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:1635
// ####  Expression.compileShift(..)  ####                                      0x0102

0x97FF  0x49            ENTER

                        // string actualType;                                   expression.hs:1636

0x9800  0x24 0x02       SYSCALL0 0x02  // String.New

                        // actualType = compileFactor(expectedType);            expression.hs:1639

0x9802  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9804  0x34 0x01 0x01  CALLW 0x0101   // Expression.compileFactor
0x9807  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1640

0x9808  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x980A  0x32 0xD5 0x00  JNZW 0x98DF (+213)

                        // if (Parser.Check(HopperToken.ShiftRight) || Parser.Check(HopperToken.ShiftLeft))

0x980D  0x1A 0x1D       PUSHIB 0x1D
0x980F  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9811  0x27 0x00       DUP 0x00
0x9813  0x2F 0x07       JNZB 0x981A (+7)
0x9815  0x1A 0x1C       PUSHIB 0x1C
0x9817  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9819  0x0B            BOOLOR
0x981A  0x31 0xC5 0x00  JZW 0x98DF (+197)

                        // if ((actualType != "byte")                           expression.hs:1649

0x981D  0x4E            PUSHLOCALB00
0x981E  0x37 0x51 0x05  PUSHIW 0x0551
0x9821  0x1A 0x04       PUSHIB 0x04
0x9823  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9825  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9827  0x44            PUSHI0
0x9828  0x06            NE
0x9829  0x27 0x00       DUP 0x00
0x982B  0x2E 0x42       JZB 0x986D (+66)
0x982D  0x4E            PUSHLOCALB00
0x982E  0x37 0x2F 0x02  PUSHIW 0x022F
0x9831  0x1A 0x04       PUSHIB 0x04
0x9833  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9835  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9837  0x44            PUSHI0
0x9838  0x06            NE
0x9839  0x0C            BOOLAND
0x983A  0x27 0x00       DUP 0x00
0x983C  0x2E 0x31       JZB 0x986D (+49)
0x983E  0x4E            PUSHLOCALB00
0x983F  0x37 0x30 0x02  PUSHIW 0x0230
0x9842  0x1A 0x03       PUSHIB 0x03
0x9844  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9846  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9848  0x44            PUSHI0
0x9849  0x06            NE
0x984A  0x0C            BOOLAND
0x984B  0x27 0x00       DUP 0x00
0x984D  0x2E 0x20       JZB 0x986D (+32)
0x984F  0x4E            PUSHLOCALB00
0x9850  0x37 0x24 0x10  PUSHIW 0x1024
0x9853  0x1A 0x04       PUSHIB 0x04
0x9855  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9857  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9859  0x44            PUSHI0
0x985A  0x06            NE
0x985B  0x0C            BOOLAND
0x985C  0x27 0x00       DUP 0x00
0x985E  0x2E 0x0F       JZB 0x986D (+15)
0x9860  0x4E            PUSHLOCALB00
0x9861  0x37 0x29 0x10  PUSHIW 0x1029
0x9864  0x1A 0x04       PUSHIB 0x04
0x9866  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9868  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x986A  0x44            PUSHI0
0x986B  0x06            NE
0x986C  0x0C            BOOLAND
0x986D  0x2E 0x0D       JZB 0x987A (+13)

                        // Parser.ErrorAtCurrent("shift operations only legal for integral types");

0x986F  0x37 0x25 0x12  PUSHIW 0x1225
0x9872  0x1A 0x2E       PUSHIB 0x2E
0x9874  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9876  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1657

0x9878  0x30 0x67       JB 0x98DF (+103)

                        // <string,string> operationToken = Parser.CurrentToken;

0x987A  0x1A 0x0F       PUSHIB 0x0F
0x987C  0x1A 0x0F       PUSHIB 0x0F
0x987E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x9880  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x9882  0x5E            POPCOPYLOCALB02

                        // HopperToken operation = Token.GetType(operationToken);

0x9883  0x44            PUSHI0
0x9884  0x4F            PUSHLOCALB02
0x9885  0x2C 0x49       CALLB 0x49     // Token.GetType
0x9887  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // Advance(); // <<, >>                                 expression.hs:1663

0x9889  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string shiftValue = ParseConstantExpression("byte"); // constant expression

0x988B  0x24 0x02       SYSCALL0 0x02  // String.New
0x988D  0x37 0x51 0x05  PUSHIW 0x0551
0x9890  0x1A 0x04       PUSHIB 0x04
0x9892  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9894  0x34 0x0C 0x01  CALLW 0x010C   // Constant.ParseConstantExpression
0x9897  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (Parser.HadError)                                 expression.hs:1666

0x9899  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x989B  0x2E 0x06       JZB 0x98A1 (+6)

                        // break;                                               expression.hs:1668

0x989D  0x28 0x06       DECSP 0x06
0x989F  0x30 0x40       JB 0x98DF (+64)

                        // uint iShift;                                         expression.hs:1670

0x98A1  0x44            PUSHI0

                        // if (Token.TryParseUInt(shiftValue, ref iShift))

0x98A2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x98A4  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0x98A6  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0x98A8  0x2E 0x02       JZB 0x98AA (+2)

                        // if ((iShift < 0) || (iShift > 16))                   expression.hs:1674

0x98AA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x98AC  0x44            PUSHI0
0x98AD  0x08            LT
0x98AE  0x27 0x00       DUP 0x00
0x98B0  0x2F 0x08       JNZB 0x98B8 (+8)
0x98B2  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x98B4  0x1A 0x10       PUSHIB 0x10
0x98B6  0x07            GT
0x98B7  0x0B            BOOLOR
0x98B8  0x2E 0x0B       JZB 0x98C3 (+11)

                        // Parser.ErrorAtCurrent("shift operand must be between 0 and 16");

0x98BA  0x37 0x53 0x12  PUSHIW 0x1253
0x98BD  0x1A 0x26       PUSHIB 0x26
0x98BF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x98C1  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // CodeStream.AddInstructionPUSHI(byte(iShift));

0x98C3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x98C5  0x51 0x03       CAST 0x03
0x98C7  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // if (operation == HopperToken.ShiftRight)             expression.hs:1679

0x98CA  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x98CC  0x1A 0x1D       PUSHIB 0x1D
0x98CE  0x05            EQ
0x98CF  0x2E 0x09       JZB 0x98D8 (+9)

                        // CodeStream.AddInstruction(Instruction.BITSHR);

0x98D1  0x1A 0x10       PUSHIB 0x10
0x98D3  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1682

0x98D6  0x30 0x07       JB 0x98DD (+7)

                        // CodeStream.AddInstruction(Instruction.BITSHL);

0x98D8  0x1A 0x0F       PUSHIB 0x0F
0x98DA  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1688

0x98DD  0x28 0x08       DECSP 0x08

                        // return actualType;                                   expression.hs:1693

0x98DF  0x4E            PUSHLOCALB00
0x98E0  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:1504
// ####  Expression.compileFactor(..)  ####                                     0x0101

0x98E2  0x49            ENTER

                        // string actualType;                                   expression.hs:1505

0x98E3  0x24 0x02       SYSCALL0 0x02  // String.New

                        // actualType = compileUnary(expectedType);             expression.hs:1508

0x98E5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x98E7  0x34 0x00 0x01  CALLW 0x0100   // Expression.compileUnary
0x98EA  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1509

0x98EB  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x98ED  0x32 0xAA 0x01  JNZW 0x9A97 (+426)

                        // if (Parser.Check(HopperToken.Multiply) || Parser.Check(HopperToken.Divide) || Parser.Check(HopperToken.Modulus))

0x98F0  0x1A 0x27       PUSHIB 0x27
0x98F2  0x2C 0x83       CALLB 0x83     // Parser.Check
0x98F4  0x27 0x00       DUP 0x00
0x98F6  0x2F 0x10       JNZB 0x9906 (+16)
0x98F8  0x1A 0x28       PUSHIB 0x28
0x98FA  0x2C 0x83       CALLB 0x83     // Parser.Check
0x98FC  0x0B            BOOLOR
0x98FD  0x27 0x00       DUP 0x00
0x98FF  0x2F 0x07       JNZB 0x9906 (+7)
0x9901  0x1A 0x29       PUSHIB 0x29
0x9903  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9905  0x0B            BOOLOR
0x9906  0x31 0x91 0x01  JZW 0x9A97 (+401)

                        // <string,string> operationToken = Parser.CurrentToken;

0x9909  0x1A 0x0F       PUSHIB 0x0F
0x990B  0x1A 0x0F       PUSHIB 0x0F
0x990D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x990F  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x9911  0x5E            POPCOPYLOCALB02

                        // HopperToken operation = Token.GetType(operationToken);

0x9912  0x44            PUSHI0
0x9913  0x4F            PUSHLOCALB02
0x9914  0x2C 0x49       CALLB 0x49     // Token.GetType
0x9916  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (!Types.IsNumericType(actualType))                expression.hs:1520

0x9918  0x4E            PUSHLOCALB00
0x9919  0x2C 0xD6       CALLB 0xD6     // Types.IsNumericType
0x991B  0x2F 0x10       JNZB 0x992B (+16)

                        // Parser.ErrorAtCurrent("multiply, divide and modulus operations only legal for numeric types");

0x991D  0x37 0x79 0x12  PUSHIW 0x1279
0x9920  0x1A 0x44       PUSHIB 0x44
0x9922  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9924  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1523

0x9926  0x28 0x04       DECSP 0x04
0x9928  0x33 0x6F 0x01  JW 0x9A97 (+367)

                        // Advance(); // *, /, %                                expression.hs:1525

0x992B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string rightType = compileUnary(expectedType);

0x992D  0x24 0x02       SYSCALL0 0x02  // String.New
0x992F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9931  0x34 0x00 0x01  CALLW 0x0100   // Expression.compileUnary
0x9934  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (actualType != rightType)                         expression.hs:1527

0x9936  0x4E            PUSHLOCALB00
0x9937  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9939  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x993B  0x2E 0x3A       JZB 0x9975 (+58)

                        // if (Types.AutomaticUpCastTop(rightType, actualType))

0x993D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x993F  0x4E            PUSHLOCALB00
0x9940  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x9942  0x2E 0x07       JZB 0x9949 (+7)

                        // rightType = actualType;                              expression.hs:1531

0x9944  0x4E            PUSHLOCALB00
0x9945  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    expression.hs:1532

0x9947  0x30 0x2E       JB 0x9975 (+46)

                        // else if (Types.AutomaticUpCastNext(actualType, rightType))

0x9949  0x4E            PUSHLOCALB00
0x994A  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x994C  0x2C 0xD5       CALLB 0xD5     // Types.AutomaticUpCastNext
0x994E  0x2E 0x07       JZB 0x9955 (+7)

                        // actualType = rightType;                              expression.hs:1535

0x9950  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9952  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1536

0x9953  0x30 0x22       JB 0x9975 (+34)

                        // Parser.ErrorAtCurrent("type mismatch, '" + actualType + "' expected (was '" + rightType + "')");

0x9955  0x37 0x26 0x11  PUSHIW 0x1126
0x9958  0x1A 0x10       PUSHIB 0x10
0x995A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x995C  0x4E            PUSHLOCALB00
0x995D  0x24 0x03       SYSCALL0 0x03  // String.Append
0x995F  0x37 0x36 0x11  PUSHIW 0x1136
0x9962  0x1A 0x11       PUSHIB 0x11
0x9964  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9966  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9968  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x996A  0x24 0x03       SYSCALL0 0x03  // String.Append
0x996C  0x37 0x27 0x29  PUSHIW 0x2927
0x996F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9971  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9973  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (Parser.HadError)                                 expression.hs:1542

0x9975  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9977  0x2E 0x07       JZB 0x997E (+7)

                        // break;                                               expression.hs:1544

0x9979  0x28 0x06       DECSP 0x06
0x997B  0x33 0x1C 0x01  JW 0x9A97 (+284)

                        // switch (operation)                                   expression.hs:1546

0x997E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)

                        // case HopperToken.Multiply:                           expression.hs:1548

0x9980  0x1A 0x27       PUSHIB 0x27
0x9982  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9984  0x05            EQ
0x9985  0x2E 0x59       JZB 0x99DE (+89)

                        // switch (actualType)                                  expression.hs:1550

0x9987  0x4E            PUSHLOCALB00

                        // case "long":                                         expression.hs:1552

0x9988  0x37 0xF7 0x05  PUSHIW 0x05F7
0x998B  0x1A 0x04       PUSHIB 0x04
0x998D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x998F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9991  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9993  0x2F 0x15       JNZB 0x99A8 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "Mul");

0x9995  0x37 0x01 0x06  PUSHIW 0x0601
0x9998  0x1A 0x04       PUSHIB 0x04
0x999A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x999C  0x37 0xFD 0x07  PUSHIW 0x07FD
0x999F  0x1A 0x03       PUSHIB 0x03
0x99A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99A3  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1555

0x99A6  0x30 0x33       JB 0x99D9 (+51)

                        // case "float":                                        expression.hs:1556

0x99A8  0x37 0x08 0x06  PUSHIW 0x0608
0x99AB  0x1A 0x05       PUSHIB 0x05
0x99AD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99AF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x99B1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x99B3  0x2F 0x15       JNZB 0x99C8 (+21)

                        // CodeStream.AddInstructionSysCall0("Float", "Mul");

0x99B5  0x37 0x0F 0x06  PUSHIW 0x060F
0x99B8  0x1A 0x05       PUSHIB 0x05
0x99BA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99BC  0x37 0xFD 0x07  PUSHIW 0x07FD
0x99BF  0x1A 0x03       PUSHIB 0x03
0x99C1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99C3  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1559

0x99C6  0x30 0x13       JB 0x99D9 (+19)

                        // if (Types.IsSignedIntType(actualType))               expression.hs:1562

0x99C8  0x4E            PUSHLOCALB00
0x99C9  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x99CB  0x2E 0x09       JZB 0x99D4 (+9)

                        // CodeStream.AddInstruction(Instruction.MULI);

0x99CD  0x1A 0x14       PUSHIB 0x14
0x99CF  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1565

0x99D2  0x30 0x07       JB 0x99D9 (+7)

                        // CodeStream.AddInstruction(Instruction.MUL);

0x99D4  0x1A 0x03       PUSHIB 0x03
0x99D6  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1571

0x99D9  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1572

0x99DB  0x33 0xB5 0x00  JW 0x9A90 (+181)

                        // case HopperToken.Divide:                             expression.hs:1573

0x99DE  0x1A 0x28       PUSHIB 0x28
0x99E0  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x99E2  0x05            EQ
0x99E3  0x2E 0x58       JZB 0x9A3B (+88)

                        // switch (actualType)                                  expression.hs:1575

0x99E5  0x4E            PUSHLOCALB00

                        // case "long":                                         expression.hs:1577

0x99E6  0x37 0xF7 0x05  PUSHIW 0x05F7
0x99E9  0x1A 0x04       PUSHIB 0x04
0x99EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99ED  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x99EF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x99F1  0x2F 0x15       JNZB 0x9A06 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "Div");

0x99F3  0x37 0x01 0x06  PUSHIW 0x0601
0x99F6  0x1A 0x04       PUSHIB 0x04
0x99F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x99FA  0x37 0xFA 0x07  PUSHIW 0x07FA
0x99FD  0x1A 0x03       PUSHIB 0x03
0x99FF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A01  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1580

0x9A04  0x30 0x33       JB 0x9A37 (+51)

                        // case "float":                                        expression.hs:1581

0x9A06  0x37 0x08 0x06  PUSHIW 0x0608
0x9A09  0x1A 0x05       PUSHIB 0x05
0x9A0B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A0D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9A0F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9A11  0x2F 0x15       JNZB 0x9A26 (+21)

                        // CodeStream.AddInstructionSysCall0("Float", "Div");

0x9A13  0x37 0x0F 0x06  PUSHIW 0x060F
0x9A16  0x1A 0x05       PUSHIB 0x05
0x9A18  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A1A  0x37 0xFA 0x07  PUSHIW 0x07FA
0x9A1D  0x1A 0x03       PUSHIB 0x03
0x9A1F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A21  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1584

0x9A24  0x30 0x13       JB 0x9A37 (+19)

                        // if (Types.IsSignedIntType(actualType))               expression.hs:1587

0x9A26  0x4E            PUSHLOCALB00
0x9A27  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x9A29  0x2E 0x09       JZB 0x9A32 (+9)

                        // CodeStream.AddInstruction(Instruction.DIVI);

0x9A2B  0x1A 0x13       PUSHIB 0x13
0x9A2D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1590

0x9A30  0x30 0x07       JB 0x9A37 (+7)

                        // CodeStream.AddInstruction(Instruction.DIV);

0x9A32  0x1A 0x02       PUSHIB 0x02
0x9A34  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1596

0x9A37  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1597

0x9A39  0x30 0x57       JB 0x9A90 (+87)

                        // case HopperToken.Modulus:                            expression.hs:1598

0x9A3B  0x1A 0x29       PUSHIB 0x29
0x9A3D  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9A3F  0x05            EQ
0x9A40  0x2E 0x50       JZB 0x9A90 (+80)

                        // switch (actualType)                                  expression.hs:1600

0x9A42  0x4E            PUSHLOCALB00

                        // case "long":                                         expression.hs:1602

0x9A43  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9A46  0x1A 0x04       PUSHIB 0x04
0x9A48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A4A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9A4C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9A4E  0x2F 0x15       JNZB 0x9A63 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "Mod");

0x9A50  0x37 0x01 0x06  PUSHIW 0x0601
0x9A53  0x1A 0x04       PUSHIB 0x04
0x9A55  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A57  0x37 0x00 0x08  PUSHIW 0x0800
0x9A5A  0x1A 0x03       PUSHIB 0x03
0x9A5C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A5E  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1605

0x9A61  0x30 0x2D       JB 0x9A8E (+45)

                        // case "float":                                        expression.hs:1606

0x9A63  0x37 0x08 0x06  PUSHIW 0x0608
0x9A66  0x1A 0x05       PUSHIB 0x05
0x9A68  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A6A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9A6C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9A6E  0x2F 0x0F       JNZB 0x9A7D (+15)

                        // Parser.ErrorAtCurrent("modulus operation not legal for 'float'");

0x9A70  0x37 0xBD 0x12  PUSHIW 0x12BD
0x9A73  0x1A 0x27       PUSHIB 0x27
0x9A75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9A77  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1609

0x9A79  0x28 0x0A       DECSP 0x0A
0x9A7B  0x30 0x1C       JB 0x9A97 (+28)

                        // if (Types.IsSignedIntType(actualType))               expression.hs:1613

0x9A7D  0x4E            PUSHLOCALB00
0x9A7E  0x2C 0xD7       CALLB 0xD7     // Types.IsSignedIntType
0x9A80  0x2E 0x09       JZB 0x9A89 (+9)

                        // CodeStream.AddInstruction(Instruction.MODI);

0x9A82  0x1A 0x15       PUSHIB 0x15
0x9A84  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1616

0x9A87  0x30 0x07       JB 0x9A8E (+7)

                        // CodeStream.AddInstruction(Instruction.MOD);

0x9A89  0x1A 0x04       PUSHIB 0x04
0x9A8B  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1622

0x9A8E  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1624

0x9A90  0x28 0x02       DECSP 0x02

                        // continue;                                            expression.hs:1625

0x9A92  0x28 0x06       DECSP 0x06
0x9A94  0x33 0x5C 0xFE  JW 0x98F0 (-420)

                        // return actualType;                                   expression.hs:1631

0x9A97  0x4E            PUSHLOCALB00
0x9A98  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:1378
// ####  Expression.compileUnary(..)  ####                                      0x0100

0x9A9A  0x49            ENTER

                        // string actualType;                                   expression.hs:1379

0x9A9B  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <string,string> operationToken = Parser.CurrentToken;

0x9A9D  0x1A 0x0F       PUSHIB 0x0F
0x9A9F  0x1A 0x0F       PUSHIB 0x0F
0x9AA1  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x9AA3  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x9AA5  0x5E            POPCOPYLOCALB02

                        // HopperToken operation = HopperToken.Undefined;

0x9AA6  0x44            PUSHI0
0x9AA7  0x44            PUSHI0
0x9AA8  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (Parser.Check(HopperToken.Subtract))              expression.hs:1384

0x9AAA  0x1A 0x26       PUSHIB 0x26
0x9AAC  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9AAE  0x2E 0x0A       JZB 0x9AB8 (+10)

                        // Parser.Advance();                                    expression.hs:1386

0x9AB0  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // operation = HopperToken.Subtract;                    expression.hs:1387

0x9AB2  0x1A 0x26       PUSHIB 0x26
0x9AB4  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    expression.hs:1388

0x9AB6  0x30 0x2A       JB 0x9AE0 (+42)

                        // else if (Parser.Check(HopperToken.Add))              expression.hs:1389

0x9AB8  0x1A 0x25       PUSHIB 0x25
0x9ABA  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9ABC  0x2E 0x0A       JZB 0x9AC6 (+10)

                        // Parser.Advance();                                    expression.hs:1391

0x9ABE  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // operation = HopperToken.Add;                         expression.hs:1392

0x9AC0  0x1A 0x25       PUSHIB 0x25
0x9AC2  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    expression.hs:1393

0x9AC4  0x30 0x1C       JB 0x9AE0 (+28)

                        // else if (Parser.Check(HopperToken.BooleanNot))

0x9AC6  0x1A 0x20       PUSHIB 0x20
0x9AC8  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9ACA  0x2E 0x0A       JZB 0x9AD4 (+10)

                        // Parser.Advance();                                    expression.hs:1396

0x9ACC  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // operation = HopperToken.BooleanNot;                  expression.hs:1397

0x9ACE  0x1A 0x20       PUSHIB 0x20
0x9AD0  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // }                                                    expression.hs:1398

0x9AD2  0x30 0x0E       JB 0x9AE0 (+14)

                        // else if (Parser.Check(HopperToken.BitNot))           expression.hs:1399

0x9AD4  0x1A 0x23       PUSHIB 0x23
0x9AD6  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9AD8  0x2E 0x08       JZB 0x9AE0 (+8)

                        // Parser.Advance();                                    expression.hs:1401

0x9ADA  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // operation = HopperToken.BitNot;                      expression.hs:1402

0x9ADC  0x1A 0x23       PUSHIB 0x23
0x9ADE  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // actualType = compilePrimary(expectedType);           expression.hs:1404

0x9AE0  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0x9AE2  0x2C 0xFF       CALLB 0xFF     // Expression.compilePrimary
0x9AE4  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1405

0x9AE5  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9AE7  0x2E 0x07       JZB 0x9AEE (+7)

                        // break;                                               expression.hs:1407

0x9AE9  0x28 0x04       DECSP 0x04
0x9AEB  0x33 0x0E 0x02  JW 0x9CF9 (+526)

                        // if ((operation == HopperToken.Subtract) || (operation == HopperToken.Add))

0x9AEE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9AF0  0x1A 0x26       PUSHIB 0x26
0x9AF2  0x05            EQ
0x9AF3  0x27 0x00       DUP 0x00
0x9AF5  0x2F 0x08       JNZB 0x9AFD (+8)
0x9AF7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9AF9  0x1A 0x25       PUSHIB 0x25
0x9AFB  0x05            EQ
0x9AFC  0x0B            BOOLOR
0x9AFD  0x31 0x68 0x01  JZW 0x9C65 (+360)

                        // if (!Types.IsNumericType(actualType))                expression.hs:1411

0x9B00  0x4E            PUSHLOCALB00
0x9B01  0x2C 0xD6       CALLB 0xD6     // Types.IsNumericType
0x9B03  0x2F 0x10       JNZB 0x9B13 (+16)

                        // Parser.ErrorAtCurrent("unary + and - only legal for numeric types");

0x9B05  0x37 0xE4 0x12  PUSHIW 0x12E4
0x9B08  0x1A 0x2A       PUSHIB 0x2A
0x9B0A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B0C  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1414

0x9B0E  0x28 0x04       DECSP 0x04
0x9B10  0x33 0xE9 0x01  JW 0x9CF9 (+489)

                        // if (operation == HopperToken.Subtract)               expression.hs:1416

0x9B13  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9B15  0x1A 0x26       PUSHIB 0x26
0x9B17  0x05            EQ
0x9B18  0x31 0xDF 0x01  JZW 0x9CF7 (+479)

                        // switch (actualType)                                  expression.hs:1418

0x9B1B  0x4E            PUSHLOCALB00

                        // case "long":                                         expression.hs:1420

0x9B1C  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9B1F  0x1A 0x04       PUSHIB 0x04
0x9B21  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B23  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9B25  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9B27  0x2F 0x16       JNZB 0x9B3D (+22)

                        // CodeStream.AddInstructionSysCall0("Long", "Negate");

0x9B29  0x37 0x01 0x06  PUSHIW 0x0601
0x9B2C  0x1A 0x04       PUSHIB 0x04
0x9B2E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B30  0x37 0x03 0x08  PUSHIW 0x0803
0x9B33  0x1A 0x06       PUSHIB 0x06
0x9B35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B37  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1423

0x9B3A  0x33 0x26 0x01  JW 0x9C60 (+294)

                        // case "float":                                        expression.hs:1424

0x9B3D  0x37 0x08 0x06  PUSHIW 0x0608
0x9B40  0x1A 0x05       PUSHIB 0x05
0x9B42  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B44  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9B46  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9B48  0x2F 0x31       JNZB 0x9B79 (+49)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9B4A  0x1A 0x44       PUSHIB 0x44
0x9B4C  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("UInt", "ToFloat");

0x9B4F  0x37 0xFB 0x05  PUSHIW 0x05FB
0x9B52  0x1A 0x04       PUSHIB 0x04
0x9B54  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B56  0x37 0x0D 0x06  PUSHIW 0x060D
0x9B59  0x1A 0x07       PUSHIB 0x07
0x9B5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B5D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9B60  0x1A 0x43       PUSHIB 0x43
0x9B62  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Float", "Sub");

0x9B65  0x37 0x0F 0x06  PUSHIW 0x060F
0x9B68  0x1A 0x05       PUSHIB 0x05
0x9B6A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B6C  0x37 0x14 0x06  PUSHIW 0x0614
0x9B6F  0x1A 0x03       PUSHIB 0x03
0x9B71  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B73  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:1430

0x9B76  0x33 0xEA 0x00  JW 0x9C60 (+234)

                        // case "byte":                                         expression.hs:1431

0x9B79  0x37 0x51 0x05  PUSHIW 0x0551
0x9B7C  0x1A 0x04       PUSHIB 0x04
0x9B7E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B80  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9B82  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9B84  0x2F 0x1C       JNZB 0x9BA0 (+28)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9B86  0x1A 0x44       PUSHIB 0x44
0x9B88  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9B8B  0x1A 0x43       PUSHIB 0x43
0x9B8D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x9B90  0x1A 0x12       PUSHIB 0x12
0x9B92  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "-int";                                 expression.hs:1436

0x9B95  0x37 0x29 0x10  PUSHIW 0x1029
0x9B98  0x1A 0x04       PUSHIB 0x04
0x9B9A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9B9C  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1437

0x9B9D  0x33 0xC3 0x00  JW 0x9C60 (+195)

                        // case "int":                                          expression.hs:1438

0x9BA0  0x37 0x30 0x02  PUSHIW 0x0230
0x9BA3  0x1A 0x03       PUSHIB 0x03
0x9BA5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9BA7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9BA9  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9BAB  0x2F 0x1C       JNZB 0x9BC7 (+28)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9BAD  0x1A 0x44       PUSHIB 0x44
0x9BAF  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9BB2  0x1A 0x43       PUSHIB 0x43
0x9BB4  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x9BB7  0x1A 0x12       PUSHIB 0x12
0x9BB9  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "int";                                  expression.hs:1443

0x9BBC  0x37 0x30 0x02  PUSHIW 0x0230
0x9BBF  0x1A 0x03       PUSHIB 0x03
0x9BC1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9BC3  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1444

0x9BC4  0x33 0x9C 0x00  JW 0x9C60 (+156)

                        // case "-int":                                         expression.hs:1445

0x9BC7  0x37 0x29 0x10  PUSHIW 0x1029
0x9BCA  0x1A 0x04       PUSHIB 0x04
0x9BCC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9BCE  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9BD0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9BD2  0x2F 0x1C       JNZB 0x9BEE (+28)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9BD4  0x1A 0x44       PUSHIB 0x44
0x9BD6  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9BD9  0x1A 0x43       PUSHIB 0x43
0x9BDB  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x9BDE  0x1A 0x12       PUSHIB 0x12
0x9BE0  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "+int";                                 expression.hs:1450

0x9BE3  0x37 0x24 0x10  PUSHIW 0x1024
0x9BE6  0x1A 0x04       PUSHIB 0x04
0x9BE8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9BEA  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1451

0x9BEB  0x33 0x75 0x00  JW 0x9C60 (+117)

                        // case "+int":                                         expression.hs:1452

0x9BEE  0x37 0x24 0x10  PUSHIW 0x1024
0x9BF1  0x1A 0x04       PUSHIB 0x04
0x9BF3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9BF5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9BF7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9BF9  0x2F 0x1B       JNZB 0x9C14 (+27)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9BFB  0x1A 0x44       PUSHIB 0x44
0x9BFD  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SWAP);

0x9C00  0x1A 0x43       PUSHIB 0x43
0x9C02  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.SUBI);

0x9C05  0x1A 0x12       PUSHIB 0x12
0x9C07  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "int";                                  expression.hs:1457

0x9C0A  0x37 0x30 0x02  PUSHIW 0x0230
0x9C0D  0x1A 0x03       PUSHIB 0x03
0x9C0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C11  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1458

0x9C12  0x30 0x4E       JB 0x9C60 (+78)

                        // case "uint":                                         expression.hs:1459

0x9C14  0x37 0x2F 0x02  PUSHIW 0x022F
0x9C17  0x1A 0x04       PUSHIB 0x04
0x9C19  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C1B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0x9C1D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9C1F  0x2F 0x2E       JNZB 0x9C4D (+46)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0x9C21  0x37 0xFB 0x05  PUSHIW 0x05FB
0x9C24  0x1A 0x04       PUSHIB 0x04
0x9C26  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C28  0x37 0xFF 0x05  PUSHIW 0x05FF
0x9C2B  0x1A 0x06       PUSHIB 0x06
0x9C2D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C2F  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionSysCall0("Long", "Negate");

0x9C32  0x37 0x01 0x06  PUSHIW 0x0601
0x9C35  0x1A 0x04       PUSHIB 0x04
0x9C37  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C39  0x37 0x03 0x08  PUSHIW 0x0803
0x9C3C  0x1A 0x06       PUSHIB 0x06
0x9C3E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C40  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "long";                                 expression.hs:1463

0x9C43  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9C46  0x1A 0x04       PUSHIB 0x04
0x9C48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C4A  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1464

0x9C4B  0x30 0x15       JB 0x9C60 (+21)

                        // Parser.ErrorAtCurrent("unary + and - only legal for numeric types, (not '" + actualType + "')");

0x9C4D  0x37 0x0E 0x13  PUSHIW 0x130E
0x9C50  0x1A 0x32       PUSHIB 0x32
0x9C52  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C54  0x4E            PUSHLOCALB00
0x9C55  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9C57  0x37 0x27 0x29  PUSHIW 0x2927
0x9C5A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9C5C  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9C5E  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    expression.hs:1469

0x9C60  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:1471

0x9C62  0x33 0x95 0x00  JW 0x9CF7 (+149)

                        // else if (operation == HopperToken.BooleanNot)

0x9C65  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9C67  0x1A 0x20       PUSHIB 0x20
0x9C69  0x05            EQ
0x9C6A  0x2E 0x24       JZB 0x9C8E (+36)

                        // if (actualType != "bool")                            expression.hs:1474

0x9C6C  0x4E            PUSHLOCALB00
0x9C6D  0x37 0x6F 0x03  PUSHIW 0x036F
0x9C70  0x1A 0x04       PUSHIB 0x04
0x9C72  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C74  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9C76  0x2E 0x11       JZB 0x9C87 (+17)

                        // Parser.ErrorAt(operationToken, "type mismatch, 'bool' expected");

0x9C78  0x4F            PUSHLOCALB02
0x9C79  0x37 0x40 0x13  PUSHIW 0x1340
0x9C7C  0x1A 0x1E       PUSHIB 0x1E
0x9C7E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9C80  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // break;                                               expression.hs:1477

0x9C82  0x28 0x04       DECSP 0x04
0x9C84  0x33 0x75 0x00  JW 0x9CF9 (+117)

                        // CodeStream.AddInstruction(Instruction.BOOLNOT);

0x9C87  0x1A 0x41       PUSHIB 0x41
0x9C89  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:1480

0x9C8C  0x30 0x6B       JB 0x9CF7 (+107)

                        // else if (operation == HopperToken.BitNot)            expression.hs:1481

0x9C8E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9C90  0x1A 0x23       PUSHIB 0x23
0x9C92  0x05            EQ
0x9C93  0x2E 0x64       JZB 0x9CF7 (+100)

                        // if (Types.IsFlags(actualType))                       expression.hs:1483

0x9C95  0x4E            PUSHLOCALB00
0x9C96  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x9C98  0x2F 0x5A       JNZB 0x9CF2 (+90)

                        // else if ((actualType != "byte")                      expression.hs:1487

0x9C9A  0x4E            PUSHLOCALB00
0x9C9B  0x37 0x51 0x05  PUSHIW 0x0551
0x9C9E  0x1A 0x04       PUSHIB 0x04
0x9CA0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9CA2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9CA4  0x44            PUSHI0
0x9CA5  0x06            NE
0x9CA6  0x27 0x00       DUP 0x00
0x9CA8  0x2E 0x31       JZB 0x9CD9 (+49)
0x9CAA  0x4E            PUSHLOCALB00
0x9CAB  0x37 0x2F 0x02  PUSHIW 0x022F
0x9CAE  0x1A 0x04       PUSHIB 0x04
0x9CB0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9CB2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9CB4  0x44            PUSHI0
0x9CB5  0x06            NE
0x9CB6  0x0C            BOOLAND
0x9CB7  0x27 0x00       DUP 0x00
0x9CB9  0x2E 0x20       JZB 0x9CD9 (+32)
0x9CBB  0x4E            PUSHLOCALB00
0x9CBC  0x37 0x24 0x10  PUSHIW 0x1024
0x9CBF  0x1A 0x04       PUSHIB 0x04
0x9CC1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9CC3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9CC5  0x44            PUSHI0
0x9CC6  0x06            NE
0x9CC7  0x0C            BOOLAND
0x9CC8  0x27 0x00       DUP 0x00
0x9CCA  0x2E 0x0F       JZB 0x9CD9 (+15)
0x9CCC  0x4E            PUSHLOCALB00
0x9CCD  0x37 0x15 0x0C  PUSHIW 0x0C15
0x9CD0  0x1A 0x05       PUSHIB 0x05
0x9CD2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9CD4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9CD6  0x44            PUSHI0
0x9CD7  0x06            NE
0x9CD8  0x0C            BOOLAND
0x9CD9  0x2E 0x19       JZB 0x9CF2 (+25)

                        // Parser.ErrorAtCurrent("bitwise operations only legal for 'uint', 'flags' and 'byte', (not '" + actualType + "')");

0x9CDB  0x37 0x5E 0x13  PUSHIW 0x135E
0x9CDE  0x1A 0x44       PUSHIB 0x44
0x9CE0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9CE2  0x4E            PUSHLOCALB00
0x9CE3  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9CE5  0x37 0x27 0x29  PUSHIW 0x2927
0x9CE8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9CEA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9CEC  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1494

0x9CEE  0x28 0x04       DECSP 0x04
0x9CF0  0x30 0x09       JB 0x9CF9 (+9)

                        // CodeStream.AddInstruction(Instruction.BITNOT);

0x9CF2  0x1A 0x42       PUSHIB 0x42
0x9CF4  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // break;                                               expression.hs:1498

0x9CF7  0x28 0x04       DECSP 0x04

                        // return actualType;                                   expression.hs:1500

0x9CF9  0x4E            PUSHLOCALB00
0x9CFA  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:688
// ####  Expression.compilePrimary(..)  ####                                    0x00FF

0x9CFC  0x49            ENTER

                        // string actualType;                                   expression.hs:689

0x9CFD  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <string,string> currentToken = Parser.CurrentToken;

0x9CFF  0x1A 0x0F       PUSHIB 0x0F
0x9D01  0x1A 0x0F       PUSHIB 0x0F
0x9D03  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0x9D05  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0x9D07  0x5E            POPCOPYLOCALB02

                        // HopperToken tokenType = Token.GetType(currentToken);

0x9D08  0x44            PUSHI0
0x9D09  0x4F            PUSHLOCALB02
0x9D0A  0x2C 0x49       CALLB 0x49     // Token.GetType
0x9D0C  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // bool isDotted = false;                               expression.hs:694

0x9D0E  0x44            PUSHI0

                        // if (tokenType == HopperToken.DottedIdentifier)

0x9D0F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0x9D11  0x1A 0x02       PUSHIB 0x02
0x9D13  0x05            EQ
0x9D14  0x2E 0x09       JZB 0x9D1D (+9)

                        // tokenType = HopperToken.Identifier;                  expression.hs:697

0x9D16  0x1A 0x03       PUSHIB 0x03
0x9D18  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // isDotted = true;                                     expression.hs:698

0x9D1A  0x45            PUSHI1
0x9D1B  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // switch (tokenType)                                   expression.hs:700

0x9D1D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)

                        // case HopperToken.Bool:                               expression.hs:702

0x9D1F  0x1A 0x07       PUSHIB 0x07
0x9D21  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9D23  0x05            EQ
0x9D24  0x2E 0x5C       JZB 0x9D80 (+92)

                        // if (currentToken["lexeme"] == "true")                expression.hs:704

0x9D26  0x4F            PUSHLOCALB02
0x9D27  0x37 0x06 0x02  PUSHIW 0x0206
0x9D2A  0x1A 0x06       PUSHIB 0x06
0x9D2C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D2E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9D30  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0x9D33  0x1A 0x04       PUSHIB 0x04
0x9D35  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D37  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9D39  0x2F 0x09       JNZB 0x9D42 (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHI1);

0x9D3B  0x1A 0x45       PUSHIB 0x45
0x9D3D  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:707

0x9D40  0x30 0x33       JB 0x9D73 (+51)

                        // else if (currentToken["lexeme"] == "false")

0x9D42  0x4F            PUSHLOCALB02
0x9D43  0x37 0x06 0x02  PUSHIW 0x0206
0x9D46  0x1A 0x06       PUSHIB 0x06
0x9D48  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D4A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9D4C  0x37 0x4C 0x05  PUSHIW 0x054C
0x9D4F  0x1A 0x05       PUSHIB 0x05
0x9D51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D53  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9D55  0x2F 0x09       JNZB 0x9D5E (+9)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0x9D57  0x1A 0x44       PUSHIB 0x44
0x9D59  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // }                                                    expression.hs:711

0x9D5C  0x30 0x17       JB 0x9D73 (+23)

                        // Parser.ErrorAtCurrent("invalid boolean token " + currentToken["type"]);

0x9D5E  0x37 0xA2 0x13  PUSHIW 0x13A2
0x9D61  0x1A 0x16       PUSHIB 0x16
0x9D63  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D65  0x4F            PUSHLOCALB02
0x9D66  0x37 0x13 0x01  PUSHIW 0x0113
0x9D69  0x1A 0x04       PUSHIB 0x04
0x9D6B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D6D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9D6F  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9D71  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Parser.Advance();                                    expression.hs:716

0x9D73  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // actualType = "bool";                                 expression.hs:717

0x9D75  0x37 0x6F 0x03  PUSHIW 0x036F
0x9D78  0x1A 0x04       PUSHIB 0x04
0x9D7A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D7C  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:718

0x9D7D  0x33 0xDD 0x0A  JW 0xA85A (+2781)

                        // case HopperToken.Char:                               expression.hs:719

0x9D80  0x1A 0x08       PUSHIB 0x08
0x9D82  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9D84  0x05            EQ
0x9D85  0x2E 0x2B       JZB 0x9DB0 (+43)

                        // Parser.Advance();                                    expression.hs:721

0x9D87  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // char c = String.GetChar(currentToken["lexeme"], 0);

0x9D89  0x44            PUSHI0
0x9D8A  0x4F            PUSHLOCALB02
0x9D8B  0x37 0x06 0x02  PUSHIW 0x0206
0x9D8E  0x1A 0x06       PUSHIB 0x06
0x9D90  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9D92  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9D94  0x44            PUSHI0
0x9D95  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0x9D97  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // byte b = byte(c);                                    expression.hs:723

0x9D99  0x44            PUSHI0
0x9D9A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9D9C  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPUSHI(b);                   expression.hs:724

0x9D9E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9DA0  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "char";                                 expression.hs:725

0x9DA3  0x37 0x15 0x04  PUSHIW 0x0415
0x9DA6  0x1A 0x04       PUSHIB 0x04
0x9DA8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DAA  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:726

0x9DAB  0x28 0x04       DECSP 0x04
0x9DAD  0x33 0xAD 0x0A  JW 0xA85A (+2733)

                        // case HopperToken.StringConstant:                     expression.hs:727

0x9DB0  0x1A 0x0B       PUSHIB 0x0B
0x9DB2  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9DB4  0x05            EQ
0x9DB5  0x2E 0x1C       JZB 0x9DD1 (+28)

                        // Parser.Advance();                                    expression.hs:729

0x9DB7  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // actualType = "string";                               expression.hs:730

0x9DB9  0x37 0x62 0x02  PUSHIW 0x0262
0x9DBC  0x1A 0x06       PUSHIB 0x06
0x9DBE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DC0  0x5D            POPCOPYLOCALB00

                        // AddString(currentToken["lexeme"]);                   expression.hs:731

0x9DC1  0x4F            PUSHLOCALB02
0x9DC2  0x37 0x06 0x02  PUSHIW 0x0206
0x9DC5  0x1A 0x06       PUSHIB 0x06
0x9DC7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DC9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9DCB  0x34 0x3C 0x01  CALLW 0x013C   // CodeStream.AddString

                        // }                                                    expression.hs:732

0x9DCE  0x33 0x8C 0x0A  JW 0xA85A (+2700)

                        // case HopperToken.Float:                              expression.hs:733

0x9DD1  0x1A 0x0A       PUSHIB 0x0A
0x9DD3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9DD5  0x05            EQ
0x9DD6  0x2E 0x56       JZB 0x9E2C (+86)

                        // Parser.Advance();                                    expression.hs:735

0x9DD8  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // float f;                                             expression.hs:736

0x9DDA  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (!Token.TryParseFloat(currentToken["lexeme"], ref f))

0x9DDC  0x4F            PUSHLOCALB02
0x9DDD  0x37 0x06 0x02  PUSHIW 0x0206
0x9DE0  0x1A 0x06       PUSHIB 0x06
0x9DE2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DE4  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9DE6  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x9DE8  0x2C 0x58       CALLB 0x58     // Token.TryParseFloat
0x9DEA  0x2F 0x17       JNZB 0x9E01 (+23)

                        // Parser.ErrorAtCurrent("invalid float token " + currentToken["type"]);

0x9DEC  0x37 0xB8 0x13  PUSHIW 0x13B8
0x9DEF  0x1A 0x14       PUSHIB 0x14
0x9DF1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DF3  0x4F            PUSHLOCALB02
0x9DF4  0x37 0x13 0x01  PUSHIW 0x0113
0x9DF7  0x1A 0x04       PUSHIB 0x04
0x9DF9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9DFB  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9DFD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9DFF  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // actualType = "float";                                expression.hs:741

0x9E01  0x37 0x08 0x06  PUSHIW 0x0608
0x9E04  0x1A 0x05       PUSHIB 0x05
0x9E06  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E08  0x5D            POPCOPYLOCALB00

                        // uint constantAddress = CodeStream.CreateFloatConstant(f);

0x9E09  0x44            PUSHI0
0x9E0A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9E0C  0x34 0x2A 0x01  CALLW 0x012A   // CodeStream.CreateFloatConstant
0x9E0F  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0x9E11  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9E13  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Float", "NewFromConstant");

0x9E16  0x37 0x0F 0x06  PUSHIW 0x060F
0x9E19  0x1A 0x05       PUSHIB 0x05
0x9E1B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E1D  0x37 0xD8 0x06  PUSHIW 0x06D8
0x9E20  0x1A 0x0F       PUSHIB 0x0F
0x9E22  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E24  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:745

0x9E27  0x28 0x04       DECSP 0x04
0x9E29  0x33 0x31 0x0A  JW 0xA85A (+2609)

                        // case HopperToken.Integer:                            expression.hs:746

0x9E2C  0x1A 0x09       PUSHIB 0x09
0x9E2E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9E30  0x05            EQ
0x9E31  0x31 0x16 0x01  JZW 0x9F47 (+278)

                        // Parser.Advance();                                    expression.hs:748

0x9E34  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // long l;                                              expression.hs:749

0x9E36  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(currentToken["lexeme"], ref l))

0x9E38  0x4F            PUSHLOCALB02
0x9E39  0x37 0x06 0x02  PUSHIW 0x0206
0x9E3C  0x1A 0x06       PUSHIB 0x06
0x9E3E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E40  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9E42  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0x9E44  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0x9E46  0x2F 0x17       JNZB 0x9E5D (+23)

                        // Parser.ErrorAtCurrent("invalid integer token " + currentToken["type"]);

0x9E48  0x37 0xCC 0x13  PUSHIW 0x13CC
0x9E4B  0x1A 0x16       PUSHIB 0x16
0x9E4D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E4F  0x4F            PUSHLOCALB02
0x9E50  0x37 0x13 0x01  PUSHIW 0x0113
0x9E53  0x1A 0x04       PUSHIB 0x04
0x9E55  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E57  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9E59  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9E5B  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // if (l < -32768)                                      expression.hs:754

0x9E5D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9E5F  0x37 0x00 0x80  PUSHIW 0x8000
0x9E62  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x9E64  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0x9E66  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x9E68  0x2E 0x2D       JZB 0x9E95 (+45)

                        // actualType = "long";                                 expression.hs:756

0x9E6A  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9E6D  0x1A 0x04       PUSHIB 0x04
0x9E6F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E71  0x5D            POPCOPYLOCALB00

                        // uint constantAddress = CodeStream.CreateLongConstant(l);

0x9E72  0x44            PUSHI0
0x9E73  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9E75  0x34 0x2B 0x01  CALLW 0x012B   // CodeStream.CreateLongConstant
0x9E78  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0x9E7A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9E7C  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Long", "NewFromConstant");

0x9E7F  0x37 0x01 0x06  PUSHIW 0x0601
0x9E82  0x1A 0x04       PUSHIB 0x04
0x9E84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E86  0x37 0xD8 0x06  PUSHIW 0x06D8
0x9E89  0x1A 0x0F       PUSHIB 0x0F
0x9E8B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9E8D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:760

0x9E90  0x28 0x02       DECSP 0x02
0x9E92  0x33 0xB0 0x00  JW 0x9F42 (+176)

                        // else if (l < 0)                                      expression.hs:761

0x9E95  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9E97  0x44            PUSHI0
0x9E98  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x9E9A  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x9E9C  0x2E 0x11       JZB 0x9EAD (+17)

                        // actualType = "-int";                                 expression.hs:763

0x9E9E  0x37 0x29 0x10  PUSHIW 0x1029
0x9EA1  0x1A 0x04       PUSHIB 0x04
0x9EA3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9EA5  0x5D            POPCOPYLOCALB00

                        // Die(0x0A);                                           expression.hs:765

0x9EA6  0x1A 0x0A       PUSHIB 0x0A
0x9EA8  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:766

0x9EAA  0x33 0x98 0x00  JW 0x9F42 (+152)

                        // else if (l < 256)                                    expression.hs:767

0x9EAD  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9EAF  0x37 0x00 0x01  PUSHIW 0x0100
0x9EB2  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0x9EB4  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x9EB6  0x2E 0x1A       JZB 0x9ED0 (+26)

                        // actualType = "byte";                                 expression.hs:769

0x9EB8  0x37 0x51 0x05  PUSHIW 0x0551
0x9EBB  0x1A 0x04       PUSHIB 0x04
0x9EBD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9EBF  0x5D            POPCOPYLOCALB00

                        // uint ui = uint(l);                                   expression.hs:770

0x9EC0  0x44            PUSHI0
0x9EC1  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9EC3  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x9EC5  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPUSHI(ui);                  expression.hs:771

0x9EC7  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9EC9  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // }                                                    expression.hs:772

0x9ECC  0x28 0x02       DECSP 0x02
0x9ECE  0x30 0x74       JB 0x9F42 (+116)

                        // else if (l < 32768)                                  expression.hs:773

0x9ED0  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9ED2  0x37 0x00 0x80  PUSHIW 0x8000
0x9ED5  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x9ED7  0x24 0x45       SYSCALL0 0x45  // Long.LT
0x9ED9  0x2E 0x1C       JZB 0x9EF5 (+28)

                        // actualType = "+int";                                 expression.hs:775

0x9EDB  0x37 0x24 0x10  PUSHIW 0x1024
0x9EDE  0x1A 0x04       PUSHIB 0x04
0x9EE0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9EE2  0x5D            POPCOPYLOCALB00

                        // uint ui = uint(l);                                   expression.hs:776

0x9EE3  0x44            PUSHI0
0x9EE4  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9EE6  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x9EE8  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHIW, ui);

0x9EEA  0x1A 0x37       PUSHIB 0x37
0x9EEC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9EEE  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    expression.hs:778

0x9EF1  0x28 0x02       DECSP 0x02
0x9EF3  0x30 0x4F       JB 0x9F42 (+79)

                        // else if (l <= 65535)                                 expression.hs:779

0x9EF5  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9EF7  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0x9EFA  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0x9EFC  0x24 0x46       SYSCALL0 0x46  // Long.LE
0x9EFE  0x2E 0x1C       JZB 0x9F1A (+28)

                        // actualType = "uint";                                 expression.hs:781

0x9F00  0x37 0x2F 0x02  PUSHIW 0x022F
0x9F03  0x1A 0x04       PUSHIB 0x04
0x9F05  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F07  0x5D            POPCOPYLOCALB00

                        // uint ui = uint(l);                                   expression.hs:782

0x9F08  0x44            PUSHI0
0x9F09  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9F0B  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0x9F0D  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstruction(Instruction.PUSHIW, ui);

0x9F0F  0x1A 0x37       PUSHIB 0x37
0x9F11  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9F13  0x34 0x38 0x01  CALLW 0x0138   // CodeStream.AddInstruction

                        // }                                                    expression.hs:784

0x9F16  0x28 0x02       DECSP 0x02
0x9F18  0x30 0x2A       JB 0x9F42 (+42)

                        // actualType = "long";                                 expression.hs:787

0x9F1A  0x37 0xF7 0x05  PUSHIW 0x05F7
0x9F1D  0x1A 0x04       PUSHIB 0x04
0x9F1F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F21  0x5D            POPCOPYLOCALB00

                        // uint constantAddress = CodeStream.CreateLongConstant(l);

0x9F22  0x44            PUSHI0
0x9F23  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9F25  0x34 0x2B 0x01  CALLW 0x012B   // CodeStream.CreateLongConstant
0x9F28  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0x9F2A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0x9F2C  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Long", "NewFromConstant");

0x9F2F  0x37 0x01 0x06  PUSHIW 0x0601
0x9F32  0x1A 0x04       PUSHIB 0x04
0x9F34  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F36  0x37 0xD8 0x06  PUSHIW 0x06D8
0x9F39  0x1A 0x0F       PUSHIB 0x0F
0x9F3B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F3D  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:791

0x9F40  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:792

0x9F42  0x28 0x02       DECSP 0x02
0x9F44  0x33 0x16 0x09  JW 0xA85A (+2326)

                        // case HopperToken.Identifier:                         expression.hs:793

0x9F47  0x1A 0x03       PUSHIB 0x03
0x9F49  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0x9F4B  0x05            EQ
0x9F4C  0x31 0xB0 0x07  JZW 0xA6FC (+1968)

                        // Parser.Advance();                                    expression.hs:795

0x9F4F  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string identifier = currentToken["lexeme"];

0x9F51  0x24 0x02       SYSCALL0 0x02  // String.New
0x9F53  0x4F            PUSHLOCALB02
0x9F54  0x37 0x06 0x02  PUSHIW 0x0206
0x9F57  0x1A 0x06       PUSHIB 0x06
0x9F59  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F5B  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0x9F5D  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string qualifiedName;                                expression.hs:797

0x9F5F  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string typeString = Types.GetTypeString(identifier, false, ref qualifiedName);

0x9F61  0x24 0x02       SYSCALL0 0x02  // String.New
0x9F63  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9F65  0x44            PUSHI0
0x9F66  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0x9F68  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0x9F6A  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 expression.hs:799

0x9F6C  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9F6E  0x2E 0x07       JZB 0x9F75 (+7)

                        // break;                                               expression.hs:801

0x9F70  0x28 0x0E       DECSP 0x0E
0x9F72  0x33 0xEC 0x08  JW 0xA85E (+2284)

                        // if (typeString.Length == 0)                          expression.hs:804

0x9F75  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x9F77  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x9F79  0x32 0x82 0x00  JNZW 0x9FFB (+130)

                        // if (Types.IsEnum(identifier) || Types.IsFlags(identifier))

0x9F7C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9F7E  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0x9F80  0x27 0x00       DUP 0x00
0x9F82  0x2F 0x07       JNZB 0x9F89 (+7)
0x9F84  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9F86  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0x9F88  0x0B            BOOLOR
0x9F89  0x2E 0x72       JZB 0x9FFB (+114)

                        // if (Parser.Check(HopperToken.LParen))                expression.hs:808

0x9F8B  0x1A 0x10       PUSHIB 0x10
0x9F8D  0x2C 0x83       CALLB 0x83     // Parser.Check
0x9F8F  0x2E 0x6C       JZB 0x9FFB (+108)

                        // Parser.Advance(); // (                               expression.hs:810

0x9F91  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string expressionType = CompileExpression("uint");

0x9F93  0x24 0x02       SYSCALL0 0x02  // String.New
0x9F95  0x37 0x2F 0x02  PUSHIW 0x022F
0x9F98  0x1A 0x04       PUSHIB 0x04
0x9F9A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9F9C  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0x9F9F  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Parser.HadError)                                 expression.hs:812

0x9FA1  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9FA3  0x2E 0x07       JZB 0x9FAA (+7)

                        // break;                                               expression.hs:814

0x9FA5  0x28 0x10       DECSP 0x10
0x9FA7  0x33 0xB7 0x08  JW 0xA85E (+2231)

                        // if (expressionType != "uint")                        expression.hs:816

0x9FAA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x9FAC  0x37 0x2F 0x02  PUSHIW 0x022F
0x9FAF  0x1A 0x04       PUSHIB 0x04
0x9FB1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9FB3  0x24 0x05       SYSCALL0 0x05  // String.Compare
0x9FB5  0x2E 0x2F       JZB 0x9FE4 (+47)

                        // if (!Types.AutomaticUpCastTop(expressionType, "uint"))

0x9FB7  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x9FB9  0x37 0x2F 0x02  PUSHIW 0x022F
0x9FBC  0x1A 0x04       PUSHIB 0x04
0x9FBE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9FC0  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0x9FC2  0x2F 0x22       JNZB 0x9FE4 (+34)

                        // Parser.ErrorAtCurrent("cannot cast '"                expression.hs:820

0x9FC4  0x37 0xE2 0x13  PUSHIW 0x13E2
0x9FC7  0x1A 0x0D       PUSHIB 0x0D
0x9FC9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9FCB  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0x9FCD  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9FCF  0x37 0xEF 0x13  PUSHIW 0x13EF
0x9FD2  0x1A 0x06       PUSHIB 0x06
0x9FD4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0x9FD6  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9FD8  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9FDA  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9FDC  0x1A 0x27       PUSHIB 0x27
0x9FDE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0x9FE0  0x24 0x03       SYSCALL0 0x03  // String.Append
0x9FE2  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Parser.Consume(HopperToken.RParen, ')');             expression.hs:830

0x9FE4  0x1A 0x11       PUSHIB 0x11
0x9FE6  0x1A 0x29       PUSHIB 0x29
0x9FE8  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:831

0x9FEA  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0x9FEC  0x2E 0x07       JZB 0x9FF3 (+7)

                        // break;                                               expression.hs:833

0x9FEE  0x28 0x10       DECSP 0x10
0x9FF0  0x33 0x6E 0x08  JW 0xA85E (+2158)

                        // actualType = identifier;                             expression.hs:835

0x9FF3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0x9FF5  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:836

0x9FF6  0x28 0x10       DECSP 0x10
0x9FF8  0x33 0x66 0x08  JW 0xA85E (+2150)

                        // if (typeString.Length != 0)                          expression.hs:841

0x9FFB  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0x9FFD  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0x9FFF  0x31 0xCC 0x02  JZW 0xA2CB (+716)

                        // if (Parser.Check(HopperToken.LBracket))              expression.hs:843

0xA002  0x1A 0x14       PUSHIB 0x14
0xA004  0x2C 0x83       CALLB 0x83     // Parser.Check
0xA006  0x31 0x9C 0x02  JZW 0xA2A2 (+668)

                        // Parser.Advance(); // [                               expression.hs:846

0xA009  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (Types.IsArray(typeString))                       expression.hs:847

0xA00B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA00D  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0xA00F  0x31 0x9A 0x00  JZW 0xA0A9 (+154)

                        // uint bIndex;                                         expression.hs:849

0xA012  0x44            PUSHI0

                        // if (typeString.IndexOf('[', ref bIndex))             expression.hs:850

0xA013  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA015  0x1A 0x5B       PUSHIB 0x5B
0xA017  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xA019  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xA01C  0x2E 0x02       JZB 0xA01E (+2)

                        // typeString = typeString.Substring(0, bIndex);

0xA01E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA020  0x44            PUSHI0
0xA021  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA023  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xA025  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0xA027  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA029  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string indexType = CompileExpression("uint");

0xA02C  0x24 0x02       SYSCALL0 0x02  // String.New
0xA02E  0x37 0x2F 0x02  PUSHIW 0x022F
0xA031  0x1A 0x04       PUSHIB 0x04
0xA033  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA035  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA038  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (Parser.HadError)                                 expression.hs:860

0xA03A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA03C  0x2E 0x07       JZB 0xA043 (+7)

                        // break;                                               expression.hs:862

0xA03E  0x28 0x12       DECSP 0x12
0xA040  0x33 0x1E 0x08  JW 0xA85E (+2078)

                        // if (indexType != "uint")                             expression.hs:864

0xA043  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA045  0x37 0x2F 0x02  PUSHIW 0x022F
0xA048  0x1A 0x04       PUSHIB 0x04
0xA04A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA04C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA04E  0x2E 0x18       JZB 0xA066 (+24)

                        // if (Types.AutomaticUpCastTop(indexType, "uint"))

0xA050  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA052  0x37 0x2F 0x02  PUSHIW 0x022F
0xA055  0x1A 0x04       PUSHIB 0x04
0xA057  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA059  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0xA05B  0x2E 0x0B       JZB 0xA066 (+11)

                        // indexType = "uint";                                  expression.hs:868

0xA05D  0x37 0x2F 0x02  PUSHIW 0x022F
0xA060  0x1A 0x04       PUSHIB 0x04
0xA062  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA064  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (indexType != "uint")                             expression.hs:871

0xA066  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA068  0x37 0x2F 0x02  PUSHIW 0x022F
0xA06B  0x1A 0x04       PUSHIB 0x04
0xA06D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA06F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA071  0x2E 0x10       JZB 0xA081 (+16)

                        // Parser.ErrorAtCurrent("array index type invalid");

0xA073  0x37 0x33 0x02  PUSHIW 0x0233
0xA076  0x1A 0x18       PUSHIB 0x18
0xA078  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA07A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:874

0xA07C  0x28 0x12       DECSP 0x12
0xA07E  0x33 0xE0 0x07  JW 0xA85E (+2016)

                        // Parser.Consume(HopperToken.RBracket, ']');           expression.hs:876

0xA081  0x1A 0x15       PUSHIB 0x15
0xA083  0x1A 0x5D       PUSHIB 0x5D
0xA085  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:877

0xA087  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA089  0x2E 0x07       JZB 0xA090 (+7)

                        // break;                                               expression.hs:879

0xA08B  0x28 0x12       DECSP 0x12
0xA08D  0x33 0xD1 0x07  JW 0xA85E (+2001)

                        // CodeStream.AddInstructionSysCall0("Array", "GetItem");

0xA090  0x37 0x01 0x03  PUSHIW 0x0301
0xA093  0x1A 0x05       PUSHIB 0x05
0xA095  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA097  0x37 0x28 0x06  PUSHIW 0x0628
0xA09A  0x1A 0x07       PUSHIB 0x07
0xA09C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA09E  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = typeString;                             expression.hs:882

0xA0A1  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA0A3  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:883

0xA0A4  0x28 0x04       DECSP 0x04
0xA0A6  0x33 0xF7 0x01  JW 0xA29D (+503)

                        // else if (typeString == "string")                     expression.hs:884

0xA0A9  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA0AB  0x37 0x62 0x02  PUSHIW 0x0262
0xA0AE  0x1A 0x06       PUSHIB 0x06
0xA0B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0B2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA0B4  0x32 0x8A 0x00  JNZW 0xA13E (+138)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0xA0B7  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA0B9  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string indexType = CompileExpression("uint");

0xA0BC  0x24 0x02       SYSCALL0 0x02  // String.New
0xA0BE  0x37 0x2F 0x02  PUSHIW 0x022F
0xA0C1  0x1A 0x04       PUSHIB 0x04
0xA0C3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0C5  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA0C8  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Parser.HadError)                                 expression.hs:891

0xA0CA  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA0CC  0x2E 0x07       JZB 0xA0D3 (+7)

                        // break;                                               expression.hs:893

0xA0CE  0x28 0x10       DECSP 0x10
0xA0D0  0x33 0x8E 0x07  JW 0xA85E (+1934)

                        // if (indexType != "uint")                             expression.hs:895

0xA0D3  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA0D5  0x37 0x2F 0x02  PUSHIW 0x022F
0xA0D8  0x1A 0x04       PUSHIB 0x04
0xA0DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0DC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA0DE  0x2E 0x18       JZB 0xA0F6 (+24)

                        // if (Types.AutomaticUpCastTop(indexType, "uint"))

0xA0E0  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA0E2  0x37 0x2F 0x02  PUSHIW 0x022F
0xA0E5  0x1A 0x04       PUSHIB 0x04
0xA0E7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0E9  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0xA0EB  0x2E 0x0B       JZB 0xA0F6 (+11)

                        // indexType = "uint";                                  expression.hs:899

0xA0ED  0x37 0x2F 0x02  PUSHIW 0x022F
0xA0F0  0x1A 0x04       PUSHIB 0x04
0xA0F2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0F4  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (indexType != "uint")                             expression.hs:902

0xA0F6  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA0F8  0x37 0x2F 0x02  PUSHIW 0x022F
0xA0FB  0x1A 0x04       PUSHIB 0x04
0xA0FD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA0FF  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA101  0x2E 0x10       JZB 0xA111 (+16)

                        // Parser.ErrorAtCurrent("string index type invalid");

0xA103  0x37 0xF5 0x13  PUSHIW 0x13F5
0xA106  0x1A 0x19       PUSHIB 0x19
0xA108  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA10A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:905

0xA10C  0x28 0x10       DECSP 0x10
0xA10E  0x33 0x50 0x07  JW 0xA85E (+1872)

                        // Parser.Consume(HopperToken.RBracket, ']');           expression.hs:907

0xA111  0x1A 0x15       PUSHIB 0x15
0xA113  0x1A 0x5D       PUSHIB 0x5D
0xA115  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:908

0xA117  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA119  0x2E 0x07       JZB 0xA120 (+7)

                        // break;                                               expression.hs:910

0xA11B  0x28 0x10       DECSP 0x10
0xA11D  0x33 0x41 0x07  JW 0xA85E (+1857)

                        // CodeStream.AddInstructionSysCall0("String", "GetChar");

0xA120  0x37 0xDD 0x04  PUSHIW 0x04DD
0xA123  0x1A 0x06       PUSHIB 0x06
0xA125  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA127  0x37 0x21 0x06  PUSHIW 0x0621
0xA12A  0x1A 0x07       PUSHIB 0x07
0xA12C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA12E  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "char";                                 expression.hs:913

0xA131  0x37 0x15 0x04  PUSHIW 0x0415
0xA134  0x1A 0x04       PUSHIB 0x04
0xA136  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA138  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:914

0xA139  0x28 0x02       DECSP 0x02
0xA13B  0x33 0x62 0x01  JW 0xA29D (+354)

                        // else if (Types.IsDictionary(typeString))             expression.hs:915

0xA13E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA140  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0xA142  0x31 0xC2 0x00  JZW 0xA204 (+194)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0xA145  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA147  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string keyType = Types.GetKeyFromCollection(typeString);

0xA14A  0x24 0x02       SYSCALL0 0x02  // String.New
0xA14C  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA14E  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0xA150  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string valueType = Types.GetValueFromCollection(typeString);

0xA152  0x24 0x02       SYSCALL0 0x02  // String.New
0xA154  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA156  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0xA158  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // string actualKeyType = CompileExpression(keyType);

0xA15A  0x24 0x02       SYSCALL0 0x02  // String.New
0xA15C  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA15E  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA161  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // if (Parser.HadError)                                 expression.hs:927

0xA163  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA165  0x2E 0x07       JZB 0xA16C (+7)

                        // break;                                               expression.hs:929

0xA167  0x28 0x14       DECSP 0x14
0xA169  0x33 0xF5 0x06  JW 0xA85E (+1781)

                        // if (keyType != actualKeyType)                        expression.hs:931

0xA16C  0x56 0x10 0x14  PUSHLOCALBB 0x1410
0xA16F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA171  0x2E 0x6B       JZB 0xA1DC (+107)

                        // if (keyType == "string")                             expression.hs:933

0xA173  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA175  0x37 0x62 0x02  PUSHIW 0x0262
0xA178  0x1A 0x06       PUSHIB 0x06
0xA17A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA17C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA17E  0x2F 0x1B       JNZB 0xA199 (+27)

                        // Parser.ErrorAtCurrent("dictionary key type should be 'string', (not '" + actualKeyType + "')");

0xA180  0x37 0x68 0x02  PUSHIW 0x0268
0xA183  0x1A 0x2E       PUSHIB 0x2E
0xA185  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA187  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA189  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA18B  0x37 0x27 0x29  PUSHIW 0x2927
0xA18E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA190  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA192  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:936

0xA194  0x28 0x14       DECSP 0x14
0xA196  0x33 0xC8 0x06  JW 0xA85E (+1736)

                        // if (Types.AutomaticUpCastTop(actualKeyType, keyType))

0xA199  0x56 0x14 0x10  PUSHLOCALBB 0x1014
0xA19C  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0xA19E  0x2E 0x0B       JZB 0xA1A9 (+11)

                        // actualKeyType = "uint";                              expression.hs:940

0xA1A0  0x37 0x2F 0x02  PUSHIW 0x022F
0xA1A3  0x1A 0x04       PUSHIB 0x04
0xA1A5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1A7  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // if (actualKeyType != "uint")                         expression.hs:942

0xA1A9  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA1AB  0x37 0x2F 0x02  PUSHIW 0x022F
0xA1AE  0x1A 0x04       PUSHIB 0x04
0xA1B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1B2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA1B4  0x2E 0x28       JZB 0xA1DC (+40)

                        // Parser.ErrorAtCurrent("dictionary key type should be '"+keyType+"', (not '" + actualKeyType + "')");

0xA1B6  0x37 0x68 0x02  PUSHIW 0x0268
0xA1B9  0x1A 0x1F       PUSHIB 0x1F
0xA1BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1BD  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA1BF  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA1C1  0x37 0x8D 0x02  PUSHIW 0x028D
0xA1C4  0x1A 0x09       PUSHIB 0x09
0xA1C6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1C8  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA1CA  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA1CC  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA1CE  0x37 0x27 0x29  PUSHIW 0x2927
0xA1D1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA1D3  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA1D5  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:945

0xA1D7  0x28 0x14       DECSP 0x14
0xA1D9  0x33 0x85 0x06  JW 0xA85E (+1669)

                        // Parser.Consume(HopperToken.RBracket, ']');           expression.hs:948

0xA1DC  0x1A 0x15       PUSHIB 0x15
0xA1DE  0x1A 0x5D       PUSHIB 0x5D
0xA1E0  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:949

0xA1E2  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA1E4  0x2E 0x07       JZB 0xA1EB (+7)

                        // break;                                               expression.hs:951

0xA1E6  0x28 0x14       DECSP 0x14
0xA1E8  0x33 0x76 0x06  JW 0xA85E (+1654)

                        // CodeStream.AddInstructionSysCall0("Dictionary", "Get");

0xA1EB  0x37 0x0D 0x03  PUSHIW 0x030D
0xA1EE  0x1A 0x0A       PUSHIB 0x0A
0xA1F0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1F2  0x37 0x1E 0x06  PUSHIW 0x061E
0xA1F5  0x1A 0x03       PUSHIB 0x03
0xA1F7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA1F9  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = valueType;                              expression.hs:954

0xA1FC  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA1FE  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:955

0xA1FF  0x28 0x06       DECSP 0x06
0xA201  0x33 0x9C 0x00  JW 0xA29D (+156)

                        // else if (Types.IsList(typeString))                   expression.hs:956

0xA204  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA206  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0xA208  0x31 0x8C 0x00  JZW 0xA294 (+140)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0xA20B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA20D  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // string valueType = Types.GetValueFromCollection(typeString);

0xA210  0x24 0x02       SYSCALL0 0x02  // String.New
0xA212  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA214  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0xA216  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // string indexType = CompileExpression("uint");

0xA218  0x24 0x02       SYSCALL0 0x02  // String.New
0xA21A  0x37 0x2F 0x02  PUSHIW 0x022F
0xA21D  0x1A 0x04       PUSHIB 0x04
0xA21F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA221  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA224  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (Parser.HadError)                                 expression.hs:967

0xA226  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA228  0x2E 0x07       JZB 0xA22F (+7)

                        // break;                                               expression.hs:969

0xA22A  0x28 0x12       DECSP 0x12
0xA22C  0x33 0x32 0x06  JW 0xA85E (+1586)

                        // if (indexType != "uint")                             expression.hs:971

0xA22F  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA231  0x37 0x2F 0x02  PUSHIW 0x022F
0xA234  0x1A 0x04       PUSHIB 0x04
0xA236  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA238  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA23A  0x2E 0x18       JZB 0xA252 (+24)

                        // if (Types.AutomaticUpCastTop(indexType, "uint"))

0xA23C  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA23E  0x37 0x2F 0x02  PUSHIW 0x022F
0xA241  0x1A 0x04       PUSHIB 0x04
0xA243  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA245  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0xA247  0x2E 0x0B       JZB 0xA252 (+11)

                        // indexType = "uint";                                  expression.hs:975

0xA249  0x37 0x2F 0x02  PUSHIW 0x022F
0xA24C  0x1A 0x04       PUSHIB 0x04
0xA24E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA250  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (indexType != "uint")                             expression.hs:978

0xA252  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA254  0x37 0x2F 0x02  PUSHIW 0x022F
0xA257  0x1A 0x04       PUSHIB 0x04
0xA259  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA25B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA25D  0x2E 0x10       JZB 0xA26D (+16)

                        // Parser.ErrorAtCurrent("list index type invalid");

0xA25F  0x37 0x4B 0x02  PUSHIW 0x024B
0xA262  0x1A 0x17       PUSHIB 0x17
0xA264  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA266  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:981

0xA268  0x28 0x12       DECSP 0x12
0xA26A  0x33 0xF4 0x05  JW 0xA85E (+1524)

                        // Parser.Consume(HopperToken.RBracket, ']');           expression.hs:983

0xA26D  0x1A 0x15       PUSHIB 0x15
0xA26F  0x1A 0x5D       PUSHIB 0x5D
0xA271  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // if (Parser.HadError)                                 expression.hs:984

0xA273  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA275  0x2E 0x07       JZB 0xA27C (+7)

                        // break;                                               expression.hs:986

0xA277  0x28 0x12       DECSP 0x12
0xA279  0x33 0xE5 0x05  JW 0xA85E (+1509)

                        // CodeStream.AddInstructionSysCall0("List", "GetItem");

0xA27C  0x37 0x17 0x03  PUSHIW 0x0317
0xA27F  0x1A 0x04       PUSHIB 0x04
0xA281  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA283  0x37 0x28 0x06  PUSHIW 0x0628
0xA286  0x1A 0x07       PUSHIB 0x07
0xA288  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA28A  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = valueType;                              expression.hs:989

0xA28D  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA28F  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:990

0xA290  0x28 0x04       DECSP 0x04
0xA292  0x30 0x0B       JB 0xA29D (+11)

                        // Parser.ErrorAtCurrent("identifier not array, list or dictionary type");

0xA294  0x37 0x0E 0x14  PUSHIW 0x140E
0xA297  0x1A 0x2D       PUSHIB 0x2D
0xA299  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA29B  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:995

0xA29D  0x28 0x0E       DECSP 0x0E
0xA29F  0x33 0xBF 0x05  JW 0xA85E (+1471)

                        // uint fdIndex;                                        expression.hs:1000

0xA2A2  0x44            PUSHI0

                        // if (Symbols.GetFunctionDelegateIndex(typeString, ref fdIndex))

0xA2A3  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA2A5  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xA2A7  0x2C 0xBB       CALLB 0xBB     // Symbols.GetFunctionDelegateIndex
0xA2A9  0x2E 0x15       JZB 0xA2BE (+21)

                        // if (Parser.Check(HopperToken.LParen))                expression.hs:1003

0xA2AB  0x1A 0x10       PUSHIB 0x10
0xA2AD  0x2C 0x83       CALLB 0x83     // Parser.Check
0xA2AF  0x2E 0x0F       JZB 0xA2BE (+15)

                        // actualType = compileFunctionCall(identifier, expectedType, "");

0xA2B1  0x56 0x0A 0xFE  PUSHLOCALBB 0xFE0A
0xA2B4  0x24 0x02       SYSCALL0 0x02  // String.New
0xA2B6  0x2C 0xFD       CALLB 0xFD     // Expression.compileFunctionCall
0xA2B8  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1007

0xA2B9  0x28 0x10       DECSP 0x10
0xA2BB  0x33 0xA3 0x05  JW 0xA85E (+1443)

                        // CodeStream.AddInstructionPushVariable(qualifiedName);

0xA2BE  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA2C0  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // actualType = typeString;                             expression.hs:1012

0xA2C3  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA2C5  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1013

0xA2C6  0x28 0x10       DECSP 0x10
0xA2C8  0x33 0x96 0x05  JW 0xA85E (+1430)

                        // if (Symbols.ConstantExists(identifier))              expression.hs:1018

0xA2CB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA2CD  0x2C 0x98       CALLB 0x98     // Symbols.ConstantExists
0xA2CF  0x2E 0x0D       JZB 0xA2DC (+13)

                        // actualType = compileConstant(expectedType, identifier);

0xA2D1  0x56 0xFE 0x0A  PUSHLOCALBB 0x0AFE
0xA2D4  0x2C 0xFE       CALLB 0xFE     // Expression.compileConstant
0xA2D6  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1021

0xA2D7  0x28 0x0E       DECSP 0x0E
0xA2D9  0x33 0x85 0x05  JW 0xA85E (+1413)

                        // uint fdIndex;                                        expression.hs:1028

0xA2DC  0x44            PUSHI0

                        // if (Symbols.GetFunctionDelegateIndex(expectedType, ref fdIndex))

0xA2DD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA2DF  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xA2E1  0x2C 0xBB       CALLB 0xBB     // Symbols.GetFunctionDelegateIndex
0xA2E3  0x31 0xAD 0x00  JZW 0xA390 (+173)

                        // <uint> doverloads = Symbols.GetFunctionDelegateOverloads(fdIndex);

0xA2E6  0x1A 0x04       PUSHIB 0x04
0xA2E8  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xA2EA  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xA2EC  0x2C 0xBC       CALLB 0xBC     // Symbols.GetFunctionDelegateOverloads
0xA2EE  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // uint winner = 0;                                     expression.hs:1032

0xA2F0  0x44            PUSHI0

                        // uint wiOverload;                                     expression.hs:1033

0xA2F1  0x44            PUSHI0

                        // string returnType;                                   expression.hs:1034

0xA2F2  0x24 0x02       SYSCALL0 0x02  // String.New

                        // foreach (var doverload in doverloads)                expression.hs:1035

0xA2F4  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA2F6  0x44            PUSHI0
0xA2F7  0x44            PUSHI0
0xA2F8  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA2FA  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xA2FC  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0xA2FE  0x05            EQ
0xA2FF  0x2F 0x40       JNZB 0xA33F (+64)
0xA301  0x56 0x1A 0x1E  PUSHLOCALBB 0x1E1A
0xA304  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA306  0x1B 0x1C       POPLOCALB 0x1C (BP+28)

                        // < <string> > darguments = Symbols.GetDelegateArguments(doverload);

0xA308  0x1A 0x19       PUSHIB 0x19
0xA30A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xA30C  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0xA30E  0x2C 0xBA       CALLB 0xBA     // Symbols.GetDelegateArguments
0xA310  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // string dReturnType = Symbols.GetDelegateReturnType(doverload);

0xA312  0x24 0x02       SYSCALL0 0x02  // String.New
0xA314  0x1C 0x1C       PUSHLOCALB 0x1C (BP+28)
0xA316  0x2C 0xB9       CALLB 0xB9     // Symbols.GetDelegateReturnType
0xA318  0x57 0x22       POPCOPYLOCALB 0x22 (BP+34)

                        // uint iOverload = Types.FindOverload(identifier, darguments, ref returnType);

0xA31A  0x44            PUSHI0
0xA31B  0x56 0x0A 0x20  PUSHLOCALBB 0x200A
0xA31E  0x21 0x18       PUSHSTACKADDRB 0x18 (BP+24)
0xA320  0x2C 0xF0       CALLB 0xF0     // Types.FindOverload
0xA322  0x1B 0x24       POPLOCALB 0x24 (BP+36)

                        // if (Parser.HadError)                                 expression.hs:1040

0xA324  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA326  0x2E 0x06       JZB 0xA32C (+6)

                        // break;                                               expression.hs:1042

0xA328  0x28 0x0C       DECSP 0x0C
0xA32A  0x30 0x17       JB 0xA341 (+23)

                        // if (returnType == dReturnType)                       expression.hs:1044

0xA32C  0x56 0x18 0x22  PUSHLOCALBB 0x2218
0xA32F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA331  0x2F 0x08       JNZB 0xA339 (+8)

                        // wiOverload = iOverload;                              expression.hs:1046

0xA333  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0xA335  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // winner++;                                            expression.hs:1047

0xA337  0x22 0x14       INCLOCALB 0x14 (BP+20)

                        // }                                                    expression.hs:1049

0xA339  0x28 0x06       DECSP 0x06
0xA33B  0x22 0x1E       INCLOCALB 0x1E (BP+30)
0xA33D  0x30 0xBB       JB 0xA2F8 (-69)
0xA33F  0x28 0x06       DECSP 0x06

                        // if (Parser.HadError)                                 expression.hs:1050

0xA341  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA343  0x2E 0x07       JZB 0xA34A (+7)

                        // break;                                               expression.hs:1052

0xA345  0x28 0x18       DECSP 0x18
0xA347  0x33 0x17 0x05  JW 0xA85E (+1303)

                        // if (winner > 1)                                      expression.hs:1054

0xA34A  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA34C  0x45            PUSHI1
0xA34D  0x07            GT
0xA34E  0x2E 0x1A       JZB 0xA368 (+26)

                        // Parser.ErrorAtCurrent("ambiguous function matches for delegate type '" + expectedType + "'");

0xA350  0x37 0x3B 0x14  PUSHIW 0x143B
0xA353  0x1A 0x2E       PUSHIB 0x2E
0xA355  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA357  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA359  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA35B  0x1A 0x27       PUSHIB 0x27
0xA35D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA35F  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA361  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               expression.hs:1057

0xA363  0x28 0x18       DECSP 0x18
0xA365  0x33 0xF9 0x04  JW 0xA85E (+1273)

                        // if (winner == 0)                                     expression.hs:1059

0xA368  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA36A  0x2F 0x15       JNZB 0xA37F (+21)

                        // Parser.ErrorAtCurrent("no function matches for delegate type '" + expectedType + "'");

0xA36C  0x37 0x69 0x14  PUSHIW 0x1469
0xA36F  0x1A 0x27       PUSHIB 0x27
0xA371  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA373  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA375  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA377  0x1A 0x27       PUSHIB 0x27
0xA379  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA37B  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA37D  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Symbols.OverloadToCompile(wiOverload); // delegate pushed onto stack

0xA37F  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xA381  0x2C 0xC9       CALLB 0xC9     // Symbols.OverloadToCompile

                        // CodeStream.AddInstructionPUSHI(wiOverload);

0xA383  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xA385  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = expectedType;                           expression.hs:1066

0xA388  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA38A  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1067

0xA38B  0x28 0x18       DECSP 0x18
0xA38D  0x33 0xD1 0x04  JW 0xA85E (+1233)

                        // <string> nameSpaces = Symbols.GetNameSpaces();

0xA390  0x1A 0x0F       PUSHIB 0x0F
0xA392  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xA394  0x2C 0xA2       CALLB 0xA2     // Symbols.GetNameSpaces
0xA396  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (isDotted)                                        expression.hs:1071

0xA398  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xA39A  0x31 0x09 0x03  JZW 0xA6A3 (+777)

                        // <string> parts = identifier.Split('.');              expression.hs:1074

0xA39D  0x1A 0x0F       PUSHIB 0x0F
0xA39F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xA3A1  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA3A3  0x1A 0x2E       PUSHIB 0x2E
0xA3A5  0x34 0x9E 0x01  CALLW 0x019E   // String.Split
0xA3A8  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // string thisVariable = parts[0];                      expression.hs:1075

0xA3AA  0x24 0x02       SYSCALL0 0x02  // String.New
0xA3AC  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA3AE  0x44            PUSHI0
0xA3AF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA3B1  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // string qualifiedThis;                                expression.hs:1076

0xA3B3  0x24 0x02       SYSCALL0 0x02  // String.New

                        // typeString = Types.GetTypeString(thisVariable, false, ref qualifiedThis);

0xA3B5  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xA3B7  0x44            PUSHI0
0xA3B8  0x21 0x18       PUSHSTACKADDRB 0x18 (BP+24)
0xA3BA  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0xA3BC  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // if (Parser.HadError)                                 expression.hs:1078

0xA3BE  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA3C0  0x2E 0x07       JZB 0xA3C7 (+7)

                        // break;                                               expression.hs:1080

0xA3C2  0x28 0x18       DECSP 0x18
0xA3C4  0x33 0x9A 0x04  JW 0xA85E (+1178)

                        // string functionName = parts[1];                      expression.hs:1082

0xA3C7  0x24 0x02       SYSCALL0 0x02  // String.New
0xA3C9  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA3CB  0x45            PUSHI1
0xA3CC  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA3CE  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // uint cIndex;                                         expression.hs:1083

0xA3D0  0x44            PUSHI0

                        // if (((functionName == "key") || (functionName == "value")) &&

0xA3D1  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA3D3  0x37 0xE8 0x01  PUSHIW 0x01E8
0xA3D6  0x1A 0x03       PUSHIB 0x03
0xA3D8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA3DA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA3DC  0x44            PUSHI0
0xA3DD  0x05            EQ
0xA3DE  0x27 0x00       DUP 0x00
0xA3E0  0x2F 0x10       JNZB 0xA3F0 (+16)
0xA3E2  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA3E4  0x37 0x45 0x03  PUSHIW 0x0345
0xA3E7  0x1A 0x05       PUSHIB 0x05
0xA3E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA3EB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA3ED  0x44            PUSHI0
0xA3EE  0x05            EQ
0xA3EF  0x0B            BOOLOR
0xA3F0  0x27 0x00       DUP 0x00
0xA3F2  0x2E 0x17       JZB 0xA409 (+23)
0xA3F4  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xA3F6  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA3F8  0x44            PUSHI0
0xA3F9  0x07            GT
0xA3FA  0x0C            BOOLAND
0xA3FB  0x27 0x00       DUP 0x00
0xA3FD  0x2E 0x0C       JZB 0xA409 (+12)
0xA3FF  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA401  0x1A 0x2C       PUSHIB 0x2C
0xA403  0x21 0x1C       PUSHSTACKADDRB 0x1C (BP+28)
0xA405  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xA408  0x0C            BOOLAND
0xA409  0x2E 0x54       JZB 0xA45D (+84)

                        // CodeStream.AddInstructionPushVariable(qualifiedThis);

0xA40B  0x1C 0x18       PUSHLOCALB 0x18 (BP+24)
0xA40D  0x34 0x3A 0x01  CALLW 0x013A   // CodeStream.AddInstructionPushVariable

                        // if (functionName == "key")                           expression.hs:1088

0xA410  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA412  0x37 0xE8 0x01  PUSHIW 0x01E8
0xA415  0x1A 0x03       PUSHIB 0x03
0xA417  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA419  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA41B  0x2F 0x1A       JNZB 0xA435 (+26)

                        // CodeStream.AddInstructionSysCall0("Pair", "Key");

0xA41D  0x37 0x41 0x06  PUSHIW 0x0641
0xA420  0x1A 0x04       PUSHIB 0x04
0xA422  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA424  0x37 0xC3 0x05  PUSHIW 0x05C3
0xA427  0x1A 0x03       PUSHIB 0x03
0xA429  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA42B  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = Types.GetKeyFromCollection(typeString);

0xA42E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA430  0x2C 0xE1       CALLB 0xE1     // Types.GetKeyFromCollection
0xA432  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1092

0xA433  0x30 0x25       JB 0xA458 (+37)

                        // else if (functionName == "value")                    expression.hs:1093

0xA435  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA437  0x37 0x45 0x03  PUSHIW 0x0345
0xA43A  0x1A 0x05       PUSHIB 0x05
0xA43C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA43E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA440  0x2F 0x18       JNZB 0xA458 (+24)

                        // CodeStream.AddInstructionSysCall0("Pair", "Value");

0xA442  0x37 0x41 0x06  PUSHIW 0x0641
0xA445  0x1A 0x04       PUSHIB 0x04
0xA447  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA449  0x37 0x74 0x07  PUSHIW 0x0774
0xA44C  0x1A 0x05       PUSHIB 0x05
0xA44E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA450  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = Types.GetValueFromCollection(typeString);

0xA453  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA455  0x2C 0xE2       CALLB 0xE2     // Types.GetValueFromCollection
0xA457  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1098

0xA458  0x28 0x1C       DECSP 0x1C
0xA45A  0x33 0x04 0x04  JW 0xA85E (+1028)

                        // if (!Parser.Check(HopperToken.LParen))               expression.hs:1102

0xA45D  0x1A 0x10       PUSHIB 0x10
0xA45F  0x2C 0x83       CALLB 0x83     // Parser.Check
0xA461  0x2F 0x0F       JNZB 0xA470 (+15)

                        // functionName = functionName + "_Get";                expression.hs:1105

0xA463  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA465  0x37 0x1D 0x06  PUSHIW 0x061D
0xA468  0x1A 0x04       PUSHIB 0x04
0xA46A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA46C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA46E  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // if (typeString.Length > 0)                           expression.hs:1108

0xA470  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA472  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA474  0x44            PUSHI0
0xA475  0x07            GT
0xA476  0x31 0xE0 0x00  JZW 0xA556 (+224)

                        // if (Types.IsDictionary(typeString))                  expression.hs:1111

0xA479  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA47B  0x2C 0xE4       CALLB 0xE4     // Types.IsDictionary
0xA47D  0x2E 0x0D       JZB 0xA48A (+13)

                        // typeString = "Dictionary";                           expression.hs:1113

0xA47F  0x37 0x0D 0x03  PUSHIW 0x030D
0xA482  0x1A 0x0A       PUSHIB 0x0A
0xA484  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA486  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // }                                                    expression.hs:1114

0xA488  0x30 0x59       JB 0xA4E1 (+89)

                        // else if (Types.IsList(typeString))                   expression.hs:1115

0xA48A  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA48C  0x2C 0xE5       CALLB 0xE5     // Types.IsList
0xA48E  0x2E 0x0D       JZB 0xA49B (+13)

                        // typeString = "List";                                 expression.hs:1117

0xA490  0x37 0x17 0x03  PUSHIW 0x0317
0xA493  0x1A 0x04       PUSHIB 0x04
0xA495  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA497  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // }                                                    expression.hs:1118

0xA499  0x30 0x48       JB 0xA4E1 (+72)

                        // else if (Types.IsArray(typeString))                  expression.hs:1119

0xA49B  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA49D  0x2C 0xE6       CALLB 0xE6     // Types.IsArray
0xA49F  0x2E 0x0D       JZB 0xA4AC (+13)

                        // typeString = "Array";                                expression.hs:1121

0xA4A1  0x37 0x01 0x03  PUSHIW 0x0301
0xA4A4  0x1A 0x05       PUSHIB 0x05
0xA4A6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA4A8  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // }                                                    expression.hs:1122

0xA4AA  0x30 0x37       JB 0xA4E1 (+55)

                        // else if (Types.IsEnum(typeString) || Types.IsFlags(typeString))

0xA4AC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA4AE  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xA4B0  0x27 0x00       DUP 0x00
0xA4B2  0x2F 0x07       JNZB 0xA4B9 (+7)
0xA4B4  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA4B6  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xA4B8  0x0B            BOOLOR
0xA4B9  0x2E 0x28       JZB 0xA4E1 (+40)

                        // uint iDot;                                           expression.hs:1126

0xA4BB  0x44            PUSHI0

                        // if (identifier.IndexOf('.', ref iDot))               expression.hs:1127

0xA4BC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA4BE  0x1A 0x2E       PUSHIB 0x2E
0xA4C0  0x21 0x1E       PUSHSTACKADDRB 0x1E (BP+30)
0xA4C2  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xA4C5  0x2E 0x1A       JZB 0xA4DF (+26)

                        // thisVariable = identifier.Substring(0, iDot);

0xA4C7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA4C9  0x44            PUSHI0
0xA4CA  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0xA4CC  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xA4CE  0x57 0x16       POPCOPYLOCALB 0x16 (BP+22)

                        // functionName = identifier.Substring(iDot+1);

0xA4D0  0x56 0x0A 0x1E  PUSHLOCALBB 0x1E0A
0xA4D3  0x45            PUSHI1
0xA4D4  0x00            ADD
0xA4D5  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xA4D7  0x57 0x1A       POPCOPYLOCALB 0x1A (BP+26)

                        // qualifiedName = Types.QualifyMethodName(functionName);

0xA4D9  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA4DB  0x2C 0xE9       CALLB 0xE9     // Types.QualifyMethodName
0xA4DD  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // }                                                    expression.hs:1133

0xA4DF  0x28 0x02       DECSP 0x02

                        // if (qualifiedName.Length == 0)                       expression.hs:1134

0xA4E1  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA4E3  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA4E5  0x2F 0x59       JNZB 0xA53E (+89)

                        // foreach (var nameSpace in nameSpaces)                expression.hs:1136

0xA4E7  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA4E9  0x44            PUSHI0
0xA4EA  0x44            PUSHI0
0xA4EB  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0xA4ED  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xA4EF  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0xA4F1  0x05            EQ
0xA4F2  0x2F 0x4A       JNZB 0xA53C (+74)
0xA4F4  0x56 0x1E 0x22  PUSHLOCALBB 0x221E
0xA4F7  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA4F9  0x57 0x20       POPCOPYLOCALB 0x20 (BP+32)

                        // if (nameSpace == typeString)                         expression.hs:1138

0xA4FB  0x56 0x20 0x0E  PUSHLOCALBB 0x0E20
0xA4FE  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA500  0x2F 0x14       JNZB 0xA514 (+20)

                        // qualifiedName = nameSpace + "." + functionName;

0xA502  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0xA504  0x1A 0x2E       PUSHIB 0x2E
0xA506  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA508  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA50A  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA50C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA50E  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // break;                                               expression.hs:1141

0xA510  0x28 0x06       DECSP 0x06
0xA512  0x30 0x2C       JB 0xA53E (+44)

                        // string lowerNameSpace = nameSpace.ToLower();

0xA514  0x24 0x02       SYSCALL0 0x02  // String.New
0xA516  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0xA518  0x34 0x9A 0x01  CALLW 0x019A   // String.ToLower
0xA51B  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // if (lowerNameSpace == typeString)                    expression.hs:1144

0xA51D  0x56 0x24 0x0E  PUSHLOCALBB 0x0E24
0xA520  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA522  0x2F 0x14       JNZB 0xA536 (+20)

                        // qualifiedName = nameSpace + "." + functionName;

0xA524  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0xA526  0x1A 0x2E       PUSHIB 0x2E
0xA528  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA52A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA52C  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA52E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA530  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // break;                                               expression.hs:1147

0xA532  0x28 0x08       DECSP 0x08
0xA534  0x30 0x0A       JB 0xA53E (+10)

                        // }                                                    expression.hs:1149

0xA536  0x28 0x02       DECSP 0x02
0xA538  0x22 0x22       INCLOCALB 0x22 (BP+34)
0xA53A  0x30 0xB1       JB 0xA4EB (-79)
0xA53C  0x28 0x06       DECSP 0x06

                        // if (qualifiedName.Length > 0)                        expression.hs:1151

0xA53E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA540  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA542  0x44            PUSHI0
0xA543  0x07            GT
0xA544  0x2E 0x0F       JZB 0xA553 (+15)

                        // actualType = compileFunctionCall(qualifiedName, expectedType, thisVariable);

0xA546  0x56 0x0C 0xFE  PUSHLOCALBB 0xFE0C
0xA549  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xA54B  0x2C 0xFD       CALLB 0xFD     // Expression.compileFunctionCall
0xA54D  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1154

0xA54E  0x28 0x1C       DECSP 0x1C
0xA550  0x33 0x0E 0x03  JW 0xA85E (+782)

                        // } // this case                                       expression.hs:1156

0xA553  0x33 0x4C 0x01  JW 0xA69F (+332)

                        // uint fDot;                                           expression.hs:1161

0xA556  0x44            PUSHI0

                        // uint lDot;                                           expression.hs:1162

0xA557  0x44            PUSHI0

                        // bool oneDot = false;                                 expression.hs:1163

0xA558  0x44            PUSHI0

                        // if (identifier.IndexOf('.', ref fDot))               expression.hs:1164

0xA559  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA55B  0x1A 0x2E       PUSHIB 0x2E
0xA55D  0x21 0x1E       PUSHSTACKADDRB 0x1E (BP+30)
0xA55F  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xA562  0x31 0xE8 0x00  JZW 0xA64A (+232)

                        // oneDot = true;                                       expression.hs:1166

0xA565  0x45            PUSHI1
0xA566  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // if (identifier.LastIndexOf('.', ref lDot))           expression.hs:1167

0xA568  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA56A  0x1A 0x2E       PUSHIB 0x2E
0xA56C  0x21 0x20       PUSHSTACKADDRB 0x20 (BP+32)
0xA56E  0x34 0x95 0x01  CALLW 0x0195   // String.LastIndexOf
0xA571  0x2E 0x4F       JZB 0xA5C0 (+79)

                        // if (fDot != lDot) // 2 dots                          expression.hs:1169

0xA573  0x56 0x1E 0x20  PUSHLOCALBB 0x201E
0xA576  0x06            NE
0xA577  0x2E 0x49       JZB 0xA5C0 (+73)

                        // oneDot = false;                                      expression.hs:1171

0xA579  0x44            PUSHI0
0xA57A  0x1B 0x22       POPLOCALB 0x22 (BP+34)

                        // string typeName = identifier.Substring(0, lDot);

0xA57C  0x24 0x02       SYSCALL0 0x02  // String.New
0xA57E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA580  0x44            PUSHI0
0xA581  0x1C 0x20       PUSHLOCALB 0x20 (BP+32)
0xA583  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xA585  0x57 0x24       POPCOPYLOCALB 0x24 (BP+36)

                        // uint value;                                          expression.hs:1174

0xA587  0x44            PUSHI0

                        // if (Symbols.FindEnum(typeName, identifier, ref value))

0xA588  0x56 0x24 0x0A  PUSHLOCALBB 0x0A24
0xA58B  0x21 0x26       PUSHSTACKADDRB 0x26 (BP+38)
0xA58D  0x2C 0x91       CALLB 0x91     // Symbols.FindEnum
0xA58F  0x2E 0x14       JZB 0xA5A3 (+20)

                        // CodeStream.AddInstructionPUSHI(value);               expression.hs:1177

0xA591  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0xA593  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "enum";                                 expression.hs:1178

0xA596  0x37 0x09 0x0C  PUSHIW 0x0C09
0xA599  0x1A 0x04       PUSHIB 0x04
0xA59B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA59D  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1179

0xA59E  0x28 0x26       DECSP 0x26
0xA5A0  0x33 0xBE 0x02  JW 0xA85E (+702)

                        // if (Symbols.FindFlags(typeName, identifier, ref value))

0xA5A3  0x56 0x24 0x0A  PUSHLOCALBB 0x0A24
0xA5A6  0x21 0x26       PUSHSTACKADDRB 0x26 (BP+38)
0xA5A8  0x2C 0x93       CALLB 0x93     // Symbols.FindFlags
0xA5AA  0x2E 0x14       JZB 0xA5BE (+20)

                        // CodeStream.AddInstructionPUSHI(value);               expression.hs:1183

0xA5AC  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0xA5AE  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "flags";                                expression.hs:1184

0xA5B1  0x37 0x15 0x0C  PUSHIW 0x0C15
0xA5B4  0x1A 0x05       PUSHIB 0x05
0xA5B6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA5B8  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1185

0xA5B9  0x28 0x26       DECSP 0x26
0xA5BB  0x33 0xA3 0x02  JW 0xA85E (+675)

                        // }                                                    expression.hs:1187

0xA5BE  0x28 0x04       DECSP 0x04

                        // if (oneDot)                                          expression.hs:1189

0xA5C0  0x1C 0x22       PUSHLOCALB 0x22 (BP+34)
0xA5C2  0x31 0x88 0x00  JZW 0xA64A (+136)

                        // actualType = "";                                     expression.hs:1191

0xA5C5  0x24 0x02       SYSCALL0 0x02  // String.New
0xA5C7  0x5D            POPCOPYLOCALB00

                        // foreach (var nameSpace in nameSpaces)                expression.hs:1192

0xA5C8  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA5CA  0x44            PUSHI0
0xA5CB  0x44            PUSHI0
0xA5CC  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0xA5CE  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xA5D0  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0xA5D2  0x05            EQ
0xA5D3  0x2F 0x69       JNZB 0xA63C (+105)
0xA5D5  0x56 0x24 0x28  PUSHLOCALBB 0x2824
0xA5D8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA5DA  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // string typeName = nameSpace + "." + identifier.Substring(0, fDot);

0xA5DC  0x24 0x02       SYSCALL0 0x02  // String.New
0xA5DE  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0xA5E0  0x1A 0x2E       PUSHIB 0x2E
0xA5E2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA5E4  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA5E6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA5E8  0x44            PUSHI0
0xA5E9  0x1C 0x1E       PUSHLOCALB 0x1E (BP+30)
0xA5EB  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xA5ED  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA5EF  0x57 0x2A       POPCOPYLOCALB 0x2A (BP+42)

                        // string memberName = nameSpace + "." + identifier;

0xA5F1  0x24 0x02       SYSCALL0 0x02  // String.New
0xA5F3  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0xA5F5  0x1A 0x2E       PUSHIB 0x2E
0xA5F7  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA5F9  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA5FB  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA5FD  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA5FF  0x57 0x2C       POPCOPYLOCALB 0x2C (BP+44)

                        // uint value;                                          expression.hs:1196

0xA601  0x44            PUSHI0

                        // if (Symbols.FindEnum(typeName, memberName, ref value))

0xA602  0x56 0x2A 0x2C  PUSHLOCALBB 0x2C2A
0xA605  0x21 0x2E       PUSHSTACKADDRB 0x2E (BP+46)
0xA607  0x2C 0x91       CALLB 0x91     // Symbols.FindEnum
0xA609  0x2E 0x13       JZB 0xA61C (+19)

                        // CodeStream.AddInstructionPUSHI(value);               expression.hs:1199

0xA60B  0x1C 0x2E       PUSHLOCALB 0x2E (BP+46)
0xA60D  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "enum";                                 expression.hs:1200

0xA610  0x37 0x09 0x0C  PUSHIW 0x0C09
0xA613  0x1A 0x04       PUSHIB 0x04
0xA615  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA617  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1201

0xA618  0x28 0x0C       DECSP 0x0C
0xA61A  0x30 0x24       JB 0xA63E (+36)

                        // if (Symbols.FindFlags(typeName, memberName, ref value))

0xA61C  0x56 0x2A 0x2C  PUSHLOCALBB 0x2C2A
0xA61F  0x21 0x2E       PUSHSTACKADDRB 0x2E (BP+46)
0xA621  0x2C 0x93       CALLB 0x93     // Symbols.FindFlags
0xA623  0x2E 0x13       JZB 0xA636 (+19)

                        // CodeStream.AddInstructionPUSHI(value);               expression.hs:1205

0xA625  0x1C 0x2E       PUSHLOCALB 0x2E (BP+46)
0xA627  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "flags";                                expression.hs:1206

0xA62A  0x37 0x15 0x0C  PUSHIW 0x0C15
0xA62D  0x1A 0x05       PUSHIB 0x05
0xA62F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA631  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1207

0xA632  0x28 0x0C       DECSP 0x0C
0xA634  0x30 0x0A       JB 0xA63E (+10)

                        // }                                                    expression.hs:1209

0xA636  0x28 0x06       DECSP 0x06
0xA638  0x22 0x28       INCLOCALB 0x28 (BP+40)
0xA63A  0x30 0x92       JB 0xA5CC (-110)
0xA63C  0x28 0x06       DECSP 0x06

                        // if (actualType.Length > 0)                           expression.hs:1210

0xA63E  0x4E            PUSHLOCALB00
0xA63F  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA641  0x44            PUSHI0
0xA642  0x07            GT
0xA643  0x2E 0x07       JZB 0xA64A (+7)

                        // break;                                               expression.hs:1212

0xA645  0x28 0x22       DECSP 0x22
0xA647  0x33 0x17 0x02  JW 0xA85E (+535)

                        // typeString = parts[0];                               expression.hs:1216

0xA64A  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA64C  0x44            PUSHI0
0xA64D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA64F  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // qualifiedName = "";                                  expression.hs:1217

0xA651  0x24 0x02       SYSCALL0 0x02  // String.New
0xA653  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var nameSpace in nameSpaces)                expression.hs:1218

0xA655  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xA657  0x44            PUSHI0
0xA658  0x44            PUSHI0
0xA659  0x1C 0x24       PUSHLOCALB 0x24 (BP+36)
0xA65B  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xA65D  0x1C 0x28       PUSHLOCALB 0x28 (BP+40)
0xA65F  0x05            EQ
0xA660  0x2F 0x26       JNZB 0xA686 (+38)
0xA662  0x56 0x24 0x28  PUSHLOCALBB 0x2824
0xA665  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xA667  0x57 0x26       POPCOPYLOCALB 0x26 (BP+38)

                        // if (nameSpace == typeString)                         expression.hs:1220

0xA669  0x56 0x26 0x0E  PUSHLOCALBB 0x0E26
0xA66C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA66E  0x2F 0x14       JNZB 0xA682 (+20)

                        // qualifiedName = nameSpace + "." + functionName;

0xA670  0x1C 0x26       PUSHLOCALB 0x26 (BP+38)
0xA672  0x1A 0x2E       PUSHIB 0x2E
0xA674  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA676  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA678  0x1C 0x1A       PUSHLOCALB 0x1A (BP+26)
0xA67A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA67C  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // break;                                               expression.hs:1223

0xA67E  0x28 0x06       DECSP 0x06
0xA680  0x30 0x08       JB 0xA688 (+8)

                        // }                                                    expression.hs:1225

0xA682  0x22 0x28       INCLOCALB 0x28 (BP+40)
0xA684  0x30 0xD5       JB 0xA659 (-43)
0xA686  0x28 0x06       DECSP 0x06

                        // if (qualifiedName.Length > 0)                        expression.hs:1226

0xA688  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA68A  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xA68C  0x44            PUSHI0
0xA68D  0x07            GT
0xA68E  0x2E 0x0F       JZB 0xA69D (+15)

                        // actualType = compileFunctionCall(qualifiedName, expectedType, "");

0xA690  0x56 0x0C 0xFE  PUSHLOCALBB 0xFE0C
0xA693  0x24 0x02       SYSCALL0 0x02  // String.New
0xA695  0x2C 0xFD       CALLB 0xFD     // Expression.compileFunctionCall
0xA697  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:1229

0xA698  0x28 0x22       DECSP 0x22
0xA69A  0x33 0xC4 0x01  JW 0xA85E (+452)

                        // }                                                    expression.hs:1231

0xA69D  0x28 0x06       DECSP 0x06

                        // } // isDotted                                        expression.hs:1232

0xA69F  0x28 0x0A       DECSP 0x0A
0xA6A1  0x30 0x3B       JB 0xA6DC (+59)

                        // if (!Parser.Check(HopperToken.LParen))               expression.hs:1236

0xA6A3  0x1A 0x10       PUSHIB 0x10
0xA6A5  0x2C 0x83       CALLB 0x83     // Parser.Check
0xA6A7  0x2F 0x0F       JNZB 0xA6B6 (+15)

                        // identifier = identifier + "_Get";                    expression.hs:1239

0xA6A9  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA6AB  0x37 0x1D 0x06  PUSHIW 0x061D
0xA6AE  0x1A 0x04       PUSHIB 0x04
0xA6B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA6B2  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA6B4  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string qualifiedIdentifier = Types.QualifyMethodName(identifier);

0xA6B6  0x24 0x02       SYSCALL0 0x02  // String.New
0xA6B8  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA6BA  0x2C 0xE9       CALLB 0xE9     // Types.QualifyMethodName
0xA6BC  0x57 0x14       POPCOPYLOCALB 0x14 (BP+20)

                        // bool success = false;                                expression.hs:1242

0xA6BE  0x44            PUSHI0

                        // uint fIndex;                                         expression.hs:1243

0xA6BF  0x44            PUSHI0

                        // if (GetFunctionIndex(qualifiedIdentifier, ref fIndex))

0xA6C0  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xA6C2  0x21 0x18       PUSHSTACKADDRB 0x18 (BP+24)
0xA6C4  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0xA6C6  0x2E 0x14       JZB 0xA6DA (+20)

                        // actualType = compileFunctionCall(qualifiedIdentifier, expectedType, "");

0xA6C8  0x56 0x14 0xFE  PUSHLOCALBB 0xFE14
0xA6CB  0x24 0x02       SYSCALL0 0x02  // String.New
0xA6CD  0x2C 0xFD       CALLB 0xFD     // Expression.compileFunctionCall
0xA6CF  0x5D            POPCOPYLOCALB00

                        // success = !Parser.HadError;                          expression.hs:1247

0xA6D0  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA6D2  0x41            BOOLNOT
0xA6D3  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // break;                                               expression.hs:1248

0xA6D5  0x28 0x18       DECSP 0x18
0xA6D7  0x33 0x87 0x01  JW 0xA85E (+391)

                        // }                                                    expression.hs:1250

0xA6DA  0x28 0x06       DECSP 0x06

                        // Parser.ErrorAtCurrent("'" + currentToken["lexeme"] + "' is not defined");

0xA6DC  0x1A 0x27       PUSHIB 0x27
0xA6DE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA6E0  0x4F            PUSHLOCALB02
0xA6E1  0x37 0x06 0x02  PUSHIW 0x0206
0xA6E4  0x1A 0x06       PUSHIB 0x06
0xA6E6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA6E8  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xA6EA  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA6EC  0x37 0x90 0x14  PUSHIW 0x1490
0xA6EF  0x1A 0x10       PUSHIB 0x10
0xA6F1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA6F3  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA6F5  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    expression.hs:1252

0xA6F7  0x28 0x0A       DECSP 0x0A
0xA6F9  0x33 0x61 0x01  JW 0xA85A (+353)

                        // case HopperToken.Keyword:                            expression.hs:1253

0xA6FC  0x1A 0x05       PUSHIB 0x05
0xA6FE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA700  0x05            EQ
0xA701  0x31 0x25 0x01  JZW 0xA826 (+293)

                        // string typeName = currentToken["lexeme"];            expression.hs:1255

0xA704  0x24 0x02       SYSCALL0 0x02  // String.New
0xA706  0x4F            PUSHLOCALB02
0xA707  0x37 0x06 0x02  PUSHIW 0x0206
0xA70A  0x1A 0x06       PUSHIB 0x06
0xA70C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA70E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xA710  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // bool doTypeOf;                                       expression.hs:1256

0xA712  0x44            PUSHI0

                        // bool typeId = Token.IsTypeKeyword(typeName);

0xA713  0x44            PUSHI0
0xA714  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA716  0x2C 0x4E       CALLB 0x4E     // Token.IsTypeKeyword
0xA718  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // Parser.Advance();                                    expression.hs:1258

0xA71A  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // if (!IsSimpleType(typeName))                         expression.hs:1259

0xA71C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA71E  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0xA720  0x2F 0x34       JNZB 0xA754 (+52)

                        // if (Parser.Check(HopperToken.LParen))                expression.hs:1261

0xA722  0x1A 0x10       PUSHIB 0x10
0xA724  0x2C 0x83       CALLB 0x83     // Parser.Check
0xA726  0x2E 0x20       JZB 0xA746 (+32)

                        // if (typeName == "typeof")                            expression.hs:1263

0xA728  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA72A  0x37 0xA0 0x14  PUSHIW 0x14A0
0xA72D  0x1A 0x06       PUSHIB 0x06
0xA72F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA731  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA733  0x2F 0x07       JNZB 0xA73A (+7)

                        // doTypeOf = true;                                     expression.hs:1266

0xA735  0x45            PUSHI1
0xA736  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // }                                                    expression.hs:1267

0xA738  0x30 0x1C       JB 0xA754 (+28)

                        // Parser.ErrorAt(currentToken, "compilePrimary not implemented");

0xA73A  0x4F            PUSHLOCALB02
0xA73B  0x37 0xA6 0x14  PUSHIW 0x14A6
0xA73E  0x1A 0x1E       PUSHIB 0x1E
0xA740  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA742  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // }                                                    expression.hs:1272

0xA744  0x30 0x10       JB 0xA754 (+16)

                        // if (typeId)                                          expression.hs:1275

0xA746  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA748  0x2F 0x0C       JNZB 0xA754 (+12)

                        // Parser.ErrorAt(currentToken, "compilePrimary not implemented");

0xA74A  0x4F            PUSHLOCALB02
0xA74B  0x37 0xA6 0x14  PUSHIW 0x14A6
0xA74E  0x1A 0x1E       PUSHIB 0x1E
0xA750  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA752  0x2C 0x7A       CALLB 0x7A     // Parser.ErrorAt

                        // string sourceType;                                   expression.hs:1286

0xA754  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (Parser.Check(HopperToken.LParen, "'(' expected"))

0xA756  0x1A 0x10       PUSHIB 0x10
0xA758  0x37 0xC4 0x14  PUSHIW 0x14C4
0xA75B  0x1A 0x0C       PUSHIB 0x0C
0xA75D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA75F  0x2C 0x84       CALLB 0x84     // Parser.Check
0xA761  0x2E 0x6B       JZB 0xA7CC (+107)

                        // if (!IsValueType(typeName))                          expression.hs:1289

0xA763  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA765  0x2C 0xDB       CALLB 0xDB     // Types.IsValueType
0xA767  0x2F 0x3A       JNZB 0xA7A1 (+58)

                        // if (!doTypeOf)                                       expression.hs:1291

0xA769  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA76B  0x2F 0x36       JNZB 0xA7A1 (+54)

                        // if ((typeName == "long") || (typeName == "float"))

0xA76D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA76F  0x37 0xF7 0x05  PUSHIW 0x05F7
0xA772  0x1A 0x04       PUSHIB 0x04
0xA774  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA776  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA778  0x44            PUSHI0
0xA779  0x05            EQ
0xA77A  0x27 0x00       DUP 0x00
0xA77C  0x2F 0x10       JNZB 0xA78C (+16)
0xA77E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA780  0x37 0x08 0x06  PUSHIW 0x0608
0xA783  0x1A 0x05       PUSHIB 0x05
0xA785  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA787  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA789  0x44            PUSHI0
0xA78A  0x05            EQ
0xA78B  0x0B            BOOLOR
0xA78C  0x2F 0x15       JNZB 0xA7A1 (+21)

                        // Parser.ErrorAtCurrent("'" + typeName + "' is an invalid type for simple cast");

0xA78E  0x1A 0x27       PUSHIB 0x27
0xA790  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xA792  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA794  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA796  0x37 0xD0 0x14  PUSHIW 0x14D0
0xA799  0x1A 0x24       PUSHIB 0x24
0xA79B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA79D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA79F  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Parser.Advance(); // (                               expression.hs:1307

0xA7A1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // sourceType = CompileExpression(expectedType);

0xA7A3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA7A5  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA7A8  0x57 0x10       POPCOPYLOCALB 0x10 (BP+16)

                        // if (Parser.HadError)                                 expression.hs:1309

0xA7AA  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA7AC  0x2E 0x07       JZB 0xA7B3 (+7)

                        // break;                                               expression.hs:1311

0xA7AE  0x28 0x10       DECSP 0x10
0xA7B0  0x33 0xAE 0x00  JW 0xA85E (+174)

                        // if (!Parser.Check(HopperToken.RParen, "')' expected"))

0xA7B3  0x1A 0x11       PUSHIB 0x11
0xA7B5  0x37 0xF4 0x14  PUSHIW 0x14F4
0xA7B8  0x1A 0x0C       PUSHIB 0x0C
0xA7BA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA7BC  0x2C 0x84       CALLB 0x84     // Parser.Check
0xA7BE  0x2F 0x07       JNZB 0xA7C5 (+7)

                        // break;                                               expression.hs:1315

0xA7C0  0x28 0x10       DECSP 0x10
0xA7C2  0x33 0x9C 0x00  JW 0xA85E (+156)

                        // Parser.Advance(); // )                               expression.hs:1317

0xA7C5  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // typeId = false;                                      expression.hs:1318

0xA7C7  0x44            PUSHI0
0xA7C8  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // }                                                    expression.hs:1319

0xA7CA  0x30 0x12       JB 0xA7DC (+18)

                        // else if (typeId)                                     expression.hs:1320

0xA7CC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA7CE  0x2E 0x0E       JZB 0xA7DC (+14)

                        // PushTypeFromString(typeName);                        expression.hs:1322

0xA7D0  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA7D2  0x2C 0xF8       CALLB 0xF8     // Expression.PushTypeFromString

                        // actualType = "type";                                 expression.hs:1323

0xA7D4  0x37 0x13 0x01  PUSHIW 0x0113
0xA7D7  0x1A 0x04       PUSHIB 0x04
0xA7D9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA7DB  0x5D            POPCOPYLOCALB00

                        // if (typeId)                                          expression.hs:1325

0xA7DC  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xA7DE  0x2F 0x3C       JNZB 0xA81A (+60)

                        // else if (doTypeOf)                                   expression.hs:1329

0xA7E0  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xA7E2  0x2E 0x1D       JZB 0xA7FF (+29)

                        // CodeStream.AddInstructionSysCall0("Types", "BoxTypeOf");

0xA7E4  0x37 0x4E 0x09  PUSHIW 0x094E
0xA7E7  0x1A 0x05       PUSHIB 0x05
0xA7E9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA7EB  0x37 0x6D 0x09  PUSHIW 0x096D
0xA7EE  0x1A 0x09       PUSHIB 0x09
0xA7F0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA7F2  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "type";                                 expression.hs:1333

0xA7F5  0x37 0x13 0x01  PUSHIW 0x0113
0xA7F8  0x1A 0x04       PUSHIB 0x04
0xA7FA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA7FC  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1334

0xA7FD  0x30 0x1D       JB 0xA81A (+29)

                        // else if (typeName != sourceType)                     expression.hs:1335

0xA7FF  0x56 0x0A 0x10  PUSHLOCALBB 0x100A
0xA802  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA804  0x2E 0x13       JZB 0xA817 (+19)

                        // if (Types.AutomaticUpCastTop(sourceType, typeName))

0xA806  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0xA809  0x2C 0xD4       CALLB 0xD4     // Types.AutomaticUpCastTop
0xA80B  0x2F 0x07       JNZB 0xA812 (+7)

                        // CompileDynamicCast(sourceType, typeName);            expression.hs:1344

0xA80D  0x56 0x10 0x0A  PUSHLOCALBB 0x0A10
0xA810  0x2C 0xFA       CALLB 0xFA     // Expression.CompileDynamicCast

                        // actualType = typeName; // simple cast                expression.hs:1346

0xA812  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA814  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:1347

0xA815  0x30 0x05       JB 0xA81A (+5)

                        // actualType = typeName; // nop                        expression.hs:1350

0xA817  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xA819  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1352

0xA81A  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA81C  0x2E 0x06       JZB 0xA822 (+6)

                        // break;                                               expression.hs:1354

0xA81E  0x28 0x10       DECSP 0x10
0xA820  0x30 0x3E       JB 0xA85E (+62)

                        // }                                                    expression.hs:1356

0xA822  0x28 0x08       DECSP 0x08
0xA824  0x30 0x36       JB 0xA85A (+54)

                        // case HopperToken.LParen:                             expression.hs:1357

0xA826  0x1A 0x10       PUSHIB 0x10
0xA828  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA82A  0x05            EQ
0xA82B  0x2E 0x1A       JZB 0xA845 (+26)

                        // Parser.Advance(); // (                               expression.hs:1359

0xA82D  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // actualType = CompileExpression(expectedType);

0xA82F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA831  0x34 0x0A 0x01  CALLW 0x010A   // Expression.CompileExpression
0xA834  0x5D            POPCOPYLOCALB00

                        // if (Parser.HadError)                                 expression.hs:1361

0xA835  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xA837  0x2E 0x06       JZB 0xA83D (+6)

                        // break;                                               expression.hs:1363

0xA839  0x28 0x08       DECSP 0x08
0xA83B  0x30 0x23       JB 0xA85E (+35)

                        // Parser.Consume(HopperToken.RParen, ')');             expression.hs:1365

0xA83D  0x1A 0x11       PUSHIB 0x11
0xA83F  0x1A 0x29       PUSHIB 0x29
0xA841  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // }                                                    expression.hs:1366

0xA843  0x30 0x17       JB 0xA85A (+23)

                        // Parser.ErrorAtCurrent("compilePrimary not implemented for " + currentToken["type"]);

0xA845  0x37 0x00 0x15  PUSHIW 0x1500
0xA848  0x1A 0x23       PUSHIB 0x23
0xA84A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA84C  0x4F            PUSHLOCALB02
0xA84D  0x37 0x13 0x01  PUSHIW 0x0113
0xA850  0x1A 0x04       PUSHIB 0x04
0xA852  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA854  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xA856  0x24 0x03       SYSCALL0 0x03  // String.Append
0xA858  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    expression.hs:1371

0xA85A  0x28 0x02       DECSP 0x02

                        // break;                                               expression.hs:1372

0xA85C  0x28 0x06       DECSP 0x06

                        // return actualType;                                   expression.hs:1374

0xA85E  0x4E            PUSHLOCALB00
0xA85F  0x2B 0x04       RETRETB 0x04


// /source/compiler/expression.hs:601
// ####  Expression.compileFunctionCall(..)  ####                               0x00FD

0xA861  0x49            ENTER

                        // string actualType;                                   expression.hs:602

0xA862  0x24 0x02       SYSCALL0 0x02  // String.New

                        // actualType = CompileMethodCall(functionName, thisVariable);

0xA864  0x56 0xFA 0xFE  PUSHLOCALBB 0xFEFA
0xA867  0x2C 0xFC       CALLB 0xFC     // Expression.CompileMethodCall
0xA869  0x5D            POPCOPYLOCALB00

                        // return actualType;                                   expression.hs:608

0xA86A  0x4E            PUSHLOCALB00
0xA86B  0x2B 0x08       RETRETB 0x08


// /source/compiler/expression.hs:612
// ####  Expression.compileConstant(..)  ####                                   0x00FE

0xA86D  0x49            ENTER

                        // string actualType;                                   expression.hs:613

0xA86E  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string value = Symbols.GetConstantValue(constantName);

0xA870  0x24 0x02       SYSCALL0 0x02  // String.New
0xA872  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xA874  0x2C 0x99       CALLB 0x99     // Symbols.GetConstantValue
0xA876  0x5E            POPCOPYLOCALB02

                        // long l;                                              expression.hs:617

0xA877  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // float f;                                             expression.hs:618

0xA879  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (Token.TryParseLong(value, ref l))                expression.hs:619

0xA87B  0x4F            PUSHLOCALB02
0xA87C  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xA87E  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xA880  0x31 0xE7 0x00  JZW 0xA967 (+231)

                        // if (l < -32768)                                      expression.hs:621

0xA883  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA885  0x37 0x00 0x80  PUSHIW 0x8000
0xA888  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xA88A  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0xA88C  0x24 0x45       SYSCALL0 0x45  // Long.LT
0xA88E  0x2E 0x2D       JZB 0xA8BB (+45)

                        // uint constantAddress = CodeStream.CreateLongConstant(l);

0xA890  0x44            PUSHI0
0xA891  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA893  0x34 0x2B 0x01  CALLW 0x012B   // CodeStream.CreateLongConstant
0xA896  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0xA898  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA89A  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Long", "NewFromConstant");

0xA89D  0x37 0x01 0x06  PUSHIW 0x0601
0xA8A0  0x1A 0x04       PUSHIB 0x04
0xA8A2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA8A4  0x37 0xD8 0x06  PUSHIW 0x06D8
0xA8A7  0x1A 0x0F       PUSHIB 0x0F
0xA8A9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA8AB  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "long";                                 expression.hs:626

0xA8AE  0x37 0xF7 0x05  PUSHIW 0x05F7
0xA8B1  0x1A 0x04       PUSHIB 0x04
0xA8B3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA8B5  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:627

0xA8B6  0x28 0x02       DECSP 0x02
0xA8B8  0x33 0x22 0x01  JW 0xA9DA (+290)

                        // else if (l < 0)                                      expression.hs:628

0xA8BB  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA8BD  0x44            PUSHI0
0xA8BE  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xA8C0  0x24 0x45       SYSCALL0 0x45  // Long.LT
0xA8C2  0x2E 0x11       JZB 0xA8D3 (+17)

                        // Die(0x0A); // CODEGEN : push value                   expression.hs:630

0xA8C4  0x1A 0x0A       PUSHIB 0x0A
0xA8C6  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // actualType = "-int";                                 expression.hs:631

0xA8C8  0x37 0x29 0x10  PUSHIW 0x1029
0xA8CB  0x1A 0x04       PUSHIB 0x04
0xA8CD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA8CF  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:632

0xA8D0  0x33 0x0A 0x01  JW 0xA9DA (+266)

                        // else if (l < 256)                                    expression.hs:633

0xA8D3  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA8D5  0x37 0x00 0x01  PUSHIW 0x0100
0xA8D8  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0xA8DA  0x24 0x45       SYSCALL0 0x45  // Long.LT
0xA8DC  0x2E 0x1A       JZB 0xA8F6 (+26)

                        // uint ui = uint(l);                                   expression.hs:635

0xA8DE  0x44            PUSHI0
0xA8DF  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA8E1  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0xA8E3  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(ui);                  expression.hs:636

0xA8E5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA8E7  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "byte";                                 expression.hs:637

0xA8EA  0x37 0x51 0x05  PUSHIW 0x0551
0xA8ED  0x1A 0x04       PUSHIB 0x04
0xA8EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA8F1  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:638

0xA8F2  0x28 0x02       DECSP 0x02
0xA8F4  0x30 0x70       JB 0xA964 (+112)

                        // else if (l < 32768)                                  expression.hs:639

0xA8F6  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA8F8  0x37 0x00 0x80  PUSHIW 0x8000
0xA8FB  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xA8FD  0x24 0x45       SYSCALL0 0x45  // Long.LT
0xA8FF  0x2E 0x1A       JZB 0xA919 (+26)

                        // uint ui = uint(l);                                   expression.hs:641

0xA901  0x44            PUSHI0
0xA902  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA904  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0xA906  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(ui);                  expression.hs:642

0xA908  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA90A  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "+int";                                 expression.hs:643

0xA90D  0x37 0x24 0x10  PUSHIW 0x1024
0xA910  0x1A 0x04       PUSHIB 0x04
0xA912  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA914  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:644

0xA915  0x28 0x02       DECSP 0x02
0xA917  0x30 0x4D       JB 0xA964 (+77)

                        // else if (l <= 65535)                                 expression.hs:645

0xA919  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA91B  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0xA91E  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xA920  0x24 0x46       SYSCALL0 0x46  // Long.LE
0xA922  0x2E 0x1A       JZB 0xA93C (+26)

                        // uint ui = uint(l);                                   expression.hs:647

0xA924  0x44            PUSHI0
0xA925  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA927  0x24 0x3C       SYSCALL0 0x3C  // Long.ToUInt
0xA929  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(ui);                  expression.hs:648

0xA92B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA92D  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // actualType = "uint";                                 expression.hs:649

0xA930  0x37 0x2F 0x02  PUSHIW 0x022F
0xA933  0x1A 0x04       PUSHIB 0x04
0xA935  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA937  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:650

0xA938  0x28 0x02       DECSP 0x02
0xA93A  0x30 0x2A       JB 0xA964 (+42)

                        // uint constantAddress = CodeStream.CreateLongConstant(l);

0xA93C  0x44            PUSHI0
0xA93D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xA93F  0x34 0x2B 0x01  CALLW 0x012B   // CodeStream.CreateLongConstant
0xA942  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0xA944  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA946  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Long", "NewFromConstant");

0xA949  0x37 0x01 0x06  PUSHIW 0x0601
0xA94C  0x1A 0x04       PUSHIB 0x04
0xA94E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA950  0x37 0xD8 0x06  PUSHIW 0x06D8
0xA953  0x1A 0x0F       PUSHIB 0x0F
0xA955  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA957  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "long";                                 expression.hs:656

0xA95A  0x37 0xF7 0x05  PUSHIW 0x05F7
0xA95D  0x1A 0x04       PUSHIB 0x04
0xA95F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA961  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:657

0xA962  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:658

0xA964  0x33 0x76 0x00  JW 0xA9DA (+118)

                        // else if (value == "true")                            expression.hs:659

0xA967  0x4F            PUSHLOCALB02
0xA968  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0xA96B  0x1A 0x04       PUSHIB 0x04
0xA96D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA96F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA971  0x2F 0x11       JNZB 0xA982 (+17)

                        // CodeStream.AddInstruction(Instruction.PUSHI1);

0xA973  0x1A 0x45       PUSHIB 0x45
0xA975  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "bool";                                 expression.hs:662

0xA978  0x37 0x6F 0x03  PUSHIW 0x036F
0xA97B  0x1A 0x04       PUSHIB 0x04
0xA97D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA97F  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:663

0xA980  0x30 0x5A       JB 0xA9DA (+90)

                        // else if (value == "false")                           expression.hs:664

0xA982  0x4F            PUSHLOCALB02
0xA983  0x37 0x4C 0x05  PUSHIW 0x054C
0xA986  0x1A 0x05       PUSHIB 0x05
0xA988  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA98A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA98C  0x2F 0x11       JNZB 0xA99D (+17)

                        // CodeStream.AddInstruction(Instruction.PUSHI0);

0xA98E  0x1A 0x44       PUSHIB 0x44
0xA990  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // actualType = "bool";                                 expression.hs:667

0xA993  0x37 0x6F 0x03  PUSHIW 0x036F
0xA996  0x1A 0x04       PUSHIB 0x04
0xA998  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA99A  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:668

0xA99B  0x30 0x3F       JB 0xA9DA (+63)

                        // else if (Token.TryParseFloat(value, ref f))

0xA99D  0x4F            PUSHLOCALB02
0xA99E  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xA9A0  0x2C 0x58       CALLB 0x58     // Token.TryParseFloat
0xA9A2  0x2E 0x2C       JZB 0xA9CE (+44)

                        // uint constantAddress = CodeStream.CreateFloatConstant(f);

0xA9A4  0x44            PUSHI0
0xA9A5  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xA9A7  0x34 0x2A 0x01  CALLW 0x012A   // CodeStream.CreateFloatConstant
0xA9AA  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.AddInstructionPUSHI(constantAddress);

0xA9AC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xA9AE  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstructionSysCall0("Float", "NewFromConstant");

0xA9B1  0x37 0x0F 0x06  PUSHIW 0x060F
0xA9B4  0x1A 0x05       PUSHIB 0x05
0xA9B6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9B8  0x37 0xD8 0x06  PUSHIW 0x06D8
0xA9BB  0x1A 0x0F       PUSHIB 0x0F
0xA9BD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9BF  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // actualType = "float";                                expression.hs:674

0xA9C2  0x37 0x08 0x06  PUSHIW 0x0608
0xA9C5  0x1A 0x05       PUSHIB 0x05
0xA9C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9C9  0x5D            POPCOPYLOCALB00

                        // }                                                    expression.hs:675

0xA9CA  0x28 0x02       DECSP 0x02
0xA9CC  0x30 0x0E       JB 0xA9DA (+14)

                        // AddString(value);                                    expression.hs:678

0xA9CE  0x4F            PUSHLOCALB02
0xA9CF  0x34 0x3C 0x01  CALLW 0x013C   // CodeStream.AddString

                        // actualType = "string";                               expression.hs:679

0xA9D2  0x37 0x62 0x02  PUSHIW 0x0262
0xA9D5  0x1A 0x06       PUSHIB 0x06
0xA9D7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9D9  0x5D            POPCOPYLOCALB00

                        // break;                                               expression.hs:681

0xA9DA  0x28 0x06       DECSP 0x06

                        // return actualType;                                   expression.hs:684

0xA9DC  0x4E            PUSHLOCALB00
0xA9DD  0x2B 0x06       RETRETB 0x06


// /source/compiler/expression.hs:87
// ####  Expression.CompileDynamicCast(..)  ####                                0x00FA

0xA9DF  0x49            ENTER

                        // switch (sourceType)                                  expression.hs:88

0xA9E0  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)

                        // case "type":                                         expression.hs:90

0xA9E2  0x37 0x13 0x01  PUSHIW 0x0113
0xA9E5  0x1A 0x04       PUSHIB 0x04
0xA9E7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9E9  0x4E            PUSHLOCALB00
0xA9EA  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA9EC  0x2F 0x42       JNZB 0xAA2E (+66)

                        // switch (castToType)                                  expression.hs:92

0xA9EE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "byte":                                         expression.hs:94

0xA9F0  0x37 0x51 0x05  PUSHIW 0x0551
0xA9F3  0x1A 0x04       PUSHIB 0x04
0xA9F5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xA9F7  0x4F            PUSHLOCALB02
0xA9F8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xA9FA  0x2E 0x2F       JZB 0xAA29 (+47)

                        // case "uint":                                         expression.hs:95

0xA9FC  0x37 0x2F 0x02  PUSHIW 0x022F
0xA9FF  0x1A 0x04       PUSHIB 0x04
0xAA01  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA03  0x4F            PUSHLOCALB02
0xAA04  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA06  0x2E 0x23       JZB 0xAA29 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAA08  0x1A 0x27       PUSHIB 0x27
0xAA0A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAA0C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAA0E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA10  0x37 0x23 0x15  PUSHIW 0x1523
0xAA13  0x1A 0x06       PUSHIB 0x06
0xAA15  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA17  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA19  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAA1B  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA1D  0x1A 0x27       PUSHIB 0x27
0xAA1F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAA21  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA23  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:102

0xAA25  0x1A 0x0A       PUSHIB 0x0A
0xAA27  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:104

0xAA29  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:105

0xAA2B  0x33 0x7C 0x03  JW 0xADA7 (+892)

                        // case "byte":                                         expression.hs:106

0xAA2E  0x37 0x51 0x05  PUSHIW 0x0551
0xAA31  0x1A 0x04       PUSHIB 0x04
0xAA33  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA35  0x4E            PUSHLOCALB00
0xAA36  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA38  0x2F 0x5E       JNZB 0xAA96 (+94)

                        // switch (castToType)                                  expression.hs:108

0xAA3A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "char":                                         expression.hs:110

0xAA3C  0x37 0x15 0x04  PUSHIW 0x0415
0xAA3F  0x1A 0x04       PUSHIB 0x04
0xAA41  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA43  0x4F            PUSHLOCALB02
0xAA44  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA46  0x2E 0x4B       JZB 0xAA91 (+75)

                        // case "uint":                                         expression.hs:111

0xAA48  0x37 0x2F 0x02  PUSHIW 0x022F
0xAA4B  0x1A 0x04       PUSHIB 0x04
0xAA4D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA4F  0x4F            PUSHLOCALB02
0xAA50  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA52  0x2E 0x3F       JZB 0xAA91 (+63)

                        // case "int":                                          expression.hs:112

0xAA54  0x37 0x30 0x02  PUSHIW 0x0230
0xAA57  0x1A 0x03       PUSHIB 0x03
0xAA59  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA5B  0x4F            PUSHLOCALB02
0xAA5C  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA5E  0x2E 0x33       JZB 0xAA91 (+51)

                        // case "type":                                         expression.hs:116

0xAA60  0x37 0x13 0x01  PUSHIW 0x0113
0xAA63  0x1A 0x04       PUSHIB 0x04
0xAA65  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA67  0x4F            PUSHLOCALB02
0xAA68  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAA6A  0x2F 0x06       JNZB 0xAA70 (+6)

                        // Types.DynamicCastToType();                           expression.hs:118

0xAA6C  0x2C 0xF6       CALLB 0xF6     // Types.DynamicCastToType

                        // }                                                    expression.hs:119

0xAA6E  0x30 0x23       JB 0xAA91 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAA70  0x1A 0x27       PUSHIB 0x27
0xAA72  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAA74  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAA76  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA78  0x37 0x23 0x15  PUSHIW 0x1523
0xAA7B  0x1A 0x06       PUSHIB 0x06
0xAA7D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA7F  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA81  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAA83  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA85  0x1A 0x27       PUSHIB 0x27
0xAA87  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAA89  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAA8B  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:123

0xAA8D  0x1A 0x0A       PUSHIB 0x0A
0xAA8F  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:125

0xAA91  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:126

0xAA93  0x33 0x14 0x03  JW 0xADA7 (+788)

                        // case "char":                                         expression.hs:127

0xAA96  0x37 0x15 0x04  PUSHIW 0x0415
0xAA99  0x1A 0x04       PUSHIB 0x04
0xAA9B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAA9D  0x4E            PUSHLOCALB00
0xAA9E  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAAA0  0x2F 0x4E       JNZB 0xAAEE (+78)

                        // switch (castToType)                                  expression.hs:129

0xAAA2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "byte":                                         expression.hs:131

0xAAA4  0x37 0x51 0x05  PUSHIW 0x0551
0xAAA7  0x1A 0x04       PUSHIB 0x04
0xAAA9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAAAB  0x4F            PUSHLOCALB02
0xAAAC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAAAE  0x2E 0x3B       JZB 0xAAE9 (+59)

                        // case "uint":                                         expression.hs:132

0xAAB0  0x37 0x2F 0x02  PUSHIW 0x022F
0xAAB3  0x1A 0x04       PUSHIB 0x04
0xAAB5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAAB7  0x4F            PUSHLOCALB02
0xAAB8  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAABA  0x2E 0x2F       JZB 0xAAE9 (+47)

                        // case "int":                                          expression.hs:133

0xAABC  0x37 0x30 0x02  PUSHIW 0x0230
0xAABF  0x1A 0x03       PUSHIB 0x03
0xAAC1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAAC3  0x4F            PUSHLOCALB02
0xAAC4  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAAC6  0x2E 0x23       JZB 0xAAE9 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAAC8  0x1A 0x27       PUSHIB 0x27
0xAACA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAACC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAACE  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAAD0  0x37 0x23 0x15  PUSHIW 0x1523
0xAAD3  0x1A 0x06       PUSHIB 0x06
0xAAD5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAAD7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAAD9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAADB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAADD  0x1A 0x27       PUSHIB 0x27
0xAADF  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAAE1  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAAE3  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:140

0xAAE5  0x1A 0x0A       PUSHIB 0x0A
0xAAE7  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:142

0xAAE9  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:143

0xAAEB  0x33 0xBC 0x02  JW 0xADA7 (+700)

                        // case "uint":                                         expression.hs:144

0xAAEE  0x37 0x2F 0x02  PUSHIW 0x022F
0xAAF1  0x1A 0x04       PUSHIB 0x04
0xAAF3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAAF5  0x4E            PUSHLOCALB00
0xAAF6  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAAF8  0x32 0x85 0x00  JNZW 0xAB7D (+133)

                        // switch (castToType)                                  expression.hs:146

0xAAFB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "char":                                         expression.hs:148

0xAAFD  0x37 0x15 0x04  PUSHIW 0x0415
0xAB00  0x1A 0x04       PUSHIB 0x04
0xAB02  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB04  0x4F            PUSHLOCALB02
0xAB05  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB07  0x2E 0x0E       JZB 0xAB15 (+14)

                        // case "byte":                                         expression.hs:149

0xAB09  0x37 0x51 0x05  PUSHIW 0x0551
0xAB0C  0x1A 0x04       PUSHIB 0x04
0xAB0E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB10  0x4F            PUSHLOCALB02
0xAB11  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB13  0x2F 0x06       JNZB 0xAB19 (+6)

                        // Types.DynamicCastToByte();                           expression.hs:151

0xAB15  0x2C 0xF5       CALLB 0xF5     // Types.DynamicCastToByte

                        // }                                                    expression.hs:152

0xAB17  0x30 0x61       JB 0xAB78 (+97)

                        // case "int":                                          expression.hs:153

0xAB19  0x37 0x30 0x02  PUSHIW 0x0230
0xAB1C  0x1A 0x03       PUSHIB 0x03
0xAB1E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB20  0x4F            PUSHLOCALB02
0xAB21  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB23  0x2F 0x15       JNZB 0xAB38 (+21)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToInt");

0xAB25  0x37 0xFB 0x05  PUSHIW 0x05FB
0xAB28  0x1A 0x04       PUSHIB 0x04
0xAB2A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB2C  0x37 0xE0 0x07  PUSHIW 0x07E0
0xAB2F  0x1A 0x05       PUSHIB 0x05
0xAB31  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB33  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:156

0xAB36  0x30 0x42       JB 0xAB78 (+66)

                        // case "long":                                         expression.hs:157

0xAB38  0x37 0xF7 0x05  PUSHIW 0x05F7
0xAB3B  0x1A 0x04       PUSHIB 0x04
0xAB3D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB3F  0x4F            PUSHLOCALB02
0xAB40  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB42  0x2F 0x15       JNZB 0xAB57 (+21)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0xAB44  0x37 0xFB 0x05  PUSHIW 0x05FB
0xAB47  0x1A 0x04       PUSHIB 0x04
0xAB49  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB4B  0x37 0xFF 0x05  PUSHIW 0x05FF
0xAB4E  0x1A 0x06       PUSHIB 0x06
0xAB50  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB52  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:160

0xAB55  0x30 0x23       JB 0xAB78 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAB57  0x1A 0x27       PUSHIB 0x27
0xAB59  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAB5B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAB5D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAB5F  0x37 0x23 0x15  PUSHIW 0x1523
0xAB62  0x1A 0x06       PUSHIB 0x06
0xAB64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB66  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAB68  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAB6A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAB6C  0x1A 0x27       PUSHIB 0x27
0xAB6E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAB70  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAB72  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:171

0xAB74  0x1A 0x0A       PUSHIB 0x0A
0xAB76  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:174

0xAB78  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:175

0xAB7A  0x33 0x2D 0x02  JW 0xADA7 (+557)

                        // case "int":                                          expression.hs:176

0xAB7D  0x37 0x30 0x02  PUSHIW 0x0230
0xAB80  0x1A 0x03       PUSHIB 0x03
0xAB82  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB84  0x4E            PUSHLOCALB00
0xAB85  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB87  0x32 0x96 0x00  JNZW 0xAC1D (+150)

                        // switch (castToType)                                  expression.hs:178

0xAB8A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "char":                                         expression.hs:180

0xAB8C  0x37 0x15 0x04  PUSHIW 0x0415
0xAB8F  0x1A 0x04       PUSHIB 0x04
0xAB91  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB93  0x4F            PUSHLOCALB02
0xAB94  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAB96  0x2E 0x0E       JZB 0xABA4 (+14)

                        // case "byte":                                         expression.hs:181

0xAB98  0x37 0x51 0x05  PUSHIW 0x0551
0xAB9B  0x1A 0x04       PUSHIB 0x04
0xAB9D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAB9F  0x4F            PUSHLOCALB02
0xABA0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xABA2  0x2F 0x07       JNZB 0xABA9 (+7)

                        // Types.DynamicCastToByte();                           expression.hs:183

0xABA4  0x2C 0xF5       CALLB 0xF5     // Types.DynamicCastToByte

                        // }                                                    expression.hs:184

0xABA6  0x33 0x72 0x00  JW 0xAC18 (+114)

                        // case "uint":                                         expression.hs:185

0xABA9  0x37 0x2F 0x02  PUSHIW 0x022F
0xABAC  0x1A 0x04       PUSHIB 0x04
0xABAE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABB0  0x4F            PUSHLOCALB02
0xABB1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xABB3  0x2F 0x06       JNZB 0xABB9 (+6)

                        // Types.DynamicCastIntToUInt();                        expression.hs:187

0xABB5  0x2C 0xF4       CALLB 0xF4     // Types.DynamicCastIntToUInt

                        // }                                                    expression.hs:188

0xABB7  0x30 0x61       JB 0xAC18 (+97)

                        // case "float":                                        expression.hs:189

0xABB9  0x37 0x08 0x06  PUSHIW 0x0608
0xABBC  0x1A 0x05       PUSHIB 0x05
0xABBE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABC0  0x4F            PUSHLOCALB02
0xABC1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xABC3  0x2F 0x15       JNZB 0xABD8 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToFloat");

0xABC5  0x37 0xFC 0x05  PUSHIW 0x05FC
0xABC8  0x1A 0x03       PUSHIB 0x03
0xABCA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABCC  0x37 0x0D 0x06  PUSHIW 0x060D
0xABCF  0x1A 0x07       PUSHIB 0x07
0xABD1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABD3  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:192

0xABD6  0x30 0x42       JB 0xAC18 (+66)

                        // case "long":                                         expression.hs:193

0xABD8  0x37 0xF7 0x05  PUSHIW 0x05F7
0xABDB  0x1A 0x04       PUSHIB 0x04
0xABDD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABDF  0x4F            PUSHLOCALB02
0xABE0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xABE2  0x2F 0x15       JNZB 0xABF7 (+21)

                        // CodeStream.AddInstructionSysCall0("Int", "ToLong");

0xABE4  0x37 0xFC 0x05  PUSHIW 0x05FC
0xABE7  0x1A 0x03       PUSHIB 0x03
0xABE9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABEB  0x37 0xFF 0x05  PUSHIW 0x05FF
0xABEE  0x1A 0x06       PUSHIB 0x06
0xABF0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xABF2  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:196

0xABF5  0x30 0x23       JB 0xAC18 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xABF7  0x1A 0x27       PUSHIB 0x27
0xABF9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xABFB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xABFD  0x24 0x03       SYSCALL0 0x03  // String.Append
0xABFF  0x37 0x23 0x15  PUSHIW 0x1523
0xAC02  0x1A 0x06       PUSHIB 0x06
0xAC04  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC06  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC08  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAC0A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC0C  0x1A 0x27       PUSHIB 0x27
0xAC0E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAC10  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC12  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:201

0xAC14  0x1A 0x0A       PUSHIB 0x0A
0xAC16  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:203

0xAC18  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:204

0xAC1A  0x33 0x8D 0x01  JW 0xADA7 (+397)

                        // case "long":                                         expression.hs:205

0xAC1D  0x37 0xF7 0x05  PUSHIW 0x05F7
0xAC20  0x1A 0x04       PUSHIB 0x04
0xAC22  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC24  0x4E            PUSHLOCALB00
0xAC25  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAC27  0x2F 0x68       JNZB 0xAC8F (+104)

                        // switch (castToType)                                  expression.hs:207

0xAC29  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "uint":                                         expression.hs:209

0xAC2B  0x37 0x2F 0x02  PUSHIW 0x022F
0xAC2E  0x1A 0x04       PUSHIB 0x04
0xAC30  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC32  0x4F            PUSHLOCALB02
0xAC33  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAC35  0x2F 0x15       JNZB 0xAC4A (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "ToUInt");

0xAC37  0x37 0x01 0x06  PUSHIW 0x0601
0xAC3A  0x1A 0x04       PUSHIB 0x04
0xAC3C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC3E  0x37 0xF4 0x07  PUSHIW 0x07F4
0xAC41  0x1A 0x06       PUSHIB 0x06
0xAC43  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC45  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:212

0xAC48  0x30 0x42       JB 0xAC8A (+66)

                        // case "int":                                          expression.hs:213

0xAC4A  0x37 0x30 0x02  PUSHIW 0x0230
0xAC4D  0x1A 0x03       PUSHIB 0x03
0xAC4F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC51  0x4F            PUSHLOCALB02
0xAC52  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAC54  0x2F 0x15       JNZB 0xAC69 (+21)

                        // CodeStream.AddInstructionSysCall0("Long", "ToInt");

0xAC56  0x37 0x01 0x06  PUSHIW 0x0601
0xAC59  0x1A 0x04       PUSHIB 0x04
0xAC5B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC5D  0x37 0xE0 0x07  PUSHIW 0x07E0
0xAC60  0x1A 0x05       PUSHIB 0x05
0xAC62  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC64  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:216

0xAC67  0x30 0x23       JB 0xAC8A (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAC69  0x1A 0x27       PUSHIB 0x27
0xAC6B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAC6D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAC6F  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC71  0x37 0x23 0x15  PUSHIW 0x1523
0xAC74  0x1A 0x06       PUSHIB 0x06
0xAC76  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC78  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC7A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAC7C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC7E  0x1A 0x27       PUSHIB 0x27
0xAC80  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAC82  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAC84  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:221

0xAC86  0x1A 0x0A       PUSHIB 0x0A
0xAC88  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:223

0xAC8A  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:224

0xAC8C  0x33 0x1B 0x01  JW 0xADA7 (+283)

                        // case "variant":                                      expression.hs:225

0xAC8F  0x37 0xC3 0x02  PUSHIW 0x02C3
0xAC92  0x1A 0x07       PUSHIB 0x07
0xAC94  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAC96  0x4E            PUSHLOCALB00
0xAC97  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAC99  0x2F 0x32       JNZB 0xACCB (+50)

                        // if (Types.IsSimpleType(castToType))                  expression.hs:227

0xAC9B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAC9D  0x2C 0xDC       CALLB 0xDC     // Types.IsSimpleType
0xAC9F  0x2E 0x08       JZB 0xACA7 (+8)

                        // RuntimeValueCast(castToType);                        expression.hs:229

0xACA1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xACA3  0x2C 0xF2       CALLB 0xF2     // Types.RuntimeValueCast

                        // }                                                    expression.hs:230

0xACA5  0x30 0x23       JB 0xACC8 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xACA7  0x1A 0x27       PUSHIB 0x27
0xACA9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xACAB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xACAD  0x24 0x03       SYSCALL0 0x03  // String.Append
0xACAF  0x37 0x23 0x15  PUSHIW 0x1523
0xACB2  0x1A 0x06       PUSHIB 0x06
0xACB4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xACB6  0x24 0x03       SYSCALL0 0x03  // String.Append
0xACB8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xACBA  0x24 0x03       SYSCALL0 0x03  // String.Append
0xACBC  0x1A 0x27       PUSHIB 0x27
0xACBE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xACC0  0x24 0x03       SYSCALL0 0x03  // String.Append
0xACC2  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:235

0xACC4  0x1A 0x0A       PUSHIB 0x0A
0xACC6  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:237

0xACC8  0x33 0xDF 0x00  JW 0xADA7 (+223)

                        // if (Types.IsFlags(sourceType)                        expression.hs:240

0xACCB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xACCD  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xACCF  0x27 0x00       DUP 0x00
0xACD1  0x2F 0x2B       JNZB 0xACFC (+43)
0xACD3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xACD5  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xACD7  0x0B            BOOLOR
0xACD8  0x27 0x00       DUP 0x00
0xACDA  0x2F 0x22       JNZB 0xACFC (+34)
0xACDC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xACDE  0x37 0x09 0x0C  PUSHIW 0x0C09
0xACE1  0x1A 0x04       PUSHIB 0x04
0xACE3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xACE5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xACE7  0x44            PUSHI0
0xACE8  0x05            EQ
0xACE9  0x0B            BOOLOR
0xACEA  0x27 0x00       DUP 0x00
0xACEC  0x2F 0x10       JNZB 0xACFC (+16)
0xACEE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xACF0  0x37 0x15 0x0C  PUSHIW 0x0C15
0xACF3  0x1A 0x05       PUSHIB 0x05
0xACF5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xACF7  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xACF9  0x44            PUSHI0
0xACFA  0x05            EQ
0xACFB  0x0B            BOOLOR
0xACFC  0x31 0x81 0x00  JZW 0xAD7D (+129)

                        // switch (castToType)                                  expression.hs:246

0xACFF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "uint":                                         expression.hs:248

0xAD01  0x37 0x2F 0x02  PUSHIW 0x022F
0xAD04  0x1A 0x04       PUSHIB 0x04
0xAD06  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD08  0x4F            PUSHLOCALB02
0xAD09  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAD0B  0x2E 0x6E       JZB 0xAD79 (+110)

                        // case "char":                                         expression.hs:252

0xAD0D  0x37 0x15 0x04  PUSHIW 0x0415
0xAD10  0x1A 0x04       PUSHIB 0x04
0xAD12  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD14  0x4F            PUSHLOCALB02
0xAD15  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAD17  0x2E 0x0E       JZB 0xAD25 (+14)

                        // case "byte":                                         expression.hs:253

0xAD19  0x37 0x51 0x05  PUSHIW 0x0551
0xAD1C  0x1A 0x04       PUSHIB 0x04
0xAD1E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD20  0x4F            PUSHLOCALB02
0xAD21  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAD23  0x2F 0x06       JNZB 0xAD29 (+6)

                        // Types.DynamicCastToByte();                           expression.hs:255

0xAD25  0x2C 0xF5       CALLB 0xF5     // Types.DynamicCastToByte

                        // }                                                    expression.hs:256

0xAD27  0x30 0x52       JB 0xAD79 (+82)

                        // case "int":                                          expression.hs:257

0xAD29  0x37 0x30 0x02  PUSHIW 0x0230
0xAD2C  0x1A 0x03       PUSHIB 0x03
0xAD2E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD30  0x4F            PUSHLOCALB02
0xAD31  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAD33  0x2F 0x06       JNZB 0xAD39 (+6)

                        // Types.DynamicCastIntToUInt();                        expression.hs:260

0xAD35  0x2C 0xF4       CALLB 0xF4     // Types.DynamicCastIntToUInt

                        // }                                                    expression.hs:261

0xAD37  0x30 0x42       JB 0xAD79 (+66)

                        // case "long":                                         expression.hs:262

0xAD39  0x37 0xF7 0x05  PUSHIW 0x05F7
0xAD3C  0x1A 0x04       PUSHIB 0x04
0xAD3E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD40  0x4F            PUSHLOCALB02
0xAD41  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAD43  0x2F 0x15       JNZB 0xAD58 (+21)

                        // CodeStream.AddInstructionSysCall0("UInt", "ToLong");

0xAD45  0x37 0xFB 0x05  PUSHIW 0x05FB
0xAD48  0x1A 0x04       PUSHIB 0x04
0xAD4A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD4C  0x37 0xFF 0x05  PUSHIW 0x05FF
0xAD4F  0x1A 0x06       PUSHIB 0x06
0xAD51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD53  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // }                                                    expression.hs:265

0xAD56  0x30 0x23       JB 0xAD79 (+35)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAD58  0x1A 0x27       PUSHIB 0x27
0xAD5A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAD5C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAD5E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD60  0x37 0x23 0x15  PUSHIW 0x1523
0xAD63  0x1A 0x06       PUSHIB 0x06
0xAD65  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD67  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD69  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAD6B  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD6D  0x1A 0x27       PUSHIB 0x27
0xAD6F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAD71  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD73  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Die(0x0A);                                           expression.hs:269

0xAD75  0x1A 0x0A       PUSHIB 0x0A
0xAD77  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:271

0xAD79  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:272

0xAD7B  0x30 0x2C       JB 0xADA7 (+44)

                        // Print("'" + sourceType + "' -> '" + castToType + "'");

0xAD7D  0x1A 0x27       PUSHIB 0x27
0xAD7F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAD81  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xAD83  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD85  0x37 0x23 0x15  PUSHIW 0x1523
0xAD88  0x1A 0x06       PUSHIB 0x06
0xAD8A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAD8C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD8E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAD90  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD92  0x1A 0x27       PUSHIB 0x27
0xAD94  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xAD96  0x24 0x03       SYSCALL0 0x03  // String.Append
0xAD98  0x2C 0x39       CALLB 0x39     // Screen.Print

                        // Parser.ErrorAtCurrent("not implemented");            expression.hs:284

0xAD9A  0x37 0x59 0x06  PUSHIW 0x0659
0xAD9D  0x1A 0x0F       PUSHIB 0x0F
0xAD9F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xADA1  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // Die(0x0A);                                           expression.hs:285

0xADA3  0x1A 0x0A       PUSHIB 0x0A
0xADA5  0x24 0x7C       SYSCALL0 0x7C  // Diagnostics.Die

                        // }                                                    expression.hs:288

0xADA7  0x28 0x02       DECSP 0x02

                        // }                                                    expression.hs:289

0xADA9  0x2A 0x04       RETB 0x04


// /source/compiler/constant.hs:252
// ####  Constant.ParseConstantExpression(..)  ####                             0x010C

0xADAB  0x49            ENTER

                        // return parseConstantPrimary(typeExpected);           constant.hs:253

0xADAC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xADAE  0x34 0x0B 0x01  CALLW 0x010B   // Constant.parseConstantPrimary
0xADB1  0x2B 0x02       RETRETB 0x02


// /source/compiler/constant.hs:13
// ####  Constant.parseConstantPrimary(..)  ####                                0x010B

0xADB3  0x49            ENTER

                        // <string,string> currentToken = Parser.CurrentToken;

0xADB4  0x1A 0x0F       PUSHIB 0x0F
0xADB6  0x1A 0x0F       PUSHIB 0x0F
0xADB8  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xADBA  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0xADBC  0x5D            POPCOPYLOCALB00

                        // string value;                                        constant.hs:15

0xADBD  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string actualType;                                   constant.hs:16

0xADBF  0x24 0x02       SYSCALL0 0x02  // String.New

                        // HopperToken ttype = Token.GetType(currentToken);

0xADC1  0x44            PUSHI0
0xADC2  0x4E            PUSHLOCALB00
0xADC3  0x2C 0x49       CALLB 0x49     // Token.GetType
0xADC5  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (ttype == HopperToken.DottedIdentifier)           constant.hs:18

0xADC7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xADC9  0x1A 0x02       PUSHIB 0x02
0xADCB  0x05            EQ
0xADCC  0x2E 0x06       JZB 0xADD2 (+6)

                        // ttype = HopperToken.Identifier;                      constant.hs:20

0xADCE  0x1A 0x03       PUSHIB 0x03
0xADD0  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // switch(ttype)                                        constant.hs:24

0xADD2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)

                        // case HopperToken.Bool:                               constant.hs:26

0xADD4  0x1A 0x07       PUSHIB 0x07
0xADD6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xADD8  0x05            EQ
0xADD9  0x2E 0x5C       JZB 0xAE35 (+92)

                        // if ((currentToken["lexeme"] == "true") || (currentToken["lexeme"] == "false"))

0xADDB  0x4E            PUSHLOCALB00
0xADDC  0x37 0x06 0x02  PUSHIW 0x0206
0xADDF  0x1A 0x06       PUSHIB 0x06
0xADE1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xADE3  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xADE5  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0xADE8  0x1A 0x04       PUSHIB 0x04
0xADEA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xADEC  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xADEE  0x44            PUSHI0
0xADEF  0x05            EQ
0xADF0  0x27 0x00       DUP 0x00
0xADF2  0x2F 0x18       JNZB 0xAE0A (+24)
0xADF4  0x4E            PUSHLOCALB00
0xADF5  0x37 0x06 0x02  PUSHIW 0x0206
0xADF8  0x1A 0x06       PUSHIB 0x06
0xADFA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xADFC  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xADFE  0x37 0x4C 0x05  PUSHIW 0x054C
0xAE01  0x1A 0x05       PUSHIB 0x05
0xAE03  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE05  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAE07  0x44            PUSHI0
0xAE08  0x05            EQ
0xAE09  0x0B            BOOLOR
0xAE0A  0x2E 0x11       JZB 0xAE1B (+17)

                        // value = currentToken["lexeme"];                      constant.hs:30

0xAE0C  0x4E            PUSHLOCALB00
0xAE0D  0x37 0x06 0x02  PUSHIW 0x0206
0xAE10  0x1A 0x06       PUSHIB 0x06
0xAE12  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE14  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAE16  0x5E            POPCOPYLOCALB02

                        // Parser.Advance();                                    constant.hs:31

0xAE17  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:32

0xAE19  0x30 0x10       JB 0xAE29 (+16)

                        // Parser.ErrorAtCurrent("unexpected boolean literal");

0xAE1B  0x37 0x29 0x15  PUSHIW 0x1529
0xAE1E  0x1A 0x1A       PUSHIB 0x1A
0xAE20  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE22  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:36

0xAE24  0x28 0x02       DECSP 0x02
0xAE26  0x33 0x26 0x03  JW 0xB14C (+806)

                        // actualType = "bool";                                 constant.hs:38

0xAE29  0x37 0x6F 0x03  PUSHIW 0x036F
0xAE2C  0x1A 0x04       PUSHIB 0x04
0xAE2E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE30  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:39

0xAE32  0x33 0x18 0x03  JW 0xB14A (+792)

                        // case HopperToken.StringConstant:                     constant.hs:40

0xAE35  0x1A 0x0B       PUSHIB 0x0B
0xAE37  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xAE39  0x05            EQ
0xAE3A  0x2E 0x1B       JZB 0xAE55 (+27)

                        // Parser.Advance();                                    constant.hs:42

0xAE3C  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // value = currentToken["lexeme"];                      constant.hs:43

0xAE3E  0x4E            PUSHLOCALB00
0xAE3F  0x37 0x06 0x02  PUSHIW 0x0206
0xAE42  0x1A 0x06       PUSHIB 0x06
0xAE44  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE46  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAE48  0x5E            POPCOPYLOCALB02

                        // actualType = "string";                               constant.hs:44

0xAE49  0x37 0x62 0x02  PUSHIW 0x0262
0xAE4C  0x1A 0x06       PUSHIB 0x06
0xAE4E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE50  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:45

0xAE52  0x33 0xF8 0x02  JW 0xB14A (+760)

                        // case HopperToken.Char:                               constant.hs:46

0xAE55  0x1A 0x08       PUSHIB 0x08
0xAE57  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xAE59  0x05            EQ
0xAE5A  0x2E 0x1B       JZB 0xAE75 (+27)

                        // Parser.Advance();                                    constant.hs:48

0xAE5C  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // value = currentToken["lexeme"];                      constant.hs:49

0xAE5E  0x4E            PUSHLOCALB00
0xAE5F  0x37 0x06 0x02  PUSHIW 0x0206
0xAE62  0x1A 0x06       PUSHIB 0x06
0xAE64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE66  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAE68  0x5E            POPCOPYLOCALB02

                        // actualType = "char";                                 constant.hs:50

0xAE69  0x37 0x15 0x04  PUSHIW 0x0415
0xAE6C  0x1A 0x04       PUSHIB 0x04
0xAE6E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE70  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:51

0xAE72  0x33 0xD8 0x02  JW 0xB14A (+728)

                        // case HopperToken.Float:                              constant.hs:52

0xAE75  0x1A 0x0A       PUSHIB 0x0A
0xAE77  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xAE79  0x05            EQ
0xAE7A  0x2E 0x3D       JZB 0xAEB7 (+61)

                        // float f;                                             constant.hs:54

0xAE7C  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // if (!Token.TryParseFloat(currentToken["lexeme"], ref f))

0xAE7E  0x4E            PUSHLOCALB00
0xAE7F  0x37 0x06 0x02  PUSHIW 0x0206
0xAE82  0x1A 0x06       PUSHIB 0x06
0xAE84  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE86  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAE88  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0xAE8A  0x2C 0x58       CALLB 0x58     // Token.TryParseFloat
0xAE8C  0x2F 0x10       JNZB 0xAE9C (+16)

                        // Parser.ErrorAtCurrent("invalid float literal");

0xAE8E  0x37 0x9C 0x0D  PUSHIW 0x0D9C
0xAE91  0x1A 0x15       PUSHIB 0x15
0xAE93  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAE95  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:58

0xAE97  0x28 0x04       DECSP 0x04
0xAE99  0x33 0xB3 0x02  JW 0xB14C (+691)

                        // actualType = "float";                                constant.hs:60

0xAE9C  0x37 0x08 0x06  PUSHIW 0x0608
0xAE9F  0x1A 0x05       PUSHIB 0x05
0xAEA1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAEA3  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // value = currentToken["lexeme"];                      constant.hs:61

0xAEA5  0x4E            PUSHLOCALB00
0xAEA6  0x37 0x06 0x02  PUSHIW 0x0206
0xAEA9  0x1A 0x06       PUSHIB 0x06
0xAEAB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAEAD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAEAF  0x5E            POPCOPYLOCALB02

                        // Parser.Advance();                                    constant.hs:62

0xAEB0  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:63

0xAEB2  0x28 0x02       DECSP 0x02
0xAEB4  0x33 0x96 0x02  JW 0xB14A (+662)

                        // case HopperToken.Integer:                            constant.hs:64

0xAEB7  0x1A 0x09       PUSHIB 0x09
0xAEB9  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xAEBB  0x05            EQ
0xAEBC  0x31 0x18 0x01  JZW 0xAFD4 (+280)

                        // long l;                                              constant.hs:66

0xAEBF  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (!Token.TryParseLong(currentToken["lexeme"], ref l))

0xAEC1  0x4E            PUSHLOCALB00
0xAEC2  0x37 0x06 0x02  PUSHIW 0x0206
0xAEC5  0x1A 0x06       PUSHIB 0x06
0xAEC7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAEC9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAECB  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0xAECD  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xAECF  0x2F 0x10       JNZB 0xAEDF (+16)

                        // Parser.ErrorAtCurrent("invalid integer literal");

0xAED1  0x37 0xB1 0x0D  PUSHIW 0x0DB1
0xAED4  0x1A 0x17       PUSHIB 0x17
0xAED6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAED8  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:70

0xAEDA  0x28 0x04       DECSP 0x04
0xAEDC  0x33 0x70 0x02  JW 0xB14C (+624)

                        // if (l >= 0)                                          constant.hs:72

0xAEDF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAEE1  0x44            PUSHI0
0xAEE2  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xAEE4  0x24 0x48       SYSCALL0 0x48  // Long.GE
0xAEE6  0x31 0xA0 0x00  JZW 0xAF86 (+160)

                        // if (typeExpected == "byte")                          constant.hs:74

0xAEE9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAEEB  0x37 0x51 0x05  PUSHIW 0x0551
0xAEEE  0x1A 0x04       PUSHIB 0x04
0xAEF0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAEF2  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAEF4  0x2F 0x25       JNZB 0xAF19 (+37)

                        // if (l > 255)                                         constant.hs:76

0xAEF6  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAEF8  0x1A 0xFF       PUSHIB 0xFF
0xAEFA  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xAEFC  0x24 0x47       SYSCALL0 0x47  // Long.GT
0xAEFE  0x2E 0x10       JZB 0xAF0E (+16)

                        // Parser.ErrorAtCurrent("'byte' constant out of range");

0xAF00  0x37 0x43 0x15  PUSHIW 0x1543
0xAF03  0x1A 0x1C       PUSHIB 0x1C
0xAF05  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF07  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:79

0xAF09  0x28 0x04       DECSP 0x04
0xAF0B  0x33 0x41 0x02  JW 0xB14C (+577)

                        // actualType = "byte";                                 constant.hs:81

0xAF0E  0x37 0x51 0x05  PUSHIW 0x0551
0xAF11  0x1A 0x04       PUSHIB 0x04
0xAF13  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF15  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:82

0xAF17  0x30 0x6D       JB 0xAF84 (+109)

                        // else if (typeExpected == "int")                      constant.hs:83

0xAF19  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAF1B  0x37 0x30 0x02  PUSHIW 0x0230
0xAF1E  0x1A 0x03       PUSHIB 0x03
0xAF20  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF22  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAF24  0x2F 0x26       JNZB 0xAF4A (+38)

                        // if (l > 32767)                                       constant.hs:85

0xAF26  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAF28  0x37 0xFF 0x7F  PUSHIW 0x7FFF
0xAF2B  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0xAF2D  0x24 0x47       SYSCALL0 0x47  // Long.GT
0xAF2F  0x2E 0x10       JZB 0xAF3F (+16)

                        // Parser.ErrorAtCurrent("'int' constant out of range");

0xAF31  0x37 0x5F 0x15  PUSHIW 0x155F
0xAF34  0x1A 0x1B       PUSHIB 0x1B
0xAF36  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF38  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:88

0xAF3A  0x28 0x04       DECSP 0x04
0xAF3C  0x33 0x10 0x02  JW 0xB14C (+528)

                        // actualType = "int";                                  constant.hs:90

0xAF3F  0x37 0x30 0x02  PUSHIW 0x0230
0xAF42  0x1A 0x03       PUSHIB 0x03
0xAF44  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF46  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:91

0xAF48  0x30 0x7A       JB 0xAFC2 (+122)

                        // else if (typeExpected == "uint")                     constant.hs:92

0xAF4A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAF4C  0x37 0x2F 0x02  PUSHIW 0x022F
0xAF4F  0x1A 0x04       PUSHIB 0x04
0xAF51  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF53  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAF55  0x2F 0x26       JNZB 0xAF7B (+38)

                        // if (l > 0xFFFF)                                      constant.hs:94

0xAF57  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAF59  0x37 0xFF 0xFF  PUSHIW 0xFFFF
0xAF5C  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xAF5E  0x24 0x47       SYSCALL0 0x47  // Long.GT
0xAF60  0x2E 0x10       JZB 0xAF70 (+16)

                        // Parser.ErrorAtCurrent("'uint' constant out of range");

0xAF62  0x37 0x7A 0x15  PUSHIW 0x157A
0xAF65  0x1A 0x1C       PUSHIB 0x1C
0xAF67  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF69  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:97

0xAF6B  0x28 0x04       DECSP 0x04
0xAF6D  0x33 0xDF 0x01  JW 0xB14C (+479)

                        // actualType = "uint";                                 constant.hs:99

0xAF70  0x37 0x2F 0x02  PUSHIW 0x022F
0xAF73  0x1A 0x04       PUSHIB 0x04
0xAF75  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF77  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:100

0xAF79  0x30 0x49       JB 0xAFC2 (+73)

                        // actualType = "long";                                 constant.hs:103

0xAF7B  0x37 0xF7 0x05  PUSHIW 0x05F7
0xAF7E  0x1A 0x04       PUSHIB 0x04
0xAF80  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF82  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:105

0xAF84  0x30 0x3E       JB 0xAFC2 (+62)

                        // if (typeExpected == "int")                           constant.hs:108

0xAF86  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xAF88  0x37 0x30 0x02  PUSHIW 0x0230
0xAF8B  0x1A 0x03       PUSHIB 0x03
0xAF8D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAF8F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xAF91  0x2F 0x28       JNZB 0xAFB9 (+40)

                        // if (l < -32768)                                      constant.hs:110

0xAF93  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAF95  0x37 0x00 0x80  PUSHIW 0x8000
0xAF98  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xAF9A  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0xAF9C  0x24 0x45       SYSCALL0 0x45  // Long.LT
0xAF9E  0x2E 0x10       JZB 0xAFAE (+16)

                        // Parser.ErrorAtCurrent("'int' constant out of range");

0xAFA0  0x37 0x5F 0x15  PUSHIW 0x155F
0xAFA3  0x1A 0x1B       PUSHIB 0x1B
0xAFA5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAFA7  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:113

0xAFA9  0x28 0x04       DECSP 0x04
0xAFAB  0x33 0xA1 0x01  JW 0xB14C (+417)

                        // actualType = "int";                                  constant.hs:115

0xAFAE  0x37 0x30 0x02  PUSHIW 0x0230
0xAFB1  0x1A 0x03       PUSHIB 0x03
0xAFB3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAFB5  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    constant.hs:116

0xAFB7  0x30 0x0B       JB 0xAFC2 (+11)

                        // actualType = "long";                                 constant.hs:119

0xAFB9  0x37 0xF7 0x05  PUSHIW 0x05F7
0xAFBC  0x1A 0x04       PUSHIB 0x04
0xAFBE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAFC0  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // value = currentToken["lexeme"];                      constant.hs:122

0xAFC2  0x4E            PUSHLOCALB00
0xAFC3  0x37 0x06 0x02  PUSHIW 0x0206
0xAFC6  0x1A 0x06       PUSHIB 0x06
0xAFC8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAFCA  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAFCC  0x5E            POPCOPYLOCALB02

                        // Parser.Advance();                                    constant.hs:123

0xAFCD  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:124

0xAFCF  0x28 0x02       DECSP 0x02
0xAFD1  0x33 0x79 0x01  JW 0xB14A (+377)

                        // case HopperToken.Identifier:                         constant.hs:126

0xAFD4  0x1A 0x03       PUSHIB 0x03
0xAFD6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xAFD8  0x05            EQ
0xAFD9  0x31 0x1C 0x01  JZW 0xB0F5 (+284)

                        // string name = currentToken["lexeme"];                constant.hs:128

0xAFDC  0x24 0x02       SYSCALL0 0x02  // String.New
0xAFDE  0x4E            PUSHLOCALB00
0xAFDF  0x37 0x06 0x02  PUSHIW 0x0206
0xAFE2  0x1A 0x06       PUSHIB 0x06
0xAFE4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xAFE6  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xAFE8  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // string typeName;                                     constant.hs:130

0xAFEA  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string valueName;                                    constant.hs:131

0xAFEC  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint ivalue;                                         constant.hs:132

0xAFEE  0x44            PUSHI0

                        // if (Types.EnumValue(name, ref typeName, ref valueName, ref ivalue))

0xAFEF  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xAFF1  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0xAFF3  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0xAFF5  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xAFF7  0x2C 0xD1       CALLB 0xD1     // Types.EnumValue
0xAFF9  0x2E 0x13       JZB 0xB00C (+19)

                        // Parser.Advance();                                    constant.hs:135

0xAFFB  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // actualType = typeName;                               constant.hs:136

0xAFFD  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xAFFF  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // value = ivalue.ToString();                           constant.hs:137

0xB001  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xB003  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0xB006  0x5E            POPCOPYLOCALB02

                        // break;                                               constant.hs:138

0xB007  0x28 0x0A       DECSP 0x0A
0xB009  0x33 0x43 0x01  JW 0xB14C (+323)

                        // if (Types.FlagsValue(name, ref typeName, ref valueName, ref ivalue))

0xB00C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB00E  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0xB010  0x21 0x0E       PUSHSTACKADDRB 0x0E (BP+14)
0xB012  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xB014  0x2C 0xD2       CALLB 0xD2     // Types.FlagsValue
0xB016  0x2E 0x13       JZB 0xB029 (+19)

                        // Parser.Advance();                                    constant.hs:146

0xB018  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // actualType = typeName;                               constant.hs:147

0xB01A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xB01C  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // value = ivalue.ToString();                           constant.hs:148

0xB01E  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xB020  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0xB023  0x5E            POPCOPYLOCALB02

                        // break;                                               constant.hs:149

0xB024  0x28 0x0A       DECSP 0x0A
0xB026  0x33 0x26 0x01  JW 0xB14C (+294)

                        // if (!Symbols.ConstantExists(name))                   constant.hs:152

0xB029  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB02B  0x2C 0x98       CALLB 0x98     // Symbols.ConstantExists
0xB02D  0x2F 0x10       JNZB 0xB03D (+16)

                        // Parser.ErrorAtCurrent("undefined identifier");

0xB02F  0x37 0x59 0x05  PUSHIW 0x0559
0xB032  0x1A 0x14       PUSHIB 0x14
0xB034  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB036  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:155

0xB038  0x28 0x0A       DECSP 0x0A
0xB03A  0x33 0x12 0x01  JW 0xB14C (+274)

                        // value = Symbols.GetConstantValue(name);              constant.hs:157

0xB03D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB03F  0x2C 0x99       CALLB 0x99     // Symbols.GetConstantValue
0xB041  0x5E            POPCOPYLOCALB02

                        // switch (typeExpected)                                constant.hs:158

0xB042  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case "byte":                                         constant.hs:160

0xB044  0x37 0x51 0x05  PUSHIW 0x0551
0xB047  0x1A 0x04       PUSHIB 0x04
0xB049  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB04B  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xB04D  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB04F  0x2F 0x33       JNZB 0xB082 (+51)

                        // uint ui;                                             constant.hs:162

0xB051  0x44            PUSHI0

                        // if (!Token.TryParseUInt(value, ref ui) || (ui > 255))

0xB052  0x4F            PUSHLOCALB02
0xB053  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0xB055  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0xB057  0x41            BOOLNOT
0xB058  0x27 0x00       DUP 0x00
0xB05A  0x2F 0x08       JNZB 0xB062 (+8)
0xB05C  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xB05E  0x1A 0xFF       PUSHIB 0xFF
0xB060  0x07            GT
0xB061  0x0B            BOOLOR
0xB062  0x2E 0x10       JZB 0xB072 (+16)

                        // Parser.ErrorAtCurrent("invalid identifier");

0xB064  0x37 0x96 0x15  PUSHIW 0x1596
0xB067  0x1A 0x12       PUSHIB 0x12
0xB069  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB06B  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:166

0xB06D  0x28 0x0E       DECSP 0x0E
0xB06F  0x33 0xDD 0x00  JW 0xB14C (+221)

                        // actualType = "byte";                                 constant.hs:168

0xB072  0x37 0x51 0x05  PUSHIW 0x0551
0xB075  0x1A 0x04       PUSHIB 0x04
0xB077  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB079  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance();                                    constant.hs:169

0xB07B  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:170

0xB07D  0x28 0x02       DECSP 0x02
0xB07F  0x33 0x70 0x00  JW 0xB0EF (+112)

                        // case "uint":                                         constant.hs:171

0xB082  0x37 0x2F 0x02  PUSHIW 0x022F
0xB085  0x1A 0x04       PUSHIB 0x04
0xB087  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB089  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xB08B  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB08D  0x2F 0x27       JNZB 0xB0B4 (+39)

                        // uint ui;                                             constant.hs:173

0xB08F  0x44            PUSHI0

                        // if (!Token.TryParseUInt(value, ref ui))              constant.hs:174

0xB090  0x4F            PUSHLOCALB02
0xB091  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0xB093  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0xB095  0x2F 0x10       JNZB 0xB0A5 (+16)

                        // Parser.ErrorAtCurrent("invalid identifier");

0xB097  0x37 0x96 0x15  PUSHIW 0x1596
0xB09A  0x1A 0x12       PUSHIB 0x12
0xB09C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB09E  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:177

0xB0A0  0x28 0x0E       DECSP 0x0E
0xB0A2  0x33 0xAA 0x00  JW 0xB14C (+170)

                        // actualType = "uint";                                 constant.hs:179

0xB0A5  0x37 0x2F 0x02  PUSHIW 0x022F
0xB0A8  0x1A 0x04       PUSHIB 0x04
0xB0AA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB0AC  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance();                                    constant.hs:180

0xB0AE  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:181

0xB0B0  0x28 0x02       DECSP 0x02
0xB0B2  0x30 0x3D       JB 0xB0EF (+61)

                        // case "int":                                          constant.hs:182

0xB0B4  0x37 0x30 0x02  PUSHIW 0x0230
0xB0B7  0x1A 0x03       PUSHIB 0x03
0xB0B9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB0BB  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xB0BD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB0BF  0x2F 0x27       JNZB 0xB0E6 (+39)

                        // int i;                                               constant.hs:184

0xB0C1  0x44            PUSHI0

                        // if (!Token.TryParseInt(value, ref i))                constant.hs:185

0xB0C2  0x4F            PUSHLOCALB02
0xB0C3  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0xB0C5  0x2C 0x53       CALLB 0x53     // Token.TryParseInt
0xB0C7  0x2F 0x10       JNZB 0xB0D7 (+16)

                        // Parser.ErrorAtCurrent("invalid identifier");

0xB0C9  0x37 0x96 0x15  PUSHIW 0x1596
0xB0CC  0x1A 0x12       PUSHIB 0x12
0xB0CE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB0D0  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:188

0xB0D2  0x28 0x0E       DECSP 0x0E
0xB0D4  0x33 0x78 0x00  JW 0xB14C (+120)

                        // actualType = "int";                                  constant.hs:190

0xB0D7  0x37 0x30 0x02  PUSHIW 0x0230
0xB0DA  0x1A 0x03       PUSHIB 0x03
0xB0DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB0DE  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance();                                    constant.hs:191

0xB0E0  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:192

0xB0E2  0x28 0x02       DECSP 0x02
0xB0E4  0x30 0x0B       JB 0xB0EF (+11)

                        // Parser.ErrorAtCurrent("constant identifier case not implemented");

0xB0E6  0x37 0xA8 0x15  PUSHIW 0x15A8
0xB0E9  0x1A 0x28       PUSHIB 0x28
0xB0EB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB0ED  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    constant.hs:197

0xB0EF  0x28 0x02       DECSP 0x02

                        // }                                                    constant.hs:198

0xB0F1  0x28 0x08       DECSP 0x08
0xB0F3  0x30 0x57       JB 0xB14A (+87)

                        // case HopperToken.Keyword:                            constant.hs:199

0xB0F5  0x1A 0x05       PUSHIB 0x05
0xB0F7  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB0F9  0x05            EQ
0xB0FA  0x2E 0x43       JZB 0xB13D (+67)

                        // string name = currentToken["lexeme"];                constant.hs:201

0xB0FC  0x24 0x02       SYSCALL0 0x02  // String.New
0xB0FE  0x4E            PUSHLOCALB00
0xB0FF  0x37 0x06 0x02  PUSHIW 0x0206
0xB102  0x1A 0x06       PUSHIB 0x06
0xB104  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB106  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xB108  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (Token.IsTypeKeyword(name))                       constant.hs:202

0xB10A  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB10C  0x2C 0x4E       CALLB 0x4E     // Token.IsTypeKeyword
0xB10E  0x2E 0x1E       JZB 0xB12C (+30)

                        // byte b = Types.ToByte(name);                         constant.hs:204

0xB110  0x44            PUSHI0
0xB111  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB113  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0xB115  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // value = b.ToString();                                constant.hs:205

0xB117  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xB119  0x34 0x68 0x01  CALLW 0x0168   // Byte.ToString
0xB11C  0x5E            POPCOPYLOCALB02

                        // actualType = "type";                                 constant.hs:206

0xB11D  0x37 0x13 0x01  PUSHIW 0x0113
0xB120  0x1A 0x04       PUSHIB 0x04
0xB122  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB124  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // Parser.Advance();                                    constant.hs:207

0xB126  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // }                                                    constant.hs:208

0xB128  0x28 0x02       DECSP 0x02
0xB12A  0x30 0x0F       JB 0xB139 (+15)

                        // Parser.ErrorAtCurrent("constant expected");

0xB12C  0x37 0xD0 0x15  PUSHIW 0x15D0
0xB12F  0x1A 0x11       PUSHIB 0x11
0xB131  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB133  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:212

0xB135  0x28 0x04       DECSP 0x04
0xB137  0x30 0x15       JB 0xB14C (+21)

                        // }                                                    constant.hs:214

0xB139  0x28 0x02       DECSP 0x02
0xB13B  0x30 0x0F       JB 0xB14A (+15)

                        // Parser.ErrorAtCurrent("constant expected");

0xB13D  0x37 0xD0 0x15  PUSHIW 0x15D0
0xB140  0x1A 0x11       PUSHIB 0x11
0xB142  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB144  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // break;                                               constant.hs:218

0xB146  0x28 0x02       DECSP 0x02
0xB148  0x30 0x04       JB 0xB14C (+4)

                        // } // switch                                          constant.hs:220

0xB14A  0x28 0x02       DECSP 0x02

                        // if (!HadError && (typeExpected != actualType))

0xB14C  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xB14E  0x41            BOOLNOT
0xB14F  0x27 0x00       DUP 0x00
0xB151  0x2E 0x0A       JZB 0xB15B (+10)
0xB153  0x56 0xFE 0x04  PUSHLOCALBB 0x04FE
0xB156  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB158  0x44            PUSHI0
0xB159  0x06            NE
0xB15A  0x0C            BOOLAND
0xB15B  0x31 0xBA 0x00  JZW 0xB215 (+186)

                        // if (Types.IsFlags(typeExpected) && Types.IsFlags(actualType))

0xB15E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB160  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xB162  0x27 0x00       DUP 0x00
0xB164  0x2E 0x07       JZB 0xB16B (+7)
0xB166  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB168  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xB16A  0x0C            BOOLAND
0xB16B  0x2E 0x3E       JZB 0xB1A9 (+62)

                        // string flagsExpected = Types.QualifyFlags(typeExpected);

0xB16D  0x24 0x02       SYSCALL0 0x02  // String.New
0xB16F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB171  0x2C 0xE7       CALLB 0xE7     // Types.QualifyFlags
0xB173  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // string flagsActual = Types.QualifyFlags(actualType);

0xB175  0x24 0x02       SYSCALL0 0x02  // String.New
0xB177  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB179  0x2C 0xE7       CALLB 0xE7     // Types.QualifyFlags
0xB17B  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (flagsExpected != flagsActual)                    constant.hs:229

0xB17D  0x56 0x08 0x0A  PUSHLOCALBB 0x0A08
0xB180  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB182  0x2E 0x23       JZB 0xB1A5 (+35)

                        // Parser.ErrorAtCurrent("expected '" + flagsExpected + "' flags constant, (was '" + flagsActual + "')");

0xB184  0x37 0xC2 0x01  PUSHIW 0x01C2
0xB187  0x1A 0x0A       PUSHIB 0x0A
0xB189  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB18B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB18D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB18F  0x37 0xE1 0x15  PUSHIW 0x15E1
0xB192  0x1A 0x18       PUSHIB 0x18
0xB194  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB196  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB198  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB19A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB19C  0x37 0x27 0x29  PUSHIW 0x2927
0xB19F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xB1A1  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1A3  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    constant.hs:233

0xB1A5  0x28 0x04       DECSP 0x04
0xB1A7  0x30 0x6E       JB 0xB215 (+110)

                        // else if (Types.IsEnum(typeExpected) && Types.IsEnum(actualType))

0xB1A9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB1AB  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xB1AD  0x27 0x00       DUP 0x00
0xB1AF  0x2E 0x07       JZB 0xB1B6 (+7)
0xB1B1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB1B3  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xB1B5  0x0C            BOOLAND
0xB1B6  0x2E 0x3E       JZB 0xB1F4 (+62)

                        // string enumExpected = Types.QualifyEnum(typeExpected);

0xB1B8  0x24 0x02       SYSCALL0 0x02  // String.New
0xB1BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB1BC  0x2C 0xE8       CALLB 0xE8     // Types.QualifyEnum
0xB1BE  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // string enumActual = Types.QualifyEnum(actualType);

0xB1C0  0x24 0x02       SYSCALL0 0x02  // String.New
0xB1C2  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB1C4  0x2C 0xE8       CALLB 0xE8     // Types.QualifyEnum
0xB1C6  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (enumExpected != enumActual)                      constant.hs:238

0xB1C8  0x56 0x08 0x0A  PUSHLOCALBB 0x0A08
0xB1CB  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xB1CD  0x2E 0x23       JZB 0xB1F0 (+35)

                        // Parser.ErrorAtCurrent("expected '" + enumExpected + "' enum constant, (was '" + enumActual + "')");

0xB1CF  0x37 0xC2 0x01  PUSHIW 0x01C2
0xB1D2  0x1A 0x0A       PUSHIB 0x0A
0xB1D4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB1D6  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB1D8  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1DA  0x37 0xF9 0x15  PUSHIW 0x15F9
0xB1DD  0x1A 0x17       PUSHIB 0x17
0xB1DF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB1E1  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1E3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB1E5  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1E7  0x37 0x27 0x29  PUSHIW 0x2927
0xB1EA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xB1EC  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1EE  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    constant.hs:242

0xB1F0  0x28 0x04       DECSP 0x04
0xB1F2  0x30 0x23       JB 0xB215 (+35)

                        // Parser.ErrorAtCurrent("expected '" + typeExpected + "' constant expression, (was '" + actualType + "')");

0xB1F4  0x37 0xC2 0x01  PUSHIW 0x01C2
0xB1F7  0x1A 0x0A       PUSHIB 0x0A
0xB1F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB1FB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB1FD  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB1FF  0x37 0x10 0x16  PUSHIW 0x1610
0xB202  0x1A 0x1D       PUSHIB 0x1D
0xB204  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB206  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB208  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB20A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB20C  0x37 0x27 0x29  PUSHIW 0x2927
0xB20F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xB211  0x24 0x03       SYSCALL0 0x03  // String.Append
0xB213  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return value;                                        constant.hs:248

0xB215  0x4F            PUSHLOCALB02
0xB216  0x2B 0x0A       RETRETB 0x0A


// /source/system/char.hs:15
// ####  Char.IsUpper(..)  ####                                                 0x015C


                        // byte b;                                              char.hs:16

0xB218  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:17

0xB21A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB21C  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90));  // A..Z            char.hs:18

0xB21D  0x4E            PUSHLOCALB00
0xB21E  0x1A 0x41       PUSHIB 0x41
0xB220  0x09            GE
0xB221  0x27 0x00       DUP 0x00
0xB223  0x2E 0x07       JZB 0xB22A (+7)
0xB225  0x4E            PUSHLOCALB00
0xB226  0x1A 0x5A       PUSHIB 0x5A
0xB228  0x0A            LE
0xB229  0x0C            BOOLAND
0xB22A  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:68
// ####  Char.ToLower(..)  ####                                                 0x0163


                        // byte b;                                              char.hs:69

0xB22C  0x5F 0x01       ENTERB 0x01

                        // if (IsUpper(this))                                   char.hs:70

0xB22E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB230  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xB233  0x2E 0x0E       JZB 0xB241 (+14)

                        // b = byte(this) - 65 + 97; // -A + a;                 char.hs:72

0xB235  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB237  0x1A 0x41       PUSHIB 0x41
0xB239  0x01            SUB
0xB23A  0x1A 0x61       PUSHIB 0x61
0xB23C  0x00            ADD
0xB23D  0x4C            POPLOCALB00

                        // this = char(b);                                      char.hs:73

0xB23E  0x4E            PUSHLOCALB00
0xB23F  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return this;                                         char.hs:75

0xB241  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB243  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:42
// ####  Char.IsDigit(..)  ####                                                 0x0160


                        // byte b;                                              char.hs:43

0xB245  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:44

0xB247  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB249  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)); // 0..9             char.hs:45

0xB24A  0x4E            PUSHLOCALB00
0xB24B  0x1A 0x30       PUSHIB 0x30
0xB24D  0x09            GE
0xB24E  0x27 0x00       DUP 0x00
0xB250  0x2E 0x07       JZB 0xB257 (+7)
0xB252  0x4E            PUSHLOCALB00
0xB253  0x1A 0x39       PUSHIB 0x39
0xB255  0x0A            LE
0xB256  0x0C            BOOLAND
0xB257  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:89
// ####  Char.IsLetter(..)  ####                                                0x0165


                        // byte b;                                              char.hs:90

0xB259  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:91

0xB25B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB25D  0x4C            POPLOCALB00

                        // return ((b >= 65) && (b <= 90))   // A..Z            char.hs:92

0xB25E  0x4E            PUSHLOCALB00
0xB25F  0x1A 0x41       PUSHIB 0x41
0xB261  0x09            GE
0xB262  0x27 0x00       DUP 0x00
0xB264  0x2E 0x07       JZB 0xB26B (+7)
0xB266  0x4E            PUSHLOCALB00
0xB267  0x1A 0x5A       PUSHIB 0x5A
0xB269  0x0A            LE
0xB26A  0x0C            BOOLAND
0xB26B  0x27 0x00       DUP 0x00
0xB26D  0x2F 0x10       JNZB 0xB27D (+16)
0xB26F  0x4E            PUSHLOCALB00
0xB270  0x1A 0x61       PUSHIB 0x61
0xB272  0x09            GE
0xB273  0x27 0x00       DUP 0x00
0xB275  0x2E 0x07       JZB 0xB27C (+7)
0xB277  0x4E            PUSHLOCALB00
0xB278  0x1A 0x7A       PUSHIB 0x7A
0xB27A  0x0A            LE
0xB27B  0x0C            BOOLAND
0xB27C  0x0B            BOOLOR
0xB27D  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:99
// ####  Char.ToString(..)  ####                                                0x0166

0xB27F  0x49            ENTER

                        // string result;                                       char.hs:100

0xB280  0x24 0x02       SYSCALL0 0x02  // String.New

                        // return result.Append(this);                          char.hs:101

0xB282  0x4E            PUSHLOCALB00
0xB283  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB285  0x25 0x03       SYSCALL1 0x03  // String.Append
0xB287  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:78
// ####  Char.IsHexDigit(..)  ####                                              0x0164


                        // byte b;                                              char.hs:79

0xB289  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:80

0xB28B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB28D  0x4C            POPLOCALB00

                        // return ((b >= 48) && (b <= 57)) || // 0..9           char.hs:81

0xB28E  0x4E            PUSHLOCALB00
0xB28F  0x1A 0x30       PUSHIB 0x30
0xB291  0x09            GE
0xB292  0x27 0x00       DUP 0x00
0xB294  0x2E 0x07       JZB 0xB29B (+7)
0xB296  0x4E            PUSHLOCALB00
0xB297  0x1A 0x39       PUSHIB 0x39
0xB299  0x0A            LE
0xB29A  0x0C            BOOLAND
0xB29B  0x27 0x00       DUP 0x00
0xB29D  0x2F 0x22       JNZB 0xB2BF (+34)
0xB29F  0x4E            PUSHLOCALB00
0xB2A0  0x1A 0x41       PUSHIB 0x41
0xB2A2  0x09            GE
0xB2A3  0x27 0x00       DUP 0x00
0xB2A5  0x2E 0x07       JZB 0xB2AC (+7)
0xB2A7  0x4E            PUSHLOCALB00
0xB2A8  0x1A 0x46       PUSHIB 0x46
0xB2AA  0x0A            LE
0xB2AB  0x0C            BOOLAND
0xB2AC  0x0B            BOOLOR
0xB2AD  0x27 0x00       DUP 0x00
0xB2AF  0x2F 0x10       JNZB 0xB2BF (+16)
0xB2B1  0x4E            PUSHLOCALB00
0xB2B2  0x1A 0x61       PUSHIB 0x61
0xB2B4  0x09            GE
0xB2B5  0x27 0x00       DUP 0x00
0xB2B7  0x2E 0x07       JZB 0xB2BE (+7)
0xB2B9  0x4E            PUSHLOCALB00
0xB2BA  0x1A 0x66       PUSHIB 0x66
0xB2BC  0x0A            LE
0xB2BD  0x0C            BOOLAND
0xB2BE  0x0B            BOOLOR
0xB2BF  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:21
// ####  Char.IsLower(..)  ####                                                 0x015D


                        // byte b;                                              char.hs:22

0xB2C1  0x5F 0x01       ENTERB 0x01

                        // b = byte(this);                                      char.hs:23

0xB2C3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2C5  0x4C            POPLOCALB00

                        // return ((b >= 97) && (b <= 122)); // a..z            char.hs:24

0xB2C6  0x4E            PUSHLOCALB00
0xB2C7  0x1A 0x61       PUSHIB 0x61
0xB2C9  0x09            GE
0xB2CA  0x27 0x00       DUP 0x00
0xB2CC  0x2E 0x07       JZB 0xB2D3 (+7)
0xB2CE  0x4E            PUSHLOCALB00
0xB2CF  0x1A 0x7A       PUSHIB 0x7A
0xB2D1  0x0A            LE
0xB2D2  0x0C            BOOLAND
0xB2D3  0x2B 0x04       RETRETB 0x04


// /source/system/char.hs:56
// ####  Char.ToHex(..)  ####                                                   0x0162

0xB2D5  0x49            ENTER

                        // if (h < 10)                                          char.hs:57

0xB2D6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2D8  0x1A 0x0A       PUSHIB 0x0A
0xB2DA  0x08            LT
0xB2DB  0x2E 0x0B       JZB 0xB2E6 (+11)

                        // h = h + 48; // +0                                    char.hs:59

0xB2DD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2DF  0x1A 0x30       PUSHIB 0x30
0xB2E1  0x00            ADD
0xB2E2  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    char.hs:60

0xB2E4  0x30 0x09       JB 0xB2ED (+9)

                        // h = h + 55; // +A - 10                               char.hs:63

0xB2E6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2E8  0x1A 0x37       PUSHIB 0x37
0xB2EA  0x00            ADD
0xB2EB  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return char(h);                                      char.hs:65

0xB2ED  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2EF  0x2B 0x02       RETRETB 0x02


// /source/system/char.hs:27
// ####  Char.ToUpper(..)  ####                                                 0x015E


                        // byte b;                                              char.hs:28

0xB2F1  0x5F 0x01       ENTERB 0x01

                        // if (IsLower(this))                                   char.hs:29

0xB2F3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2F5  0x34 0x5D 0x01  CALLW 0x015D   // Char.IsLower
0xB2F8  0x2E 0x0E       JZB 0xB306 (+14)

                        // b = byte(this) - 97 + 65; // -a + A;                 char.hs:31

0xB2FA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB2FC  0x1A 0x61       PUSHIB 0x61
0xB2FE  0x01            SUB
0xB2FF  0x1A 0x41       PUSHIB 0x41
0xB301  0x00            ADD
0xB302  0x4C            POPLOCALB00

                        // this = char(b);                                      char.hs:32

0xB303  0x4E            PUSHLOCALB00
0xB304  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return this;                                         char.hs:34

0xB306  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB308  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:259
// ####  String.StartsWith(..)  ####                                            0x018C

0xB30A  0x49            ENTER

                        // return (this.Length > 0) && (this[0] == pattern);

0xB30B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB30D  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB30F  0x44            PUSHI0
0xB310  0x07            GT
0xB311  0x27 0x00       DUP 0x00
0xB313  0x2E 0x0B       JZB 0xB31E (+11)
0xB315  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB317  0x44            PUSHI0
0xB318  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB31A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB31C  0x05            EQ
0xB31D  0x0C            BOOLAND
0xB31E  0x2B 0x04       RETRETB 0x04


// /source/system/string.hs:254
// ####  String.Contains(..)  ####                                              0x018B


                        // uint index;                                          string.hs:255

0xB320  0x5F 0x01       ENTERB 0x01

                        // return IndexOf(this, needle, ref index);             string.hs:256

0xB322  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0xB325  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xB327  0x34 0x93 0x01  CALLW 0x0193   // String.IndexOf
0xB32A  0x2B 0x06       RETRETB 0x06


// /source/system/string.hs:237
// ####  String.Contains(..)  ####                                              0x018A

0xB32C  0x49            ENTER

                        // string result;                                       string.hs:238

0xB32D  0x24 0x02       SYSCALL0 0x02  // String.New

                        // char ch;                                             string.hs:239

0xB32F  0x44            PUSHI0

                        // uint i;                                              string.hs:240

0xB330  0x44            PUSHI0

                        // uint length;                                         string.hs:241

0xB331  0x44            PUSHI0

                        // length = this.Length;                                string.hs:242

0xB332  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB334  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB336  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // for ( ; i < length; i++)                             string.hs:243

0xB338  0x56 0x04 0x06  PUSHLOCALBB 0x0604
0xB33B  0x08            LT
0xB33C  0x2E 0x15       JZB 0xB351 (+21)

                        // ch = this[i];                                        string.hs:245

0xB33E  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0xB341  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB343  0x4D            POPLOCALB02

                        // if (ch == needle)                                    string.hs:246

0xB344  0x4F            PUSHLOCALB02
0xB345  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB347  0x05            EQ
0xB348  0x2E 0x05       JZB 0xB34D (+5)

                        // return true;                                         string.hs:248

0xB34A  0x45            PUSHI1
0xB34B  0x2B 0x0C       RETRETB 0x0C

                        // }                                                    string.hs:250

0xB34D  0x22 0x04       INCLOCALB 0x04 (BP+4)
0xB34F  0x30 0xE9       JB 0xB338 (-23)

                        // return false;                                        string.hs:251

0xB351  0x44            PUSHI0
0xB352  0x2B 0x0C       RETRETB 0x0C


// /source/system/string.hs:263
// ####  String.StartsWith(..)  ####                                            0x018D


                        // uint i;                                              string.hs:264

0xB354  0x5F 0x02       ENTERB 0x02

                        // length = pattern.Length;                             string.hs:266

0xB356  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB358  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB35A  0x4D            POPLOCALB02

                        // if (length <= this.Length)                           string.hs:267

0xB35B  0x4F            PUSHLOCALB02
0xB35C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB35E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB360  0x0A            LE
0xB361  0x2E 0x1E       JZB 0xB37F (+30)

                        // for ( ; i < length; i++)                             string.hs:269

0xB363  0x4E            PUSHLOCALB00
0xB364  0x4F            PUSHLOCALB02
0xB365  0x08            LT
0xB366  0x2E 0x16       JZB 0xB37C (+22)

                        // if (pattern[i] != this[i])                           string.hs:271

0xB368  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB36A  0x4E            PUSHLOCALB00
0xB36B  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB36D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB36F  0x4E            PUSHLOCALB00
0xB370  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB372  0x06            NE
0xB373  0x2E 0x05       JZB 0xB378 (+5)

                        // return false;                                        string.hs:273

0xB375  0x44            PUSHI0
0xB376  0x2B 0x08       RETRETB 0x08

                        // }                                                    string.hs:275

0xB378  0x22 0x00       INCLOCALB 0x00 (BP+0)
0xB37A  0x30 0xE9       JB 0xB363 (-23)

                        // return true;                                         string.hs:276

0xB37C  0x45            PUSHI1
0xB37D  0x2B 0x08       RETRETB 0x08

                        // return false;                                        string.hs:278

0xB37F  0x44            PUSHI0
0xB380  0x2B 0x08       RETRETB 0x08


// /source/system/string.hs:438
// ####  String.Pad(..)  ####                                                   0x0197


                        // uint length;                                         string.hs:439

0xB382  0x5F 0x02       ENTERB 0x02

                        // string result;                                       string.hs:441

0xB384  0x24 0x02       SYSCALL0 0x02  // String.New

                        // result = this;                                       string.hs:442

0xB386  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB388  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // length = this.Length;                                string.hs:443

0xB38A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB38C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB38E  0x4C            POPLOCALB00

                        // if (width > length)                                  string.hs:444

0xB38F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB391  0x4E            PUSHLOCALB00
0xB392  0x07            GT
0xB393  0x2E 0x16       JZB 0xB3A9 (+22)

                        // padding = width - length;                            string.hs:446

0xB395  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB397  0x4E            PUSHLOCALB00
0xB398  0x01            SUB
0xB399  0x4D            POPLOCALB02

                        // while (padding > 0)                                  string.hs:447

0xB39A  0x4F            PUSHLOCALB02
0xB39B  0x44            PUSHI0
0xB39C  0x07            GT
0xB39D  0x2E 0x0C       JZB 0xB3A9 (+12)

                        // String.Build(ref result, append);                    string.hs:449

0xB39F  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xB3A1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB3A3  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // padding--;                                           string.hs:450

0xB3A5  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:451

0xB3A7  0x30 0xF3       JB 0xB39A (-13)

                        // return result;                                       string.hs:453

0xB3A9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB3AB  0x2B 0x0C       RETRETB 0x0C


// /source/system/string.hs:457
// ####  String.LeftPad(..)  ####                                               0x0198


                        // uint length;                                         string.hs:458

0xB3AD  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:460

0xB3AF  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB3B1  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB3B3  0x4C            POPLOCALB00

                        // if (width > length)                                  string.hs:461

0xB3B4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB3B6  0x4E            PUSHLOCALB00
0xB3B7  0x07            GT
0xB3B8  0x2E 0x16       JZB 0xB3CE (+22)

                        // padding = width - length;                            string.hs:463

0xB3BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB3BC  0x4E            PUSHLOCALB00
0xB3BD  0x01            SUB
0xB3BE  0x4D            POPLOCALB02

                        // while (padding > 0)                                  string.hs:464

0xB3BF  0x4F            PUSHLOCALB02
0xB3C0  0x44            PUSHI0
0xB3C1  0x07            GT
0xB3C2  0x2E 0x0C       JZB 0xB3CE (+12)

                        // String.BuildFront(ref this, append);                 string.hs:467

0xB3C4  0x21 0xFA       PUSHSTACKADDRB 0xFA (BP-6)
0xB3C6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB3C8  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // padding--;                                           string.hs:468

0xB3CA  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:469

0xB3CC  0x30 0xF3       JB 0xB3BF (-13)

                        // return this;                                         string.hs:471

0xB3CE  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB3D0  0x2B 0x0A       RETRETB 0x0A


// /source/system/string.hs:383
// ####  String.LastIndexOf(..)  ####                                           0x0195


                        // uint length;                                         string.hs:384

0xB3D2  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:388

0xB3D4  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB3D6  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB3D8  0x4C            POPLOCALB00

                        // if (length == 0)                                     string.hs:389

0xB3D9  0x4E            PUSHLOCALB00
0xB3DA  0x2E 0x1D       JZB 0xB3F7 (+29)

                        // i = length-1;                                        string.hs:393

0xB3DC  0x4E            PUSHLOCALB00
0xB3DD  0x45            PUSHI1
0xB3DE  0x01            SUB
0xB3DF  0x4D            POPLOCALB02

                        // if (this[i] == pattern)                              string.hs:396

0xB3E0  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB3E2  0x4F            PUSHLOCALB02
0xB3E3  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB3E5  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB3E7  0x05            EQ
0xB3E8  0x2E 0x08       JZB 0xB3F0 (+8)

                        // index = i;                                           string.hs:398

0xB3EA  0x4F            PUSHLOCALB02
0xB3EB  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:399

0xB3ED  0x45            PUSHI1
0xB3EE  0x2B 0x0A       RETRETB 0x0A

                        // if (i == 0)                                          string.hs:401

0xB3F0  0x4F            PUSHLOCALB02
0xB3F1  0x2E 0x06       JZB 0xB3F7 (+6)

                        // i--;                                                 string.hs:405

0xB3F3  0x23 0x02       DECLOCALB 0x02 (BP+2)

                        // }                                                    string.hs:406

0xB3F5  0x30 0xEB       JB 0xB3E0 (-21)

                        // return false;                                        string.hs:409

0xB3F7  0x44            PUSHI0
0xB3F8  0x2B 0x0A       RETRETB 0x0A


// /source/system/string.hs:281
// ####  String.IndexOf(..)  ####                                               0x018E


                        // uint i;                                              string.hs:282

0xB3FA  0x5F 0x02       ENTERB 0x02

                        // length = this.Length;                                string.hs:284

0xB3FC  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB3FE  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB400  0x4D            POPLOCALB02

                        // for ( ; i < length; i++)                             string.hs:285

0xB401  0x4E            PUSHLOCALB00
0xB402  0x4F            PUSHLOCALB02
0xB403  0x08            LT
0xB404  0x2E 0x16       JZB 0xB41A (+22)

                        // if (this[i] == pattern)                              string.hs:287

0xB406  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB408  0x4E            PUSHLOCALB00
0xB409  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB40B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB40D  0x05            EQ
0xB40E  0x2E 0x08       JZB 0xB416 (+8)

                        // index = i;                                           string.hs:289

0xB410  0x4E            PUSHLOCALB00
0xB411  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         string.hs:290

0xB413  0x45            PUSHI1
0xB414  0x2B 0x0A       RETRETB 0x0A

                        // }                                                    string.hs:292

0xB416  0x22 0x00       INCLOCALB 0x00 (BP+0)
0xB418  0x30 0xE9       JB 0xB401 (-23)

                        // return false;                                        string.hs:293

0xB41A  0x44            PUSHI0
0xB41B  0x2B 0x0A       RETRETB 0x0A


// /source/system/string.hs:475
// ####  String.ToUpper(..)  ####                                               0x0199


                        // uint i;                                              string.hs:476

0xB41D  0x5F 0x03       ENTERB 0x03

                        // string result;                                       string.hs:479

0xB41F  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint length = this.Length;                           string.hs:480

0xB421  0x44            PUSHI0
0xB422  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB424  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB426  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (; i < length; i++)                              string.hs:481

0xB428  0x4E            PUSHLOCALB00
0xB429  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB42B  0x08            LT
0xB42C  0x2E 0x14       JZB 0xB440 (+20)

                        // c = this[i];                                         string.hs:483

0xB42E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB430  0x4E            PUSHLOCALB00
0xB431  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB433  0x4D            POPLOCALB02

                        // Build(ref result, c.ToUpper());                      string.hs:484

0xB434  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xB436  0x4F            PUSHLOCALB02
0xB437  0x34 0x5E 0x01  CALLW 0x015E   // Char.ToUpper
0xB43A  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    string.hs:485

0xB43C  0x22 0x00       INCLOCALB 0x00 (BP+0)
0xB43E  0x30 0xEA       JB 0xB428 (-22)

                        // return result;                                       string.hs:486

0xB440  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xB442  0x2B 0x0C       RETRETB 0x0C


// /source/system/string.hs:640
// ####  String.Split(..)  ####                                                 0x019E


                        // uint i;                                              string.hs:641

0xB444  0x5F 0x03       ENTERB 0x03

                        // <string> stringList;                                 string.hs:644

0xB446  0x1A 0x0F       PUSHIB 0x0F
0xB448  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // string accumulator;                                  string.hs:645

0xB44A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // length = this.Length;                                string.hs:646

0xB44C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB44E  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB450  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // for (; i < length; i++)                              string.hs:647

0xB452  0x4E            PUSHLOCALB00
0xB453  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB455  0x08            LT
0xB456  0x2E 0x2A       JZB 0xB480 (+42)

                        // ch = this[i];                                        string.hs:649

0xB458  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB45A  0x4E            PUSHLOCALB00
0xB45B  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB45D  0x4D            POPLOCALB02

                        // if (ch == delimiter)                                 string.hs:650

0xB45E  0x4F            PUSHLOCALB02
0xB45F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB461  0x05            EQ
0xB462  0x2E 0x15       JZB 0xB477 (+21)

                        // if (accumulator.Length > 0)                          string.hs:652

0xB464  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB466  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB468  0x44            PUSHI0
0xB469  0x07            GT
0xB46A  0x2E 0x12       JZB 0xB47C (+18)

                        // stringList.Append(accumulator);                      string.hs:654

0xB46C  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0xB46F  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // accumulator = "";                                    string.hs:655

0xB471  0x24 0x02       SYSCALL0 0x02  // String.New
0xB473  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // }                                                    string.hs:657

0xB475  0x30 0x07       JB 0xB47C (+7)

                        // Build(ref accumulator, ch);                          string.hs:660

0xB477  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0xB479  0x4F            PUSHLOCALB02
0xB47A  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    string.hs:662

0xB47C  0x22 0x00       INCLOCALB 0x00 (BP+0)
0xB47E  0x30 0xD4       JB 0xB452 (-44)

                        // if (accumulator.Length > 0)                          string.hs:663

0xB480  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB482  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB484  0x44            PUSHI0
0xB485  0x07            GT
0xB486  0x2E 0x07       JZB 0xB48D (+7)

                        // stringList.Append(accumulator);                      string.hs:665

0xB488  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0xB48B  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // return stringList;                                   string.hs:667

0xB48D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xB48F  0x2B 0x0E       RETRETB 0x0E


// /source/system/string.hs:326
// ####  String.IndexOf(..)  ####                                               0x0193


                        // bool found;                                          string.hs:327

0xB491  0x5F 0x05       ENTERB 0x05

                        // length = this.Length;                                string.hs:332

0xB493  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB495  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB497  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // pLength = pattern.Length;                            string.hs:333

0xB499  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xB49B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xB49D  0x4D            POPLOCALB02

                        // if (pIndex + pLength > length)                       string.hs:336

0xB49E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB4A0  0x4F            PUSHLOCALB02
0xB4A1  0x00            ADD
0xB4A2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xB4A4  0x07            GT
0xB4A5  0x2F 0x32       JNZB 0xB4D7 (+50)

                        // found = true;                                        string.hs:340

0xB4A7  0x45            PUSHI1
0xB4A8  0x4C            POPLOCALB00

                        // for (i=0; i < pLength; i++)                          string.hs:341

0xB4A9  0x44            PUSHI0
0xB4AA  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0xB4AC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB4AE  0x4F            PUSHLOCALB02
0xB4AF  0x08            LT
0xB4B0  0x2E 0x1A       JZB 0xB4CA (+26)

                        // if (this[i+pIndex] != pattern[i])                    string.hs:343

0xB4B2  0x56 0xFA 0x08  PUSHLOCALBB 0x08FA
0xB4B5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB4B7  0x00            ADD
0xB4B8  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB4BA  0x56 0xFC 0x08  PUSHLOCALBB 0x08FC
0xB4BD  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xB4BF  0x06            NE
0xB4C0  0x2E 0x06       JZB 0xB4C6 (+6)

                        // found = false;                                       string.hs:345

0xB4C2  0x44            PUSHI0
0xB4C3  0x4C            POPLOCALB00

                        // break;                                               string.hs:346

0xB4C4  0x30 0x06       JB 0xB4CA (+6)

                        // }                                                    string.hs:348

0xB4C6  0x22 0x08       INCLOCALB 0x08 (BP+8)
0xB4C8  0x30 0xE4       JB 0xB4AC (-28)

                        // if (found)                                           string.hs:349

0xB4CA  0x4E            PUSHLOCALB00
0xB4CB  0x2E 0x08       JZB 0xB4D3 (+8)

                        // index = pIndex;                                      string.hs:351

0xB4CD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB4CF  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // break;                                               string.hs:352

0xB4D1  0x30 0x06       JB 0xB4D7 (+6)

                        // pIndex++;                                            string.hs:354

0xB4D3  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    string.hs:355

0xB4D5  0x30 0xC9       JB 0xB49E (-55)

                        // return found;                                        string.hs:356

0xB4D7  0x4E            PUSHLOCALB00
0xB4D8  0x2B 0x10       RETRETB 0x10


// /source/compiler/codegen/peephole.hs:16
// ####  Peephole.Initialize(..)  ####                                          0x013E


                        // lastInstruction0 = 0; lastInstruction1 = 0; lastInstruction2 = 0; lastInstruction3 = 0; lastInstruction4 = 0; // not really ..

0xB4DA  0x5F 0x01       ENTERB 0x01

                        // lastInstruction0 = 0; lastInstruction1 = 0; lastInstruction2 = 0; lastInstruction3 = 0; lastInstruction4 = 0; // not really ..

0xB4DC  0x1F 0xA6       POPGLOBALB 0xA6
0xB4DE  0x44            PUSHI0
0xB4DF  0x1F 0xA8       POPGLOBALB 0xA8
0xB4E1  0x44            PUSHI0
0xB4E2  0x1F 0xAA       POPGLOBALB 0xAA
0xB4E4  0x44            PUSHI0
0xB4E5  0x1F 0xAC       POPGLOBALB 0xAC
0xB4E7  0x44            PUSHI0
0xB4E8  0x1F 0xAE       POPGLOBALB 0xAE

                        // peephholeBoundary = 0; // reset to start             peephole.hs:18

0xB4EA  0x44            PUSHI0
0xB4EB  0x1F 0xB0       POPGLOBALB 0xB0

                        // }                                                    peephole.hs:19

0xB4ED  0x4A            RET0


// /source/compiler/codegen/peephole.hs:21
// ####  Peephole.UpdatePeepholeBoundary(..)  ####                              0x013F


                        // peephholeBoundary = 0;                               peephole.hs:22

0xB4EE  0x5F 0x01       ENTERB 0x01

                        // peephholeBoundary = 0;                               peephole.hs:22

0xB4F0  0x1F 0xB0       POPGLOBALB 0xB0

                        // if (codeLength > 0)                                  peephole.hs:23

0xB4F2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB4F4  0x44            PUSHI0
0xB4F5  0x07            GT
0xB4F6  0x2E 0x08       JZB 0xB4FE (+8)

                        // peephholeBoundary = codeLength-1; // current last instruction is out of bounds

0xB4F8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB4FA  0x45            PUSHI1
0xB4FB  0x01            SUB
0xB4FC  0x1F 0xB0       POPGLOBALB 0xB0

                        // }                                                    peephole.hs:27

0xB4FE  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/peephole.hs:62
// ####  Peephole.PeepholeOptimize(..)  ####                                    0x0144

0xB500  0x49            ENTER

                        // if (!CodeStream.CheckedBuild || DefineExists("PEEPHOLEOPT"))

0xB501  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0xB504  0x41            BOOLNOT
0xB505  0x27 0x00       DUP 0x00
0xB507  0x2F 0x0C       JNZB 0xB513 (+12)
0xB509  0x37 0x2D 0x16  PUSHIW 0x162D
0xB50C  0x1A 0x0B       PUSHIB 0x0B
0xB50E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xB510  0x2C 0x95       CALLB 0x95     // Symbols.DefineExists
0xB512  0x0B            BOOLOR
0xB513  0x2E 0x35       JZB 0xB548 (+53)

                        // if (lastInstruction0 > peephholeBoundary)            peephole.hs:71

0xB515  0x52 0xA6 0xB0  PUSHGLOBALBB 0xB0A6
0xB518  0x07            GT
0xB519  0x2E 0x09       JZB 0xB522 (+9)

                        // if (peepholeOptimize1(ref currentStream))            peephole.hs:73

0xB51B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB51D  0x34 0x4A 0x01  CALLW 0x014A   // Peephole.peepholeOptimize1
0xB520  0x2F 0xF5       JNZB 0xB515 (-11)

                        // if (lastInstruction1 > peephholeBoundary)            peephole.hs:79

0xB522  0x52 0xA8 0xB0  PUSHGLOBALBB 0xB0A8
0xB525  0x07            GT
0xB526  0x2E 0x0F       JZB 0xB535 (+15)

                        // if (lastInstruction1 != lastInstruction0) // why?! it does happen

0xB528  0x52 0xA8 0xA6  PUSHGLOBALBB 0xA6A8
0xB52B  0x06            NE
0xB52C  0x2E 0x09       JZB 0xB535 (+9)

                        // if (peepholeOptimize2(ref currentStream))            peephole.hs:83

0xB52E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB530  0x34 0x4B 0x01  CALLW 0x014B   // Peephole.peepholeOptimize2
0xB533  0x2F 0xE2       JNZB 0xB515 (-30)

                        // if (lastInstruction3 > peephholeBoundary)            peephole.hs:90

0xB535  0x52 0xAC 0xB0  PUSHGLOBALBB 0xB0AC
0xB538  0x07            GT
0xB539  0x2E 0x0F       JZB 0xB548 (+15)

                        // if (lastInstruction1 != lastInstruction0) // why?!

0xB53B  0x52 0xA8 0xA6  PUSHGLOBALBB 0xA6A8
0xB53E  0x06            NE
0xB53F  0x2E 0x09       JZB 0xB548 (+9)

                        // if (peepholeOptimize4(ref currentStream))            peephole.hs:94

0xB541  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB543  0x34 0x49 0x01  CALLW 0x0149   // Peephole.peepholeOptimize4
0xB546  0x2F 0xCF       JNZB 0xB515 (-49)

                        // }                                                    peephole.hs:103

0xB548  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/peephole.hs:39
// ####  Peephole.LastInstructionIndex_Get(..)  ####                            0x0141

0xB54A  0x49            ENTER

                        // return lastInstruction0;                             peephole.hs:40

0xB54B  0x20 0xA6       PUSHGLOBALB 0xA6
0xB54D  0x4A            RET0


// /source/compiler/codegen/peephole.hs:31
// ####  Peephole.PeepholeBoundary_Get(..)  ####                                0x0140

0xB54E  0x49            ENTER

                        // return peephholeBoundary;                            peephole.hs:32

0xB54F  0x20 0xB0       PUSHGLOBALB 0xB0
0xB551  0x4A            RET0


// /source/compiler/codegen/peephole.hs:43
// ####  Peephole.LastInstructionIndex_Set(..)  ####                            0x0142

0xB552  0x49            ENTER

                        // lastInstruction4 = lastInstruction3;                 peephole.hs:44

0xB553  0x20 0xAC       PUSHGLOBALB 0xAC
0xB555  0x1F 0xAE       POPGLOBALB 0xAE

                        // lastInstruction3 = lastInstruction2;                 peephole.hs:45

0xB557  0x20 0xAA       PUSHGLOBALB 0xAA
0xB559  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction2 = lastInstruction1;                 peephole.hs:46

0xB55B  0x20 0xA8       PUSHGLOBALB 0xA8
0xB55D  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction1 = lastInstruction0;                 peephole.hs:47

0xB55F  0x20 0xA6       PUSHGLOBALB 0xA6
0xB561  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction0 = value;                            peephole.hs:48

0xB563  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB565  0x1F 0xA6       POPGLOBALB 0xA6

                        // }                                                    peephole.hs:49

0xB567  0x2A 0x02       RETB 0x02


// /source/compiler/codegen/peephole.hs:294
// ####  Peephole.peepholeOptimize1(..)  ####                                   0x014A


                        // byte offset0 = 0;                                    peephole.hs:295

0xB569  0x5F 0x03       ENTERB 0x03

                        // bool isPushLocalB = IsPushLocalB(ref currentStream, lastInstruction0, ref offset0, ref length0);

0xB56B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB56D  0x20 0xA6       PUSHGLOBALB 0xA6
0xB56F  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xB571  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xB573  0x34 0x47 0x01  CALLW 0x0147   // Peephole.IsPushLocalB
0xB576  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // if (isPushLocalB && (length0 == 2) && ((offset0 == 0) || (offset0 == 2)))

0xB578  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB57A  0x27 0x00       DUP 0x00
0xB57C  0x2E 0x18       JZB 0xB594 (+24)
0xB57E  0x4F            PUSHLOCALB02
0xB57F  0x1A 0x02       PUSHIB 0x02
0xB581  0x05            EQ
0xB582  0x0C            BOOLAND
0xB583  0x27 0x00       DUP 0x00
0xB585  0x2E 0x0F       JZB 0xB594 (+15)
0xB587  0x4E            PUSHLOCALB00
0xB588  0x44            PUSHI0
0xB589  0x05            EQ
0xB58A  0x27 0x00       DUP 0x00
0xB58C  0x2F 0x07       JNZB 0xB593 (+7)
0xB58E  0x4E            PUSHLOCALB00
0xB58F  0x1A 0x02       PUSHIB 0x02
0xB591  0x05            EQ
0xB592  0x0B            BOOLOR
0xB593  0x0C            BOOLAND
0xB594  0x2E 0x28       JZB 0xB5BC (+40)

                        // if (offset0 == 0)                                    peephole.hs:301

0xB596  0x4E            PUSHLOCALB00
0xB597  0x2F 0x0C       JNZB 0xB5A3 (+12)

                        // currentStream.SetItem(lastInstruction0, byte(Instruction.PUSHLOCALB00));

0xB599  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB59B  0x20 0xA6       PUSHGLOBALB 0xA6
0xB59D  0x1A 0x4E       PUSHIB 0x4E
0xB59F  0x51 0x03       CAST 0x03
0xB5A1  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // if (offset0 == 2)                                    peephole.hs:307

0xB5A3  0x4E            PUSHLOCALB00
0xB5A4  0x1A 0x02       PUSHIB 0x02
0xB5A6  0x05            EQ
0xB5A7  0x2E 0x0C       JZB 0xB5B3 (+12)

                        // currentStream.SetItem(lastInstruction0, byte(Instruction.PUSHLOCALB02));

0xB5A9  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB5AB  0x20 0xA6       PUSHGLOBALB 0xA6
0xB5AD  0x1A 0x4F       PUSHIB 0x4F
0xB5AF  0x51 0x03       CAST 0x03
0xB5B1  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:313

0xB5B3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB5B5  0x45            PUSHI1
0xB5B6  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // return true; // hunt for more                        peephole.hs:314

0xB5B9  0x45            PUSHI1
0xB5BA  0x2B 0x08       RETRETB 0x08

                        // bool isPopLocalB = IsPopLocalB(ref currentStream, lastInstruction0, ref offset0, ref length0);

0xB5BC  0x44            PUSHI0
0xB5BD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB5BF  0x20 0xA6       PUSHGLOBALB 0xA6
0xB5C1  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xB5C3  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xB5C5  0x34 0x48 0x01  CALLW 0x0148   // Peephole.IsPopLocalB
0xB5C8  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (isPopLocalB && (length0 == 2) && ((offset0 == 0) || (offset0 == 2)))

0xB5CA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xB5CC  0x27 0x00       DUP 0x00
0xB5CE  0x2E 0x18       JZB 0xB5E6 (+24)
0xB5D0  0x4F            PUSHLOCALB02
0xB5D1  0x1A 0x02       PUSHIB 0x02
0xB5D3  0x05            EQ
0xB5D4  0x0C            BOOLAND
0xB5D5  0x27 0x00       DUP 0x00
0xB5D7  0x2E 0x0F       JZB 0xB5E6 (+15)
0xB5D9  0x4E            PUSHLOCALB00
0xB5DA  0x44            PUSHI0
0xB5DB  0x05            EQ
0xB5DC  0x27 0x00       DUP 0x00
0xB5DE  0x2F 0x07       JNZB 0xB5E5 (+7)
0xB5E0  0x4E            PUSHLOCALB00
0xB5E1  0x1A 0x02       PUSHIB 0x02
0xB5E3  0x05            EQ
0xB5E4  0x0B            BOOLOR
0xB5E5  0x0C            BOOLAND
0xB5E6  0x2E 0x28       JZB 0xB60E (+40)

                        // if (offset0 == 0)                                    peephole.hs:320

0xB5E8  0x4E            PUSHLOCALB00
0xB5E9  0x2F 0x0C       JNZB 0xB5F5 (+12)

                        // currentStream.SetItem(lastInstruction0, byte(Instruction.POPLOCALB00));

0xB5EB  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB5ED  0x20 0xA6       PUSHGLOBALB 0xA6
0xB5EF  0x1A 0x4C       PUSHIB 0x4C
0xB5F1  0x51 0x03       CAST 0x03
0xB5F3  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // if (offset0 == 2)                                    peephole.hs:326

0xB5F5  0x4E            PUSHLOCALB00
0xB5F6  0x1A 0x02       PUSHIB 0x02
0xB5F8  0x05            EQ
0xB5F9  0x2E 0x0C       JZB 0xB605 (+12)

                        // currentStream.SetItem(lastInstruction0, byte(Instruction.POPLOCALB02));

0xB5FB  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB5FD  0x20 0xA6       PUSHGLOBALB 0xA6
0xB5FF  0x1A 0x4D       PUSHIB 0x4D
0xB601  0x51 0x03       CAST 0x03
0xB603  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:332

0xB605  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB607  0x45            PUSHI1
0xB608  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // return true; // hunt for more                        peephole.hs:333

0xB60B  0x45            PUSHI1
0xB60C  0x2B 0x0A       RETRETB 0x0A

                        // return false;                                        peephole.hs:335

0xB60E  0x44            PUSHI0
0xB60F  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/codegen/peephole.hs:339
// ####  Peephole.peepholeOptimize2(..)  ####                                   0x014B

0xB611  0x49            ENTER

                        // if (                                                 peephole.hs:340

0xB612  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB614  0x20 0xA8       PUSHGLOBALB 0xA8
0xB616  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB618  0x1A 0x37       PUSHIB 0x37
0xB61A  0x05            EQ
0xB61B  0x27 0x00       DUP 0x00
0xB61D  0x2E 0x0C       JZB 0xB629 (+12)
0xB61F  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB621  0x20 0xA6       PUSHGLOBALB 0xA6
0xB623  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB625  0x1A 0x0A       PUSHIB 0x0A
0xB627  0x05            EQ
0xB628  0x0C            BOOLAND
0xB629  0x2E 0x28       JZB 0xB651 (+40)

                        // currentStream.SetItem(lastInstruction1, byte(Instruction.PUSHIWLE));

0xB62B  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB62D  0x20 0xA8       PUSHGLOBALB 0xA8
0xB62F  0x1A 0x40       PUSHIB 0x40
0xB631  0x51 0x03       CAST 0x03
0xB633  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:348

0xB635  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB637  0x45            PUSHI1
0xB638  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction1;                 peephole.hs:349

0xB63B  0x20 0xA8       PUSHGLOBALB 0xA8
0xB63D  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction2;                 peephole.hs:350

0xB63F  0x20 0xAA       PUSHGLOBALB 0xAA
0xB641  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = lastInstruction3;                 peephole.hs:351

0xB643  0x20 0xAC       PUSHGLOBALB 0xAC
0xB645  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = lastInstruction4;                 peephole.hs:352

0xB647  0x20 0xAE       PUSHGLOBALB 0xAE
0xB649  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:353

0xB64B  0x44            PUSHI0
0xB64C  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:354

0xB64E  0x45            PUSHI1
0xB64F  0x2B 0x02       RETRETB 0x02

                        // if (                                                 peephole.hs:356

0xB651  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB653  0x20 0xA8       PUSHGLOBALB 0xA8
0xB655  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB657  0x1A 0x37       PUSHIB 0x37
0xB659  0x05            EQ
0xB65A  0x27 0x00       DUP 0x00
0xB65C  0x2E 0x0C       JZB 0xB668 (+12)
0xB65E  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB660  0x20 0xA6       PUSHGLOBALB 0xA6
0xB662  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB664  0x1A 0x08       PUSHIB 0x08
0xB666  0x05            EQ
0xB667  0x0C            BOOLAND
0xB668  0x2E 0x28       JZB 0xB690 (+40)

                        // currentStream.SetItem(lastInstruction1, byte(Instruction.PUSHIWLT));

0xB66A  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB66C  0x20 0xA8       PUSHGLOBALB 0xA8
0xB66E  0x1A 0x55       PUSHIB 0x55
0xB670  0x51 0x03       CAST 0x03
0xB672  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:364

0xB674  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB676  0x45            PUSHI1
0xB677  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction1;                 peephole.hs:365

0xB67A  0x20 0xA8       PUSHGLOBALB 0xA8
0xB67C  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction2;                 peephole.hs:366

0xB67E  0x20 0xAA       PUSHGLOBALB 0xAA
0xB680  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = lastInstruction3;                 peephole.hs:367

0xB682  0x20 0xAC       PUSHGLOBALB 0xAC
0xB684  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = lastInstruction4;                 peephole.hs:368

0xB686  0x20 0xAE       PUSHGLOBALB 0xAE
0xB688  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:369

0xB68A  0x44            PUSHI0
0xB68B  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:370

0xB68D  0x45            PUSHI1
0xB68E  0x2B 0x02       RETRETB 0x02

                        // if (                                                 peephole.hs:372

0xB690  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB692  0x20 0xA8       PUSHGLOBALB 0xA8
0xB694  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB696  0x1A 0x20       PUSHIB 0x20
0xB698  0x05            EQ
0xB699  0x27 0x00       DUP 0x00
0xB69B  0x2E 0x0C       JZB 0xB6A7 (+12)
0xB69D  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB69F  0x20 0xA6       PUSHGLOBALB 0xA6
0xB6A1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB6A3  0x1A 0x20       PUSHIB 0x20
0xB6A5  0x05            EQ
0xB6A6  0x0C            BOOLAND
0xB6A7  0x2E 0x46       JZB 0xB6ED (+70)

                        // byte offset0 = currentStream[lastInstruction0+1];

0xB6A9  0x44            PUSHI0
0xB6AA  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6AC  0x20 0xA6       PUSHGLOBALB 0xA6
0xB6AE  0x45            PUSHI1
0xB6AF  0x00            ADD
0xB6B0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB6B2  0x4C            POPLOCALB00

                        // byte offset1 = currentStream[lastInstruction1+1];

0xB6B3  0x44            PUSHI0
0xB6B4  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6B6  0x20 0xA8       PUSHGLOBALB 0xA8
0xB6B8  0x45            PUSHI1
0xB6B9  0x00            ADD
0xB6BA  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB6BC  0x4D            POPLOCALB02

                        // currentStream.SetItem(lastInstruction1, byte(Instruction.PUSHGLOBALBB));

0xB6BD  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6BF  0x20 0xA8       PUSHGLOBALB 0xA8
0xB6C1  0x1A 0x52       PUSHIB 0x52
0xB6C3  0x51 0x03       CAST 0x03
0xB6C5  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction1+2, offset0);

0xB6C7  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6C9  0x20 0xA8       PUSHGLOBALB 0xA8
0xB6CB  0x1A 0x02       PUSHIB 0x02
0xB6CD  0x00            ADD
0xB6CE  0x4E            PUSHLOCALB00
0xB6CF  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:384

0xB6D1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB6D3  0x45            PUSHI1
0xB6D4  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction1;                 peephole.hs:385

0xB6D7  0x20 0xA8       PUSHGLOBALB 0xA8
0xB6D9  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction2;                 peephole.hs:386

0xB6DB  0x20 0xAA       PUSHGLOBALB 0xAA
0xB6DD  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = lastInstruction3;                 peephole.hs:387

0xB6DF  0x20 0xAC       PUSHGLOBALB 0xAC
0xB6E1  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = lastInstruction4;                 peephole.hs:388

0xB6E3  0x20 0xAE       PUSHGLOBALB 0xAE
0xB6E5  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:389

0xB6E7  0x44            PUSHI0
0xB6E8  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:390

0xB6EA  0x45            PUSHI1
0xB6EB  0x2B 0x06       RETRETB 0x06

                        // if (                                                 peephole.hs:393

0xB6ED  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6EF  0x20 0xA8       PUSHGLOBALB 0xA8
0xB6F1  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB6F3  0x1A 0x1C       PUSHIB 0x1C
0xB6F5  0x05            EQ
0xB6F6  0x27 0x00       DUP 0x00
0xB6F8  0x2E 0x0C       JZB 0xB704 (+12)
0xB6FA  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB6FC  0x20 0xA6       PUSHGLOBALB 0xA6
0xB6FE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB700  0x1A 0x1C       PUSHIB 0x1C
0xB702  0x05            EQ
0xB703  0x0C            BOOLAND
0xB704  0x2E 0x46       JZB 0xB74A (+70)

                        // byte offset0 = currentStream[lastInstruction0+1];

0xB706  0x44            PUSHI0
0xB707  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB709  0x20 0xA6       PUSHGLOBALB 0xA6
0xB70B  0x45            PUSHI1
0xB70C  0x00            ADD
0xB70D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB70F  0x4C            POPLOCALB00

                        // byte offset1 = currentStream[lastInstruction1+1];

0xB710  0x44            PUSHI0
0xB711  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB713  0x20 0xA8       PUSHGLOBALB 0xA8
0xB715  0x45            PUSHI1
0xB716  0x00            ADD
0xB717  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB719  0x4D            POPLOCALB02

                        // currentStream.SetItem(lastInstruction1, byte(Instruction.PUSHLOCALBB));

0xB71A  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB71C  0x20 0xA8       PUSHGLOBALB 0xA8
0xB71E  0x1A 0x56       PUSHIB 0x56
0xB720  0x51 0x03       CAST 0x03
0xB722  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction1+2, offset0);

0xB724  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB726  0x20 0xA8       PUSHGLOBALB 0xA8
0xB728  0x1A 0x02       PUSHIB 0x02
0xB72A  0x00            ADD
0xB72B  0x4E            PUSHLOCALB00
0xB72C  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // TrimTail(ref currentStream, 1);                      peephole.hs:405

0xB72E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB730  0x45            PUSHI1
0xB731  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction1;                 peephole.hs:406

0xB734  0x20 0xA8       PUSHGLOBALB 0xA8
0xB736  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction2;                 peephole.hs:407

0xB738  0x20 0xAA       PUSHGLOBALB 0xAA
0xB73A  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = lastInstruction3;                 peephole.hs:408

0xB73C  0x20 0xAC       PUSHGLOBALB 0xAC
0xB73E  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = lastInstruction4;                 peephole.hs:409

0xB740  0x20 0xAE       PUSHGLOBALB 0xAE
0xB742  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:410

0xB744  0x44            PUSHI0
0xB745  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:411

0xB747  0x45            PUSHI1
0xB748  0x2B 0x06       RETRETB 0x06

                        // return false;                                        peephole.hs:414

0xB74A  0x44            PUSHI0
0xB74B  0x2B 0x02       RETRETB 0x02


// /source/compiler/codegen/peephole.hs:184
// ####  Peephole.peepholeOptimize4(..)  ####                                   0x0149


                        // byte offset3 = 0;                                    peephole.hs:185

0xB74D  0x5F 0x03       ENTERB 0x03

                        // bool isPushLocalB3  = IsPushLocalB (ref currentStream, lastInstruction3, ref offset3, ref length3);

0xB74F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB751  0x20 0xAC       PUSHGLOBALB 0xAC
0xB753  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xB755  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xB757  0x34 0x47 0x01  CALLW 0x0147   // Peephole.IsPushLocalB
0xB75A  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // bool isPushGlobalB3 = IsPushGlobalB(ref currentStream, lastInstruction3, ref offset3, ref length3);

0xB75C  0x44            PUSHI0
0xB75D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB75F  0x20 0xAC       PUSHGLOBALB 0xAC
0xB761  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xB763  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xB765  0x34 0x45 0x01  CALLW 0x0145   // Peephole.IsPushGlobalB
0xB768  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // byte offset0 = 0;                                    peephole.hs:190

0xB76A  0x44            PUSHI0

                        // byte length0 = 0;                                    peephole.hs:191

0xB76B  0x44            PUSHI0

                        // bool isPopLocalB0  = IsPopLocalB (ref currentStream, lastInstruction0, ref offset0, ref length0);

0xB76C  0x44            PUSHI0
0xB76D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB76F  0x20 0xA6       PUSHGLOBALB 0xA6
0xB771  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0xB773  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0xB775  0x34 0x48 0x01  CALLW 0x0148   // Peephole.IsPopLocalB
0xB778  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // bool isPopGlobalB0 = IsPopGlobalB(ref currentStream, lastInstruction0, ref offset0, ref length0);

0xB77A  0x44            PUSHI0
0xB77B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB77D  0x20 0xA6       PUSHGLOBALB 0xA6
0xB77F  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0xB781  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0xB783  0x34 0x46 0x01  CALLW 0x0146   // Peephole.IsPopGlobalB
0xB786  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (isPushGlobalB3 && isPopGlobalB0)                 peephole.hs:195

0xB788  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xB78A  0x27 0x00       DUP 0x00
0xB78C  0x2E 0x05       JZB 0xB791 (+5)
0xB78E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xB790  0x0C            BOOLAND
0xB791  0x31 0xBD 0x00  JZW 0xB84E (+189)

                        // if ((offset3 == offset0)                             peephole.hs:197

0xB794  0x4E            PUSHLOCALB00
0xB795  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB797  0x05            EQ
0xB798  0x27 0x00       DUP 0x00
0xB79A  0x2E 0x19       JZB 0xB7B3 (+25)
0xB79C  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB79E  0x20 0xAA       PUSHGLOBALB 0xAA
0xB7A0  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB7A2  0x1A 0x45       PUSHIB 0x45
0xB7A4  0x05            EQ
0xB7A5  0x0C            BOOLAND
0xB7A6  0x27 0x00       DUP 0x00
0xB7A8  0x2E 0x0B       JZB 0xB7B3 (+11)
0xB7AA  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB7AC  0x20 0xA8       PUSHGLOBALB 0xA8
0xB7AE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB7B0  0x44            PUSHI0
0xB7B1  0x05            EQ
0xB7B2  0x0C            BOOLAND
0xB7B3  0x2E 0x3E       JZB 0xB7F1 (+62)

                        // currentStream.SetItem(lastInstruction3,   byte(Instruction.INCGLOBALB));

0xB7B5  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB7B7  0x20 0xAC       PUSHGLOBALB 0xAC
0xB7B9  0x1A 0x53       PUSHIB 0x53
0xB7BB  0x51 0x03       CAST 0x03
0xB7BD  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction3+1, offset0);

0xB7BF  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB7C1  0x20 0xAC       PUSHGLOBALB 0xAC
0xB7C3  0x45            PUSHI1
0xB7C4  0x00            ADD
0xB7C5  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB7C7  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // uint remove = (length0-1) + (length3-1) + 2;

0xB7C9  0x44            PUSHI0
0xB7CA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB7CC  0x45            PUSHI1
0xB7CD  0x01            SUB
0xB7CE  0x4F            PUSHLOCALB02
0xB7CF  0x45            PUSHI1
0xB7D0  0x01            SUB
0xB7D1  0x00            ADD
0xB7D2  0x1A 0x02       PUSHIB 0x02
0xB7D4  0x00            ADD
0xB7D5  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // TrimTail(ref currentStream, remove);                 peephole.hs:208

0xB7D7  0x56 0xFE 0x10  PUSHLOCALBB 0x10FE
0xB7DA  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction3;                 peephole.hs:209

0xB7DD  0x20 0xAC       PUSHGLOBALB 0xAC
0xB7DF  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction4;                 peephole.hs:210

0xB7E1  0x20 0xAE       PUSHGLOBALB 0xAE
0xB7E3  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = 0;                                peephole.hs:211

0xB7E5  0x44            PUSHI0
0xB7E6  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = 0;                                peephole.hs:212

0xB7E8  0x44            PUSHI0
0xB7E9  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:213

0xB7EB  0x44            PUSHI0
0xB7EC  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:214

0xB7EE  0x45            PUSHI1
0xB7EF  0x2B 0x14       RETRETB 0x14

                        // if ((offset3 == offset0)                             peephole.hs:216

0xB7F1  0x4E            PUSHLOCALB00
0xB7F2  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB7F4  0x05            EQ
0xB7F5  0x27 0x00       DUP 0x00
0xB7F7  0x2E 0x19       JZB 0xB810 (+25)
0xB7F9  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB7FB  0x20 0xAA       PUSHGLOBALB 0xAA
0xB7FD  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB7FF  0x1A 0x45       PUSHIB 0x45
0xB801  0x05            EQ
0xB802  0x0C            BOOLAND
0xB803  0x27 0x00       DUP 0x00
0xB805  0x2E 0x0B       JZB 0xB810 (+11)
0xB807  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB809  0x20 0xA8       PUSHGLOBALB 0xA8
0xB80B  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB80D  0x45            PUSHI1
0xB80E  0x05            EQ
0xB80F  0x0C            BOOLAND
0xB810  0x2E 0x3E       JZB 0xB84E (+62)

                        // currentStream.SetItem(lastInstruction3,   byte(Instruction.DECGLOBALB));

0xB812  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB814  0x20 0xAC       PUSHGLOBALB 0xAC
0xB816  0x1A 0x54       PUSHIB 0x54
0xB818  0x51 0x03       CAST 0x03
0xB81A  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction3+1, offset0);

0xB81C  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB81E  0x20 0xAC       PUSHGLOBALB 0xAC
0xB820  0x45            PUSHI1
0xB821  0x00            ADD
0xB822  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB824  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // uint remove = (length0-1) + (length3-1) + 2;

0xB826  0x44            PUSHI0
0xB827  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB829  0x45            PUSHI1
0xB82A  0x01            SUB
0xB82B  0x4F            PUSHLOCALB02
0xB82C  0x45            PUSHI1
0xB82D  0x01            SUB
0xB82E  0x00            ADD
0xB82F  0x1A 0x02       PUSHIB 0x02
0xB831  0x00            ADD
0xB832  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // TrimTail(ref currentStream, remove);                 peephole.hs:227

0xB834  0x56 0xFE 0x10  PUSHLOCALBB 0x10FE
0xB837  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction3;                 peephole.hs:228

0xB83A  0x20 0xAC       PUSHGLOBALB 0xAC
0xB83C  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction4;                 peephole.hs:229

0xB83E  0x20 0xAE       PUSHGLOBALB 0xAE
0xB840  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = 0;                                peephole.hs:230

0xB842  0x44            PUSHI0
0xB843  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = 0;                                peephole.hs:231

0xB845  0x44            PUSHI0
0xB846  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:232

0xB848  0x44            PUSHI0
0xB849  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:233

0xB84B  0x45            PUSHI1
0xB84C  0x2B 0x14       RETRETB 0x14

                        // if (isPushLocalB3 && isPopLocalB0)                   peephole.hs:236

0xB84E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xB850  0x27 0x00       DUP 0x00
0xB852  0x2E 0x05       JZB 0xB857 (+5)
0xB854  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xB856  0x0C            BOOLAND
0xB857  0x31 0xF2 0x00  JZW 0xB949 (+242)

                        // if ((offset3 == offset0)                             peephole.hs:238

0xB85A  0x4E            PUSHLOCALB00
0xB85B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB85D  0x05            EQ
0xB85E  0x27 0x00       DUP 0x00
0xB860  0x2E 0x19       JZB 0xB879 (+25)
0xB862  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB864  0x20 0xAA       PUSHGLOBALB 0xAA
0xB866  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB868  0x1A 0x45       PUSHIB 0x45
0xB86A  0x05            EQ
0xB86B  0x0C            BOOLAND
0xB86C  0x27 0x00       DUP 0x00
0xB86E  0x2E 0x0B       JZB 0xB879 (+11)
0xB870  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB872  0x20 0xA8       PUSHGLOBALB 0xA8
0xB874  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB876  0x44            PUSHI0
0xB877  0x05            EQ
0xB878  0x0C            BOOLAND
0xB879  0x2E 0x3E       JZB 0xB8B7 (+62)

                        // currentStream.SetItem(lastInstruction3,   byte(Instruction.INCLOCALB));

0xB87B  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB87D  0x20 0xAC       PUSHGLOBALB 0xAC
0xB87F  0x1A 0x22       PUSHIB 0x22
0xB881  0x51 0x03       CAST 0x03
0xB883  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction3+1, offset0);

0xB885  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB887  0x20 0xAC       PUSHGLOBALB 0xAC
0xB889  0x45            PUSHI1
0xB88A  0x00            ADD
0xB88B  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB88D  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // uint remove = (length0-1) + (length3-1) + 2;

0xB88F  0x44            PUSHI0
0xB890  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB892  0x45            PUSHI1
0xB893  0x01            SUB
0xB894  0x4F            PUSHLOCALB02
0xB895  0x45            PUSHI1
0xB896  0x01            SUB
0xB897  0x00            ADD
0xB898  0x1A 0x02       PUSHIB 0x02
0xB89A  0x00            ADD
0xB89B  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // TrimTail(ref currentStream, remove);                 peephole.hs:249

0xB89D  0x56 0xFE 0x10  PUSHLOCALBB 0x10FE
0xB8A0  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction3;                 peephole.hs:250

0xB8A3  0x20 0xAC       PUSHGLOBALB 0xAC
0xB8A5  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction4;                 peephole.hs:251

0xB8A7  0x20 0xAE       PUSHGLOBALB 0xAE
0xB8A9  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = 0;                                peephole.hs:252

0xB8AB  0x44            PUSHI0
0xB8AC  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = 0;                                peephole.hs:253

0xB8AE  0x44            PUSHI0
0xB8AF  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:254

0xB8B1  0x44            PUSHI0
0xB8B2  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:255

0xB8B4  0x45            PUSHI1
0xB8B5  0x2B 0x14       RETRETB 0x14

                        // byte offset2 = 0;                                    peephole.hs:257

0xB8B7  0x44            PUSHI0

                        // byte length2 = 0;                                    peephole.hs:258

0xB8B8  0x44            PUSHI0

                        // bool isPushLocalB2 = IsPushLocalB(ref currentStream, lastInstruction2, ref offset2, ref length2);

0xB8B9  0x44            PUSHI0
0xB8BA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB8BC  0x20 0xAA       PUSHGLOBALB 0xAA
0xB8BE  0x21 0x10       PUSHSTACKADDRB 0x10 (BP+16)
0xB8C0  0x21 0x12       PUSHSTACKADDRB 0x12 (BP+18)
0xB8C2  0x34 0x47 0x01  CALLW 0x0147   // Peephole.IsPushLocalB
0xB8C5  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // if (isPushLocalB2                                    peephole.hs:261

0xB8C7  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xB8C9  0x27 0x00       DUP 0x00
0xB8CB  0x2E 0x1D       JZB 0xB8E8 (+29)
0xB8CD  0x4E            PUSHLOCALB00
0xB8CE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB8D0  0x05            EQ
0xB8D1  0x27 0x00       DUP 0x00
0xB8D3  0x2F 0x07       JNZB 0xB8DA (+7)
0xB8D5  0x56 0x10 0x08  PUSHLOCALBB 0x0810
0xB8D8  0x05            EQ
0xB8D9  0x0B            BOOLOR
0xB8DA  0x0C            BOOLAND
0xB8DB  0x27 0x00       DUP 0x00
0xB8DD  0x2E 0x0B       JZB 0xB8E8 (+11)
0xB8DF  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB8E1  0x20 0xA8       PUSHGLOBALB 0xA8
0xB8E3  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB8E5  0x44            PUSHI0
0xB8E6  0x05            EQ
0xB8E7  0x0C            BOOLAND
0xB8E8  0x2E 0x5F       JZB 0xB947 (+95)

                        // currentStream.SetItem(lastInstruction3, byte(Instruction.INCLOCALBB));

0xB8EA  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB8EC  0x20 0xAC       PUSHGLOBALB 0xAC
0xB8EE  0x1A 0x3F       PUSHIB 0x3F
0xB8F0  0x51 0x03       CAST 0x03
0xB8F2  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // currentStream.SetItem(lastInstruction3+1, offset0);

0xB8F4  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB8F6  0x20 0xAC       PUSHGLOBALB 0xAC
0xB8F8  0x45            PUSHI1
0xB8F9  0x00            ADD
0xB8FA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB8FC  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // if (offset3 == offset0)                              peephole.hs:270

0xB8FE  0x4E            PUSHLOCALB00
0xB8FF  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xB901  0x05            EQ
0xB902  0x2E 0x0F       JZB 0xB911 (+15)

                        // currentStream.SetItem(lastInstruction3+2, offset2);

0xB904  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB906  0x20 0xAC       PUSHGLOBALB 0xAC
0xB908  0x1A 0x02       PUSHIB 0x02
0xB90A  0x00            ADD
0xB90B  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xB90D  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // }                                                    peephole.hs:273

0xB90F  0x30 0x0C       JB 0xB91B (+12)

                        // currentStream.SetItem(lastInstruction3+2, offset3);

0xB911  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xB913  0x20 0xAC       PUSHGLOBALB 0xAC
0xB915  0x1A 0x02       PUSHIB 0x02
0xB917  0x00            ADD
0xB918  0x4E            PUSHLOCALB00
0xB919  0x24 0x15       SYSCALL0 0x15  // List.SetItem

                        // uint remove = (length0-1) + (length2-1) + (length3-1) + 1;

0xB91B  0x44            PUSHI0
0xB91C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xB91E  0x45            PUSHI1
0xB91F  0x01            SUB
0xB920  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xB922  0x45            PUSHI1
0xB923  0x01            SUB
0xB924  0x00            ADD
0xB925  0x4F            PUSHLOCALB02
0xB926  0x45            PUSHI1
0xB927  0x01            SUB
0xB928  0x00            ADD
0xB929  0x45            PUSHI1
0xB92A  0x00            ADD
0xB92B  0x1B 0x16       POPLOCALB 0x16 (BP+22)

                        // TrimTail(ref currentStream, remove);                 peephole.hs:281

0xB92D  0x56 0xFE 0x16  PUSHLOCALBB 0x16FE
0xB930  0x34 0x43 0x01  CALLW 0x0143   // Peephole.TrimTail

                        // lastInstruction0 = lastInstruction3;                 peephole.hs:282

0xB933  0x20 0xAC       PUSHGLOBALB 0xAC
0xB935  0x1F 0xA6       POPGLOBALB 0xA6

                        // lastInstruction1 = lastInstruction4;                 peephole.hs:283

0xB937  0x20 0xAE       PUSHGLOBALB 0xAE
0xB939  0x1F 0xA8       POPGLOBALB 0xA8

                        // lastInstruction2 = 0;                                peephole.hs:284

0xB93B  0x44            PUSHI0
0xB93C  0x1F 0xAA       POPGLOBALB 0xAA

                        // lastInstruction3 = 0;                                peephole.hs:285

0xB93E  0x44            PUSHI0
0xB93F  0x1F 0xAC       POPGLOBALB 0xAC

                        // lastInstruction4 = 0;                                peephole.hs:286

0xB941  0x44            PUSHI0
0xB942  0x1F 0xAE       POPGLOBALB 0xAE

                        // return true; // hunt for more                        peephole.hs:287

0xB944  0x45            PUSHI1
0xB945  0x2B 0x1A       RETRETB 0x1A

                        // }                                                    peephole.hs:289

0xB947  0x28 0x06       DECSP 0x06

                        // return false;                                        peephole.hs:290

0xB949  0x44            PUSHI0
0xB94A  0x2B 0x12       RETRETB 0x12


// /source/compiler/codegen/peephole.hs:130
// ####  Peephole.IsPushLocalB(..)  ####                                        0x0147


                        // Instruction opCode = Instruction(currentStream[index]);

0xB94C  0x5F 0x01       ENTERB 0x01

                        // Instruction opCode = Instruction(currentStream[index]);

0xB94E  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB950  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB952  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB954  0x4C            POPLOCALB00

                        // switch (opCode)                                      peephole.hs:132

0xB955  0x4E            PUSHLOCALB00

                        // case Instruction.PUSHLOCALB:                         peephole.hs:134

0xB956  0x1A 0x1C       PUSHIB 0x1C
0xB958  0x4F            PUSHLOCALB02
0xB959  0x05            EQ
0xB95A  0x2E 0x13       JZB 0xB96D (+19)

                        // offset = currentStream[index+1];                     peephole.hs:136

0xB95C  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB95E  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB960  0x45            PUSHI1
0xB961  0x00            ADD
0xB962  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB964  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 2;                                          peephole.hs:137

0xB966  0x1A 0x02       PUSHIB 0x02
0xB968  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:138

0xB96A  0x45            PUSHI1
0xB96B  0x2B 0x0C       RETRETB 0x0C

                        // case Instruction.PUSHLOCALB00:                       peephole.hs:140

0xB96D  0x1A 0x4E       PUSHIB 0x4E
0xB96F  0x4F            PUSHLOCALB02
0xB970  0x05            EQ
0xB971  0x2E 0x0B       JZB 0xB97C (+11)

                        // offset = 0;                                          peephole.hs:142

0xB973  0x44            PUSHI0
0xB974  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 1;                                          peephole.hs:143

0xB976  0x45            PUSHI1
0xB977  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:144

0xB979  0x45            PUSHI1
0xB97A  0x2B 0x0C       RETRETB 0x0C

                        // case Instruction.PUSHLOCALB02:                       peephole.hs:146

0xB97C  0x1A 0x4F       PUSHIB 0x4F
0xB97E  0x4F            PUSHLOCALB02
0xB97F  0x05            EQ
0xB980  0x2E 0x0C       JZB 0xB98C (+12)

                        // offset = 2;                                          peephole.hs:148

0xB982  0x1A 0x02       PUSHIB 0x02
0xB984  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 1;                                          peephole.hs:149

0xB986  0x45            PUSHI1
0xB987  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:150

0xB989  0x45            PUSHI1
0xB98A  0x2B 0x0C       RETRETB 0x0C

                        // }                                                    peephole.hs:152

0xB98C  0x28 0x02       DECSP 0x02

                        // return false;                                        peephole.hs:153

0xB98E  0x44            PUSHI0
0xB98F  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/codegen/peephole.hs:53
// ####  Peephole.TrimTail(..)  ####                                            0x0143

0xB991  0x49            ENTER

                        // while (remove > 0)                                   peephole.hs:54

0xB992  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xB994  0x44            PUSHI0
0xB995  0x07            GT
0xB996  0x2E 0x10       JZB 0xB9A6 (+16)

                        // currentStream.Remove(currentStream.Length-1);

0xB998  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xB99A  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xB99C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xB99E  0x45            PUSHI1
0xB99F  0x01            SUB
0xB9A0  0x24 0x17       SYSCALL0 0x17  // List.Remove

                        // remove--;                                            peephole.hs:57

0xB9A2  0x23 0xFE       DECLOCALB 0xFE (BP-2)

                        // }                                                    peephole.hs:58

0xB9A4  0x30 0xEE       JB 0xB992 (-18)

                        // }                                                    peephole.hs:59

0xB9A6  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/peephole.hs:157
// ####  Peephole.IsPopLocalB(..)  ####                                         0x0148


                        // Instruction opCode = Instruction(currentStream[index]);

0xB9A8  0x5F 0x01       ENTERB 0x01

                        // Instruction opCode = Instruction(currentStream[index]);

0xB9AA  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB9AC  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB9AE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB9B0  0x4C            POPLOCALB00

                        // switch (opCode)                                      peephole.hs:159

0xB9B1  0x4E            PUSHLOCALB00

                        // case Instruction.POPLOCALB:                          peephole.hs:161

0xB9B2  0x1A 0x1B       PUSHIB 0x1B
0xB9B4  0x4F            PUSHLOCALB02
0xB9B5  0x05            EQ
0xB9B6  0x2E 0x13       JZB 0xB9C9 (+19)

                        // offset = currentStream[index+1];                     peephole.hs:163

0xB9B8  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB9BA  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB9BC  0x45            PUSHI1
0xB9BD  0x00            ADD
0xB9BE  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB9C0  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 2;                                          peephole.hs:164

0xB9C2  0x1A 0x02       PUSHIB 0x02
0xB9C4  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:165

0xB9C6  0x45            PUSHI1
0xB9C7  0x2B 0x0C       RETRETB 0x0C

                        // case Instruction.POPLOCALB00:                        peephole.hs:167

0xB9C9  0x1A 0x4C       PUSHIB 0x4C
0xB9CB  0x4F            PUSHLOCALB02
0xB9CC  0x05            EQ
0xB9CD  0x2E 0x0B       JZB 0xB9D8 (+11)

                        // offset = 0;                                          peephole.hs:169

0xB9CF  0x44            PUSHI0
0xB9D0  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 1;                                          peephole.hs:170

0xB9D2  0x45            PUSHI1
0xB9D3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:171

0xB9D5  0x45            PUSHI1
0xB9D6  0x2B 0x0C       RETRETB 0x0C

                        // case Instruction.POPLOCALB02:                        peephole.hs:173

0xB9D8  0x1A 0x4D       PUSHIB 0x4D
0xB9DA  0x4F            PUSHLOCALB02
0xB9DB  0x05            EQ
0xB9DC  0x2E 0x0C       JZB 0xB9E8 (+12)

                        // offset = 2;                                          peephole.hs:175

0xB9DE  0x1A 0x02       PUSHIB 0x02
0xB9E0  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 1;                                          peephole.hs:176

0xB9E2  0x45            PUSHI1
0xB9E3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:177

0xB9E5  0x45            PUSHI1
0xB9E6  0x2B 0x0C       RETRETB 0x0C

                        // }                                                    peephole.hs:179

0xB9E8  0x28 0x02       DECSP 0x02

                        // return false;                                        peephole.hs:180

0xB9EA  0x44            PUSHI0
0xB9EB  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/codegen/peephole.hs:106
// ####  Peephole.IsPushGlobalB(..)  ####                                       0x0145


                        // Instruction opCode = Instruction(currentStream[index]);

0xB9ED  0x5F 0x01       ENTERB 0x01

                        // Instruction opCode = Instruction(currentStream[index]);

0xB9EF  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB9F1  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xB9F3  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xB9F5  0x4C            POPLOCALB00

                        // if (opCode == Instruction.PUSHGLOBALB)               peephole.hs:108

0xB9F6  0x4E            PUSHLOCALB00
0xB9F7  0x1A 0x20       PUSHIB 0x20
0xB9F9  0x05            EQ
0xB9FA  0x2E 0x13       JZB 0xBA0D (+19)

                        // offset = currentStream[index+1];                     peephole.hs:110

0xB9FC  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xB9FE  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBA00  0x45            PUSHI1
0xBA01  0x00            ADD
0xBA02  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xBA04  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 2;                                          peephole.hs:111

0xBA06  0x1A 0x02       PUSHIB 0x02
0xBA08  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:112

0xBA0A  0x45            PUSHI1
0xBA0B  0x2B 0x0A       RETRETB 0x0A

                        // return false;                                        peephole.hs:114

0xBA0D  0x44            PUSHI0
0xBA0E  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/codegen/peephole.hs:118
// ####  Peephole.IsPopGlobalB(..)  ####                                        0x0146


                        // Instruction opCode = Instruction(currentStream[index]);

0xBA10  0x5F 0x01       ENTERB 0x01

                        // Instruction opCode = Instruction(currentStream[index]);

0xBA12  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xBA14  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBA16  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xBA18  0x4C            POPLOCALB00

                        // if (opCode == Instruction.POPGLOBALB)                peephole.hs:120

0xBA19  0x4E            PUSHLOCALB00
0xBA1A  0x1A 0x1F       PUSHIB 0x1F
0xBA1C  0x05            EQ
0xBA1D  0x2E 0x13       JZB 0xBA30 (+19)

                        // offset = currentStream[index+1];                     peephole.hs:122

0xBA1F  0x1E 0xF8       PUSHRELB 0xF8 (BP-8)
0xBA21  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBA23  0x45            PUSHI1
0xBA24  0x00            ADD
0xBA25  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xBA27  0x1D 0xFC       POPRELB 0xFC (BP-4)

                        // length = 2;                                          peephole.hs:123

0xBA29  0x1A 0x02       PUSHIB 0x02
0xBA2B  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // return true;                                         peephole.hs:124

0xBA2D  0x45            PUSHI1
0xBA2E  0x2B 0x0A       RETRETB 0x0A

                        // return false;                                        peephole.hs:126

0xBA30  0x44            PUSHI0
0xBA31  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/codegen/codestream.hs:180
// ####  CodeStream.GetConstantStream(..)  ####                                 0x012D

0xBA33  0x49            ENTER

                        // return constantStream;                               codestream.hs:181

0xBA34  0x20 0xA2       PUSHGLOBALB 0xA2
0xBA36  0x4A            RET0


// /source/compiler/codegen/codestream.hs:362
// ####  CodeStream.AddInstructionJumpOffset(..)  ####                          0x0133

0xBA37  0x49            ENTER

                        // AddInstruction(jumpInstruction, offset);             codestream.hs:363

0xBA38  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0xBA3B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // UpdatePeepholeBoundary(currentStream.Length);

0xBA3E  0x20 0xA0       PUSHGLOBALB 0xA0
0xBA40  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xBA42  0x34 0x3F 0x01  CALLW 0x013F   // Peephole.UpdatePeepholeBoundary

                        // }                                                    codestream.hs:365

0xBA45  0x2A 0x04       RETB 0x04


// /source/compiler/codegen/codestream.hs:161
// ####  CodeStream.CreateFloatConstant(..)  ####                               0x012A

0xBA47  0x49            ENTER

                        // <byte> bytes = value.ToBytes();                      codestream.hs:162

0xBA48  0x1A 0x03       PUSHIB 0x03
0xBA4A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xBA4C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBA4E  0x24 0x4B       SYSCALL0 0x4B  // Float.ToBytes
0xBA50  0x5D            POPCOPYLOCALB00

                        // return AppendConstant(bytes);                        codestream.hs:163

0xBA51  0x4E            PUSHLOCALB00
0xBA52  0x34 0x29 0x01  CALLW 0x0129   // CodeStream.AppendConstant
0xBA55  0x2B 0x04       RETRETB 0x04


// /source/compiler/codegen/codestream.hs:166
// ####  CodeStream.CreateLongConstant(..)  ####                                0x012B

0xBA57  0x49            ENTER

                        // <byte> bytes = value.ToBytes();                      codestream.hs:167

0xBA58  0x1A 0x03       PUSHIB 0x03
0xBA5A  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xBA5C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBA5E  0x24 0x39       SYSCALL0 0x39  // Long.ToBytes
0xBA60  0x5D            POPCOPYLOCALB00

                        // return AppendConstant(bytes);                        codestream.hs:168

0xBA61  0x4E            PUSHLOCALB00
0xBA62  0x34 0x29 0x01  CALLW 0x0129   // CodeStream.AppendConstant
0xBA65  0x2B 0x04       RETRETB 0x04


// /source/system/type.hs:4
// ####  Type.ToString(..)  ####                                                0x01CC

0xBA67  0x49            ENTER

                        // string result;                                       type.hs:5

0xBA68  0x24 0x02       SYSCALL0 0x02  // String.New

                        // switch (this)                                        type.hs:6

0xBA6A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)

                        // case int:                                            type.hs:8

0xBA6C  0x1A 0x02       PUSHIB 0x02
0xBA6E  0x4F            PUSHLOCALB02
0xBA6F  0x05            EQ
0xBA70  0x2E 0x0D       JZB 0xBA7D (+13)

                        // result = "int";                                      type.hs:10

0xBA72  0x37 0x30 0x02  PUSHIW 0x0230
0xBA75  0x1A 0x03       PUSHIB 0x03
0xBA77  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBA79  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:11

0xBA7A  0x33 0x3F 0x01  JW 0xBBB9 (+319)

                        // case char:                                           type.hs:12

0xBA7D  0x45            PUSHI1
0xBA7E  0x4F            PUSHLOCALB02
0xBA7F  0x05            EQ
0xBA80  0x2E 0x0D       JZB 0xBA8D (+13)

                        // result = "char";                                     type.hs:14

0xBA82  0x37 0x15 0x04  PUSHIW 0x0415
0xBA85  0x1A 0x04       PUSHIB 0x04
0xBA87  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBA89  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:15

0xBA8A  0x33 0x2F 0x01  JW 0xBBB9 (+303)

                        // case uint:                                           type.hs:16

0xBA8D  0x1A 0x04       PUSHIB 0x04
0xBA8F  0x4F            PUSHLOCALB02
0xBA90  0x05            EQ
0xBA91  0x2E 0x0D       JZB 0xBA9E (+13)

                        // result = "uint";                                     type.hs:18

0xBA93  0x37 0x2F 0x02  PUSHIW 0x022F
0xBA96  0x1A 0x04       PUSHIB 0x04
0xBA98  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBA9A  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:19

0xBA9B  0x33 0x1E 0x01  JW 0xBBB9 (+286)

                        // case byte:                                           type.hs:20

0xBA9E  0x1A 0x03       PUSHIB 0x03
0xBAA0  0x4F            PUSHLOCALB02
0xBAA1  0x05            EQ
0xBAA2  0x2E 0x0D       JZB 0xBAAF (+13)

                        // result = "byte";                                     type.hs:22

0xBAA4  0x37 0x51 0x05  PUSHIW 0x0551
0xBAA7  0x1A 0x04       PUSHIB 0x04
0xBAA9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBAAB  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:23

0xBAAC  0x33 0x0D 0x01  JW 0xBBB9 (+269)

                        // case bool:                                           type.hs:24

0xBAAF  0x1A 0x06       PUSHIB 0x06
0xBAB1  0x4F            PUSHLOCALB02
0xBAB2  0x05            EQ
0xBAB3  0x2E 0x0D       JZB 0xBAC0 (+13)

                        // result = "bool";                                     type.hs:26

0xBAB5  0x37 0x6F 0x03  PUSHIW 0x036F
0xBAB8  0x1A 0x04       PUSHIB 0x04
0xBABA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBABC  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:27

0xBABD  0x33 0xFC 0x00  JW 0xBBB9 (+252)

                        // case long:                                           type.hs:28

0xBAC0  0x1A 0x0E       PUSHIB 0x0E
0xBAC2  0x4F            PUSHLOCALB02
0xBAC3  0x05            EQ
0xBAC4  0x2E 0x0D       JZB 0xBAD1 (+13)

                        // result = "long";                                     type.hs:30

0xBAC6  0x37 0xF7 0x05  PUSHIW 0x05F7
0xBAC9  0x1A 0x04       PUSHIB 0x04
0xBACB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBACD  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:31

0xBACE  0x33 0xEB 0x00  JW 0xBBB9 (+235)

                        // case float:                                          type.hs:32

0xBAD1  0x1A 0x0D       PUSHIB 0x0D
0xBAD3  0x4F            PUSHLOCALB02
0xBAD4  0x05            EQ
0xBAD5  0x2E 0x0D       JZB 0xBAE2 (+13)

                        // result = "float";                                    type.hs:34

0xBAD7  0x37 0x08 0x06  PUSHIW 0x0608
0xBADA  0x1A 0x05       PUSHIB 0x05
0xBADC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBADE  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:35

0xBADF  0x33 0xDA 0x00  JW 0xBBB9 (+218)

                        // case string:                                         type.hs:36

0xBAE2  0x1A 0x0F       PUSHIB 0x0F
0xBAE4  0x4F            PUSHLOCALB02
0xBAE5  0x05            EQ
0xBAE6  0x2E 0x0D       JZB 0xBAF3 (+13)

                        // result = "string";                                   type.hs:38

0xBAE8  0x37 0x62 0x02  PUSHIW 0x0262
0xBAEB  0x1A 0x06       PUSHIB 0x06
0xBAED  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBAEF  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:39

0xBAF0  0x33 0xC9 0x00  JW 0xBBB9 (+201)

                        // case enum:                                           type.hs:40

0xBAF3  0x1A 0x07       PUSHIB 0x07
0xBAF5  0x4F            PUSHLOCALB02
0xBAF6  0x05            EQ
0xBAF7  0x2E 0x0D       JZB 0xBB04 (+13)

                        // result = "enum";                                     type.hs:42

0xBAF9  0x37 0x09 0x0C  PUSHIW 0x0C09
0xBAFC  0x1A 0x04       PUSHIB 0x04
0xBAFE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB00  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:43

0xBB01  0x33 0xB8 0x00  JW 0xBBB9 (+184)

                        // case flags:                                          type.hs:44

0xBB04  0x1A 0x08       PUSHIB 0x08
0xBB06  0x4F            PUSHLOCALB02
0xBB07  0x05            EQ
0xBB08  0x2E 0x0D       JZB 0xBB15 (+13)

                        // result = "flags";                                    type.hs:46

0xBB0A  0x37 0x15 0x0C  PUSHIW 0x0C15
0xBB0D  0x1A 0x05       PUSHIB 0x05
0xBB0F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB11  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:47

0xBB12  0x33 0xA7 0x00  JW 0xBBB9 (+167)

                        // case pair:                                           type.hs:48

0xBB15  0x1A 0x10       PUSHIB 0x10
0xBB17  0x4F            PUSHLOCALB02
0xBB18  0x05            EQ
0xBB19  0x2E 0x0D       JZB 0xBB26 (+13)

                        // result = "pair";                                     type.hs:50

0xBB1B  0x37 0xA3 0x0F  PUSHIW 0x0FA3
0xBB1E  0x1A 0x04       PUSHIB 0x04
0xBB20  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB22  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:51

0xBB23  0x33 0x96 0x00  JW 0xBBB9 (+150)

                        // case file:                                           type.hs:52

0xBB26  0x1A 0x15       PUSHIB 0x15
0xBB28  0x4F            PUSHLOCALB02
0xBB29  0x05            EQ
0xBB2A  0x2E 0x0D       JZB 0xBB37 (+13)

                        // result = "file";                                     type.hs:54

0xBB2C  0x37 0x96 0x0F  PUSHIW 0x0F96
0xBB2F  0x1A 0x04       PUSHIB 0x04
0xBB31  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB33  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:55

0xBB34  0x33 0x85 0x00  JW 0xBBB9 (+133)

                        // case directory:                                      type.hs:56

0xBB37  0x1A 0x16       PUSHIB 0x16
0xBB39  0x4F            PUSHLOCALB02
0xBB3A  0x05            EQ
0xBB3B  0x2E 0x0D       JZB 0xBB48 (+13)

                        // result = "directory";                                type.hs:58

0xBB3D  0x37 0x9A 0x0F  PUSHIW 0x0F9A
0xBB40  0x1A 0x09       PUSHIB 0x09
0xBB42  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB44  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:59

0xBB45  0x33 0x74 0x00  JW 0xBBB9 (+116)

                        // case array:                                          type.hs:60

0xBB48  0x1A 0x12       PUSHIB 0x12
0xBB4A  0x4F            PUSHLOCALB02
0xBB4B  0x05            EQ
0xBB4C  0x2E 0x0C       JZB 0xBB58 (+12)

                        // result = "array";                                    type.hs:62

0xBB4E  0x37 0x33 0x02  PUSHIW 0x0233
0xBB51  0x1A 0x05       PUSHIB 0x05
0xBB53  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB55  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:63

0xBB56  0x30 0x63       JB 0xBBB9 (+99)

                        // case list:                                           type.hs:64

0xBB58  0x1A 0x19       PUSHIB 0x19
0xBB5A  0x4F            PUSHLOCALB02
0xBB5B  0x05            EQ
0xBB5C  0x2E 0x0C       JZB 0xBB68 (+12)

                        // result = "list";                                     type.hs:66

0xBB5E  0x37 0x4B 0x02  PUSHIW 0x024B
0xBB61  0x1A 0x04       PUSHIB 0x04
0xBB63  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB65  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:67

0xBB66  0x30 0x53       JB 0xBBB9 (+83)

                        // case dictionary:                                     type.hs:68

0xBB68  0x1A 0x13       PUSHIB 0x13
0xBB6A  0x4F            PUSHLOCALB02
0xBB6B  0x05            EQ
0xBB6C  0x2E 0x0C       JZB 0xBB78 (+12)

                        // result = "dictionary";                               type.hs:70

0xBB6E  0x37 0x68 0x02  PUSHIW 0x0268
0xBB71  0x1A 0x0A       PUSHIB 0x0A
0xBB73  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB75  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:71

0xBB76  0x30 0x43       JB 0xBBB9 (+67)

                        // case variant:                                        type.hs:72

0xBB78  0x1A 0x14       PUSHIB 0x14
0xBB7A  0x4F            PUSHLOCALB02
0xBB7B  0x05            EQ
0xBB7C  0x2E 0x0C       JZB 0xBB88 (+12)

                        // result = "variant";                                  type.hs:74

0xBB7E  0x37 0xC3 0x02  PUSHIW 0x02C3
0xBB81  0x1A 0x07       PUSHIB 0x07
0xBB83  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB85  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:75

0xBB86  0x30 0x33       JB 0xBBB9 (+51)

                        // case delegate:                                       type.hs:76

0xBB88  0x1A 0x0B       PUSHIB 0x0B
0xBB8A  0x4F            PUSHLOCALB02
0xBB8B  0x05            EQ
0xBB8C  0x2E 0x0C       JZB 0xBB98 (+12)

                        // result = "delegate";                                 type.hs:78

0xBB8E  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0xBB91  0x1A 0x08       PUSHIB 0x08
0xBB93  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBB95  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:79

0xBB96  0x30 0x23       JB 0xBBB9 (+35)

                        // byte b = byte(this);                                 type.hs:82

0xBB98  0x44            PUSHI0
0xBB99  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBB9B  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // result = "unknown type 0x" + b.ToHexString(2) +"in Type.ToString()";

0xBB9D  0x37 0x38 0x16  PUSHIW 0x1638
0xBBA0  0x1A 0x0F       PUSHIB 0x0F
0xBBA2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBBA4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xBBA6  0x1A 0x02       PUSHIB 0x02
0xBBA8  0x34 0x69 0x01  CALLW 0x0169   // Byte.ToHexString
0xBBAB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xBBAD  0x37 0x47 0x16  PUSHIW 0x1647
0xBBB0  0x1A 0x12       PUSHIB 0x12
0xBBB2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBBB4  0x24 0x03       SYSCALL0 0x03  // String.Append
0xBBB6  0x5D            POPCOPYLOCALB00

                        // }                                                    type.hs:84

0xBBB7  0x28 0x02       DECSP 0x02

                        // }                                                    type.hs:85

0xBBB9  0x28 0x02       DECSP 0x02

                        // return result;                                       type.hs:86

0xBBBB  0x4E            PUSHLOCALB00
0xBBBC  0x2B 0x04       RETRETB 0x04


// /source/system/int.hs:4
// ####  Int.ToString(..)  ####                                                 0x016A


                        // int digit;                                           int.hs:5

0xBBBE  0x5F 0x03       ENTERB 0x03

                        // string result;                                       int.hs:8

0xBBC0  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (this < 0)                                        int.hs:9

0xBBC2  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBC4  0x44            PUSHI0
0xBBC5  0x17            LTI
0xBBC6  0x2E 0x0D       JZB 0xBBD3 (+13)

                        // negative = true;                                     int.hs:11

0xBBC8  0x45            PUSHI1
0xBBC9  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // this = 0 - this;                                     int.hs:12

0xBBCB  0x44            PUSHI0
0xBBCC  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBCE  0x12            SUBI
0xBBCF  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    int.hs:13

0xBBD1  0x30 0x0C       JB 0xBBDD (+12)

                        // else if (this == 0)                                  int.hs:14

0xBBD3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBD5  0x2F 0x08       JNZB 0xBBDD (+8)

                        // String.Build(ref result, '0');                       int.hs:16

0xBBD7  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xBBD9  0x1A 0x30       PUSHIB 0x30
0xBBDB  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // while (this != 0)                                    int.hs:18

0xBBDD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBDF  0x2E 0x1D       JZB 0xBBFC (+29)

                        // digit = this % 10;                                   int.hs:20

0xBBE1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBE3  0x1A 0x0A       PUSHIB 0x0A
0xBBE5  0x15            MODI
0xBBE6  0x4C            POPLOCALB00

                        // c = Char.ToDigit(byte(digit));                       int.hs:21

0xBBE7  0x4E            PUSHLOCALB00
0xBBE8  0x51 0x03       CAST 0x03
0xBBEA  0x34 0x5F 0x01  CALLW 0x015F   // Char.ToDigit
0xBBED  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    int.hs:22

0xBBEE  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xBBF0  0x4F            PUSHLOCALB02
0xBBF1  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 10;                                    int.hs:23

0xBBF3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBBF5  0x1A 0x0A       PUSHIB 0x0A
0xBBF7  0x13            DIVI
0xBBF8  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // }                                                    int.hs:24

0xBBFA  0x30 0xE3       JB 0xBBDD (-29)

                        // if (negative)                                        int.hs:25

0xBBFC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xBBFE  0x2E 0x08       JZB 0xBC06 (+8)

                        // String.BuildFront(ref result, '-');                  int.hs:27

0xBC00  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xBC02  0x1A 0x2D       PUSHIB 0x2D
0xBC04  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // return result;                                       int.hs:29

0xBC06  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBC08  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/json/json.hs:206
// ####  JSON.Write(..)  ####                                                   0x0210

0xBC0A  0x49            ENTER

                        // if (File.Exists(path))                               json.hs:207

0xBC0B  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBC0D  0x24 0x5F       SYSCALL0 0x5F  // File.Exists
0xBC0F  0x2E 0x06       JZB 0xBC15 (+6)

                        // File.Delete(path);                                   json.hs:209

0xBC11  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBC13  0x24 0x68       SYSCALL0 0x68  // File.Delete

                        // file jsonFile = File.Create(path);                   json.hs:211

0xBC15  0x24 0x60       SYSCALL0 0x60  // File.New
0xBC17  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBC19  0x24 0x62       SYSCALL0 0x62  // File.Create
0xBC1B  0x5D            POPCOPYLOCALB00

                        // ExportDictionary(jsonFile, dict, 0);                 json.hs:212

0xBC1C  0x4E            PUSHLOCALB00
0xBC1D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBC1F  0x44            PUSHI0
0xBC20  0x34 0x0F 0x02  CALLW 0x020F   // JSON.ExportDictionary

                        // jsonFile.Flush();                                    json.hs:213

0xBC23  0x4E            PUSHLOCALB00
0xBC24  0x24 0x67       SYSCALL0 0x67  // File.Flush

                        // return true;                                         json.hs:214

0xBC26  0x45            PUSHI1
0xBC27  0x2B 0x06       RETRETB 0x06


// /source/compiler/json/json.hs:338
// ####  JSON.Read(..)  ####                                                    0x0213

0xBC29  0x49            ENTER

                        // Scanner.New();                                       json.hs:339

0xBC2A  0x2C 0x5B       CALLB 0x5B     // Scanner.New

                        // Parser.Reset();                                      json.hs:340

0xBC2C  0x2C 0x78       CALLB 0x78     // Parser.Reset

                        // Scanner.Load(path);                                  json.hs:341

0xBC2E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBC30  0x2C 0x5C       CALLB 0x5C     // Scanner.Load

                        // long pos = 0;                                        json.hs:342

0xBC32  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0xBC34  0x44            PUSHI0
0xBC35  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xBC37  0x5D            POPCOPYLOCALB00

                        // Scanner.Reset(pos, 1, path);                         json.hs:343

0xBC38  0x4E            PUSHLOCALB00
0xBC39  0x45            PUSHI1
0xBC3A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBC3C  0x2C 0x5D       CALLB 0x5D     // Scanner.Reset

                        // Parser.Advance(); // load up first token             json.hs:345

0xBC3E  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // Parser.Consume(HopperToken.LBrace, '{');             json.hs:346

0xBC40  0x1A 0x12       PUSHIB 0x12
0xBC42  0x1A 0x7B       PUSHIB 0x7B
0xBC44  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // bool first = true;                                   json.hs:347

0xBC46  0x44            PUSHI0
0xBC47  0x45            PUSHI1
0xBC48  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBrace))                json.hs:356

0xBC49  0x1A 0x13       PUSHIB 0x13
0xBC4B  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBC4D  0x2F 0x7A       JNZB 0xBCC7 (+122)

                        // if (!first)                                          json.hs:360

0xBC4F  0x4F            PUSHLOCALB02
0xBC50  0x2F 0x08       JNZB 0xBC58 (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:362

0xBC52  0x1A 0x0D       PUSHIB 0x0D
0xBC54  0x1A 0x2C       PUSHIB 0x2C
0xBC56  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // first = false;                                       json.hs:364

0xBC58  0x44            PUSHI0
0xBC59  0x4D            POPLOCALB02

                        // Parser.Consume(HopperToken.StringConstant, "section name expected");

0xBC5A  0x1A 0x0B       PUSHIB 0x0B
0xBC5C  0x37 0x59 0x16  PUSHIW 0x1659
0xBC5F  0x1A 0x15       PUSHIB 0x15
0xBC61  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBC63  0x2C 0x81       CALLB 0x81     // Parser.Consume

                        // <string,string> previousToken = PreviousToken;

0xBC65  0x1A 0x0F       PUSHIB 0x0F
0xBC67  0x1A 0x0F       PUSHIB 0x0F
0xBC69  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBC6B  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0xBC6D  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string sectionName = previousToken["lexeme"];

0xBC6F  0x24 0x02       SYSCALL0 0x02  // String.New
0xBC71  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xBC73  0x37 0x06 0x02  PUSHIW 0x0206
0xBC76  0x1A 0x06       PUSHIB 0x06
0xBC78  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBC7A  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xBC7C  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Parser.Consume(HopperToken.Colon, ':');              json.hs:374

0xBC7E  0x1A 0x0E       PUSHIB 0x0E
0xBC80  0x1A 0x3A       PUSHIB 0x3A
0xBC82  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // <string,string> currentToken = CurrentToken;

0xBC84  0x1A 0x0F       PUSHIB 0x0F
0xBC86  0x1A 0x0F       PUSHIB 0x0F
0xBC88  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBC8A  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0xBC8C  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (Parser.Check(HopperToken.LBrace))                json.hs:382

0xBC8E  0x1A 0x12       PUSHIB 0x12
0xBC90  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBC92  0x2E 0x18       JZB 0xBCAA (+24)

                        // <string, variant> section = ReadDictionary();

0xBC94  0x1A 0x0F       PUSHIB 0x0F
0xBC96  0x1A 0x14       PUSHIB 0x14
0xBC98  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBC9A  0x34 0x12 0x02  CALLW 0x0212   // JSON.ReadDictionary
0xBC9D  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[sectionName] = section;                         json.hs:385

0xBC9F  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xBCA1  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xBCA4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:386

0xBCA6  0x28 0x02       DECSP 0x02
0xBCA8  0x30 0x1A       JB 0xBCC2 (+26)

                        // else if (Parser.Check(HopperToken.LBracket))

0xBCAA  0x1A 0x14       PUSHIB 0x14
0xBCAC  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBCAE  0x2E 0x14       JZB 0xBCC2 (+20)

                        // <string> section = ReadList();                       json.hs:389

0xBCB0  0x1A 0x0F       PUSHIB 0x0F
0xBCB2  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xBCB4  0x34 0x11 0x02  CALLW 0x0211   // JSON.ReadList
0xBCB7  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[sectionName] = section;                         json.hs:390

0xBCB9  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xBCBB  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xBCBE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:391

0xBCC0  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:399

0xBCC2  0x28 0x06       DECSP 0x06
0xBCC4  0x33 0x85 0xFF  JW 0xBC49 (-123)

                        // bool success = !Parser.HadError;                     json.hs:400

0xBCC7  0x44            PUSHI0
0xBCC8  0x2C 0x73       CALLB 0x73     // Parser.HadError_Get
0xBCCA  0x41            BOOLNOT
0xBCCB  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // return success;                                      json.hs:408

0xBCCD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xBCCF  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/json/json.hs:102
// ####  JSON.ExportDictionary(..)  ####                                        0x020F

0xBCD1  0x49            ENTER

                        // string content = spaces(indent) + '{';               json.hs:103

0xBCD2  0x24 0x02       SYSCALL0 0x02  // String.New
0xBCD4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBCD6  0x34 0x0D 0x02  CALLW 0x020D   // JSON.spaces
0xBCD9  0x1A 0x7B       PUSHIB 0x7B
0xBCDB  0x25 0x03       SYSCALL1 0x03  // String.Append
0xBCDD  0x5D            POPCOPYLOCALB00

                        // jsonFile.Append(content + eol());                    json.hs:104

0xBCDE  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBCE0  0x4E            PUSHLOCALB00
0xBCE1  0x34 0x0C 0x02  CALLW 0x020C   // JSON.eol
0xBCE4  0x24 0x03       SYSCALL0 0x03  // String.Append
0xBCE6  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:105

0xBCE8  0x24 0x02       SYSCALL0 0x02  // String.New
0xBCEA  0x5D            POPCOPYLOCALB00

                        // indent = indent + 2;                                 json.hs:107

0xBCEB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBCED  0x1A 0x02       PUSHIB 0x02
0xBCEF  0x00            ADD
0xBCF0  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // string comma = "  ";                                 json.hs:108

0xBCF2  0x24 0x02       SYSCALL0 0x02  // String.New
0xBCF4  0x37 0x20 0x20  PUSHIW 0x2020
0xBCF7  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xBCF9  0x5E            POPCOPYLOCALB02

                        // foreach (var kv in dict)                             json.hs:109

0xBCFA  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xBCFC  0x1A 0x0F       PUSHIB 0x0F
0xBCFE  0x1A 0x0F       PUSHIB 0x0F
0xBD00  0x24 0x20       SYSCALL0 0x20  // Pair.New
0xBD02  0x44            PUSHI0
0xBD03  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0xBD06  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0xBD08  0x1B 0x08       POPLOCALB 0x08 (BP+8)
0xBD0A  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0xBD0C  0x31 0xC8 0x01  JZW 0xBED4 (+456)

                        // String.Build(ref content, spaces(indent));           json.hs:111

0xBD0F  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD11  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBD13  0x34 0x0D 0x02  CALLW 0x020D   // JSON.spaces
0xBD16  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, comma);                    json.hs:112

0xBD18  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD1A  0x4F            PUSHLOCALB02
0xBD1B  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:113

0xBD1D  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD1F  0x1A 0x22       PUSHIB 0x22
0xBD21  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, kv.key);                   json.hs:114

0xBD23  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD25  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBD27  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0xBD29  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, "\": ");                   json.hs:115

0xBD2B  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD2D  0x37 0x6E 0x16  PUSHIW 0x166E
0xBD30  0x1A 0x03       PUSHIB 0x03
0xBD32  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBD34  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // switch(typeof(kv.value))                             json.hs:116

0xBD36  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBD38  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBD3A  0x24 0x81       SYSCALL0 0x81  // Types.BoxTypeOf

                        // case int:                                            json.hs:119

0xBD3C  0x1A 0x02       PUSHIB 0x02
0xBD3E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBD40  0x05            EQ
0xBD41  0x2E 0x22       JZB 0xBD63 (+34)

                        // int v = int(kv.value);                               json.hs:121

0xBD43  0x44            PUSHI0
0xBD44  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBD46  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBD48  0x27 0x00       DUP 0x00
0xBD4A  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBD4C  0x1A 0x14       PUSHIB 0x14
0xBD4E  0x05            EQ
0xBD4F  0x2E 0x04       JZB 0xBD53 (+4)
0xBD51  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBD53  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:122

0xBD55  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD57  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBD59  0x34 0x6A 0x01  CALLW 0x016A   // Int.ToString
0xBD5C  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:123

0xBD5E  0x28 0x02       DECSP 0x02
0xBD60  0x33 0x54 0x01  JW 0xBEB4 (+340)

                        // case uint:                                           json.hs:124

0xBD63  0x1A 0x04       PUSHIB 0x04
0xBD65  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBD67  0x05            EQ
0xBD68  0x2E 0x22       JZB 0xBD8A (+34)

                        // uint v = uint(kv.value);                             json.hs:126

0xBD6A  0x44            PUSHI0
0xBD6B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBD6D  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBD6F  0x27 0x00       DUP 0x00
0xBD71  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBD73  0x1A 0x14       PUSHIB 0x14
0xBD75  0x05            EQ
0xBD76  0x2E 0x04       JZB 0xBD7A (+4)
0xBD78  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBD7A  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:127

0xBD7C  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBD7E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBD80  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0xBD83  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:128

0xBD85  0x28 0x02       DECSP 0x02
0xBD87  0x33 0x2D 0x01  JW 0xBEB4 (+301)

                        // case byte:                                           json.hs:129

0xBD8A  0x1A 0x03       PUSHIB 0x03
0xBD8C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBD8E  0x05            EQ
0xBD8F  0x2E 0x22       JZB 0xBDB1 (+34)

                        // byte v = byte(kv.value);                             json.hs:131

0xBD91  0x44            PUSHI0
0xBD92  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBD94  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBD96  0x27 0x00       DUP 0x00
0xBD98  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBD9A  0x1A 0x14       PUSHIB 0x14
0xBD9C  0x05            EQ
0xBD9D  0x2E 0x04       JZB 0xBDA1 (+4)
0xBD9F  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBDA1  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:132

0xBDA3  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBDA5  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBDA7  0x34 0x68 0x01  CALLW 0x0168   // Byte.ToString
0xBDAA  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:133

0xBDAC  0x28 0x02       DECSP 0x02
0xBDAE  0x33 0x06 0x01  JW 0xBEB4 (+262)

                        // case long:                                           json.hs:134

0xBDB1  0x1A 0x0E       PUSHIB 0x0E
0xBDB3  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBDB5  0x05            EQ
0xBDB6  0x2E 0x22       JZB 0xBDD8 (+34)

                        // long v = long(kv.value);                             json.hs:136

0xBDB8  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0xBDBA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBDBC  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBDBE  0x27 0x00       DUP 0x00
0xBDC0  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBDC2  0x1A 0x14       PUSHIB 0x14
0xBDC4  0x05            EQ
0xBDC5  0x2E 0x04       JZB 0xBDC9 (+4)
0xBDC7  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBDC9  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:137

0xBDCB  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBDCD  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBDCF  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0xBDD1  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:138

0xBDD3  0x28 0x02       DECSP 0x02
0xBDD5  0x33 0xDF 0x00  JW 0xBEB4 (+223)

                        // case float:                                          json.hs:139

0xBDD8  0x1A 0x0D       PUSHIB 0x0D
0xBDDA  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBDDC  0x05            EQ
0xBDDD  0x2E 0x22       JZB 0xBDFF (+34)

                        // float v = float(kv.value);                           json.hs:141

0xBDDF  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0xBDE1  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBDE3  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBDE5  0x27 0x00       DUP 0x00
0xBDE7  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBDE9  0x1A 0x14       PUSHIB 0x14
0xBDEB  0x05            EQ
0xBDEC  0x2E 0x04       JZB 0xBDF0 (+4)
0xBDEE  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBDF0  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, v.ToString());             json.hs:142

0xBDF2  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBDF4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBDF6  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0xBDF8  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:143

0xBDFA  0x28 0x02       DECSP 0x02
0xBDFC  0x33 0xB8 0x00  JW 0xBEB4 (+184)

                        // case string:                                         json.hs:144

0xBDFF  0x1A 0x0F       PUSHIB 0x0F
0xBE01  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBE03  0x05            EQ
0xBE04  0x2E 0x21       JZB 0xBE25 (+33)

                        // string v = kv.value;                                 json.hs:146

0xBE06  0x24 0x02       SYSCALL0 0x02  // String.New
0xBE08  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBE0A  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBE0C  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, '"');                      json.hs:147

0xBE0E  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE10  0x1A 0x22       PUSHIB 0x22
0xBE12  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, v);                        json.hs:148

0xBE14  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE16  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBE18  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:149

0xBE1A  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE1C  0x1A 0x22       PUSHIB 0x22
0xBE1E  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    json.hs:150

0xBE20  0x28 0x02       DECSP 0x02
0xBE22  0x33 0x92 0x00  JW 0xBEB4 (+146)

                        // case bool:                                           json.hs:151

0xBE25  0x1A 0x06       PUSHIB 0x06
0xBE27  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBE29  0x05            EQ
0xBE2A  0x2E 0x34       JZB 0xBE5E (+52)

                        // bool v = bool(kv.value);                             json.hs:153

0xBE2C  0x44            PUSHI0
0xBE2D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBE2F  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBE31  0x27 0x00       DUP 0x00
0xBE33  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xBE35  0x1A 0x14       PUSHIB 0x14
0xBE37  0x05            EQ
0xBE38  0x2E 0x04       JZB 0xBE3C (+4)
0xBE3A  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xBE3C  0x1B 0x0C       POPLOCALB 0x0C (BP+12)

                        // if (v)                                               json.hs:154

0xBE3E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xBE40  0x2E 0x0F       JZB 0xBE4F (+15)

                        // String.Build(ref content, "true");                   json.hs:156

0xBE42  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE44  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0xBE47  0x1A 0x04       PUSHIB 0x04
0xBE49  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBE4B  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:157

0xBE4D  0x30 0x0D       JB 0xBE5A (+13)

                        // String.Build(ref content, "false");                  json.hs:160

0xBE4F  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE51  0x37 0x4C 0x05  PUSHIW 0x054C
0xBE54  0x1A 0x05       PUSHIB 0x05
0xBE56  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBE58  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:162

0xBE5A  0x28 0x02       DECSP 0x02
0xBE5C  0x30 0x58       JB 0xBEB4 (+88)

                        // case list:                                           json.hs:163

0xBE5E  0x1A 0x19       PUSHIB 0x19
0xBE60  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBE62  0x05            EQ
0xBE63  0x2E 0x26       JZB 0xBE89 (+38)

                        // <variant> v = kv.value;                              json.hs:165

0xBE65  0x1A 0x14       PUSHIB 0x14
0xBE67  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xBE69  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBE6B  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBE6D  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, char(0x0A));               json.hs:166

0xBE6F  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE71  0x1A 0x0A       PUSHIB 0x0A
0xBE73  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:167

0xBE75  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBE77  0x4E            PUSHLOCALB00
0xBE78  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:168

0xBE7A  0x24 0x02       SYSCALL0 0x02  // String.New
0xBE7C  0x5D            POPCOPYLOCALB00

                        // ExportList(jsonFile, v, indent);                     json.hs:169

0xBE7D  0x56 0xFA 0x0C  PUSHLOCALBB 0x0CFA
0xBE80  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBE82  0x34 0x0E 0x02  CALLW 0x020E   // JSON.ExportList

                        // }                                                    json.hs:170

0xBE85  0x28 0x02       DECSP 0x02
0xBE87  0x30 0x2D       JB 0xBEB4 (+45)

                        // case dictionary:                                     json.hs:171

0xBE89  0x1A 0x13       PUSHIB 0x13
0xBE8B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xBE8D  0x05            EQ
0xBE8E  0x2E 0x26       JZB 0xBEB4 (+38)

                        // <string, variant> v = kv.value;                      json.hs:173

0xBE90  0x1A 0x0F       PUSHIB 0x0F
0xBE92  0x1A 0x14       PUSHIB 0x14
0xBE94  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBE96  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xBE98  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xBE9A  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // String.Build(ref content, char(0x0A));               json.hs:174

0xBE9C  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBE9E  0x1A 0x0A       PUSHIB 0x0A
0xBEA0  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:175

0xBEA2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBEA4  0x4E            PUSHLOCALB00
0xBEA5  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:176

0xBEA7  0x24 0x02       SYSCALL0 0x02  // String.New
0xBEA9  0x5D            POPCOPYLOCALB00

                        // ExportDictionary(jsonFile, v, indent);               json.hs:177

0xBEAA  0x56 0xFA 0x0C  PUSHLOCALBB 0x0CFA
0xBEAD  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBEAF  0x34 0x0F 0x02  CALLW 0x020F   // JSON.ExportDictionary

                        // }                                                    json.hs:178

0xBEB2  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:188

0xBEB4  0x28 0x02       DECSP 0x02

                        // if (content.Length > 0)                              json.hs:189

0xBEB6  0x4E            PUSHLOCALB00
0xBEB7  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xBEB9  0x44            PUSHI0
0xBEBA  0x07            GT
0xBEBB  0x2E 0x10       JZB 0xBECB (+16)

                        // String.Build(ref content, char(0x0A));               json.hs:191

0xBEBD  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBEBF  0x1A 0x0A       PUSHIB 0x0A
0xBEC1  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:192

0xBEC3  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBEC5  0x4E            PUSHLOCALB00
0xBEC6  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = "";                                        json.hs:193

0xBEC8  0x24 0x02       SYSCALL0 0x02  // String.New
0xBECA  0x5D            POPCOPYLOCALB00

                        // comma = ", ";                                        json.hs:195

0xBECB  0x37 0x2C 0x20  PUSHIW 0x202C
0xBECE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xBED0  0x5E            POPCOPYLOCALB02

                        // }                                                    json.hs:196

0xBED1  0x33 0x32 0xFE  JW 0xBD03 (-462)
0xBED4  0x28 0x06       DECSP 0x06

                        // indent = indent - 2;                                 json.hs:197

0xBED6  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBED8  0x1A 0x02       PUSHIB 0x02
0xBEDA  0x01            SUB
0xBEDB  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // String.Build(ref content, spaces(indent));           json.hs:198

0xBEDD  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBEDF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xBEE1  0x34 0x0D 0x02  CALLW 0x020D   // JSON.spaces
0xBEE4  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '}');                      json.hs:199

0xBEE6  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBEE8  0x1A 0x7D       PUSHIB 0x7D
0xBEEA  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, char(0x0A));               json.hs:200

0xBEEC  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xBEEE  0x1A 0x0A       PUSHIB 0x0A
0xBEF0  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:201

0xBEF2  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xBEF4  0x4E            PUSHLOCALB00
0xBEF5  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    json.hs:202

0xBEF7  0x2A 0x0A       RETB 0x0A


// /source/compiler/json/json.hs:257
// ####  JSON.ReadDictionary(..)  ####                                          0x0212

0xBEF9  0x49            ENTER

                        // <string, variant> dict;                              json.hs:258

0xBEFA  0x1A 0x0F       PUSHIB 0x0F
0xBEFC  0x1A 0x14       PUSHIB 0x14
0xBEFE  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // Parser.Consume(HopperToken.LBrace, '{');             json.hs:259

0xBF00  0x1A 0x12       PUSHIB 0x12
0xBF02  0x1A 0x7B       PUSHIB 0x7B
0xBF04  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // bool first = true;                                   json.hs:260

0xBF06  0x44            PUSHI0
0xBF07  0x45            PUSHI1
0xBF08  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBrace))                json.hs:269

0xBF09  0x1A 0x13       PUSHIB 0x13
0xBF0B  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBF0D  0x2E 0x07       JZB 0xBF14 (+7)

                        // Parser.Advance(); // }                               json.hs:271

0xBF0F  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               json.hs:272

0xBF11  0x33 0xB9 0x00  JW 0xBFCA (+185)

                        // if (!first)                                          json.hs:274

0xBF14  0x4F            PUSHLOCALB02
0xBF15  0x2F 0x08       JNZB 0xBF1D (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:276

0xBF17  0x1A 0x0D       PUSHIB 0x0D
0xBF19  0x1A 0x2C       PUSHIB 0x2C
0xBF1B  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // first = false;                                       json.hs:278

0xBF1D  0x44            PUSHI0
0xBF1E  0x4D            POPLOCALB02

                        // Parser.Consume(HopperToken.StringConstant, "key string expected");

0xBF1F  0x1A 0x0B       PUSHIB 0x0B
0xBF21  0x37 0x71 0x16  PUSHIW 0x1671
0xBF24  0x1A 0x13       PUSHIB 0x13
0xBF26  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBF28  0x2C 0x81       CALLB 0x81     // Parser.Consume

                        // <string,string> previousToken = PreviousToken;

0xBF2A  0x1A 0x0F       PUSHIB 0x0F
0xBF2C  0x1A 0x0F       PUSHIB 0x0F
0xBF2E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBF30  0x2C 0x75       CALLB 0x75     // Parser.PreviousToken_Get
0xBF32  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // string name = previousToken["lexeme"];               json.hs:287

0xBF34  0x24 0x02       SYSCALL0 0x02  // String.New
0xBF36  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xBF38  0x37 0x06 0x02  PUSHIW 0x0206
0xBF3B  0x1A 0x06       PUSHIB 0x06
0xBF3D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBF3F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xBF41  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // Parser.Consume(HopperToken.Colon, ':');              json.hs:288

0xBF43  0x1A 0x0E       PUSHIB 0x0E
0xBF45  0x1A 0x3A       PUSHIB 0x3A
0xBF47  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // <string,string> currentToken = CurrentToken;

0xBF49  0x1A 0x0F       PUSHIB 0x0F
0xBF4B  0x1A 0x0F       PUSHIB 0x0F
0xBF4D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBF4F  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0xBF51  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (Parser.Check(HopperToken.StringConstant))

0xBF53  0x1A 0x0B       PUSHIB 0x0B
0xBF55  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBF57  0x2E 0x15       JZB 0xBF6C (+21)

                        // Parser.Advance();                                    json.hs:298

0xBF59  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // dict[name] = currentToken["lexeme"];                 json.hs:299

0xBF5B  0x4E            PUSHLOCALB00
0xBF5C  0x56 0x06 0x08  PUSHLOCALBB 0x0806
0xBF5F  0x37 0x06 0x02  PUSHIW 0x0206
0xBF62  0x1A 0x06       PUSHIB 0x06
0xBF64  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBF66  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xBF68  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:300

0xBF6A  0x30 0x5B       JB 0xBFC5 (+91)

                        // else if (Parser.Check(HopperToken.Integer))

0xBF6C  0x1A 0x09       PUSHIB 0x09
0xBF6E  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBF70  0x2E 0x23       JZB 0xBF93 (+35)

                        // Parser.Advance();                                    json.hs:303

0xBF72  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // long l;                                              json.hs:304

0xBF74  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (Token.TryParseLong(currentToken["lexeme"], ref l))

0xBF76  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xBF78  0x37 0x06 0x02  PUSHIW 0x0206
0xBF7B  0x1A 0x06       PUSHIB 0x06
0xBF7D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xBF7F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xBF81  0x21 0x0A       PUSHSTACKADDRB 0x0A (BP+10)
0xBF83  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xBF85  0x2E 0x0A       JZB 0xBF8F (+10)

                        // dict[name] = l.ToString();                           json.hs:307

0xBF87  0x4E            PUSHLOCALB00
0xBF88  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xBF8B  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0xBF8D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:315

0xBF8F  0x28 0x02       DECSP 0x02
0xBF91  0x30 0x34       JB 0xBFC5 (+52)

                        // else if (Parser.Check(HopperToken.LBracket))

0xBF93  0x1A 0x14       PUSHIB 0x14
0xBF95  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBF97  0x2E 0x15       JZB 0xBFAC (+21)

                        // <string> lst = ReadList();                           json.hs:318

0xBF99  0x1A 0x0F       PUSHIB 0x0F
0xBF9B  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xBF9D  0x34 0x11 0x02  CALLW 0x0211   // JSON.ReadList
0xBFA0  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[name] = lst;                                    json.hs:319

0xBFA2  0x4E            PUSHLOCALB00
0xBFA3  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xBFA6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:320

0xBFA8  0x28 0x02       DECSP 0x02
0xBFAA  0x30 0x1B       JB 0xBFC5 (+27)

                        // else if (Parser.Check(HopperToken.LBrace))           json.hs:321

0xBFAC  0x1A 0x12       PUSHIB 0x12
0xBFAE  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBFB0  0x2E 0x15       JZB 0xBFC5 (+21)

                        // <string, variant> subDict = ReadDictionary();

0xBFB2  0x1A 0x0F       PUSHIB 0x0F
0xBFB4  0x1A 0x14       PUSHIB 0x14
0xBFB6  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBFB8  0x34 0x12 0x02  CALLW 0x0212   // JSON.ReadDictionary
0xBFBB  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // dict[name] = subDict;                                json.hs:324

0xBFBD  0x4E            PUSHLOCALB00
0xBFBE  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xBFC1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    json.hs:325

0xBFC3  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:332

0xBFC5  0x28 0x06       DECSP 0x06
0xBFC7  0x33 0x42 0xFF  JW 0xBF09 (-190)

                        // return dict;                                         json.hs:333

0xBFCA  0x4E            PUSHLOCALB00
0xBFCB  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:218
// ####  JSON.ReadList(..)  ####                                                0x0211

0xBFCD  0x49            ENTER

                        // <string> lst;                                        json.hs:219

0xBFCE  0x1A 0x0F       PUSHIB 0x0F
0xBFD0  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // Parser.Consume(HopperToken.LBracket, '[');           json.hs:220

0xBFD2  0x1A 0x14       PUSHIB 0x14
0xBFD4  0x1A 0x5B       PUSHIB 0x5B
0xBFD6  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // bool first = true;                                   json.hs:221

0xBFD8  0x44            PUSHI0
0xBFD9  0x45            PUSHI1
0xBFDA  0x4D            POPLOCALB02

                        // if (Parser.Check(HopperToken.RBracket))              json.hs:230

0xBFDB  0x1A 0x15       PUSHIB 0x15
0xBFDD  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBFDF  0x2E 0x06       JZB 0xBFE5 (+6)

                        // Parser.Advance(); // ]                               json.hs:232

0xBFE1  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // break;                                               json.hs:233

0xBFE3  0x30 0x39       JB 0xC01C (+57)

                        // if (!first)                                          json.hs:235

0xBFE5  0x4F            PUSHLOCALB02
0xBFE6  0x2F 0x08       JNZB 0xBFEE (+8)

                        // Parser.Consume(HopperToken.Comma, ',');              json.hs:237

0xBFE8  0x1A 0x0D       PUSHIB 0x0D
0xBFEA  0x1A 0x2C       PUSHIB 0x2C
0xBFEC  0x2C 0x80       CALLB 0x80     // Parser.Consume

                        // first = false;                                       json.hs:239

0xBFEE  0x44            PUSHI0
0xBFEF  0x4D            POPLOCALB02

                        // <string,string> currentToken = CurrentToken;

0xBFF0  0x1A 0x0F       PUSHIB 0x0F
0xBFF2  0x1A 0x0F       PUSHIB 0x0F
0xBFF4  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xBFF6  0x2C 0x74       CALLB 0x74     // Parser.CurrentToken_Get
0xBFF8  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (Parser.Check(HopperToken.StringConstant))

0xBFFA  0x1A 0x0B       PUSHIB 0x0B
0xBFFC  0x2C 0x83       CALLB 0x83     // Parser.Check
0xBFFE  0x2E 0x1A       JZB 0xC018 (+26)

                        // Parser.Advance();                                    json.hs:243

0xC000  0x2C 0x7F       CALLB 0x7F     // Parser.Advance

                        // string v = currentToken["lexeme"];                   json.hs:244

0xC002  0x24 0x02       SYSCALL0 0x02  // String.New
0xC004  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC006  0x37 0x06 0x02  PUSHIW 0x0206
0xC009  0x1A 0x06       PUSHIB 0x06
0xC00B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC00D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC00F  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // lst.Append(v);                                       json.hs:245

0xC011  0x4E            PUSHLOCALB00
0xC012  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC014  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    json.hs:246

0xC016  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:253

0xC018  0x28 0x02       DECSP 0x02
0xC01A  0x30 0xC1       JB 0xBFDB (-63)

                        // return lst;                                          json.hs:254

0xC01C  0x4E            PUSHLOCALB00
0xC01D  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:12
// ####  JSON.spaces(..)  ####                                                  0x020D

0xC01F  0x49            ENTER

                        // string spaces;                                       json.hs:13

0xC020  0x24 0x02       SYSCALL0 0x02  // String.New

                        // spaces = spaces.Pad(' ', count);                     json.hs:14

0xC022  0x4E            PUSHLOCALB00
0xC023  0x1A 0x20       PUSHIB 0x20
0xC025  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC027  0x34 0x97 0x01  CALLW 0x0197   // String.Pad
0xC02A  0x5D            POPCOPYLOCALB00

                        // return spaces;                                       json.hs:15

0xC02B  0x4E            PUSHLOCALB00
0xC02C  0x2B 0x04       RETRETB 0x04


// /source/compiler/json/json.hs:8
// ####  JSON.eol(..)  ####                                                     0x020C

0xC02E  0x49            ENTER

                        // return "" + char(0x0A);                              json.hs:9

0xC02F  0x24 0x02       SYSCALL0 0x02  // String.New
0xC031  0x1A 0x0A       PUSHIB 0x0A
0xC033  0x25 0x03       SYSCALL1 0x03  // String.Append
0xC035  0x4A            RET0


// /source/compiler/json/json.hs:20
// ####  JSON.ExportList(..)  ####                                              0x020E


                        // uint entries;                                        json.hs:21

0xC036  0x5F 0x01       ENTERB 0x01

                        // string content;                                      json.hs:22

0xC038  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string comma;                                        json.hs:23

0xC03A  0x24 0x02       SYSCALL0 0x02  // String.New

                        // indent = indent + 2;                                 json.hs:24

0xC03C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC03E  0x1A 0x02       PUSHIB 0x02
0xC040  0x00            ADD
0xC041  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // content = spaces(indent) + '[';                      json.hs:25

0xC043  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC045  0x34 0x0D 0x02  CALLW 0x020D   // JSON.spaces
0xC048  0x1A 0x5B       PUSHIB 0x5B
0xC04A  0x25 0x03       SYSCALL1 0x03  // String.Append
0xC04C  0x5E            POPCOPYLOCALB02

                        // foreach (var vv in lst)                              json.hs:26

0xC04D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC04F  0x44            PUSHI0
0xC050  0x44            PUSHI0
0xC051  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC053  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xC055  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xC057  0x05            EQ
0xC058  0x32 0x57 0x01  JNZW 0xC1AF (+343)
0xC05B  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xC05E  0x24 0x14       SYSCALL0 0x14  // List.GetItemAsVariant
0xC060  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // String.Build(ref content, comma);                    json.hs:28

0xC062  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC064  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC066  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // switch(typeof(vv))                                   json.hs:29

0xC068  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC06A  0x24 0x81       SYSCALL0 0x81  // Types.BoxTypeOf

                        // case byte:                                           json.hs:31

0xC06C  0x1A 0x03       PUSHIB 0x03
0xC06E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC070  0x05            EQ
0xC071  0x2E 0x45       JZB 0xC0B6 (+69)

                        // byte v = byte(vv);                                   json.hs:33

0xC073  0x44            PUSHI0
0xC074  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC076  0x27 0x00       DUP 0x00
0xC078  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC07A  0x1A 0x14       PUSHIB 0x14
0xC07C  0x05            EQ
0xC07D  0x2E 0x04       JZB 0xC081 (+4)
0xC07F  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC081  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // entries++;                                           json.hs:34

0xC083  0x22 0x00       INCLOCALB 0x00 (BP+0)

                        // if ((entries % 16) == 0)                             json.hs:35

0xC085  0x4E            PUSHLOCALB00
0xC086  0x1A 0x10       PUSHIB 0x10
0xC088  0x04            MOD
0xC089  0x2F 0x14       JNZB 0xC09D (+20)

                        // jsonFile.Append(content + eol());                    json.hs:37

0xC08B  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xC08D  0x4F            PUSHLOCALB02
0xC08E  0x34 0x0C 0x02  CALLW 0x020C   // JSON.eol
0xC091  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC093  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // content = spaces(indent+1);                          json.hs:38

0xC095  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC097  0x45            PUSHI1
0xC098  0x00            ADD
0xC099  0x34 0x0D 0x02  CALLW 0x020D   // JSON.spaces
0xC09C  0x5E            POPCOPYLOCALB02

                        // String.Build(ref content, "0x");                     json.hs:40

0xC09D  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC09F  0x37 0x30 0x78  PUSHIW 0x7830
0xC0A2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC0A4  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, v.ToHexString(2));

0xC0A6  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC0A8  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC0AA  0x1A 0x02       PUSHIB 0x02
0xC0AC  0x34 0x69 0x01  CALLW 0x0169   // Byte.ToHexString
0xC0AF  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:42

0xC0B1  0x28 0x02       DECSP 0x02
0xC0B3  0x33 0xEE 0x00  JW 0xC1A1 (+238)

                        // case uint:                                           json.hs:43

0xC0B6  0x1A 0x04       PUSHIB 0x04
0xC0B8  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC0BA  0x05            EQ
0xC0BB  0x2E 0x20       JZB 0xC0DB (+32)

                        // uint v = uint(vv);                                   json.hs:45

0xC0BD  0x44            PUSHI0
0xC0BE  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC0C0  0x27 0x00       DUP 0x00
0xC0C2  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC0C4  0x1A 0x14       PUSHIB 0x14
0xC0C6  0x05            EQ
0xC0C7  0x2E 0x04       JZB 0xC0CB (+4)
0xC0C9  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC0CB  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:46

0xC0CD  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC0CF  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC0D1  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0xC0D4  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:47

0xC0D6  0x28 0x02       DECSP 0x02
0xC0D8  0x33 0xC9 0x00  JW 0xC1A1 (+201)

                        // case int:                                            json.hs:48

0xC0DB  0x1A 0x02       PUSHIB 0x02
0xC0DD  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC0DF  0x05            EQ
0xC0E0  0x2E 0x20       JZB 0xC100 (+32)

                        // int v = int(vv);                                     json.hs:50

0xC0E2  0x44            PUSHI0
0xC0E3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC0E5  0x27 0x00       DUP 0x00
0xC0E7  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC0E9  0x1A 0x14       PUSHIB 0x14
0xC0EB  0x05            EQ
0xC0EC  0x2E 0x04       JZB 0xC0F0 (+4)
0xC0EE  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC0F0  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:51

0xC0F2  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC0F4  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC0F6  0x34 0x6A 0x01  CALLW 0x016A   // Int.ToString
0xC0F9  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:52

0xC0FB  0x28 0x02       DECSP 0x02
0xC0FD  0x33 0xA4 0x00  JW 0xC1A1 (+164)

                        // case long:                                           json.hs:53

0xC100  0x1A 0x0E       PUSHIB 0x0E
0xC102  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC104  0x05            EQ
0xC105  0x2E 0x20       JZB 0xC125 (+32)

                        // long v = long(vv);                                   json.hs:55

0xC107  0x24 0x3D       SYSCALL0 0x3D  // Long.New
0xC109  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC10B  0x27 0x00       DUP 0x00
0xC10D  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC10F  0x1A 0x14       PUSHIB 0x14
0xC111  0x05            EQ
0xC112  0x2E 0x04       JZB 0xC116 (+4)
0xC114  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC116  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:56

0xC118  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC11A  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC11C  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0xC11E  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:57

0xC120  0x28 0x02       DECSP 0x02
0xC122  0x33 0x7F 0x00  JW 0xC1A1 (+127)

                        // case float:                                          json.hs:58

0xC125  0x1A 0x0D       PUSHIB 0x0D
0xC127  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC129  0x05            EQ
0xC12A  0x2E 0x1F       JZB 0xC149 (+31)

                        // float v = float(vv);                                 json.hs:60

0xC12C  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0xC12E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC130  0x27 0x00       DUP 0x00
0xC132  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC134  0x1A 0x14       PUSHIB 0x14
0xC136  0x05            EQ
0xC137  0x2E 0x04       JZB 0xC13B (+4)
0xC139  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC13B  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, v.ToString());             json.hs:61

0xC13D  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC13F  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC141  0x24 0x4A       SYSCALL0 0x4A  // Float.ToString
0xC143  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:62

0xC145  0x28 0x02       DECSP 0x02
0xC147  0x30 0x5A       JB 0xC1A1 (+90)

                        // case string:                                         json.hs:63

0xC149  0x1A 0x0F       PUSHIB 0x0F
0xC14B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC14D  0x05            EQ
0xC14E  0x2E 0x1E       JZB 0xC16C (+30)

                        // string v = vv;                                       json.hs:65

0xC150  0x24 0x02       SYSCALL0 0x02  // String.New
0xC152  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC154  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // String.Build(ref content, '"');                      json.hs:66

0xC156  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC158  0x1A 0x22       PUSHIB 0x22
0xC15A  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, v);                        json.hs:67

0xC15C  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC15E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC160  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // String.Build(ref content, '"');                      json.hs:68

0xC162  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC164  0x1A 0x22       PUSHIB 0x22
0xC166  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // }                                                    json.hs:69

0xC168  0x28 0x02       DECSP 0x02
0xC16A  0x30 0x37       JB 0xC1A1 (+55)

                        // case bool:                                           json.hs:70

0xC16C  0x1A 0x06       PUSHIB 0x06
0xC16E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC170  0x05            EQ
0xC171  0x2E 0x30       JZB 0xC1A1 (+48)

                        // bool v = bool(vv);                                   json.hs:72

0xC173  0x44            PUSHI0
0xC174  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC176  0x27 0x00       DUP 0x00
0xC178  0x24 0x7E       SYSCALL0 0x7E  // Types.TypeOf
0xC17A  0x1A 0x14       PUSHIB 0x14
0xC17C  0x05            EQ
0xC17D  0x2E 0x04       JZB 0xC181 (+4)
0xC17F  0x24 0x28       SYSCALL0 0x28  // Variant.UnBox
0xC181  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // if (v)                                               json.hs:73

0xC183  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xC185  0x2E 0x0F       JZB 0xC194 (+15)

                        // String.Build(ref content, "true");                   json.hs:75

0xC187  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC189  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0xC18C  0x1A 0x04       PUSHIB 0x04
0xC18E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC190  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:76

0xC192  0x30 0x0D       JB 0xC19F (+13)

                        // String.Build(ref content, "false");                  json.hs:79

0xC194  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC196  0x37 0x4C 0x05  PUSHIW 0x054C
0xC199  0x1A 0x05       PUSHIB 0x05
0xC19B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC19D  0x24 0x83       SYSCALL0 0x83  // String.Build

                        // }                                                    json.hs:81

0xC19F  0x28 0x02       DECSP 0x02

                        // }                                                    json.hs:92

0xC1A1  0x28 0x02       DECSP 0x02

                        // comma = ", ";                                        json.hs:93

0xC1A3  0x37 0x2C 0x20  PUSHIW 0x202C
0xC1A6  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC1A8  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // }                                                    json.hs:94

0xC1AA  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0xC1AC  0x33 0xA5 0xFE  JW 0xC051 (-347)
0xC1AF  0x28 0x06       DECSP 0x06

                        // String.Build(ref content, ']');                      json.hs:95

0xC1B1  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC1B3  0x1A 0x5D       PUSHIB 0x5D
0xC1B5  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // String.Build(ref content, char(0x0A));               json.hs:96

0xC1B7  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC1B9  0x1A 0x0A       PUSHIB 0x0A
0xC1BB  0x25 0x83       SYSCALL1 0x83  // String.Build

                        // jsonFile.Append(content);                            json.hs:97

0xC1BD  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xC1BF  0x4F            PUSHLOCALB02
0xC1C0  0x25 0x66       SYSCALL1 0x66  // File.Append

                        // }                                                    json.hs:98

0xC1C2  0x2A 0x0C       RETB 0x0C


// /source/compiler/tokens/token.hs:113
// ####  Token.Initialize(..)  ####                                             0x004A

0xC1C4  0x49            ENTER

                        // reservedIdentifiers.Clear();                         token.hs:114

0xC1C5  0x20 0x04       PUSHGLOBALB 0x04
0xC1C7  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // reservedZopperIdentifiers.Clear();                   token.hs:115

0xC1C9  0x20 0x06       PUSHGLOBALB 0x06
0xC1CB  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // typeKeywords.Clear();                                token.hs:116

0xC1CD  0x20 0x08       PUSHGLOBALB 0x08
0xC1CF  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // statementKeywords.Clear();                           token.hs:117

0xC1D1  0x20 0x0A       PUSHGLOBALB 0x0A
0xC1D3  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes.Clear();                            token.hs:119

0xC1D5  0x20 0x0E       PUSHGLOBALB 0x0E
0xC1D7  0x24 0x1F       SYSCALL0 0x1F  // Dictionary.Clear

                        // hopperTokenTypes["EOF"] = HopperToken.EOF;           token.hs:121

0xC1D9  0x20 0x0E       PUSHGLOBALB 0x0E
0xC1DB  0x37 0x60 0x04  PUSHIW 0x0460
0xC1DE  0x1A 0x03       PUSHIB 0x03
0xC1E0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC1E2  0x1A 0x2D       PUSHIB 0x2D
0xC1E4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Undefined"] = HopperToken.Undefined;

0xC1E6  0x20 0x0E       PUSHGLOBALB 0x0E
0xC1E8  0x37 0x84 0x16  PUSHIW 0x1684
0xC1EB  0x1A 0x09       PUSHIB 0x09
0xC1ED  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC1EF  0x44            PUSHI0
0xC1F0  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Error"] = HopperToken.Error;

0xC1F2  0x20 0x0E       PUSHGLOBALB 0x0E
0xC1F4  0x37 0x7F 0x06  PUSHIW 0x067F
0xC1F7  0x1A 0x05       PUSHIB 0x05
0xC1F9  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC1FB  0x45            PUSHI1
0xC1FC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Char"] = HopperToken.Char;

0xC1FE  0x20 0x0E       PUSHGLOBALB 0x0E
0xC200  0x37 0x24 0x06  PUSHIW 0x0624
0xC203  0x1A 0x04       PUSHIB 0x04
0xC205  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC207  0x1A 0x08       PUSHIB 0x08
0xC209  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Bool"] = HopperToken.Bool;

0xC20B  0x20 0x0E       PUSHGLOBALB 0x0E
0xC20D  0x37 0x8D 0x16  PUSHIW 0x168D
0xC210  0x1A 0x04       PUSHIB 0x04
0xC212  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC214  0x1A 0x07       PUSHIB 0x07
0xC216  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Keyword"] = HopperToken.Keyword;

0xC218  0x20 0x0E       PUSHGLOBALB 0x0E
0xC21A  0x37 0x91 0x16  PUSHIW 0x1691
0xC21D  0x1A 0x07       PUSHIB 0x07
0xC21F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC221  0x1A 0x05       PUSHIB 0x05
0xC223  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Directive"] = HopperToken.Directive;

0xC225  0x20 0x0E       PUSHGLOBALB 0x0E
0xC227  0x37 0x55 0x0E  PUSHIW 0x0E55
0xC22A  0x1A 0x09       PUSHIB 0x09
0xC22C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC22E  0x1A 0x06       PUSHIB 0x06
0xC230  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Identifier"] = HopperToken.Identifier;

0xC232  0x20 0x0E       PUSHGLOBALB 0x0E
0xC234  0x37 0x98 0x16  PUSHIW 0x1698
0xC237  0x1A 0x0A       PUSHIB 0x0A
0xC239  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC23B  0x1A 0x03       PUSHIB 0x03
0xC23D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["DottedIdentifier"] = HopperToken.DottedIdentifier;

0xC23F  0x20 0x0E       PUSHGLOBALB 0x0E
0xC241  0x37 0xA2 0x16  PUSHIW 0x16A2
0xC244  0x1A 0x10       PUSHIB 0x10
0xC246  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC248  0x1A 0x02       PUSHIB 0x02
0xC24A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Integer"] = HopperToken.Integer;

0xC24C  0x20 0x0E       PUSHGLOBALB 0x0E
0xC24E  0x37 0xB2 0x16  PUSHIW 0x16B2
0xC251  0x1A 0x07       PUSHIB 0x07
0xC253  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC255  0x1A 0x09       PUSHIB 0x09
0xC257  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Float"] = HopperToken.Float;

0xC259  0x20 0x0E       PUSHGLOBALB 0x0E
0xC25B  0x37 0x0F 0x06  PUSHIW 0x060F
0xC25E  0x1A 0x05       PUSHIB 0x05
0xC260  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC262  0x1A 0x0A       PUSHIB 0x0A
0xC264  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["StringConstant"] = HopperToken.StringConstant;

0xC266  0x20 0x0E       PUSHGLOBALB 0x0E
0xC268  0x37 0xB9 0x16  PUSHIW 0x16B9
0xC26B  0x1A 0x0E       PUSHIB 0x0E
0xC26D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC26F  0x1A 0x0B       PUSHIB 0x0B
0xC271  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Assign"] = HopperToken.Assign;

0xC273  0x20 0x0E       PUSHGLOBALB 0x0E
0xC275  0x37 0xC7 0x16  PUSHIW 0x16C7
0xC278  0x1A 0x06       PUSHIB 0x06
0xC27A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC27C  0x1A 0x2C       PUSHIB 0x2C
0xC27E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0xC280  0x20 0x0E       PUSHGLOBALB 0x0E
0xC282  0x37 0xCD 0x16  PUSHIW 0x16CD
0xC285  0x1A 0x06       PUSHIB 0x06
0xC287  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC289  0x1A 0x21       PUSHIB 0x21
0xC28B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0xC28D  0x20 0x0E       PUSHGLOBALB 0x0E
0xC28F  0x37 0xD3 0x16  PUSHIW 0x16D3
0xC292  0x1A 0x05       PUSHIB 0x05
0xC294  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC296  0x1A 0x22       PUSHIB 0x22
0xC298  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LParen"] = HopperToken.LParen;

0xC29A  0x20 0x0E       PUSHGLOBALB 0x0E
0xC29C  0x37 0xD8 0x16  PUSHIW 0x16D8
0xC29F  0x1A 0x06       PUSHIB 0x06
0xC2A1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2A3  0x1A 0x10       PUSHIB 0x10
0xC2A5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RParen"] = HopperToken.RParen;

0xC2A7  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2A9  0x37 0xDE 0x16  PUSHIW 0x16DE
0xC2AC  0x1A 0x06       PUSHIB 0x06
0xC2AE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2B0  0x1A 0x11       PUSHIB 0x11
0xC2B2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBrace"] = HopperToken.LBrace;

0xC2B4  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2B6  0x37 0xE4 0x16  PUSHIW 0x16E4
0xC2B9  0x1A 0x06       PUSHIB 0x06
0xC2BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2BD  0x1A 0x12       PUSHIB 0x12
0xC2BF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBrace"] = HopperToken.RBrace;

0xC2C1  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2C3  0x37 0xEA 0x16  PUSHIW 0x16EA
0xC2C6  0x1A 0x06       PUSHIB 0x06
0xC2C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2CA  0x1A 0x13       PUSHIB 0x13
0xC2CC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LBracket"] = HopperToken.LBracket;

0xC2CE  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2D0  0x37 0xF0 0x16  PUSHIW 0x16F0
0xC2D3  0x1A 0x08       PUSHIB 0x08
0xC2D5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2D7  0x1A 0x14       PUSHIB 0x14
0xC2D9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["RBracket"] = HopperToken.RBracket;

0xC2DB  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2DD  0x37 0xF8 0x16  PUSHIW 0x16F8
0xC2E0  0x1A 0x08       PUSHIB 0x08
0xC2E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2E4  0x1A 0x15       PUSHIB 0x15
0xC2E6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["SemiColon"] = HopperToken.SemiColon;

0xC2E8  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2EA  0x37 0x00 0x17  PUSHIW 0x1700
0xC2ED  0x1A 0x09       PUSHIB 0x09
0xC2EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2F1  0x1A 0x0C       PUSHIB 0x0C
0xC2F3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Colon"] = HopperToken.Colon;

0xC2F5  0x20 0x0E       PUSHGLOBALB 0x0E
0xC2F7  0x37 0x04 0x17  PUSHIW 0x1704
0xC2FA  0x1A 0x05       PUSHIB 0x05
0xC2FC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC2FE  0x1A 0x0E       PUSHIB 0x0E
0xC300  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Comma"] = HopperToken.Comma;

0xC302  0x20 0x0E       PUSHGLOBALB 0x0E
0xC304  0x37 0x09 0x17  PUSHIW 0x1709
0xC307  0x1A 0x05       PUSHIB 0x05
0xC309  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC30B  0x1A 0x0D       PUSHIB 0x0D
0xC30D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Dot"] = HopperToken.Dot;           token.hs:145

0xC30F  0x20 0x0E       PUSHGLOBALB 0x0E
0xC311  0x37 0xA2 0x16  PUSHIW 0x16A2
0xC314  0x1A 0x03       PUSHIB 0x03
0xC316  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC318  0x1A 0x04       PUSHIB 0x04
0xC31A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Add"] = HopperToken.Add;           token.hs:146

0xC31C  0x20 0x0E       PUSHGLOBALB 0x0E
0xC31E  0x37 0x05 0x06  PUSHIW 0x0605
0xC321  0x1A 0x03       PUSHIB 0x03
0xC323  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC325  0x1A 0x25       PUSHIB 0x25
0xC327  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Subtract"] = HopperToken.Subtract;

0xC329  0x20 0x0E       PUSHGLOBALB 0x0E
0xC32B  0x37 0x0E 0x17  PUSHIW 0x170E
0xC32E  0x1A 0x08       PUSHIB 0x08
0xC330  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC332  0x1A 0x26       PUSHIB 0x26
0xC334  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Multiply"] = HopperToken.Multiply;

0xC336  0x20 0x0E       PUSHGLOBALB 0x0E
0xC338  0x37 0x16 0x17  PUSHIW 0x1716
0xC33B  0x1A 0x08       PUSHIB 0x08
0xC33D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC33F  0x1A 0x27       PUSHIB 0x27
0xC341  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Divide"] = HopperToken.Divide;

0xC343  0x20 0x0E       PUSHGLOBALB 0x0E
0xC345  0x37 0x1E 0x17  PUSHIW 0x171E
0xC348  0x1A 0x06       PUSHIB 0x06
0xC34A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC34C  0x1A 0x28       PUSHIB 0x28
0xC34E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Modulus"] = HopperToken.Modulus;

0xC350  0x20 0x0E       PUSHGLOBALB 0x0E
0xC352  0x37 0x24 0x17  PUSHIW 0x1724
0xC355  0x1A 0x07       PUSHIB 0x07
0xC357  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC359  0x1A 0x29       PUSHIB 0x29
0xC35B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Increment"] = HopperToken.Increment;

0xC35D  0x20 0x0E       PUSHGLOBALB 0x0E
0xC35F  0x37 0x2B 0x17  PUSHIW 0x172B
0xC362  0x1A 0x09       PUSHIB 0x09
0xC364  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC366  0x1A 0x2A       PUSHIB 0x2A
0xC368  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["Decrement"] = HopperToken.Decrement;

0xC36A  0x20 0x0E       PUSHGLOBALB 0x0E
0xC36C  0x37 0x34 0x17  PUSHIW 0x1734
0xC36F  0x1A 0x09       PUSHIB 0x09
0xC371  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC373  0x1A 0x2B       PUSHIB 0x2B
0xC375  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["NE"] = HopperToken.NE;             token.hs:153

0xC377  0x20 0x0E       PUSHGLOBALB 0x0E
0xC379  0x37 0x4E 0x45  PUSHIW 0x454E
0xC37C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC37E  0x1A 0x1B       PUSHIB 0x1B
0xC380  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["EQ"] = HopperToken.EQ;             token.hs:154

0xC382  0x20 0x0E       PUSHGLOBALB 0x0E
0xC384  0x37 0x45 0x51  PUSHIW 0x5145
0xC387  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC389  0x1A 0x18       PUSHIB 0x18
0xC38B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GT"] = HopperToken.GT;             token.hs:155

0xC38D  0x20 0x0E       PUSHGLOBALB 0x0E
0xC38F  0x37 0x47 0x54  PUSHIW 0x5447
0xC392  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC394  0x1A 0x17       PUSHIB 0x17
0xC396  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LT"] = HopperToken.LT;             token.hs:156

0xC398  0x20 0x0E       PUSHGLOBALB 0x0E
0xC39A  0x37 0x4C 0x54  PUSHIW 0x544C
0xC39D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC39F  0x1A 0x16       PUSHIB 0x16
0xC3A1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["LE"] = HopperToken.LE;             token.hs:157

0xC3A3  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3A5  0x37 0x4C 0x45  PUSHIW 0x454C
0xC3A8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC3AA  0x1A 0x19       PUSHIB 0x19
0xC3AC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["GE"] = HopperToken.GE;             token.hs:158

0xC3AE  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3B0  0x37 0x47 0x45  PUSHIW 0x4547
0xC3B3  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC3B5  0x1A 0x1A       PUSHIB 0x1A
0xC3B7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftLeft"] = HopperToken.ShiftLeft;

0xC3B9  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3BB  0x37 0x3D 0x17  PUSHIW 0x173D
0xC3BE  0x1A 0x09       PUSHIB 0x09
0xC3C0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC3C2  0x1A 0x1C       PUSHIB 0x1C
0xC3C4  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["ShiftRight"] = HopperToken.ShiftRight;

0xC3C6  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3C8  0x37 0x46 0x17  PUSHIW 0x1746
0xC3CB  0x1A 0x0A       PUSHIB 0x0A
0xC3CD  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC3CF  0x1A 0x1D       PUSHIB 0x1D
0xC3D1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanNot"] = HopperToken.BooleanNot;

0xC3D3  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3D5  0x37 0x50 0x17  PUSHIW 0x1750
0xC3D8  0x1A 0x0A       PUSHIB 0x0A
0xC3DA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC3DC  0x1A 0x20       PUSHIB 0x20
0xC3DE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanOr"] = HopperToken.BooleanOr;

0xC3E0  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3E2  0x37 0x5A 0x17  PUSHIW 0x175A
0xC3E5  0x1A 0x09       PUSHIB 0x09
0xC3E7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC3E9  0x1A 0x1F       PUSHIB 0x1F
0xC3EB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BooleanAnd"] = HopperToken.BooleanAnd;

0xC3ED  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3EF  0x37 0x63 0x17  PUSHIW 0x1763
0xC3F2  0x1A 0x0A       PUSHIB 0x0A
0xC3F4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC3F6  0x1A 0x1E       PUSHIB 0x1E
0xC3F8  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitAnd"] = HopperToken.BitAnd;

0xC3FA  0x20 0x0E       PUSHGLOBALB 0x0E
0xC3FC  0x37 0xCD 0x16  PUSHIW 0x16CD
0xC3FF  0x1A 0x06       PUSHIB 0x06
0xC401  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC403  0x1A 0x21       PUSHIB 0x21
0xC405  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitOr"] = HopperToken.BitOr;

0xC407  0x20 0x0E       PUSHGLOBALB 0x0E
0xC409  0x37 0xD3 0x16  PUSHIW 0x16D3
0xC40C  0x1A 0x05       PUSHIB 0x05
0xC40E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC410  0x1A 0x22       PUSHIB 0x22
0xC412  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitNot"] = HopperToken.BitNot;

0xC414  0x20 0x0E       PUSHGLOBALB 0x0E
0xC416  0x37 0x6D 0x17  PUSHIW 0x176D
0xC419  0x1A 0x06       PUSHIB 0x06
0xC41B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC41D  0x1A 0x23       PUSHIB 0x23
0xC41F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // hopperTokenTypes["BitXor"] = HopperToken.BitXor;

0xC421  0x20 0x0E       PUSHGLOBALB 0x0E
0xC423  0x37 0x73 0x17  PUSHIW 0x1773
0xC426  0x1A 0x06       PUSHIB 0x06
0xC428  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC42A  0x1A 0x24       PUSHIB 0x24
0xC42C  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // foreach (var kv in hopperTokenTypes)                 token.hs:170

0xC42E  0x20 0x0E       PUSHGLOBALB 0x0E
0xC430  0x1A 0x0F       PUSHIB 0x0F
0xC432  0x1A 0x0F       PUSHIB 0x0F
0xC434  0x24 0x20       SYSCALL0 0x20  // Pair.New
0xC436  0x44            PUSHI0
0xC437  0x4E            PUSHLOCALB00
0xC438  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC43A  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0xC43C  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0xC43E  0x4D            POPLOCALB02
0xC43F  0x2E 0x0E       JZB 0xC44D (+14)

                        // hopperTokenNames[kv.value] = kv.key;                 token.hs:172

0xC441  0x20 0x10       PUSHGLOBALB 0x10
0xC443  0x4F            PUSHLOCALB02
0xC444  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xC446  0x4F            PUSHLOCALB02
0xC447  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0xC449  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:173

0xC44B  0x30 0xEC       JB 0xC437 (-20)
0xC44D  0x28 0x06       DECSP 0x06

                        // reservedIdentifiers["line"] = true;                  token.hs:175

0xC44F  0x20 0x04       PUSHGLOBALB 0x04
0xC451  0x37 0x89 0x06  PUSHIW 0x0689
0xC454  0x1A 0x04       PUSHIB 0x04
0xC456  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC458  0x45            PUSHI1
0xC459  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedIdentifiers["source"] = true;                token.hs:176

0xC45B  0x20 0x04       PUSHGLOBALB 0x04
0xC45D  0x37 0x8D 0x06  PUSHIW 0x068D
0xC460  0x1A 0x06       PUSHIB 0x06
0xC462  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC464  0x45            PUSHI1
0xC465  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["port"] = true;            token.hs:178

0xC467  0x20 0x06       PUSHGLOBALB 0x06
0xC469  0x37 0x79 0x17  PUSHIW 0x1779
0xC46C  0x1A 0x04       PUSHIB 0x04
0xC46E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC470  0x45            PUSHI1
0xC471  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memory"] = true;

0xC473  0x20 0x06       PUSHGLOBALB 0x06
0xC475  0x37 0x7D 0x17  PUSHIW 0x177D
0xC478  0x1A 0x06       PUSHIB 0x06
0xC47A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC47C  0x45            PUSHI1
0xC47D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["memoryword"] = true;

0xC47F  0x20 0x06       PUSHGLOBALB 0x06
0xC481  0x37 0x83 0x17  PUSHIW 0x1783
0xC484  0x1A 0x0A       PUSHIB 0x0A
0xC486  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC488  0x45            PUSHI1
0xC489  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["sp"] = true;              token.hs:181

0xC48B  0x20 0x06       PUSHGLOBALB 0x06
0xC48D  0x37 0x73 0x70  PUSHIW 0x7073
0xC490  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC492  0x45            PUSHI1
0xC493  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["pc"] = true;              token.hs:182

0xC495  0x20 0x06       PUSHGLOBALB 0x06
0xC497  0x37 0x70 0x63  PUSHIW 0x6370
0xC49A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC49C  0x45            PUSHI1
0xC49D  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // reservedZopperIdentifiers["iy"] = true;              token.hs:183

0xC49F  0x20 0x06       PUSHGLOBALB 0x06
0xC4A1  0x37 0x69 0x79  PUSHIW 0x7969
0xC4A4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC4A6  0x45            PUSHI1
0xC4A7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["array"] = true;                        token.hs:186

0xC4A9  0x20 0x08       PUSHGLOBALB 0x08
0xC4AB  0x37 0x33 0x02  PUSHIW 0x0233
0xC4AE  0x1A 0x05       PUSHIB 0x05
0xC4B0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4B2  0x45            PUSHI1
0xC4B3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["bool"] = true;                         token.hs:187

0xC4B5  0x20 0x08       PUSHGLOBALB 0x08
0xC4B7  0x37 0x6F 0x03  PUSHIW 0x036F
0xC4BA  0x1A 0x04       PUSHIB 0x04
0xC4BC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4BE  0x45            PUSHI1
0xC4BF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["byte"] = true;                         token.hs:188

0xC4C1  0x20 0x08       PUSHGLOBALB 0x08
0xC4C3  0x37 0x51 0x05  PUSHIW 0x0551
0xC4C6  0x1A 0x04       PUSHIB 0x04
0xC4C8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4CA  0x45            PUSHI1
0xC4CB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["char"] = true;                         token.hs:189

0xC4CD  0x20 0x08       PUSHGLOBALB 0x08
0xC4CF  0x37 0x15 0x04  PUSHIW 0x0415
0xC4D2  0x1A 0x04       PUSHIB 0x04
0xC4D4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4D6  0x45            PUSHI1
0xC4D7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["delegate"] = true;                     token.hs:190

0xC4D9  0x20 0x08       PUSHGLOBALB 0x08
0xC4DB  0x37 0x1A 0x0C  PUSHIW 0x0C1A
0xC4DE  0x1A 0x08       PUSHIB 0x08
0xC4E0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4E2  0x45            PUSHI1
0xC4E3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["dictionary"] = true;                   token.hs:191

0xC4E5  0x20 0x08       PUSHGLOBALB 0x08
0xC4E7  0x37 0x68 0x02  PUSHIW 0x0268
0xC4EA  0x1A 0x0A       PUSHIB 0x0A
0xC4EC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4EE  0x45            PUSHI1
0xC4EF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["directory"] = true;                    token.hs:192

0xC4F1  0x20 0x08       PUSHGLOBALB 0x08
0xC4F3  0x37 0x9A 0x0F  PUSHIW 0x0F9A
0xC4F6  0x1A 0x09       PUSHIB 0x09
0xC4F8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC4FA  0x45            PUSHI1
0xC4FB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["enum"] = true;                         token.hs:193

0xC4FD  0x20 0x08       PUSHGLOBALB 0x08
0xC4FF  0x37 0x09 0x0C  PUSHIW 0x0C09
0xC502  0x1A 0x04       PUSHIB 0x04
0xC504  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC506  0x45            PUSHI1
0xC507  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["file"] = true;                         token.hs:194

0xC509  0x20 0x08       PUSHGLOBALB 0x08
0xC50B  0x37 0x96 0x0F  PUSHIW 0x0F96
0xC50E  0x1A 0x04       PUSHIB 0x04
0xC510  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC512  0x45            PUSHI1
0xC513  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["flags"] = true;                        token.hs:195

0xC515  0x20 0x08       PUSHGLOBALB 0x08
0xC517  0x37 0x15 0x0C  PUSHIW 0x0C15
0xC51A  0x1A 0x05       PUSHIB 0x05
0xC51C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC51E  0x45            PUSHI1
0xC51F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["float"] = true;                        token.hs:196

0xC521  0x20 0x08       PUSHGLOBALB 0x08
0xC523  0x37 0x08 0x06  PUSHIW 0x0608
0xC526  0x1A 0x05       PUSHIB 0x05
0xC528  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC52A  0x45            PUSHI1
0xC52B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["int"] = true;                          token.hs:197

0xC52D  0x20 0x08       PUSHGLOBALB 0x08
0xC52F  0x37 0x30 0x02  PUSHIW 0x0230
0xC532  0x1A 0x03       PUSHIB 0x03
0xC534  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC536  0x45            PUSHI1
0xC537  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["uint"] = true;                         token.hs:198

0xC539  0x20 0x08       PUSHGLOBALB 0x08
0xC53B  0x37 0x2F 0x02  PUSHIW 0x022F
0xC53E  0x1A 0x04       PUSHIB 0x04
0xC540  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC542  0x45            PUSHI1
0xC543  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["list"] = true;                         token.hs:199

0xC545  0x20 0x08       PUSHGLOBALB 0x08
0xC547  0x37 0x4B 0x02  PUSHIW 0x024B
0xC54A  0x1A 0x04       PUSHIB 0x04
0xC54C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC54E  0x45            PUSHI1
0xC54F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["long"] = true;                         token.hs:200

0xC551  0x20 0x08       PUSHGLOBALB 0x08
0xC553  0x37 0xF7 0x05  PUSHIW 0x05F7
0xC556  0x1A 0x04       PUSHIB 0x04
0xC558  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC55A  0x45            PUSHI1
0xC55B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["pair"] = true;                         token.hs:201

0xC55D  0x20 0x08       PUSHGLOBALB 0x08
0xC55F  0x37 0xA3 0x0F  PUSHIW 0x0FA3
0xC562  0x1A 0x04       PUSHIB 0x04
0xC564  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC566  0x45            PUSHI1
0xC567  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["string"] = true;                       token.hs:202

0xC569  0x20 0x08       PUSHGLOBALB 0x08
0xC56B  0x37 0x62 0x02  PUSHIW 0x0262
0xC56E  0x1A 0x06       PUSHIB 0x06
0xC570  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC572  0x45            PUSHI1
0xC573  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["type"] = true;                         token.hs:203

0xC575  0x20 0x08       PUSHGLOBALB 0x08
0xC577  0x37 0x13 0x01  PUSHIW 0x0113
0xC57A  0x1A 0x04       PUSHIB 0x04
0xC57C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC57E  0x45            PUSHI1
0xC57F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["variant"] = true;                      token.hs:204

0xC581  0x20 0x08       PUSHGLOBALB 0x08
0xC583  0x37 0xC3 0x02  PUSHIW 0x02C3
0xC586  0x1A 0x07       PUSHIB 0x07
0xC588  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC58A  0x45            PUSHI1
0xC58B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["const"] = true;                        token.hs:206

0xC58D  0x20 0x08       PUSHGLOBALB 0x08
0xC58F  0x37 0xD3 0x04  PUSHIW 0x04D3
0xC592  0x1A 0x05       PUSHIB 0x05
0xC594  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC596  0x45            PUSHI1
0xC597  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["false"] = true;                        token.hs:207

0xC599  0x20 0x08       PUSHGLOBALB 0x08
0xC59B  0x37 0x4C 0x05  PUSHIW 0x054C
0xC59E  0x1A 0x05       PUSHIB 0x05
0xC5A0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5A2  0x45            PUSHI1
0xC5A3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["ref"] = true;                          token.hs:208

0xC5A5  0x20 0x08       PUSHGLOBALB 0x08
0xC5A7  0x37 0xE4 0x0B  PUSHIW 0x0BE4
0xC5AA  0x1A 0x03       PUSHIB 0x03
0xC5AC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5AE  0x45            PUSHI1
0xC5AF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["true"] = true;                         token.hs:209

0xC5B1  0x20 0x08       PUSHGLOBALB 0x08
0xC5B3  0x37 0xE7 0x0B  PUSHIW 0x0BE7
0xC5B6  0x1A 0x04       PUSHIB 0x04
0xC5B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5BA  0x45            PUSHI1
0xC5BB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // typeKeywords["var"] = true;                          token.hs:210

0xC5BD  0x20 0x08       PUSHGLOBALB 0x08
0xC5BF  0x37 0xC3 0x02  PUSHIW 0x02C3
0xC5C2  0x1A 0x03       PUSHIB 0x03
0xC5C4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5C6  0x45            PUSHI1
0xC5C7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#if"] = true;                     token.hs:212

0xC5C9  0x20 0x0C       PUSHGLOBALB 0x0C
0xC5CB  0x37 0x3C 0x0E  PUSHIW 0x0E3C
0xC5CE  0x1A 0x03       PUSHIB 0x03
0xC5D0  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5D2  0x45            PUSHI1
0xC5D3  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifdef"] = true;                  token.hs:213

0xC5D5  0x20 0x0C       PUSHGLOBALB 0x0C
0xC5D7  0x37 0x3C 0x0E  PUSHIW 0x0E3C
0xC5DA  0x1A 0x06       PUSHIB 0x06
0xC5DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5DE  0x45            PUSHI1
0xC5DF  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#ifndef"] = true;                 token.hs:214

0xC5E1  0x20 0x0C       PUSHGLOBALB 0x0C
0xC5E3  0x37 0x42 0x0E  PUSHIW 0x0E42
0xC5E6  0x1A 0x07       PUSHIB 0x07
0xC5E8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5EA  0x45            PUSHI1
0xC5EB  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#else"] = true;                   token.hs:215

0xC5ED  0x20 0x0C       PUSHGLOBALB 0x0C
0xC5EF  0x37 0x75 0x0E  PUSHIW 0x0E75
0xC5F2  0x1A 0x05       PUSHIB 0x05
0xC5F4  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC5F6  0x45            PUSHI1
0xC5F7  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#endif"] = true;                  token.hs:216

0xC5F9  0x20 0x0C       PUSHGLOBALB 0x0C
0xC5FB  0x37 0x18 0x01  PUSHIW 0x0118
0xC5FE  0x1A 0x06       PUSHIB 0x06
0xC600  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC602  0x45            PUSHI1
0xC603  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // directiveKeywords["#define"] = true;                 token.hs:217

0xC605  0x20 0x0C       PUSHGLOBALB 0x0C
0xC607  0x37 0x8D 0x17  PUSHIW 0x178D
0xC60A  0x1A 0x07       PUSHIB 0x07
0xC60C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC60E  0x45            PUSHI1
0xC60F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["break"] = true;                   token.hs:219

0xC611  0x20 0x0A       PUSHGLOBALB 0x0A
0xC613  0x37 0x0C 0x02  PUSHIW 0x020C
0xC616  0x1A 0x05       PUSHIB 0x05
0xC618  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC61A  0x45            PUSHI1
0xC61B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["case"] = true;                    token.hs:220

0xC61D  0x20 0x0A       PUSHGLOBALB 0x0A
0xC61F  0x37 0x6F 0x04  PUSHIW 0x046F
0xC622  0x1A 0x04       PUSHIB 0x04
0xC624  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC626  0x45            PUSHI1
0xC627  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["continue"] = true;                token.hs:221

0xC629  0x20 0x0A       PUSHGLOBALB 0x0A
0xC62B  0x37 0x11 0x02  PUSHIW 0x0211
0xC62E  0x1A 0x08       PUSHIB 0x08
0xC630  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC632  0x45            PUSHI1
0xC633  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["default"] = true;                 token.hs:222

0xC635  0x20 0x0A       PUSHGLOBALB 0x0A
0xC637  0x37 0x73 0x04  PUSHIW 0x0473
0xC63A  0x1A 0x07       PUSHIB 0x07
0xC63C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC63E  0x45            PUSHI1
0xC63F  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["embed"] = true;                   token.hs:223

0xC641  0x20 0x0A       PUSHGLOBALB 0x0A
0xC643  0x37 0x94 0x17  PUSHIW 0x1794
0xC646  0x1A 0x05       PUSHIB 0x05
0xC648  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC64A  0x45            PUSHI1
0xC64B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["else"] = true;                    token.hs:224

0xC64D  0x20 0x0A       PUSHGLOBALB 0x0A
0xC64F  0x37 0x96 0x03  PUSHIW 0x0396
0xC652  0x1A 0x04       PUSHIB 0x04
0xC654  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC656  0x45            PUSHI1
0xC657  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["for"] = true;                     token.hs:225

0xC659  0x20 0x0A       PUSHGLOBALB 0x0A
0xC65B  0x1A 0x68       PUSHIB 0x68
0xC65D  0x1A 0x03       PUSHIB 0x03
0xC65F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC661  0x45            PUSHI1
0xC662  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["foreach"] = true;                 token.hs:226

0xC664  0x20 0x0A       PUSHGLOBALB 0x0A
0xC666  0x37 0x22 0x02  PUSHIW 0x0222
0xC669  0x1A 0x07       PUSHIB 0x07
0xC66B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC66D  0x45            PUSHI1
0xC66E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["get"] = true;                     token.hs:227

0xC670  0x20 0x0A       PUSHGLOBALB 0x0A
0xC672  0x37 0xBB 0x10  PUSHIW 0x10BB
0xC675  0x1A 0x03       PUSHIB 0x03
0xC677  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC679  0x45            PUSHI1
0xC67A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["if"] = true;                      token.hs:228

0xC67C  0x20 0x0A       PUSHGLOBALB 0x0A
0xC67E  0x37 0x69 0x66  PUSHIW 0x6669
0xC681  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC683  0x45            PUSHI1
0xC684  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["in"] = true;                      token.hs:229

0xC686  0x20 0x0A       PUSHGLOBALB 0x0A
0xC688  0x37 0x69 0x6E  PUSHIW 0x6E69
0xC68B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC68D  0x45            PUSHI1
0xC68E  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["loop"] = true;                    token.hs:230

0xC690  0x20 0x0A       PUSHGLOBALB 0x0A
0xC692  0x37 0x1E 0x02  PUSHIW 0x021E
0xC695  0x1A 0x04       PUSHIB 0x04
0xC697  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC699  0x45            PUSHI1
0xC69A  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["program"] = true;                 token.hs:231

0xC69C  0x20 0x0A       PUSHGLOBALB 0x0A
0xC69E  0x37 0x99 0x17  PUSHIW 0x1799
0xC6A1  0x1A 0x07       PUSHIB 0x07
0xC6A3  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6A5  0x45            PUSHI1
0xC6A6  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["return"] = true;                  token.hs:232

0xC6A8  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6AA  0x37 0x0D 0x01  PUSHIW 0x010D
0xC6AD  0x1A 0x06       PUSHIB 0x06
0xC6AF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6B1  0x45            PUSHI1
0xC6B2  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["set"] = true;                     token.hs:233

0xC6B4  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6B6  0x37 0x6D 0x05  PUSHIW 0x056D
0xC6B9  0x1A 0x03       PUSHIB 0x03
0xC6BB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6BD  0x45            PUSHI1
0xC6BE  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["switch"] = true;                  token.hs:234

0xC6C0  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6C2  0x37 0x29 0x02  PUSHIW 0x0229
0xC6C5  0x1A 0x06       PUSHIB 0x06
0xC6C7  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6C9  0x45            PUSHI1
0xC6CA  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["system"] = true;                  token.hs:235

0xC6CC  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6CE  0x1A 0xFA       PUSHIB 0xFA
0xC6D0  0x1A 0x06       PUSHIB 0x06
0xC6D2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6D4  0x45            PUSHI1
0xC6D5  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["typeof"] = true;                  token.hs:236

0xC6D7  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6D9  0x37 0xA0 0x14  PUSHIW 0x14A0
0xC6DC  0x1A 0x06       PUSHIB 0x06
0xC6DE  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6E0  0x45            PUSHI1
0xC6E1  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["unit"] = true;                    token.hs:237

0xC6E3  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6E5  0x37 0x48 0x0C  PUSHIW 0x0C48
0xC6E8  0x1A 0x04       PUSHIB 0x04
0xC6EA  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6EC  0x45            PUSHI1
0xC6ED  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["uses"] = true;                    token.hs:238

0xC6EF  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6F1  0x37 0xA0 0x17  PUSHIW 0x17A0
0xC6F4  0x1A 0x04       PUSHIB 0x04
0xC6F6  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC6F8  0x45            PUSHI1
0xC6F9  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // statementKeywords["while"] = true;                   token.hs:239

0xC6FB  0x20 0x0A       PUSHGLOBALB 0x0A
0xC6FD  0x37 0x19 0x02  PUSHIW 0x0219
0xC700  0x1A 0x05       PUSHIB 0x05
0xC702  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC704  0x45            PUSHI1
0xC705  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    token.hs:240

0xC707  0x4A            RET0


// /source/compiler/tokens/token.hs:506
// ####  Token.New(..)  ####                                                    0x0059

0xC708  0x49            ENTER

                        // <string,string> token;                               token.hs:507

0xC709  0x1A 0x0F       PUSHIB 0x0F
0xC70B  0x1A 0x0F       PUSHIB 0x0F
0xC70D  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // token["type"] = HopperTokenToString(tokenType);

0xC70F  0x4E            PUSHLOCALB00
0xC710  0x37 0x13 0x01  PUSHIW 0x0113
0xC713  0x1A 0x04       PUSHIB 0x04
0xC715  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC717  0x1C 0xF6       PUSHLOCALB 0xF6 (BP-10)
0xC719  0x2C 0x48       CALLB 0x48     // Token.HopperTokenToString
0xC71B  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["lexeme"] = lexeme;                            token.hs:509

0xC71D  0x4E            PUSHLOCALB00
0xC71E  0x37 0x06 0x02  PUSHIW 0x0206
0xC721  0x1A 0x06       PUSHIB 0x06
0xC723  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC725  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xC727  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["line"] = ln.ToString();                       token.hs:510

0xC729  0x4E            PUSHLOCALB00
0xC72A  0x37 0x89 0x06  PUSHIW 0x0689
0xC72D  0x1A 0x04       PUSHIB 0x04
0xC72F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC731  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xC733  0x34 0x6E 0x01  CALLW 0x016E   // UInt.ToString
0xC736  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["source"] = sourcePath;                        token.hs:511

0xC738  0x4E            PUSHLOCALB00
0xC739  0x37 0x8D 0x06  PUSHIW 0x068D
0xC73C  0x1A 0x06       PUSHIB 0x06
0xC73E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC740  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC742  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // token["pos"] = pos.ToString();                       token.hs:512

0xC744  0x4E            PUSHLOCALB00
0xC745  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0xC748  0x1A 0x03       PUSHIB 0x03
0xC74A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC74C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC74E  0x24 0x38       SYSCALL0 0x38  // Long.ToString
0xC750  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // return token;                                        token.hs:513

0xC752  0x4E            PUSHLOCALB00
0xC753  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/tokens/token.hs:516
// ####  Token.ToString(..)  ####                                               0x005A


                        // HopperToken tokenType;                               token.hs:517

0xC755  0x5F 0x01       ENTERB 0x01

                        // string content = "Undefined";                        token.hs:518

0xC757  0x24 0x02       SYSCALL0 0x02  // String.New
0xC759  0x37 0x84 0x16  PUSHIW 0x1684
0xC75C  0x1A 0x09       PUSHIB 0x09
0xC75E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC760  0x5E            POPCOPYLOCALB02

                        // if (token.Count > 0)                                 token.hs:519

0xC761  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC763  0x24 0x1A       SYSCALL0 0x1A  // Dictionary.Count_Get
0xC765  0x44            PUSHI0
0xC766  0x07            GT
0xC767  0x31 0x20 0x01  JZW 0xC887 (+288)

                        // content = token["type"];                             token.hs:521

0xC76A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC76C  0x37 0x13 0x01  PUSHIW 0x0113
0xC76F  0x1A 0x04       PUSHIB 0x04
0xC771  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC773  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC775  0x5E            POPCOPYLOCALB02

                        // tokenType = Token.GetType(token);                    token.hs:522

0xC776  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC778  0x2C 0x49       CALLB 0x49     // Token.GetType
0xC77A  0x4C            POPLOCALB00

                        // switch (tokenType)                                   token.hs:523

0xC77B  0x4E            PUSHLOCALB00

                        // case HopperToken.Identifier:                         token.hs:525

0xC77C  0x1A 0x03       PUSHIB 0x03
0xC77E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC780  0x05            EQ
0xC781  0x2E 0x21       JZB 0xC7A2 (+33)

                        // content = content + " '" + token["lexeme"] + "'";

0xC783  0x4F            PUSHLOCALB02
0xC784  0x37 0x20 0x27  PUSHIW 0x2720
0xC787  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC789  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC78B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC78D  0x37 0x06 0x02  PUSHIW 0x0206
0xC790  0x1A 0x06       PUSHIB 0x06
0xC792  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC794  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC796  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC798  0x1A 0x27       PUSHIB 0x27
0xC79A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC79C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC79E  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:528

0xC79F  0x33 0xA4 0x00  JW 0xC843 (+164)

                        // case HopperToken.StringConstant:                     token.hs:529

0xC7A2  0x1A 0x0B       PUSHIB 0x0B
0xC7A4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC7A6  0x05            EQ
0xC7A7  0x2E 0x1F       JZB 0xC7C6 (+31)

                        // content = content + " \"" + token["lexeme"] + '"';

0xC7A9  0x4F            PUSHLOCALB02
0xC7AA  0x37 0x20 0x22  PUSHIW 0x2220
0xC7AD  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC7AF  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7B1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC7B3  0x37 0x06 0x02  PUSHIW 0x0206
0xC7B6  0x1A 0x06       PUSHIB 0x06
0xC7B8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC7BA  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC7BC  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7BE  0x1A 0x22       PUSHIB 0x22
0xC7C0  0x25 0x03       SYSCALL1 0x03  // String.Append
0xC7C2  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:532

0xC7C3  0x33 0x80 0x00  JW 0xC843 (+128)

                        // case HopperToken.Char:                               token.hs:533

0xC7C6  0x1A 0x08       PUSHIB 0x08
0xC7C8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC7CA  0x05            EQ
0xC7CB  0x2E 0x20       JZB 0xC7EB (+32)

                        // content = content + " '" + token["lexeme"] + "'";

0xC7CD  0x4F            PUSHLOCALB02
0xC7CE  0x37 0x20 0x27  PUSHIW 0x2720
0xC7D1  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC7D3  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7D5  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC7D7  0x37 0x06 0x02  PUSHIW 0x0206
0xC7DA  0x1A 0x06       PUSHIB 0x06
0xC7DC  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC7DE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC7E0  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7E2  0x1A 0x27       PUSHIB 0x27
0xC7E4  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC7E6  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7E8  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:536

0xC7E9  0x30 0x5A       JB 0xC843 (+90)

                        // case HopperToken.Keyword:                            token.hs:537

0xC7EB  0x1A 0x05       PUSHIB 0x05
0xC7ED  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC7EF  0x05            EQ
0xC7F0  0x2E 0x19       JZB 0xC809 (+25)

                        // content = content + " " + token["lexeme"];           token.hs:539

0xC7F2  0x4F            PUSHLOCALB02
0xC7F3  0x1A 0x20       PUSHIB 0x20
0xC7F5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC7F7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC7F9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC7FB  0x37 0x06 0x02  PUSHIW 0x0206
0xC7FE  0x1A 0x06       PUSHIB 0x06
0xC800  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC802  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC804  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC806  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:540

0xC807  0x30 0x3C       JB 0xC843 (+60)

                        // case HopperToken.Integer:                            token.hs:541

0xC809  0x1A 0x09       PUSHIB 0x09
0xC80B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC80D  0x05            EQ
0xC80E  0x2E 0x19       JZB 0xC827 (+25)

                        // content = content + " " + token["lexeme"];           token.hs:543

0xC810  0x4F            PUSHLOCALB02
0xC811  0x1A 0x20       PUSHIB 0x20
0xC813  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC815  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC817  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC819  0x37 0x06 0x02  PUSHIW 0x0206
0xC81C  0x1A 0x06       PUSHIB 0x06
0xC81E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC820  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC822  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC824  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:544

0xC825  0x30 0x1E       JB 0xC843 (+30)

                        // case HopperToken.Bool:                               token.hs:545

0xC827  0x1A 0x07       PUSHIB 0x07
0xC829  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC82B  0x05            EQ
0xC82C  0x2E 0x17       JZB 0xC843 (+23)

                        // content = content + " " + token["lexeme"];           token.hs:547

0xC82E  0x4F            PUSHLOCALB02
0xC82F  0x1A 0x20       PUSHIB 0x20
0xC831  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC833  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC835  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC837  0x37 0x06 0x02  PUSHIW 0x0206
0xC83A  0x1A 0x06       PUSHIB 0x06
0xC83C  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC83E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC840  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC842  0x5E            POPCOPYLOCALB02

                        // }                                                    token.hs:549

0xC843  0x28 0x02       DECSP 0x02

                        // content = content + "[" + token["source"] + ":" + token["line"] + "->" + token["pos"] + "]";

0xC845  0x4F            PUSHLOCALB02
0xC846  0x1A 0x5B       PUSHIB 0x5B
0xC848  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC84A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC84C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC84E  0x37 0x8D 0x06  PUSHIW 0x068D
0xC851  0x1A 0x06       PUSHIB 0x06
0xC853  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC855  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC857  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC859  0x1A 0x3A       PUSHIB 0x3A
0xC85B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC85D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC85F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC861  0x37 0x89 0x06  PUSHIW 0x0689
0xC864  0x1A 0x04       PUSHIB 0x04
0xC866  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC868  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC86A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC86C  0x37 0x2D 0x3E  PUSHIW 0x3E2D
0xC86F  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC871  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC873  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC875  0x37 0xF6 0x0B  PUSHIW 0x0BF6
0xC878  0x1A 0x03       PUSHIB 0x03
0xC87A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xC87C  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xC87E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC880  0x1A 0x5D       PUSHIB 0x5D
0xC882  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC884  0x24 0x03       SYSCALL0 0x03  // String.Append
0xC886  0x5E            POPCOPYLOCALB02

                        // return content;                                      token.hs:552

0xC887  0x4F            PUSHLOCALB02
0xC888  0x2B 0x06       RETRETB 0x06


// /source/compiler/tokens/token.hs:334
// ####  Token.TryParseHex(..)  ####                                            0x0055


                        // bool success;                                        token.hs:335

0xC88A  0x5F 0x03       ENTERB 0x03

                        // returnValue = 0;                                     token.hs:339

0xC88C  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0x"))                       token.hs:340

0xC88E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC890  0x37 0x30 0x78  PUSHIW 0x7830
0xC893  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC895  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0xC898  0x2E 0x62       JZB 0xC8FA (+98)

                        // length = content.Length;                             token.hs:344

0xC89A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC89C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xC89E  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:345

0xC89F  0x4F            PUSHLOCALB02
0xC8A0  0x1A 0x03       PUSHIB 0x03
0xC8A2  0x08            LT
0xC8A3  0x2F 0x57       JNZB 0xC8FA (+87)

                        // success = true;                                      token.hs:349

0xC8A5  0x45            PUSHI1
0xC8A6  0x4C            POPLOCALB00

                        // for (uint i=0; i < length-2; i++)                    token.hs:350

0xC8A7  0x44            PUSHI0
0xC8A8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC8AA  0x4F            PUSHLOCALB02
0xC8AB  0x1A 0x02       PUSHIB 0x02
0xC8AD  0x01            SUB
0xC8AE  0x08            LT
0xC8AF  0x2E 0x49       JZB 0xC8F8 (+73)

                        // returnValue = returnValue * 16;                      token.hs:352

0xC8B1  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xC8B3  0x1A 0x10       PUSHIB 0x10
0xC8B5  0x03            MUL
0xC8B6  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // char c = content.GetChar(i+2);                       token.hs:353

0xC8B8  0x44            PUSHI0
0xC8B9  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0xC8BC  0x1A 0x02       PUSHIB 0x02
0xC8BE  0x00            ADD
0xC8BF  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xC8C1  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (c.IsDigit())                                     token.hs:354

0xC8C3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC8C5  0x34 0x60 0x01  CALLW 0x0160   // Char.IsDigit
0xC8C8  0x2E 0x0E       JZB 0xC8D6 (+14)

                        // returnValue = returnValue + (byte(c) - 48); // 48 is ASCII for '0'

0xC8CA  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xC8CC  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC8CE  0x1A 0x30       PUSHIB 0x30
0xC8D0  0x01            SUB
0xC8D1  0x00            ADD
0xC8D2  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:357

0xC8D4  0x30 0x1E       JB 0xC8F2 (+30)

                        // else if (c.IsHexDigit())                             token.hs:358

0xC8D6  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC8D8  0x34 0x64 0x01  CALLW 0x0164   // Char.IsHexDigit
0xC8DB  0x2E 0x11       JZB 0xC8EC (+17)

                        // returnValue = returnValue + (byte(c.ToLower()) - 87); // 97 is ASCII for 'a', -97+10 = -87

0xC8DD  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xC8DF  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC8E1  0x34 0x63 0x01  CALLW 0x0163   // Char.ToLower
0xC8E4  0x1A 0x57       PUSHIB 0x57
0xC8E6  0x01            SUB
0xC8E7  0x00            ADD
0xC8E8  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:361

0xC8EA  0x30 0x08       JB 0xC8F2 (+8)

                        // success = false;                                     token.hs:364

0xC8EC  0x44            PUSHI0
0xC8ED  0x4C            POPLOCALB00

                        // break;                                               token.hs:365

0xC8EE  0x28 0x04       DECSP 0x04
0xC8F0  0x30 0x0A       JB 0xC8FA (+10)

                        // }                                                    token.hs:367

0xC8F2  0x28 0x02       DECSP 0x02
0xC8F4  0x22 0x04       INCLOCALB 0x04 (BP+4)
0xC8F6  0x30 0xB2       JB 0xC8A8 (-78)
0xC8F8  0x28 0x02       DECSP 0x02

                        // return success;                                      token.hs:370

0xC8FA  0x4E            PUSHLOCALB00
0xC8FB  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:414
// ####  Token.TryParseBinary(..)  ####                                         0x0057


                        // char c;                                              token.hs:415

0xC8FD  0x5F 0x04       ENTERB 0x04

                        // returnValue = 0;                                     token.hs:418

0xC8FF  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // if (!content.StartsWith("0b"))                       token.hs:419

0xC901  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC903  0x37 0x30 0x62  PUSHIW 0x6230
0xC906  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xC908  0x34 0x8D 0x01  CALLW 0x018D   // String.StartsWith
0xC90B  0x2F 0x05       JNZB 0xC910 (+5)

                        // return false;                                        token.hs:421

0xC90D  0x44            PUSHI0
0xC90E  0x2B 0x0A       RETRETB 0x0A

                        // length = content.Length;                             token.hs:423

0xC910  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC912  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xC914  0x4D            POPLOCALB02

                        // if (length < 3)                                      token.hs:424

0xC915  0x4F            PUSHLOCALB02
0xC916  0x1A 0x03       PUSHIB 0x03
0xC918  0x08            LT
0xC919  0x2E 0x05       JZB 0xC91E (+5)

                        // return false;                                        token.hs:426

0xC91B  0x44            PUSHI0
0xC91C  0x2B 0x0A       RETRETB 0x0A

                        // for ( ; i < length-2; i++)                           token.hs:428

0xC91E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC920  0x4F            PUSHLOCALB02
0xC921  0x1A 0x02       PUSHIB 0x02
0xC923  0x01            SUB
0xC924  0x08            LT
0xC925  0x2E 0x22       JZB 0xC947 (+34)

                        // returnValue = returnValue * 2;                       token.hs:430

0xC927  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xC929  0x1A 0x02       PUSHIB 0x02
0xC92B  0x03            MUL
0xC92C  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // c = content.GetChar(i+2);                            token.hs:431

0xC92E  0x56 0xFC 0x04  PUSHLOCALBB 0x04FC
0xC931  0x1A 0x02       PUSHIB 0x02
0xC933  0x00            ADD
0xC934  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xC936  0x4C            POPLOCALB00

                        // if (c == '1')                                        token.hs:432

0xC937  0x4E            PUSHLOCALB00
0xC938  0x1A 0x31       PUSHIB 0x31
0xC93A  0x05            EQ
0xC93B  0x2E 0x08       JZB 0xC943 (+8)

                        // returnValue = returnValue + 1;                       token.hs:434

0xC93D  0x1E 0xFE       PUSHRELB 0xFE (BP-2)
0xC93F  0x45            PUSHI1
0xC940  0x00            ADD
0xC941  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // }                                                    token.hs:436

0xC943  0x22 0x04       INCLOCALB 0x04 (BP+4)
0xC945  0x30 0xD9       JB 0xC91E (-39)

                        // return true;                                         token.hs:437

0xC947  0x45            PUSHI1
0xC948  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/tokens/token.hs:440
// ####  Token.TryParseFloat(..)  ####                                          0x0058


                        // bool success;                                        token.hs:441

0xC94A  0x5F 0x02       ENTERB 0x02

                        // long longValue;                                      token.hs:443

0xC94C  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // float floatValue;                                    token.hs:444

0xC94E  0x24 0x4C       SYSCALL0 0x4C  // Float.New

                        // string digits;                                       token.hs:445

0xC950  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (content.IndexOf('.', ref iDot))                  token.hs:448

0xC952  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC954  0x1A 0x2E       PUSHIB 0x2E
0xC956  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xC958  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xC95B  0x31 0x79 0x00  JZW 0xC9D4 (+121)

                        // digits = content.Substring(0, iDot);                 token.hs:450

0xC95E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC960  0x44            PUSHI0
0xC961  0x4F            PUSHLOCALB02
0xC962  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xC964  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:451

0xC966  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC968  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xC96A  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xC96C  0x2E 0x78       JZB 0xC9E4 (+120)

                        // floatValue = longValue.ToFloat();                    token.hs:455

0xC96E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC970  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0xC972  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // digits = content.Substring(iDot+1);                  token.hs:456

0xC974  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC976  0x4F            PUSHLOCALB02
0xC977  0x45            PUSHI1
0xC978  0x00            ADD
0xC979  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xC97B  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // uint length = digits.Length;                         token.hs:457

0xC97D  0x44            PUSHI0
0xC97E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC980  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xC982  0x1B 0x0A       POPLOCALB 0x0A (BP+10)

                        // if (length > 0)                                      token.hs:458

0xC984  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xC986  0x44            PUSHI0
0xC987  0x07            GT
0xC988  0x2E 0x46       JZB 0xC9CE (+70)

                        // if (!TryParseLong(digits, ref longValue))            token.hs:460

0xC98A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xC98C  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xC98E  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xC990  0x2F 0x06       JNZB 0xC996 (+6)

                        // break;                                               token.hs:462

0xC992  0x28 0x02       DECSP 0x02
0xC994  0x30 0x50       JB 0xC9E4 (+80)

                        // float decimalValue = longValue.ToFloat();            token.hs:464

0xC996  0x24 0x4C       SYSCALL0 0x4C  // Float.New
0xC998  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC99A  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0xC99C  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // while (length > 0)                                   token.hs:465

0xC99E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xC9A0  0x44            PUSHI0
0xC9A1  0x07            GT
0xC9A2  0x2E 0x11       JZB 0xC9B3 (+17)

                        // decimalValue = decimalValue / 10.0;                  token.hs:467

0xC9A4  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xC9A6  0x37 0xA4 0x17  PUSHIW 0x17A4
0xC9A9  0x24 0x4D       SYSCALL0 0x4D  // Float.NewFromConstant
0xC9AB  0x24 0x50       SYSCALL0 0x50  // Float.Div
0xC9AD  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // length--;                                            token.hs:468

0xC9AF  0x23 0x0A       DECLOCALB 0x0A (BP+10)

                        // }                                                    token.hs:469

0xC9B1  0x30 0xED       JB 0xC99E (-19)

                        // if (floatValue > 0)                                  token.hs:470

0xC9B3  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC9B5  0x44            PUSHI0
0xC9B6  0x24 0x34       SYSCALL0 0x34  // Int.ToFloat
0xC9B8  0x24 0x55       SYSCALL0 0x55  // Float.GT
0xC9BA  0x2E 0x0B       JZB 0xC9C5 (+11)

                        // floatValue = floatValue + decimalValue;              token.hs:472

0xC9BC  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0xC9BF  0x24 0x4E       SYSCALL0 0x4E  // Float.Add
0xC9C1  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:473

0xC9C3  0x30 0x09       JB 0xC9CC (+9)

                        // floatValue = floatValue - decimalValue;              token.hs:476

0xC9C5  0x56 0x06 0x0C  PUSHLOCALBB 0x0C06
0xC9C8  0x24 0x4F       SYSCALL0 0x4F  // Float.Sub
0xC9CA  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // }                                                    token.hs:478

0xC9CC  0x28 0x02       DECSP 0x02

                        // success = true;                                      token.hs:479

0xC9CE  0x45            PUSHI1
0xC9CF  0x4C            POPLOCALB00

                        // }                                                    token.hs:480

0xC9D0  0x28 0x02       DECSP 0x02
0xC9D2  0x30 0x12       JB 0xC9E4 (+18)

                        // if (TryParseLong(content, ref longValue))            token.hs:483

0xC9D4  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xC9D6  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xC9D8  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xC9DA  0x2E 0x0A       JZB 0xC9E4 (+10)

                        // floatValue = longValue.ToFloat();                    token.hs:485

0xC9DC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xC9DE  0x24 0x3A       SYSCALL0 0x3A  // Long.ToFloat
0xC9E0  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // success = true;                                      token.hs:486

0xC9E2  0x45            PUSHI1
0xC9E3  0x4C            POPLOCALB00

                        // if (success)                                         token.hs:491

0xC9E4  0x4E            PUSHLOCALB00
0xC9E5  0x2E 0x06       JZB 0xC9EB (+6)

                        // returnValue = floatValue;                            token.hs:493

0xC9E7  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xC9E9  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // return success;                                      token.hs:495

0xC9EB  0x4E            PUSHLOCALB00
0xC9EC  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/tokens/token.hs:268
// ####  Token.IsKeyword(..)  ####                                              0x0051

0xC9EE  0x49            ENTER

                        // return typeKeywords.Contains(candidate) || statementKeywords.Contains(candidate);

0xC9EF  0x20 0x08       PUSHGLOBALB 0x08
0xC9F1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC9F3  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xC9F5  0x27 0x00       DUP 0x00
0xC9F7  0x2F 0x09       JNZB 0xCA00 (+9)
0xC9F9  0x20 0x0A       PUSHGLOBALB 0x0A
0xC9FB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xC9FD  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xC9FF  0x0B            BOOLOR
0xCA00  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:242
// ####  Token.IsDirectiveKeyword(..)  ####                                     0x004B

0xCA02  0x49            ENTER

                        // return directiveKeywords.Contains(candidate);

0xCA03  0x20 0x0C       PUSHGLOBALB 0x0C
0xCA05  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA07  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCA09  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:254
// ####  Token.IsTypeKeyword(..)  ####                                          0x004E

0xCA0B  0x49            ENTER

                        // return typeKeywords.Contains(candidate);             token.hs:255

0xCA0C  0x20 0x08       PUSHGLOBALB 0x08
0xCA0E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA10  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCA12  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/token.hs:306
// ####  Token.TryParseInt(..)  ####                                            0x0053


                        // bool success;                                        token.hs:307

0xCA14  0x5F 0x01       ENTERB 0x01

                        // long rv;                                             token.hs:308

0xCA16  0x24 0x3D       SYSCALL0 0x3D  // Long.New

                        // if (TryParseLong(content, ref rv))                   token.hs:309

0xCA18  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCA1A  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xCA1C  0x2C 0x52       CALLB 0x52     // Token.TryParseLong
0xCA1E  0x2E 0x22       JZB 0xCA40 (+34)

                        // if ((rv >= -32768) && (rv <= 32767))                 token.hs:311

0xCA20  0x4F            PUSHLOCALB02
0xCA21  0x37 0x00 0x80  PUSHIW 0x8000
0xCA24  0x24 0x36       SYSCALL0 0x36  // UInt.ToLong
0xCA26  0x24 0x49       SYSCALL0 0x49  // Long.Negate
0xCA28  0x24 0x48       SYSCALL0 0x48  // Long.GE
0xCA2A  0x27 0x00       DUP 0x00
0xCA2C  0x2E 0x0B       JZB 0xCA37 (+11)
0xCA2E  0x4F            PUSHLOCALB02
0xCA2F  0x37 0xFF 0x7F  PUSHIW 0x7FFF
0xCA32  0x24 0x35       SYSCALL0 0x35  // Int.ToLong
0xCA34  0x24 0x46       SYSCALL0 0x46  // Long.LE
0xCA36  0x0C            BOOLAND
0xCA37  0x2E 0x09       JZB 0xCA40 (+9)

                        // returnValue = int(rv);                               token.hs:313

0xCA39  0x4F            PUSHLOCALB02
0xCA3A  0x24 0x3B       SYSCALL0 0x3B  // Long.ToInt
0xCA3C  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // success = true;                                      token.hs:314

0xCA3E  0x45            PUSHI1
0xCA3F  0x4C            POPLOCALB00

                        // return success;                                      token.hs:317

0xCA40  0x4E            PUSHLOCALB00
0xCA41  0x2B 0x08       RETRETB 0x08


// /source/compiler/tokens/token.hs:69
// ####  Token.HopperTokenToString(..)  ####                                    0x0048

0xCA43  0x49            ENTER

                        // string content;                                      token.hs:71

0xCA44  0x24 0x02       SYSCALL0 0x02  // String.New

                        // uint i;                                              token.hs:72

0xCA46  0x44            PUSHI0

                        // if (hopperTokenNames.Contains(tokenType))            token.hs:73

0xCA47  0x20 0x10       PUSHGLOBALB 0x10
0xCA49  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA4B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCA4D  0x2E 0x0B       JZB 0xCA58 (+11)

                        // content = hopperTokenNames[tokenType];               token.hs:75

0xCA4F  0x20 0x10       PUSHGLOBALB 0x10
0xCA51  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA53  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCA55  0x5D            POPCOPYLOCALB00

                        // }                                                    token.hs:76

0xCA56  0x30 0x1C       JB 0xCA72 (+28)

                        // i = uint(tokenType);                                 token.hs:79

0xCA58  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA5A  0x4D            POPLOCALB02

                        // content = "0x" + i.ToHexString(4);                   token.hs:80

0xCA5B  0x37 0x30 0x78  PUSHIW 0x7830
0xCA5E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCA60  0x4F            PUSHLOCALB02
0xCA61  0x1A 0x04       PUSHIB 0x04
0xCA63  0x34 0x71 0x01  CALLW 0x0171   // UInt.ToHexString
0xCA66  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCA68  0x5D            POPCOPYLOCALB00

                        // PrintLn("TODO : token not implemented in Token.HopperTokenToString");

0xCA69  0x37 0xA8 0x17  PUSHIW 0x17A8
0xCA6C  0x1A 0x39       PUSHIB 0x39
0xCA6E  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCA70  0x2C 0x3B       CALLB 0x3B     // Screen.PrintLn

                        // return content;                                      token.hs:83

0xCA72  0x4E            PUSHLOCALB00
0xCA73  0x2B 0x06       RETRETB 0x06


// /source/compiler/symbols.hs:1261
// ####  Symbols.AppendLocalNamesAndTypes(..)  ####                             0x00C4

0xCA75  0x49            ENTER

                        // < <string> >  appendList;                            symbols.hs:1262

0xCA76  0x1A 0x19       PUSHIB 0x19
0xCA78  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // if (fLocalNamesAndTypes.Contains(iOverload))

0xCA7A  0x20 0x56       PUSHGLOBALB 0x56
0xCA7C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCA7E  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCA80  0x2E 0x09       JZB 0xCA89 (+9)

                        // appendList = fLocalNamesAndTypes[iOverload];

0xCA82  0x20 0x56       PUSHGLOBALB 0x56
0xCA84  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCA86  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCA88  0x5D            POPCOPYLOCALB00

                        // foreach (var localNameAndType in localNamesAndTypes)

0xCA89  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCA8B  0x44            PUSHI0
0xCA8C  0x44            PUSHI0
0xCA8D  0x4F            PUSHLOCALB02
0xCA8E  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCA90  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCA92  0x05            EQ
0xCA93  0x2F 0x12       JNZB 0xCAA5 (+18)
0xCA95  0x4F            PUSHLOCALB02
0xCA96  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCA98  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCA9A  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // appendList.Append(localNameAndType);                 symbols.hs:1270

0xCA9C  0x4E            PUSHLOCALB00
0xCA9D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCA9F  0x24 0x11       SYSCALL0 0x11  // List.Append

                        // }                                                    symbols.hs:1271

0xCAA1  0x22 0x06       INCLOCALB 0x06 (BP+6)
0xCAA3  0x30 0xEA       JB 0xCA8D (-22)
0xCAA5  0x28 0x06       DECSP 0x06

                        // fLocalNamesAndTypes[iOverload] = appendList;

0xCAA7  0x20 0x56       PUSHGLOBALB 0x56
0xCAA9  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCAAB  0x4E            PUSHLOCALB00
0xCAAC  0x24 0x1B       SYSCALL0 0x1B  // Dictionary.Set

                        // }                                                    symbols.hs:1273

0xCAAE  0x2A 0x06       RETB 0x06


// /source/compiler/symbols.hs:144
// ####  Symbols.GetNamespace(..)  ####                                         0x008E

0xCAB0  0x49            ENTER

                        // string namespace;                                    symbols.hs:148

0xCAB1  0x24 0x02       SYSCALL0 0x02  // String.New

                        // foreach (var f in fIndex)                            symbols.hs:149

0xCAB3  0x20 0x4E       PUSHGLOBALB 0x4E
0xCAB5  0x1A 0x0F       PUSHIB 0x0F
0xCAB7  0x1A 0x0F       PUSHIB 0x0F
0xCAB9  0x24 0x20       SYSCALL0 0x20  // Pair.New
0xCABB  0x44            PUSHI0
0xCABC  0x4F            PUSHLOCALB02
0xCABD  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCABF  0x24 0x1E       SYSCALL0 0x1E  // Dictionary.Next
0xCAC1  0x1B 0x06       POPLOCALB 0x06 (BP+6)
0xCAC3  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0xCAC5  0x2E 0x65       JZB 0xCB2A (+101)

                        // uint index = f.value;                                symbols.hs:151

0xCAC7  0x44            PUSHI0
0xCAC8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCACA  0x24 0x24       SYSCALL0 0x24  // Pair.Value
0xCACC  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // string functionName = f.key;                         symbols.hs:152

0xCACE  0x24 0x02       SYSCALL0 0x02  // String.New
0xCAD0  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCAD2  0x24 0x22       SYSCALL0 0x22  // Pair.Key
0xCAD4  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // <uint> overloads = fOverloads[index];                symbols.hs:153

0xCAD6  0x1A 0x04       PUSHIB 0x04
0xCAD8  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xCADA  0x20 0x50       PUSHGLOBALB 0x50
0xCADC  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCADE  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCAE0  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // foreach (var overload in overloads)                  symbols.hs:154

0xCAE2  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xCAE4  0x44            PUSHI0
0xCAE5  0x44            PUSHI0
0xCAE6  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xCAE8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCAEA  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xCAEC  0x05            EQ
0xCAED  0x2F 0x2C       JNZB 0xCB19 (+44)
0xCAEF  0x56 0x0E 0x12  PUSHLOCALBB 0x120E
0xCAF2  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCAF4  0x1B 0x10       POPLOCALB 0x10 (BP+16)

                        // if (overload == oi)                                  symbols.hs:156

0xCAF6  0x56 0x10 0xFE  PUSHLOCALBB 0xFE10
0xCAF9  0x05            EQ
0xCAFA  0x2E 0x1B       JZB 0xCB15 (+27)

                        // namespace = functionName;                            symbols.hs:158

0xCAFC  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xCAFE  0x5D            POPCOPYLOCALB00

                        // uint iDot;                                           symbols.hs:159

0xCAFF  0x44            PUSHI0

                        // if (namespace.IndexOf('.', ref iDot))                symbols.hs:160

0xCB00  0x4E            PUSHLOCALB00
0xCB01  0x1A 0x2E       PUSHIB 0x2E
0xCB03  0x21 0x14       PUSHSTACKADDRB 0x14 (BP+20)
0xCB05  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xCB08  0x2E 0x09       JZB 0xCB11 (+9)

                        // namespace = namespace.Substring(0, iDot);            symbols.hs:162

0xCB0A  0x4E            PUSHLOCALB00
0xCB0B  0x44            PUSHI0
0xCB0C  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xCB0E  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xCB10  0x5D            POPCOPYLOCALB00

                        // break;                                               symbols.hs:164

0xCB11  0x28 0x08       DECSP 0x08
0xCB13  0x30 0x08       JB 0xCB1B (+8)

                        // }                                                    symbols.hs:166

0xCB15  0x22 0x12       INCLOCALB 0x12 (BP+18)
0xCB17  0x30 0xCF       JB 0xCAE6 (-49)
0xCB19  0x28 0x06       DECSP 0x06

                        // if (namespace.Length > 0)                            symbols.hs:167

0xCB1B  0x4E            PUSHLOCALB00
0xCB1C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xCB1E  0x44            PUSHI0
0xCB1F  0x07            GT
0xCB20  0x2E 0x06       JZB 0xCB26 (+6)

                        // break;                                               symbols.hs:169

0xCB22  0x28 0x0C       DECSP 0x0C
0xCB24  0x30 0x08       JB 0xCB2C (+8)

                        // }                                                    symbols.hs:171

0xCB26  0x28 0x06       DECSP 0x06
0xCB28  0x30 0x94       JB 0xCABC (-108)
0xCB2A  0x28 0x06       DECSP 0x06

                        // return namespace;                                    symbols.hs:172

0xCB2C  0x4E            PUSHLOCALB00
0xCB2D  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:418
// ####  Symbols.IsEnumType(..)  ####                                           0x00A4


                        // bool isEnum = false;                                 symbols.hs:419

0xCB2F  0x5F 0x02       ENTERB 0x02

                        // if (!name.Contains('.') && (name.Length != 0))

0xCB31  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCB33  0x1A 0x2E       PUSHIB 0x2E
0xCB35  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xCB38  0x41            BOOLNOT
0xCB39  0x27 0x00       DUP 0x00
0xCB3B  0x2E 0x09       JZB 0xCB44 (+9)
0xCB3D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCB3F  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xCB41  0x44            PUSHI0
0xCB42  0x06            NE
0xCB43  0x0C            BOOLAND
0xCB44  0x31 0xA5 0x00  JZW 0xCBE9 (+165)

                        // string candidate = currentNamespace + "." + name;

0xCB47  0x24 0x02       SYSCALL0 0x02  // String.New
0xCB49  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCB4B  0x1A 0x2E       PUSHIB 0x2E
0xCB4D  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCB4F  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCB51  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCB53  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCB55  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:426

0xCB57  0x20 0x7A       PUSHGLOBALB 0x7A
0xCB59  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCB5B  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCB5D  0x2E 0x06       JZB 0xCB63 (+6)

                        // winner++;                                            symbols.hs:428

0xCB5F  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isEnum = true;                                       symbols.hs:429

0xCB61  0x45            PUSHI1
0xCB62  0x4C            POPLOCALB00

                        // if (flIndex.Contains(candidate))                     symbols.hs:431

0xCB63  0x20 0x80       PUSHGLOBALB 0x80
0xCB65  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCB67  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCB69  0x2E 0x04       JZB 0xCB6D (+4)

                        // winner++;                                            symbols.hs:433

0xCB6B  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(candidate))                     symbols.hs:435

0xCB6D  0x20 0x6C       PUSHGLOBALB 0x6C
0xCB6F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCB71  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCB73  0x2E 0x04       JZB 0xCB77 (+4)

                        // winner++;                                            symbols.hs:437

0xCB75  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (isEnum && (winner == 1))                         symbols.hs:439

0xCB77  0x4E            PUSHLOCALB00
0xCB78  0x27 0x00       DUP 0x00
0xCB7A  0x2E 0x06       JZB 0xCB80 (+6)
0xCB7C  0x4F            PUSHLOCALB02
0xCB7D  0x45            PUSHI1
0xCB7E  0x05            EQ
0xCB7F  0x0C            BOOLAND
0xCB80  0x2E 0x07       JZB 0xCB87 (+7)

                        // break; // don't look at other namespaces if current wins

0xCB82  0x28 0x02       DECSP 0x02
0xCB84  0x33 0x85 0x00  JW 0xCC09 (+133)

                        // char f = name[0];                                    symbols.hs:443

0xCB87  0x44            PUSHI0
0xCB88  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCB8A  0x44            PUSHI0
0xCB8B  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xCB8D  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (f.IsUpper())                                     symbols.hs:444

0xCB8F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCB91  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xCB94  0x2E 0x51       JZB 0xCBE5 (+81)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:446

0xCB96  0x20 0x8C       PUSHGLOBALB 0x8C
0xCB98  0x44            PUSHI0
0xCB99  0x44            PUSHI0
0xCB9A  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCB9C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCB9E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xCBA0  0x05            EQ
0xCBA1  0x2F 0x42       JNZB 0xCBE3 (+66)
0xCBA3  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0xCBA6  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCBA8  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (currentNamespace == nameSpace)                   symbols.hs:448

0xCBAA  0x56 0xFE 0x0A  PUSHLOCALBB 0x0AFE
0xCBAD  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xCBAF  0x2E 0x30       JZB 0xCBDF (+48)

                        // candidate = nameSpace + "." + name;                  symbols.hs:452

0xCBB1  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xCBB3  0x1A 0x2E       PUSHIB 0x2E
0xCBB5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCBB7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCBB9  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCBBB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCBBD  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:453

0xCBBF  0x20 0x7A       PUSHGLOBALB 0x7A
0xCBC1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCBC3  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCBC5  0x2E 0x06       JZB 0xCBCB (+6)

                        // winner++;                                            symbols.hs:455

0xCBC7  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isEnum = true;                                       symbols.hs:456

0xCBC9  0x45            PUSHI1
0xCBCA  0x4C            POPLOCALB00

                        // if (flIndex.Contains(candidate))                     symbols.hs:458

0xCBCB  0x20 0x80       PUSHGLOBALB 0x80
0xCBCD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCBCF  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCBD1  0x2E 0x04       JZB 0xCBD5 (+4)

                        // winner++;                                            symbols.hs:460

0xCBD3  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(candidate))                     symbols.hs:462

0xCBD5  0x20 0x6C       PUSHGLOBALB 0x6C
0xCBD7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCBD9  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCBDB  0x2E 0x04       JZB 0xCBDF (+4)

                        // winner++;                                            symbols.hs:464

0xCBDD  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    symbols.hs:466

0xCBDF  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0xCBE1  0x30 0xB9       JB 0xCB9A (-71)
0xCBE3  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:468

0xCBE5  0x28 0x04       DECSP 0x04
0xCBE7  0x30 0x22       JB 0xCC09 (+34)

                        // if (eIndex.Contains(name))                           symbols.hs:470

0xCBE9  0x20 0x7A       PUSHGLOBALB 0x7A
0xCBEB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCBED  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCBEF  0x2E 0x06       JZB 0xCBF5 (+6)

                        // winner++;                                            symbols.hs:472

0xCBF1  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isEnum = true;                                       symbols.hs:473

0xCBF3  0x45            PUSHI1
0xCBF4  0x4C            POPLOCALB00

                        // if (flIndex.Contains(name))                          symbols.hs:475

0xCBF5  0x20 0x80       PUSHGLOBALB 0x80
0xCBF7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCBF9  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCBFB  0x2E 0x04       JZB 0xCBFF (+4)

                        // winner++;                                            symbols.hs:477

0xCBFD  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(name))                          symbols.hs:479

0xCBFF  0x20 0x6C       PUSHGLOBALB 0x6C
0xCC01  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCC03  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCC05  0x2E 0x04       JZB 0xCC09 (+4)

                        // winner++;                                            symbols.hs:481

0xCC07  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (winner > 1)                                      symbols.hs:485

0xCC09  0x4F            PUSHLOCALB02
0xCC0A  0x45            PUSHI1
0xCC0B  0x07            GT
0xCC0C  0x2E 0x0D       JZB 0xCC19 (+13)

                        // Parser.ErrorAtCurrent("ambiguous undecorated named type name");

0xCC0E  0x37 0xE1 0x17  PUSHIW 0x17E1
0xCC11  0x1A 0x25       PUSHIB 0x25
0xCC13  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCC15  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // isEnum = false;                                      symbols.hs:488

0xCC17  0x44            PUSHI0
0xCC18  0x4C            POPLOCALB00

                        // return isEnum;                                       symbols.hs:490

0xCC19  0x4E            PUSHLOCALB00
0xCC1A  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:493
// ####  Symbols.IsFlagsType(..)  ####                                          0x00A5


                        // bool isFlags = false;                                symbols.hs:494

0xCC1C  0x5F 0x02       ENTERB 0x02

                        // if (!name.Contains('.') && (name.Length != 0))

0xCC1E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCC20  0x1A 0x2E       PUSHIB 0x2E
0xCC22  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xCC25  0x41            BOOLNOT
0xCC26  0x27 0x00       DUP 0x00
0xCC28  0x2E 0x09       JZB 0xCC31 (+9)
0xCC2A  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCC2C  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xCC2E  0x44            PUSHI0
0xCC2F  0x06            NE
0xCC30  0x0C            BOOLAND
0xCC31  0x31 0xA5 0x00  JZW 0xCCD6 (+165)

                        // string candidate = currentNamespace + "." + name;

0xCC34  0x24 0x02       SYSCALL0 0x02  // String.New
0xCC36  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCC38  0x1A 0x2E       PUSHIB 0x2E
0xCC3A  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCC3C  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCC3E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCC40  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCC42  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:501

0xCC44  0x20 0x7A       PUSHGLOBALB 0x7A
0xCC46  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCC48  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCC4A  0x2E 0x04       JZB 0xCC4E (+4)

                        // winner++;                                            symbols.hs:503

0xCC4C  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(candidate))                     symbols.hs:505

0xCC4E  0x20 0x80       PUSHGLOBALB 0x80
0xCC50  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCC52  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCC54  0x2E 0x06       JZB 0xCC5A (+6)

                        // winner++;                                            symbols.hs:507

0xCC56  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isFlags = true;                                      symbols.hs:508

0xCC58  0x45            PUSHI1
0xCC59  0x4C            POPLOCALB00

                        // if (fdNames.Contains(candidate))                     symbols.hs:510

0xCC5A  0x20 0x6C       PUSHGLOBALB 0x6C
0xCC5C  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCC5E  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCC60  0x2E 0x04       JZB 0xCC64 (+4)

                        // winner++;                                            symbols.hs:512

0xCC62  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (isFlags && (winner == 1))                        symbols.hs:514

0xCC64  0x4E            PUSHLOCALB00
0xCC65  0x27 0x00       DUP 0x00
0xCC67  0x2E 0x06       JZB 0xCC6D (+6)
0xCC69  0x4F            PUSHLOCALB02
0xCC6A  0x45            PUSHI1
0xCC6B  0x05            EQ
0xCC6C  0x0C            BOOLAND
0xCC6D  0x2E 0x07       JZB 0xCC74 (+7)

                        // break; // don't look at other namespaces if current wins

0xCC6F  0x28 0x02       DECSP 0x02
0xCC71  0x33 0x85 0x00  JW 0xCCF6 (+133)

                        // char f = name[0];                                    symbols.hs:519

0xCC74  0x44            PUSHI0
0xCC75  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCC77  0x44            PUSHI0
0xCC78  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xCC7A  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (f.IsUpper())                                     symbols.hs:520

0xCC7C  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCC7E  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xCC81  0x2E 0x51       JZB 0xCCD2 (+81)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:522

0xCC83  0x20 0x8C       PUSHGLOBALB 0x8C
0xCC85  0x44            PUSHI0
0xCC86  0x44            PUSHI0
0xCC87  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCC89  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCC8B  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xCC8D  0x05            EQ
0xCC8E  0x2F 0x42       JNZB 0xCCD0 (+66)
0xCC90  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0xCC93  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCC95  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (currentNamespace == nameSpace)                   symbols.hs:524

0xCC97  0x56 0xFE 0x0A  PUSHLOCALBB 0x0AFE
0xCC9A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xCC9C  0x2E 0x30       JZB 0xCCCC (+48)

                        // candidate = nameSpace + "." + name;                  symbols.hs:528

0xCC9E  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xCCA0  0x1A 0x2E       PUSHIB 0x2E
0xCCA2  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCCA4  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCCA6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCCA8  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCCAA  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:529

0xCCAC  0x20 0x7A       PUSHGLOBALB 0x7A
0xCCAE  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCCB0  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCCB2  0x2E 0x04       JZB 0xCCB6 (+4)

                        // winner++;                                            symbols.hs:531

0xCCB4  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(candidate))                     symbols.hs:533

0xCCB6  0x20 0x80       PUSHGLOBALB 0x80
0xCCB8  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCCBA  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCCBC  0x2E 0x06       JZB 0xCCC2 (+6)

                        // winner++;                                            symbols.hs:535

0xCCBE  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isFlags = true;                                      symbols.hs:536

0xCCC0  0x45            PUSHI1
0xCCC1  0x4C            POPLOCALB00

                        // if (fdNames.Contains(candidate))                     symbols.hs:538

0xCCC2  0x20 0x6C       PUSHGLOBALB 0x6C
0xCCC4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCCC6  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCCC8  0x2E 0x04       JZB 0xCCCC (+4)

                        // winner++;                                            symbols.hs:540

0xCCCA  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // }                                                    symbols.hs:542

0xCCCC  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0xCCCE  0x30 0xB9       JB 0xCC87 (-71)
0xCCD0  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:544

0xCCD2  0x28 0x04       DECSP 0x04
0xCCD4  0x30 0x22       JB 0xCCF6 (+34)

                        // if (eIndex.Contains(name))                           symbols.hs:546

0xCCD6  0x20 0x7A       PUSHGLOBALB 0x7A
0xCCD8  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCCDA  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCCDC  0x2E 0x04       JZB 0xCCE0 (+4)

                        // winner++;                                            symbols.hs:548

0xCCDE  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(name))                          symbols.hs:550

0xCCE0  0x20 0x80       PUSHGLOBALB 0x80
0xCCE2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCCE4  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCCE6  0x2E 0x06       JZB 0xCCEC (+6)

                        // winner++;                                            symbols.hs:552

0xCCE8  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isFlags = true;                                      symbols.hs:553

0xCCEA  0x45            PUSHI1
0xCCEB  0x4C            POPLOCALB00

                        // if (fdNames.Contains(name))                          symbols.hs:555

0xCCEC  0x20 0x6C       PUSHGLOBALB 0x6C
0xCCEE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCCF0  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCCF2  0x2E 0x04       JZB 0xCCF6 (+4)

                        // winner++;                                            symbols.hs:557

0xCCF4  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (winner > 1)                                      symbols.hs:561

0xCCF6  0x4F            PUSHLOCALB02
0xCCF7  0x45            PUSHI1
0xCCF8  0x07            GT
0xCCF9  0x2E 0x0D       JZB 0xCD06 (+13)

                        // Parser.ErrorAtCurrent("ambiguous undecorated named type name");

0xCCFB  0x37 0xE1 0x17  PUSHIW 0x17E1
0xCCFE  0x1A 0x25       PUSHIB 0x25
0xCD00  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCD02  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // isFlags = false;                                     symbols.hs:564

0xCD04  0x44            PUSHI0
0xCD05  0x4C            POPLOCALB00

                        // return isFlags;                                      symbols.hs:566

0xCD06  0x4E            PUSHLOCALB00
0xCD07  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:398
// ####  Symbols.GetNameSpaces(..)  ####                                        0x00A2

0xCD09  0x49            ENTER

                        // return nameSpaces;                                   symbols.hs:399

0xCD0A  0x20 0x8C       PUSHGLOBALB 0x8C
0xCD0C  0x4A            RET0


// /source/compiler/symbols.hs:570
// ####  Symbols.QualifyMethodName(..)  ####                                    0x00A6

0xCD0D  0x49            ENTER

                        // if (!name.Contains('.'))                             symbols.hs:571

0xCD0E  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD10  0x1A 0x2E       PUSHIB 0x2E
0xCD12  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xCD15  0x32 0x7B 0x00  JNZW 0xCD90 (+123)

                        // string candidate = currentNamespace + "." + name;

0xCD18  0x24 0x02       SYSCALL0 0x02  // String.New
0xCD1A  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCD1C  0x1A 0x2E       PUSHIB 0x2E
0xCD1E  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCD20  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCD22  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD24  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCD26  0x5D            POPCOPYLOCALB00

                        // if (fNames.Contains(candidate))                      symbols.hs:576

0xCD27  0x20 0x4C       PUSHGLOBALB 0x4C
0xCD29  0x4E            PUSHLOCALB00
0xCD2A  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCD2C  0x2E 0x09       JZB 0xCD35 (+9)

                        // name = candidate;                                    symbols.hs:578

0xCD2E  0x4E            PUSHLOCALB00
0xCD2F  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:579

0xCD31  0x28 0x02       DECSP 0x02
0xCD33  0x30 0x5D       JB 0xCD90 (+93)

                        // char f = name[0];                                    symbols.hs:581

0xCD35  0x44            PUSHI0
0xCD36  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD38  0x44            PUSHI0
0xCD39  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xCD3B  0x4D            POPLOCALB02

                        // if (f.IsUpper())                                     symbols.hs:582

0xCD3C  0x4F            PUSHLOCALB02
0xCD3D  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xCD40  0x2E 0x4E       JZB 0xCD8E (+78)

                        // uint winner = 0;                                     symbols.hs:584

0xCD42  0x44            PUSHI0

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:585

0xCD43  0x20 0x8C       PUSHGLOBALB 0x8C
0xCD45  0x44            PUSHI0
0xCD46  0x44            PUSHI0
0xCD47  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCD49  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCD4B  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xCD4D  0x05            EQ
0xCD4E  0x2F 0x2D       JNZB 0xCD7B (+45)
0xCD50  0x56 0x06 0x0A  PUSHLOCALBB 0x0A06
0xCD53  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCD55  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // if (nameSpace == currentNamespace)                   symbols.hs:587

0xCD57  0x56 0x08 0xFE  PUSHLOCALBB 0xFE08
0xCD5A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xCD5C  0x2E 0x1B       JZB 0xCD77 (+27)

                        // candidate = nameSpace + "." + name;                  symbols.hs:591

0xCD5E  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCD60  0x1A 0x2E       PUSHIB 0x2E
0xCD62  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCD64  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCD66  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD68  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCD6A  0x5D            POPCOPYLOCALB00

                        // if (fNames.Contains(candidate))                      symbols.hs:592

0xCD6B  0x20 0x4C       PUSHGLOBALB 0x4C
0xCD6D  0x4E            PUSHLOCALB00
0xCD6E  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCD70  0x2E 0x07       JZB 0xCD77 (+7)

                        // name = candidate;                                    symbols.hs:594

0xCD72  0x4E            PUSHLOCALB00
0xCD73  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // winner++;                                            symbols.hs:595

0xCD75  0x22 0x04       INCLOCALB 0x04 (BP+4)

                        // }                                                    symbols.hs:597

0xCD77  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0xCD79  0x30 0xCE       JB 0xCD47 (-50)
0xCD7B  0x28 0x06       DECSP 0x06

                        // if (winner > 1)                                      symbols.hs:598

0xCD7D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCD7F  0x45            PUSHI1
0xCD80  0x07            GT
0xCD81  0x2E 0x0B       JZB 0xCD8C (+11)

                        // Parser.ErrorAtCurrent("ambiguous undecorated named function or method name");

0xCD83  0x37 0x06 0x18  PUSHIW 0x1806
0xCD86  0x1A 0x33       PUSHIB 0x33
0xCD88  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCD8A  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // }                                                    symbols.hs:602

0xCD8C  0x28 0x02       DECSP 0x02

                        // break;                                               symbols.hs:603

0xCD8E  0x28 0x04       DECSP 0x04

                        // return name;                                         symbols.hs:606

0xCD90  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD92  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:610
// ####  Symbols.QualifyDelegate(..)  ####                                      0x00A7

0xCD94  0x49            ENTER

                        // if (!name.Contains('.'))                             symbols.hs:611

0xCD95  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCD97  0x1A 0x2E       PUSHIB 0x2E
0xCD99  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xCD9C  0x32 0x6B 0x00  JNZW 0xCE07 (+107)

                        // string candidate = currentNamespace + "." + name;

0xCD9F  0x24 0x02       SYSCALL0 0x02  // String.New
0xCDA1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCDA3  0x1A 0x2E       PUSHIB 0x2E
0xCDA5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCDA7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCDA9  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCDAB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCDAD  0x5D            POPCOPYLOCALB00

                        // if (fdNames.Contains(candidate))                     symbols.hs:616

0xCDAE  0x20 0x6C       PUSHGLOBALB 0x6C
0xCDB0  0x4E            PUSHLOCALB00
0xCDB1  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCDB3  0x2E 0x09       JZB 0xCDBC (+9)

                        // name = candidate;                                    symbols.hs:618

0xCDB5  0x4E            PUSHLOCALB00
0xCDB6  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:619

0xCDB8  0x28 0x02       DECSP 0x02
0xCDBA  0x30 0x4D       JB 0xCE07 (+77)

                        // char f = name[0];                                    symbols.hs:621

0xCDBC  0x44            PUSHI0
0xCDBD  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCDBF  0x44            PUSHI0
0xCDC0  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xCDC2  0x4D            POPLOCALB02

                        // if (f.IsUpper())                                     symbols.hs:622

0xCDC3  0x4F            PUSHLOCALB02
0xCDC4  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xCDC7  0x2E 0x3E       JZB 0xCE05 (+62)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:624

0xCDC9  0x20 0x8C       PUSHGLOBALB 0x8C
0xCDCB  0x44            PUSHI0
0xCDCC  0x44            PUSHI0
0xCDCD  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCDCF  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCDD1  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCDD3  0x05            EQ
0xCDD4  0x2F 0x2F       JNZB 0xCE03 (+47)
0xCDD6  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0xCDD9  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCDDB  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (nameSpace == currentNamespace)                   symbols.hs:626

0xCDDD  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0xCDE0  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xCDE2  0x2E 0x1D       JZB 0xCDFF (+29)

                        // candidate = nameSpace + "." + name;                  symbols.hs:630

0xCDE4  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCDE6  0x1A 0x2E       PUSHIB 0x2E
0xCDE8  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCDEA  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCDEC  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCDEE  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCDF0  0x5D            POPCOPYLOCALB00

                        // if (fdNames.Contains(candidate))                     symbols.hs:631

0xCDF1  0x20 0x6C       PUSHGLOBALB 0x6C
0xCDF3  0x4E            PUSHLOCALB00
0xCDF4  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCDF6  0x2E 0x09       JZB 0xCDFF (+9)

                        // name = candidate;                                    symbols.hs:633

0xCDF8  0x4E            PUSHLOCALB00
0xCDF9  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:634

0xCDFB  0x28 0x06       DECSP 0x06
0xCDFD  0x30 0x08       JB 0xCE05 (+8)

                        // }                                                    symbols.hs:636

0xCDFF  0x22 0x08       INCLOCALB 0x08 (BP+8)
0xCE01  0x30 0xCC       JB 0xCDCD (-52)
0xCE03  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:638

0xCE05  0x28 0x04       DECSP 0x04

                        // return name;                                         symbols.hs:641

0xCE07  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE09  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:715
// ####  Symbols.IsDelegateType(..)  ####                                       0x00AA


                        // bool isDelegate = false;                             symbols.hs:716

0xCE0B  0x5F 0x02       ENTERB 0x02

                        // if (!name.Contains('.') && (name.Length != 0))

0xCE0D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE0F  0x1A 0x2E       PUSHIB 0x2E
0xCE11  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xCE14  0x41            BOOLNOT
0xCE15  0x27 0x00       DUP 0x00
0xCE17  0x2E 0x09       JZB 0xCE20 (+9)
0xCE19  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE1B  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xCE1D  0x44            PUSHI0
0xCE1E  0x06            NE
0xCE1F  0x0C            BOOLAND
0xCE20  0x31 0xA5 0x00  JZW 0xCEC5 (+165)

                        // string candidate = currentNamespace + "." + name;

0xCE23  0x24 0x02       SYSCALL0 0x02  // String.New
0xCE25  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCE27  0x1A 0x2E       PUSHIB 0x2E
0xCE29  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCE2B  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCE2D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE2F  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCE31  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:723

0xCE33  0x20 0x7A       PUSHGLOBALB 0x7A
0xCE35  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCE37  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCE39  0x2E 0x04       JZB 0xCE3D (+4)

                        // winner++;                                            symbols.hs:725

0xCE3B  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(candidate))                     symbols.hs:727

0xCE3D  0x20 0x80       PUSHGLOBALB 0x80
0xCE3F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCE41  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCE43  0x2E 0x04       JZB 0xCE47 (+4)

                        // winner++;                                            symbols.hs:729

0xCE45  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(candidate))                     symbols.hs:731

0xCE47  0x20 0x6C       PUSHGLOBALB 0x6C
0xCE49  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCE4B  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCE4D  0x2E 0x06       JZB 0xCE53 (+6)

                        // winner++;                                            symbols.hs:733

0xCE4F  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isDelegate = true;                                   symbols.hs:734

0xCE51  0x45            PUSHI1
0xCE52  0x4C            POPLOCALB00

                        // if (isDelegate && (winner == 1))                     symbols.hs:736

0xCE53  0x4E            PUSHLOCALB00
0xCE54  0x27 0x00       DUP 0x00
0xCE56  0x2E 0x06       JZB 0xCE5C (+6)
0xCE58  0x4F            PUSHLOCALB02
0xCE59  0x45            PUSHI1
0xCE5A  0x05            EQ
0xCE5B  0x0C            BOOLAND
0xCE5C  0x2E 0x07       JZB 0xCE63 (+7)

                        // break; // don't look at other namespaces if current wins

0xCE5E  0x28 0x02       DECSP 0x02
0xCE60  0x33 0x85 0x00  JW 0xCEE5 (+133)

                        // char f = name[0];                                    symbols.hs:741

0xCE63  0x44            PUSHI0
0xCE64  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE66  0x44            PUSHI0
0xCE67  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xCE69  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // if (f.IsUpper())                                     symbols.hs:742

0xCE6B  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xCE6D  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xCE70  0x2E 0x51       JZB 0xCEC1 (+81)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:744

0xCE72  0x20 0x8C       PUSHGLOBALB 0x8C
0xCE74  0x44            PUSHI0
0xCE75  0x44            PUSHI0
0xCE76  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCE78  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCE7A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xCE7C  0x05            EQ
0xCE7D  0x2F 0x42       JNZB 0xCEBF (+66)
0xCE7F  0x56 0x08 0x0C  PUSHLOCALBB 0x0C08
0xCE82  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCE84  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (currentNamespace == nameSpace)                   symbols.hs:746

0xCE86  0x56 0xFE 0x0A  PUSHLOCALBB 0x0AFE
0xCE89  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xCE8B  0x2E 0x30       JZB 0xCEBB (+48)

                        // candidate = nameSpace + "." + name;                  symbols.hs:750

0xCE8D  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xCE8F  0x1A 0x2E       PUSHIB 0x2E
0xCE91  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xCE93  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCE95  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCE97  0x24 0x03       SYSCALL0 0x03  // String.Append
0xCE99  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (eIndex.Contains(candidate))                      symbols.hs:751

0xCE9B  0x20 0x7A       PUSHGLOBALB 0x7A
0xCE9D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCE9F  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCEA1  0x2E 0x04       JZB 0xCEA5 (+4)

                        // winner++;                                            symbols.hs:753

0xCEA3  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(candidate))                     symbols.hs:755

0xCEA5  0x20 0x80       PUSHGLOBALB 0x80
0xCEA7  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCEA9  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCEAB  0x2E 0x04       JZB 0xCEAF (+4)

                        // winner++;                                            symbols.hs:757

0xCEAD  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(candidate))                     symbols.hs:759

0xCEAF  0x20 0x6C       PUSHGLOBALB 0x6C
0xCEB1  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCEB3  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCEB5  0x2E 0x06       JZB 0xCEBB (+6)

                        // winner++;                                            symbols.hs:761

0xCEB7  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isDelegate = true;                                   symbols.hs:762

0xCEB9  0x45            PUSHI1
0xCEBA  0x4C            POPLOCALB00

                        // }                                                    symbols.hs:764

0xCEBB  0x22 0x0C       INCLOCALB 0x0C (BP+12)
0xCEBD  0x30 0xB9       JB 0xCE76 (-71)
0xCEBF  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:766

0xCEC1  0x28 0x04       DECSP 0x04
0xCEC3  0x30 0x22       JB 0xCEE5 (+34)

                        // if (eIndex.Contains(name))                           symbols.hs:768

0xCEC5  0x20 0x7A       PUSHGLOBALB 0x7A
0xCEC7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCEC9  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCECB  0x2E 0x04       JZB 0xCECF (+4)

                        // winner++;                                            symbols.hs:770

0xCECD  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (flIndex.Contains(name))                          symbols.hs:772

0xCECF  0x20 0x80       PUSHGLOBALB 0x80
0xCED1  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCED3  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCED5  0x2E 0x04       JZB 0xCED9 (+4)

                        // winner++;                                            symbols.hs:774

0xCED7  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // if (fdNames.Contains(name))                          symbols.hs:776

0xCED9  0x20 0x6C       PUSHGLOBALB 0x6C
0xCEDB  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xCEDD  0x24 0x18       SYSCALL0 0x18  // List.Contains
0xCEDF  0x2E 0x06       JZB 0xCEE5 (+6)

                        // winner++;                                            symbols.hs:778

0xCEE1  0x22 0x02       INCLOCALB 0x02 (BP+2)

                        // isDelegate = true;                                   symbols.hs:779

0xCEE3  0x45            PUSHI1
0xCEE4  0x4C            POPLOCALB00

                        // if (winner > 1)                                      symbols.hs:783

0xCEE5  0x4F            PUSHLOCALB02
0xCEE6  0x45            PUSHI1
0xCEE7  0x07            GT
0xCEE8  0x2E 0x0D       JZB 0xCEF5 (+13)

                        // Parser.ErrorAtCurrent("ambiguous undecorated named type name");

0xCEEA  0x37 0xE1 0x17  PUSHIW 0x17E1
0xCEED  0x1A 0x25       PUSHIB 0x25
0xCEEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCEF1  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // isDelegate = false;                                  symbols.hs:786

0xCEF3  0x44            PUSHI0
0xCEF4  0x4C            POPLOCALB00

                        // return isDelegate;                                   symbols.hs:788

0xCEF5  0x4E            PUSHLOCALB00
0xCEF6  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:918
// ####  Symbols.GetSysCallIndex(..)  ####                                      0x00B3

0xCEF8  0x49            ENTER

                        // return fSysCall[iOverload];                          symbols.hs:919

0xCEF9  0x20 0x5E       PUSHGLOBALB 0x5E
0xCEFB  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCEFD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCEFF  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:922
// ####  Symbols.GetSysCallOverload(..)  ####                                   0x00B4

0xCF01  0x49            ENTER

                        // return fSysCallOverload[iOverload];                  symbols.hs:923

0xCF02  0x20 0x60       PUSHGLOBALB 0x60
0xCF04  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCF06  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF08  0x2B 0x02       RETRETB 0x02


// /source/compiler/symbols.hs:319
// ####  Symbols.ConstantExists(..)  ####                                       0x0098


                        // bool exists = false;                                 symbols.hs:320

0xCF0A  0x5F 0x01       ENTERB 0x01

                        // if (cValues.Contains(name))                          symbols.hs:321

0xCF0C  0x20 0x8A       PUSHGLOBALB 0x8A
0xCF0E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCF10  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCF12  0x2E 0x04       JZB 0xCF16 (+4)

                        // exists = true;                                       symbols.hs:323

0xCF14  0x45            PUSHI1
0xCF15  0x4C            POPLOCALB00

                        // return exists;                                       symbols.hs:325

0xCF16  0x4E            PUSHLOCALB00
0xCF17  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:1001
// ####  Symbols.GetFunctionDelegateOverloads(..)  ####                         0x00BC

0xCF19  0x49            ENTER

                        // <uint> overloads = fdOverloads[fdIndex];             symbols.hs:1002

0xCF1A  0x1A 0x04       PUSHIB 0x04
0xCF1C  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xCF1E  0x20 0x70       PUSHGLOBALB 0x70
0xCF20  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCF22  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF24  0x5D            POPCOPYLOCALB00

                        // return overloads;                                    symbols.hs:1003

0xCF25  0x4E            PUSHLOCALB00
0xCF26  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:964
// ####  Symbols.GetDelegateArguments(..)  ####                                 0x00BA

0xCF28  0x49            ENTER

                        // < < string > > arguments = fdArgumentNamesAndTypes[iOverload];

0xCF29  0x1A 0x19       PUSHIB 0x19
0xCF2B  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xCF2D  0x20 0x74       PUSHGLOBALB 0x74
0xCF2F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCF31  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF33  0x5D            POPCOPYLOCALB00

                        // return arguments;                                    symbols.hs:966

0xCF34  0x4E            PUSHLOCALB00
0xCF35  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:958
// ####  Symbols.GetDelegateReturnType(..)  ####                                0x00B9

0xCF37  0x49            ENTER

                        // string returnType = fdReturnTypes[iOverload];

0xCF38  0x24 0x02       SYSCALL0 0x02  // String.New
0xCF3A  0x20 0x72       PUSHGLOBALB 0x72
0xCF3C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCF3E  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF40  0x5D            POPCOPYLOCALB00

                        // return returnType;                                   symbols.hs:960

0xCF41  0x4E            PUSHLOCALB00
0xCF42  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:222
// ####  Symbols.FindEnum(..)  ####                                             0x0091


                        // bool found = false;                                  symbols.hs:223

0xCF44  0x5F 0x01       ENTERB 0x01

                        // if (eIndex.Contains(enumName))                       symbols.hs:224

0xCF46  0x20 0x7A       PUSHGLOBALB 0x7A
0xCF48  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xCF4A  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCF4C  0x2E 0x29       JZB 0xCF75 (+41)

                        // uint index = eIndex[enumName];                       symbols.hs:226

0xCF4E  0x44            PUSHI0
0xCF4F  0x20 0x7A       PUSHGLOBALB 0x7A
0xCF51  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xCF53  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF55  0x4D            POPLOCALB02

                        // <string,uint> members = eMembers[index];             symbols.hs:227

0xCF56  0x1A 0x0F       PUSHIB 0x0F
0xCF58  0x1A 0x04       PUSHIB 0x04
0xCF5A  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xCF5C  0x20 0x7C       PUSHGLOBALB 0x7C
0xCF5E  0x4F            PUSHLOCALB02
0xCF5F  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF61  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (members.Contains(memberName))                    symbols.hs:228

0xCF63  0x56 0x04 0xFC  PUSHLOCALBB 0xFC04
0xCF66  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCF68  0x2E 0x0B       JZB 0xCF73 (+11)

                        // value = members[memberName];                         symbols.hs:230

0xCF6A  0x56 0x04 0xFC  PUSHLOCALBB 0xFC04
0xCF6D  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF6F  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // found = true;                                        symbols.hs:231

0xCF71  0x45            PUSHI1
0xCF72  0x4C            POPLOCALB00

                        // }                                                    symbols.hs:233

0xCF73  0x28 0x04       DECSP 0x04

                        // return found;                                        symbols.hs:234

0xCF75  0x4E            PUSHLOCALB00
0xCF76  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:272
// ####  Symbols.FindFlags(..)  ####                                            0x0093


                        // bool found = false;                                  symbols.hs:273

0xCF78  0x5F 0x01       ENTERB 0x01

                        // if (flIndex.Contains(flagsName))                     symbols.hs:274

0xCF7A  0x20 0x80       PUSHGLOBALB 0x80
0xCF7C  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xCF7E  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCF80  0x2E 0x29       JZB 0xCFA9 (+41)

                        // uint index = flIndex[flagsName];                     symbols.hs:276

0xCF82  0x44            PUSHI0
0xCF83  0x20 0x80       PUSHGLOBALB 0x80
0xCF85  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xCF87  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF89  0x4D            POPLOCALB02

                        // <string,uint> members = flMembers[index];            symbols.hs:277

0xCF8A  0x1A 0x0F       PUSHIB 0x0F
0xCF8C  0x1A 0x04       PUSHIB 0x04
0xCF8E  0x24 0x19       SYSCALL0 0x19  // Dictionary.New
0xCF90  0x20 0x82       PUSHGLOBALB 0x82
0xCF92  0x4F            PUSHLOCALB02
0xCF93  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCF95  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (members.Contains(memberName))                    symbols.hs:278

0xCF97  0x56 0x04 0xFC  PUSHLOCALBB 0xFC04
0xCF9A  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCF9C  0x2E 0x0B       JZB 0xCFA7 (+11)

                        // value = members[memberName];                         symbols.hs:280

0xCF9E  0x56 0x04 0xFC  PUSHLOCALBB 0xFC04
0xCFA1  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCFA3  0x1D 0xFE       POPRELB 0xFE (BP-2)

                        // found = true;                                        symbols.hs:281

0xCFA5  0x45            PUSHI1
0xCFA6  0x4C            POPLOCALB00

                        // }                                                    symbols.hs:283

0xCFA7  0x28 0x04       DECSP 0x04

                        // return found;                                        symbols.hs:284

0xCFA9  0x4E            PUSHLOCALB00
0xCFAA  0x2B 0x08       RETRETB 0x08


// /source/compiler/symbols.hs:328
// ####  Symbols.GetConstantValue(..)  ####                                     0x0099

0xCFAC  0x49            ENTER

                        // string value;                                        symbols.hs:329

0xCFAD  0x24 0x02       SYSCALL0 0x02  // String.New

                        // if (ConstantExists(name))                            symbols.hs:330

0xCFAF  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCFB1  0x2C 0x98       CALLB 0x98     // Symbols.ConstantExists
0xCFB3  0x2E 0x09       JZB 0xCFBC (+9)

                        // value = cValues[name];                               symbols.hs:332

0xCFB5  0x20 0x8A       PUSHGLOBALB 0x8A
0xCFB7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xCFB9  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCFBB  0x5D            POPCOPYLOCALB00

                        // return value;                                        symbols.hs:334

0xCFBC  0x4E            PUSHLOCALB00
0xCFBD  0x2B 0x04       RETRETB 0x04


// /source/system/color.hs:34
// ####  Color.MatrixGreen_Get(..)  ####                                        0x01E5

0xCFBF  0x49            ENTER

                        // uint MatrixGreen         { get { return 0x7F7; } }

0xCFC0  0x37 0xF7 0x07  PUSHIW 0x07F7
0xCFC3  0x4A            RET0


// /source/compiler/codegen/block.hs:425
// ####  Block.GetType(..)  ####                                                0x015A

0xCFC4  0x49            ENTER

                        // string typeString;                                   block.hs:426

0xCFC5  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string name;                                         block.hs:427

0xCFC7  0x24 0x02       SYSCALL0 0x02  // String.New

                        // <string,variant> blockContext;                       block.hs:428

0xCFC9  0x1A 0x0F       PUSHIB 0x0F
0xCFCB  0x1A 0x14       PUSHIB 0x14
0xCFCD  0x24 0x19       SYSCALL0 0x19  // Dictionary.New

                        // < <string> > members;                                block.hs:429

0xCFCF  0x1A 0x19       PUSHIB 0x19
0xCFD1  0x24 0x0F       SYSCALL0 0x0F  // List.New

                        // uint iCurrent = blockList.Length;                    block.hs:430

0xCFD3  0x44            PUSHI0
0xCFD4  0x20 0xB2       PUSHGLOBALB 0xB2
0xCFD6  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xCFD8  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // if (iCurrent == 0)                                   block.hs:433

0xCFDA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCFDC  0x31 0xF0 0x00  JZW 0xD0CC (+240)

                        // iCurrent--;                                          block.hs:437

0xCFDF  0x23 0x08       DECLOCALB 0x08 (BP+8)

                        // blockContext = blockList[iCurrent];                  block.hs:439

0xCFE1  0x20 0xB2       PUSHGLOBALB 0xB2
0xCFE3  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xCFE5  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xCFE7  0x57 0x04       POPCOPYLOCALB 0x04 (BP+4)

                        // if (blockContext.Contains("arguments"))              block.hs:440

0xCFE9  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCFEB  0x1A 0x5E       PUSHIB 0x5E
0xCFED  0x1A 0x09       PUSHIB 0x09
0xCFEF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCFF1  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xCFF3  0x2E 0x40       JZB 0xD033 (+64)

                        // members = blockContext["arguments"];                 block.hs:443

0xCFF5  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xCFF7  0x1A 0x5E       PUSHIB 0x5E
0xCFF9  0x1A 0x09       PUSHIB 0x09
0xCFFB  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xCFFD  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xCFFF  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var argument in members)                    block.hs:444

0xD001  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD003  0x44            PUSHI0
0xD004  0x44            PUSHI0
0xD005  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD007  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD009  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD00B  0x05            EQ
0xD00C  0x2F 0x25       JNZB 0xD031 (+37)
0xD00E  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0xD011  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD013  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // name = argument[2];                                  block.hs:446

0xD015  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD017  0x1A 0x02       PUSHIB 0x02
0xD019  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD01B  0x5E            POPCOPYLOCALB02

                        // if (name == identifier)                              block.hs:447

0xD01C  0x4F            PUSHLOCALB02
0xD01D  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD01F  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD021  0x2F 0x0C       JNZB 0xD02D (+12)

                        // typeString = argument[1];                            block.hs:449

0xD023  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD025  0x45            PUSHI1
0xD026  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD028  0x5D            POPCOPYLOCALB00

                        // break;                                               block.hs:450

0xD029  0x28 0x06       DECSP 0x06
0xD02B  0x30 0x08       JB 0xD033 (+8)

                        // }                                                    block.hs:452

0xD02D  0x22 0x0E       INCLOCALB 0x0E (BP+14)
0xD02F  0x30 0xD6       JB 0xD005 (-42)
0xD031  0x28 0x06       DECSP 0x06

                        // if (blockContext.Contains("locals"))                 block.hs:454

0xD033  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD035  0x37 0x69 0x01  PUSHIW 0x0169
0xD038  0x1A 0x06       PUSHIB 0x06
0xD03A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD03C  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD03E  0x2E 0x40       JZB 0xD07E (+64)

                        // members = blockContext["locals"];                    block.hs:457

0xD040  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD042  0x37 0x69 0x01  PUSHIW 0x0169
0xD045  0x1A 0x06       PUSHIB 0x06
0xD047  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD049  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xD04B  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var local in members)                       block.hs:458

0xD04D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD04F  0x44            PUSHI0
0xD050  0x44            PUSHI0
0xD051  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD053  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD055  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD057  0x05            EQ
0xD058  0x2F 0x24       JNZB 0xD07C (+36)
0xD05A  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0xD05D  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD05F  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // name = local[1];                                     block.hs:460

0xD061  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD063  0x45            PUSHI1
0xD064  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD066  0x5E            POPCOPYLOCALB02

                        // if (name == identifier)                              block.hs:461

0xD067  0x4F            PUSHLOCALB02
0xD068  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD06A  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD06C  0x2F 0x0C       JNZB 0xD078 (+12)

                        // typeString = local[0];                               block.hs:463

0xD06E  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD070  0x44            PUSHI0
0xD071  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD073  0x5D            POPCOPYLOCALB00

                        // break;                                               block.hs:464

0xD074  0x28 0x06       DECSP 0x06
0xD076  0x30 0x08       JB 0xD07E (+8)

                        // }                                                    block.hs:466

0xD078  0x22 0x0E       INCLOCALB 0x0E (BP+14)
0xD07A  0x30 0xD7       JB 0xD051 (-41)
0xD07C  0x28 0x06       DECSP 0x06

                        // if (blockContext.Contains("globals"))                block.hs:468

0xD07E  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD080  0x37 0x6F 0x01  PUSHIW 0x016F
0xD083  0x1A 0x07       PUSHIB 0x07
0xD085  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD087  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD089  0x2E 0x40       JZB 0xD0C9 (+64)

                        // members = blockContext["globals"];                   block.hs:471

0xD08B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD08D  0x37 0x6F 0x01  PUSHIW 0x016F
0xD090  0x1A 0x07       PUSHIB 0x07
0xD092  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD094  0x24 0x1D       SYSCALL0 0x1D  // Dictionary.Get
0xD096  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // foreach (var global in members)                      block.hs:472

0xD098  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD09A  0x44            PUSHI0
0xD09B  0x44            PUSHI0
0xD09C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD09E  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD0A0  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD0A2  0x05            EQ
0xD0A3  0x2F 0x24       JNZB 0xD0C7 (+36)
0xD0A5  0x56 0x0A 0x0E  PUSHLOCALBB 0x0E0A
0xD0A8  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD0AA  0x57 0x0C       POPCOPYLOCALB 0x0C (BP+12)

                        // name = global[1];                                    block.hs:474

0xD0AC  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD0AE  0x45            PUSHI1
0xD0AF  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD0B1  0x5E            POPCOPYLOCALB02

                        // if (name == identifier)                              block.hs:475

0xD0B2  0x4F            PUSHLOCALB02
0xD0B3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD0B5  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD0B7  0x2F 0x0C       JNZB 0xD0C3 (+12)

                        // typeString = global[0];                              block.hs:477

0xD0B9  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD0BB  0x44            PUSHI0
0xD0BC  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD0BE  0x5D            POPCOPYLOCALB00

                        // break;                                               block.hs:478

0xD0BF  0x28 0x06       DECSP 0x06
0xD0C1  0x30 0x08       JB 0xD0C9 (+8)

                        // }                                                    block.hs:480

0xD0C3  0x22 0x0E       INCLOCALB 0x0E (BP+14)
0xD0C5  0x30 0xD7       JB 0xD09C (-41)
0xD0C7  0x28 0x06       DECSP 0x06

                        // }                                                    block.hs:482

0xD0C9  0x33 0x11 0xFF  JW 0xCFDA (-239)

                        // return typeString;                                   block.hs:483

0xD0CC  0x4E            PUSHLOCALB00
0xD0CD  0x2B 0x0C       RETRETB 0x0C


// /source/compiler/types.hs:610
// ####  Types.GetArraySizeFromCollection(..)  ####                             0x00E0


                        // uint fb;                                             types.hs:611

0xD0CF  0x5F 0x03       ENTERB 0x03

                        // if (!collectionType.IndexOf('[', ref fb))            types.hs:614

0xD0D1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD0D3  0x1A 0x5B       PUSHIB 0x5B
0xD0D5  0x21 0x00       PUSHSTACKADDRB 0x00 (BP+0)
0xD0D7  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xD0DA  0x2F 0x15       JNZB 0xD0EF (+21)

                        // Parser.ErrorAtCurrent("invalid array type '" + collectionType + "'");

0xD0DC  0x37 0x39 0x18  PUSHIW 0x1839
0xD0DF  0x1A 0x14       PUSHIB 0x14
0xD0E1  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD0E3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD0E5  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD0E7  0x1A 0x27       PUSHIB 0x27
0xD0E9  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD0EB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD0ED  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // string szs = collectionType.Substring(fb+1);

0xD0EF  0x24 0x02       SYSCALL0 0x02  // String.New
0xD0F1  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD0F3  0x4E            PUSHLOCALB00
0xD0F4  0x45            PUSHI1
0xD0F5  0x00            ADD
0xD0F6  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xD0F8  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (!szs.IndexOf(']', ref lb))                       types.hs:619

0xD0FA  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD0FC  0x1A 0x5D       PUSHIB 0x5D
0xD0FE  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xD100  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xD103  0x2F 0x15       JNZB 0xD118 (+21)

                        // Parser.ErrorAtCurrent("invalid array type '" + collectionType + "'");

0xD105  0x37 0x39 0x18  PUSHIW 0x1839
0xD108  0x1A 0x14       PUSHIB 0x14
0xD10A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD10C  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD10E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD110  0x1A 0x27       PUSHIB 0x27
0xD112  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD114  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD116  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // szs = szs.Substring(0, lb);                          types.hs:623

0xD118  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD11A  0x44            PUSHI0
0xD11B  0x4F            PUSHLOCALB02
0xD11C  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xD11E  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (!Token.TryParseUInt(szs, ref sz))                types.hs:624

0xD120  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD122  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xD124  0x2C 0x54       CALLB 0x54     // Token.TryParseUInt
0xD126  0x2F 0x15       JNZB 0xD13B (+21)

                        // Parser.ErrorAtCurrent("invalid array type '" + collectionType + "'");

0xD128  0x37 0x39 0x18  PUSHIW 0x1839
0xD12B  0x1A 0x14       PUSHIB 0x14
0xD12D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD12F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD131  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD133  0x1A 0x27       PUSHIB 0x27
0xD135  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD137  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD139  0x2C 0x7E       CALLB 0x7E     // Parser.ErrorAtCurrent

                        // return sz;                                           types.hs:628

0xD13B  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD13D  0x2B 0x0A       RETRETB 0x0A


// /source/compiler/types.hs:811
// ####  Types.QualifyDelegateName(..)  ####                                    0x00EA

0xD13F  0x49            ENTER

                        // return Symbols.QualifyDelegate(identifier, currentNamespace);

0xD140  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD142  0x20 0x98       PUSHGLOBALB 0x98
0xD144  0x2C 0xA7       CALLB 0xA7     // Symbols.QualifyDelegate
0xD146  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:955
// ####  Types.FindOverload(..)  ####                                           0x00F0


                        // uint iOverloadFound;                                 types.hs:956

0xD148  0x5F 0x04       ENTERB 0x04

                        // if (Symbols.GetFunctionIndex(functionName, ref fIndex))

0xD14A  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD14C  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xD14E  0x2C 0xAE       CALLB 0xAE     // Symbols.GetFunctionIndex
0xD150  0x2E 0x6C       JZB 0xD1BC (+108)

                        // foundName = true;                                    types.hs:965

0xD152  0x45            PUSHI1
0xD153  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // <uint> overloads = Symbols.GetFunctionOverloads(fIndex);

0xD155  0x1A 0x04       PUSHIB 0x04
0xD157  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xD159  0x4F            PUSHLOCALB02
0xD15A  0x2C 0xAF       CALLB 0xAF     // Symbols.GetFunctionOverloads
0xD15C  0x57 0x08       POPCOPYLOCALB 0x08 (BP+8)

                        // for (uint pass = 0; pass < 3; pass++)                types.hs:967

0xD15E  0x44            PUSHI0
0xD15F  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD161  0x1A 0x03       PUSHIB 0x03
0xD163  0x08            LT
0xD164  0x2E 0x54       JZB 0xD1B8 (+84)

                        // foreach (var iOverload in overloads)                 types.hs:969

0xD166  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xD168  0x44            PUSHI0
0xD169  0x44            PUSHI0
0xD16A  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD16C  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD16E  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xD170  0x05            EQ
0xD171  0x2F 0x39       JNZB 0xD1AA (+57)
0xD173  0x56 0x0C 0x10  PUSHLOCALBB 0x100C
0xD176  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD178  0x1B 0x0E       POPLOCALB 0x0E (BP+14)

                        // < < string > > overloadArguments = Symbols.GetOverloadArguments(iOverload);

0xD17A  0x1A 0x19       PUSHIB 0x19
0xD17C  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xD17E  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD180  0x2C 0xB8       CALLB 0xB8     // Symbols.GetOverloadArguments
0xD182  0x57 0x12       POPCOPYLOCALB 0x12 (BP+18)

                        // if (ArgumentsEqual(arguments, overloadArguments, (pass == 2), (pass != 0)))

0xD184  0x56 0xFC 0x12  PUSHLOCALBB 0x12FC
0xD187  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD189  0x1A 0x02       PUSHIB 0x02
0xD18B  0x05            EQ
0xD18C  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD18E  0x44            PUSHI0
0xD18F  0x06            NE
0xD190  0x2C 0xEF       CALLB 0xEF     // Types.ArgumentsEqual
0xD192  0x2E 0x12       JZB 0xD1A4 (+18)

                        // found = true;                                        types.hs:974

0xD194  0x45            PUSHI1
0xD195  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // iOverloadFound = iOverload;                          types.hs:975

0xD197  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD199  0x4C            POPLOCALB00

                        // returnType = GetOverloadReturnType(iOverload);

0xD19A  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD19C  0x2C 0xB7       CALLB 0xB7     // Symbols.GetOverloadReturnType
0xD19E  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // break;                                               types.hs:983

0xD1A0  0x28 0x08       DECSP 0x08
0xD1A2  0x30 0x0A       JB 0xD1AC (+10)

                        // }                                                    types.hs:985

0xD1A4  0x28 0x02       DECSP 0x02
0xD1A6  0x22 0x10       INCLOCALB 0x10 (BP+16)
0xD1A8  0x30 0xC2       JB 0xD16A (-62)
0xD1AA  0x28 0x06       DECSP 0x06

                        // if (found)                                           types.hs:986

0xD1AC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD1AE  0x2E 0x06       JZB 0xD1B4 (+6)

                        // break;                                               types.hs:988

0xD1B0  0x28 0x02       DECSP 0x02
0xD1B2  0x30 0x08       JB 0xD1BA (+8)

                        // }                                                    types.hs:990

0xD1B4  0x22 0x0A       INCLOCALB 0x0A (BP+10)
0xD1B6  0x30 0xA9       JB 0xD15F (-87)
0xD1B8  0x28 0x02       DECSP 0x02

                        // }                                                    types.hs:991

0xD1BA  0x28 0x02       DECSP 0x02

                        // if (!found)                                          types.hs:992

0xD1BC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD1BE  0x32 0x0F 0x01  JNZW 0xD2CD (+271)

                        // string qualifiedName;                                types.hs:995

0xD1C1  0x24 0x02       SYSCALL0 0x02  // String.New

                        // string variableType = Types.GetTypeString(functionName, false, ref qualifiedName);

0xD1C3  0x24 0x02       SYSCALL0 0x02  // String.New
0xD1C5  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD1C7  0x44            PUSHI0
0xD1C8  0x21 0x08       PUSHSTACKADDRB 0x08 (BP+8)
0xD1CA  0x2C 0xF1       CALLB 0xF1     // Types.GetTypeString
0xD1CC  0x57 0x0A       POPCOPYLOCALB 0x0A (BP+10)

                        // if (variableType.Length > 0)                         types.hs:997

0xD1CE  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD1D0  0x24 0x06       SYSCALL0 0x06  // String.Length_Get
0xD1D2  0x44            PUSHI0
0xD1D3  0x07            GT
0xD1D4  0x31 0xCB 0x00  JZW 0xD29F (+203)

                        // if (!Types.IsDelegate(variableType))                 types.hs:999

0xD1D7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD1D9  0x2C 0xED       CALLB 0xED     // Types.IsDelegate
0xD1DB  0x2F 0x1B       JNZB 0xD1F6 (+27)

                        // Parser.Error("function expected, (not variable '" + functionName + "')");

0xD1DD  0x37 0x4D 0x18  PUSHIW 0x184D
0xD1E0  0x1A 0x22       PUSHIB 0x22
0xD1E2  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD1E4  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD1E6  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD1E8  0x37 0x27 0x29  PUSHIW 0x2927
0xD1EB  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD1ED  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD1EF  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               types.hs:1002

0xD1F1  0x28 0x0A       DECSP 0x0A
0xD1F3  0x33 0xDC 0x00  JW 0xD2CF (+220)

                        // uint fdIndex;                                        types.hs:1004

0xD1F6  0x44            PUSHI0

                        // if (!Symbols.GetFunctionDelegateIndex(variableType, ref fdIndex))

0xD1F7  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD1F9  0x21 0x0C       PUSHSTACKADDRB 0x0C (BP+12)
0xD1FB  0x2C 0xBB       CALLB 0xBB     // Symbols.GetFunctionDelegateIndex
0xD1FD  0x2F 0x10       JNZB 0xD20D (+16)

                        // Parser.Error("delegate definition not found");

0xD1FF  0x37 0x6F 0x18  PUSHIW 0x186F
0xD202  0x1A 0x1D       PUSHIB 0x1D
0xD204  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD206  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // break;                                               types.hs:1009

0xD208  0x28 0x0C       DECSP 0x0C
0xD20A  0x33 0xC5 0x00  JW 0xD2CF (+197)

                        // <uint> overloads = Symbols.GetFunctionDelegateOverloads(fdIndex);

0xD20D  0x1A 0x04       PUSHIB 0x04
0xD20F  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xD211  0x1C 0x0C       PUSHLOCALB 0x0C (BP+12)
0xD213  0x2C 0xBC       CALLB 0xBC     // Symbols.GetFunctionDelegateOverloads
0xD215  0x57 0x0E       POPCOPYLOCALB 0x0E (BP+14)

                        // for (uint pass = 0; pass < 3; pass++)                types.hs:1012

0xD217  0x44            PUSHI0
0xD218  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xD21A  0x1A 0x03       PUSHIB 0x03
0xD21C  0x08            LT
0xD21D  0x2E 0x54       JZB 0xD271 (+84)

                        // foreach (var iOverload in overloads)                 types.hs:1014

0xD21F  0x1C 0x0E       PUSHLOCALB 0x0E (BP+14)
0xD221  0x44            PUSHI0
0xD222  0x44            PUSHI0
0xD223  0x1C 0x12       PUSHLOCALB 0x12 (BP+18)
0xD225  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD227  0x1C 0x16       PUSHLOCALB 0x16 (BP+22)
0xD229  0x05            EQ
0xD22A  0x2F 0x39       JNZB 0xD263 (+57)
0xD22C  0x56 0x12 0x16  PUSHLOCALBB 0x1612
0xD22F  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD231  0x1B 0x14       POPLOCALB 0x14 (BP+20)

                        // < < string > > overloadArguments = Symbols.GetDelegateArguments(iOverload);

0xD233  0x1A 0x19       PUSHIB 0x19
0xD235  0x24 0x0F       SYSCALL0 0x0F  // List.New
0xD237  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xD239  0x2C 0xBA       CALLB 0xBA     // Symbols.GetDelegateArguments
0xD23B  0x57 0x18       POPCOPYLOCALB 0x18 (BP+24)

                        // if (ArgumentsEqual(arguments, overloadArguments, (pass == 2), (pass != 0)))

0xD23D  0x56 0xFC 0x18  PUSHLOCALBB 0x18FC
0xD240  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xD242  0x1A 0x02       PUSHIB 0x02
0xD244  0x05            EQ
0xD245  0x1C 0x10       PUSHLOCALB 0x10 (BP+16)
0xD247  0x44            PUSHI0
0xD248  0x06            NE
0xD249  0x2C 0xEF       CALLB 0xEF     // Types.ArgumentsEqual
0xD24B  0x2E 0x12       JZB 0xD25D (+18)

                        // found = true;                                        types.hs:1019

0xD24D  0x45            PUSHI1
0xD24E  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // iOverloadFound = iOverload;                          types.hs:1020

0xD250  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xD252  0x4C            POPLOCALB00

                        // returnType = GetDelegateReturnType(iOverload);

0xD253  0x1C 0x14       PUSHLOCALB 0x14 (BP+20)
0xD255  0x2C 0xB9       CALLB 0xB9     // Symbols.GetDelegateReturnType
0xD257  0x58 0xFE       POPCOPYRELB 0xFE (BP-2)

                        // break;                                               types.hs:1022

0xD259  0x28 0x08       DECSP 0x08
0xD25B  0x30 0x0A       JB 0xD265 (+10)

                        // }                                                    types.hs:1024

0xD25D  0x28 0x02       DECSP 0x02
0xD25F  0x22 0x16       INCLOCALB 0x16 (BP+22)
0xD261  0x30 0xC2       JB 0xD223 (-62)
0xD263  0x28 0x06       DECSP 0x06

                        // if (found)                                           types.hs:1025

0xD265  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD267  0x2E 0x06       JZB 0xD26D (+6)

                        // break;                                               types.hs:1027

0xD269  0x28 0x02       DECSP 0x02
0xD26B  0x30 0x08       JB 0xD273 (+8)

                        // }                                                    types.hs:1029

0xD26D  0x22 0x10       INCLOCALB 0x10 (BP+16)
0xD26F  0x30 0xA9       JB 0xD218 (-87)
0xD271  0x28 0x02       DECSP 0x02

                        // if (found)                                           types.hs:1030

0xD273  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD275  0x2E 0x06       JZB 0xD27B (+6)

                        // break;                                               types.hs:1032

0xD277  0x28 0x0E       DECSP 0x0E
0xD279  0x30 0x56       JB 0xD2CF (+86)

                        // Parser.Error("no matching delegate '"+ variableType +"' overload found for '" + functionName + "'");

0xD27B  0x37 0x8C 0x18  PUSHIW 0x188C
0xD27E  0x1A 0x16       PUSHIB 0x16
0xD280  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD282  0x1C 0x0A       PUSHLOCALB 0x0A (BP+10)
0xD284  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD286  0x37 0xA2 0x18  PUSHIW 0x18A2
0xD289  0x1A 0x16       PUSHIB 0x16
0xD28B  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD28D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD28F  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD291  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD293  0x1A 0x27       PUSHIB 0x27
0xD295  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD297  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD299  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    types.hs:1035

0xD29B  0x28 0x04       DECSP 0x04
0xD29D  0x30 0x2E       JB 0xD2CB (+46)

                        // else if (foundName)                                  types.hs:1036

0xD29F  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD2A1  0x2E 0x17       JZB 0xD2B8 (+23)

                        // Parser.Error("no matching overload found for '" + functionName + "'");

0xD2A3  0x37 0xB8 0x18  PUSHIW 0x18B8
0xD2A6  0x1A 0x20       PUSHIB 0x20
0xD2A8  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD2AA  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD2AC  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD2AE  0x1A 0x27       PUSHIB 0x27
0xD2B0  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD2B2  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD2B4  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    types.hs:1040

0xD2B6  0x30 0x15       JB 0xD2CB (+21)

                        // Parser.Error("'" + functionName + "' is not defined");

0xD2B8  0x1A 0x27       PUSHIB 0x27
0xD2BA  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD2BC  0x1C 0xFA       PUSHLOCALB 0xFA (BP-6)
0xD2BE  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD2C0  0x37 0x90 0x14  PUSHIW 0x1490
0xD2C3  0x1A 0x10       PUSHIB 0x10
0xD2C5  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD2C7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD2C9  0x2C 0x7C       CALLB 0x7C     // Parser.Error

                        // }                                                    types.hs:1045

0xD2CB  0x28 0x04       DECSP 0x04

                        // break;                                               types.hs:1046

0xD2CD  0x28 0x06       DECSP 0x06

                        // return iOverloadFound;                               types.hs:1048

0xD2CF  0x4E            PUSHLOCALB00
0xD2D0  0x2B 0x08       RETRETB 0x08


// /source/compiler/types.hs:343
// ####  Types.IsEqualityType(..)  ####                                         0x00DA


                        // bool isEquality;                                     types.hs:344

0xD2D2  0x5F 0x01       ENTERB 0x01

                        // if (IsOrdinalType(typeString))                       types.hs:345

0xD2D4  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD2D6  0x2C 0xD8       CALLB 0xD8     // Types.IsOrdinalType
0xD2D8  0x2E 0x06       JZB 0xD2DE (+6)

                        // isEquality = true;                                   types.hs:347

0xD2DA  0x45            PUSHI1
0xD2DB  0x4C            POPLOCALB00

                        // }                                                    types.hs:348

0xD2DC  0x30 0x4B       JB 0xD327 (+75)

                        // else if (IsBitwiseType(typeString))                  types.hs:349

0xD2DE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD2E0  0x2C 0xD9       CALLB 0xD9     // Types.IsBitwiseType
0xD2E2  0x2E 0x06       JZB 0xD2E8 (+6)

                        // isEquality = true;                                   types.hs:351

0xD2E4  0x45            PUSHI1
0xD2E5  0x4C            POPLOCALB00

                        // }                                                    types.hs:352

0xD2E6  0x30 0x41       JB 0xD327 (+65)

                        // else if ((typeString == "bool") || (typeString == "enum") || (typeString == "type"))

0xD2E8  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD2EA  0x37 0x6F 0x03  PUSHIW 0x036F
0xD2ED  0x1A 0x04       PUSHIB 0x04
0xD2EF  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD2F1  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD2F3  0x44            PUSHI0
0xD2F4  0x05            EQ
0xD2F5  0x27 0x00       DUP 0x00
0xD2F7  0x2F 0x22       JNZB 0xD319 (+34)
0xD2F9  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD2FB  0x37 0x09 0x0C  PUSHIW 0x0C09
0xD2FE  0x1A 0x04       PUSHIB 0x04
0xD300  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD302  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD304  0x44            PUSHI0
0xD305  0x05            EQ
0xD306  0x0B            BOOLOR
0xD307  0x27 0x00       DUP 0x00
0xD309  0x2F 0x10       JNZB 0xD319 (+16)
0xD30B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD30D  0x37 0x13 0x01  PUSHIW 0x0113
0xD310  0x1A 0x04       PUSHIB 0x04
0xD312  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD314  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD316  0x44            PUSHI0
0xD317  0x05            EQ
0xD318  0x0B            BOOLOR
0xD319  0x2E 0x06       JZB 0xD31F (+6)

                        // isEquality = true;                                   types.hs:355

0xD31B  0x45            PUSHI1
0xD31C  0x4C            POPLOCALB00

                        // }                                                    types.hs:356

0xD31D  0x30 0x0A       JB 0xD327 (+10)

                        // else if (IsEnum(typeString))                         types.hs:357

0xD31F  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD321  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xD323  0x2E 0x04       JZB 0xD327 (+4)

                        // isEquality = true;                                   types.hs:359

0xD325  0x45            PUSHI1
0xD326  0x4C            POPLOCALB00

                        // return isEquality;                                   types.hs:361

0xD327  0x4E            PUSHLOCALB00
0xD328  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:310
// ####  Types.AutomaticUpCastNext(..)  ####                                    0x00D5

0xD32A  0x49            ENTER

                        // return AutomaticUpCast(actualType, desiredType, false, true);

0xD32B  0x56 0xFC 0xFE  PUSHLOCALBB 0xFEFC
0xD32E  0x44            PUSHI0
0xD32F  0x45            PUSHI1
0xD330  0x2C 0xD3       CALLB 0xD3     // Types.AutomaticUpCast
0xD332  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:331
// ####  Types.IsBitwiseType(..)  ####                                          0x00D9


                        // bool isBitwise;                                      types.hs:333

0xD334  0x5F 0x01       ENTERB 0x01

                        // string valueTypes = "|byte|uint|int|+int|-int|flags|";

0xD336  0x24 0x02       SYSCALL0 0x02  // String.New
0xD338  0x37 0xD8 0x18  PUSHIW 0x18D8
0xD33B  0x1A 0x1F       PUSHIB 0x1F
0xD33D  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD33F  0x5E            POPCOPYLOCALB02

                        // isBitwise = valueTypes.Contains("|" + typeString + "|");

0xD340  0x4F            PUSHLOCALB02
0xD341  0x1A 0x7C       PUSHIB 0x7C
0xD343  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD345  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD347  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD349  0x1A 0x7C       PUSHIB 0x7C
0xD34B  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD34D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD34F  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0xD352  0x4C            POPLOCALB00

                        // if (!isBitwise)                                      types.hs:336

0xD353  0x4E            PUSHLOCALB00
0xD354  0x2F 0x07       JNZB 0xD35B (+7)

                        // isBitwise = IsFlags(typeString);                     types.hs:338

0xD356  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD358  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xD35A  0x4C            POPLOCALB00

                        // return isBitwise;                                    types.hs:340

0xD35B  0x4E            PUSHLOCALB00
0xD35C  0x2B 0x06       RETRETB 0x06


// /source/compiler/types.hs:326
// ####  Types.IsOrdinalType(..)  ####                                          0x00D8

0xD35E  0x49            ENTER

                        // string valueTypes = "|byte|char|uint|int|+int|-int|string|long|float|";

0xD35F  0x24 0x02       SYSCALL0 0x02  // String.New
0xD361  0x37 0xF7 0x18  PUSHIW 0x18F7
0xD364  0x1A 0x30       PUSHIB 0x30
0xD366  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD368  0x5D            POPCOPYLOCALB00

                        // return valueTypes.Contains("|" + typeString + "|");

0xD369  0x4E            PUSHLOCALB00
0xD36A  0x1A 0x7C       PUSHIB 0x7C
0xD36C  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD36E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD370  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD372  0x1A 0x7C       PUSHIB 0x7C
0xD374  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD376  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD378  0x34 0x8B 0x01  CALLW 0x018B   // String.Contains
0xD37B  0x2B 0x04       RETRETB 0x04


// /source/compiler/types.hs:1212
// ####  Types.DynamicCastToType(..)  ####                                      0x00F6

0xD37D  0x49            ENTER

                        // if (CodeStream.CheckedBuild)                         types.hs:1213

0xD37E  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0xD381  0x2E 0x20       JZB 0xD3A1 (+32)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0));

0xD383  0x1A 0x27       PUSHIB 0x27
0xD385  0x44            PUSHI0
0xD386  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionPUSHI(0x19); // tList = 25

0xD389  0x1A 0x19       PUSHIB 0x19
0xD38B  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.GT);           types.hs:1220

0xD38E  0x1A 0x07       PUSHIB 0x07
0xD390  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJumpOffset(Instruction.JZB, byte(4));

0xD393  0x1A 0x2E       PUSHIB 0x2E
0xD395  0x1A 0x04       PUSHIB 0x04
0xD397  0x34 0x33 0x01  CALLW 0x0133   // CodeStream.AddInstructionJumpOffset

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x08)); // failed dynamic cast

0xD39A  0x1A 0x29       PUSHIB 0x29
0xD39C  0x1A 0x08       PUSHIB 0x08
0xD39E  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.CAST, byte(byte)); // cast top of stack to byte

0xD3A1  0x1A 0x51       PUSHIB 0x51
0xD3A3  0x1A 0x03       PUSHIB 0x03
0xD3A5  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    types.hs:1227

0xD3A8  0x4A            RET0


// /source/compiler/types.hs:1195
// ####  Types.DynamicCastToByte(..)  ####                                      0x00F5

0xD3A9  0x49            ENTER

                        // if (CodeStream.CheckedBuild)                         types.hs:1196

0xD3AA  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0xD3AD  0x2E 0x20       JZB 0xD3CD (+32)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0));

0xD3AF  0x1A 0x27       PUSHIB 0x27
0xD3B1  0x44            PUSHI0
0xD3B2  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionPUSHI(0x08);                types.hs:1202

0xD3B5  0x1A 0x08       PUSHIB 0x08
0xD3B7  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.BITSHR);

0xD3BA  0x1A 0x10       PUSHIB 0x10
0xD3BC  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJumpOffset(Instruction.JZB, byte(4));

0xD3BF  0x1A 0x2E       PUSHIB 0x2E
0xD3C1  0x1A 0x04       PUSHIB 0x04
0xD3C3  0x34 0x33 0x01  CALLW 0x0133   // CodeStream.AddInstructionJumpOffset

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x08)); // failed dynamic cast

0xD3C6  0x1A 0x29       PUSHIB 0x29
0xD3C8  0x1A 0x08       PUSHIB 0x08
0xD3CA  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstruction(Instruction.CAST, byte(byte)); // cast top of stack to byte

0xD3CD  0x1A 0x51       PUSHIB 0x51
0xD3CF  0x1A 0x03       PUSHIB 0x03
0xD3D1  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    types.hs:1210

0xD3D4  0x4A            RET0


// /source/compiler/types.hs:1177
// ####  Types.DynamicCastIntToUInt(..)  ####                                   0x00F4

0xD3D5  0x49            ENTER

                        // if (CodeStream.CheckedBuild)                         types.hs:1178

0xD3D6  0x34 0x1B 0x01  CALLW 0x011B   // CodeStream.CheckedBuild_Get
0xD3D9  0x2E 0x20       JZB 0xD3F9 (+32)

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0));

0xD3DB  0x1A 0x27       PUSHIB 0x27
0xD3DD  0x44            PUSHI0
0xD3DE  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionPUSHI(0x0F);                types.hs:1184

0xD3E1  0x1A 0x0F       PUSHIB 0x0F
0xD3E3  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.BITSHR);

0xD3E6  0x1A 0x10       PUSHIB 0x10
0xD3E8  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionJumpOffset(Instruction.JZB, byte(4));

0xD3EB  0x1A 0x2E       PUSHIB 0x2E
0xD3ED  0x1A 0x04       PUSHIB 0x04
0xD3EF  0x34 0x33 0x01  CALLW 0x0133   // CodeStream.AddInstructionJumpOffset

                        // CodeStream.AddInstruction(Instruction.DIE, byte(0x08)); // failed dynamic cast

0xD3F2  0x1A 0x29       PUSHIB 0x29
0xD3F4  0x1A 0x08       PUSHIB 0x08
0xD3F6  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // 		CodeStream.AddInstruction(Instruction.CAST, byte(uint)); // cast top of stack to UInt

0xD3F9  0x1A 0x51       PUSHIB 0x51
0xD3FB  0x1A 0x04       PUSHIB 0x04
0xD3FD  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // }                                                    types.hs:1192

0xD400  0x4A            RET0


// /source/compiler/types.hs:1103
// ####  Types.RuntimeValueCast(..)  ####                                       0x00F2


                        // byte vt = Types.ToByte(castToType);                  types.hs:1104

0xD401  0x5F 0x01       ENTERB 0x01

                        // byte vt = Types.ToByte(castToType);                  types.hs:1104

0xD403  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD405  0x2C 0xDD       CALLB 0xDD     // Types.ToByte
0xD407  0x4C            POPLOCALB00

                        // CodeStream.AddInstruction(Instruction.DUP, byte(0)); // copy of expression result

0xD408  0x1A 0x27       PUSHIB 0x27
0xD40A  0x44            PUSHI0
0xD40B  0x34 0x37 0x01  CALLW 0x0137   // CodeStream.AddInstruction

                        // CodeStream.AddInstructionSysCall0("Types", "TypeOf");

0xD40E  0x37 0x4E 0x09  PUSHIW 0x094E
0xD411  0x1A 0x05       PUSHIB 0x05
0xD413  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD415  0x37 0x53 0x09  PUSHIW 0x0953
0xD418  0x1A 0x06       PUSHIB 0x06
0xD41A  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD41C  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // CodeStream.AddInstructionPUSHI(byte(variant));

0xD41F  0x1A 0x14       PUSHIB 0x14
0xD421  0x34 0x39 0x01  CALLW 0x0139   // CodeStream.AddInstructionPUSHI

                        // CodeStream.AddInstruction(Instruction.EQ);           // is it a variant?

0xD424  0x1A 0x05       PUSHIB 0x05
0xD426  0x34 0x36 0x01  CALLW 0x0136   // CodeStream.AddInstruction

                        // uint jumpValue = CodeStream.NextAddress;             types.hs:1113

0xD429  0x44            PUSHI0
0xD42A  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0xD42D  0x4D            POPLOCALB02

                        // CodeStream.AddInstructionJump(Instruction.JZB); // if not, jump past to valuetype

0xD42E  0x1A 0x2E       PUSHIB 0x2E
0xD430  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // CodeStream.AddInstructionSysCall0("Variant", "UnBox");

0xD433  0x37 0xCA 0x02  PUSHIW 0x02CA
0xD436  0x1A 0x07       PUSHIB 0x07
0xD438  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD43A  0x37 0x82 0x07  PUSHIW 0x0782
0xD43D  0x1A 0x05       PUSHIB 0x05
0xD43F  0x24 0x00       SYSCALL0 0x00  // String.NewFromConstant
0xD441  0x34 0x31 0x01  CALLW 0x0131   // CodeStream.AddInstructionSysCall0

                        // uint jumpEnd = CodeStream.NextAddress;               types.hs:1123

0xD444  0x44            PUSHI0
0xD445  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0xD448  0x1B 0x04       POPLOCALB 0x04 (BP+4)

                        // CodeStream.AddInstructionJump(Instruction.JB);

0xD44A  0x1A 0x30       PUSHIB 0x30
0xD44C  0x34 0x32 0x01  CALLW 0x0132   // CodeStream.AddInstructionJump

                        // uint valueAddress = CodeStream.NextAddress;

0xD44F  0x44            PUSHI0
0xD450  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0xD453  0x1B 0x06       POPLOCALB 0x06 (BP+6)

                        // CodeStream.PatchJump(jumpValue, valueAddress);

0xD455  0x4F            PUSHLOCALB02
0xD456  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD458  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // uint endAddress = CodeStream.NextAddress;            types.hs:1137

0xD45B  0x44            PUSHI0
0xD45C  0x34 0x1F 0x01  CALLW 0x011F   // CodeStream.NextAddress_Get
0xD45F  0x1B 0x08       POPLOCALB 0x08 (BP+8)

                        // CodeStream.PatchJump(jumpEnd, endAddress);           types.hs:1138

0xD461  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0xD464  0x34 0x2F 0x01  CALLW 0x012F   // CodeStream.PatchJump

                        // }                                                    types.hs:1139

0xD467  0x2A 0x0C       RETB 0x0C


// /source/compiler/types.hs:28
// ####  Types.EnumValue(..)  ####                                              0x00D1


                        // bool success = false;                                types.hs:29

0xD469  0x5F 0x03       ENTERB 0x03

                        // if (candidate.IndexOf('.', ref fDot))                types.hs:32

0xD46B  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD46D  0x1A 0x2E       PUSHIB 0x2E
0xD46F  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xD471  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xD474  0x2E 0x42       JZB 0xD4B6 (+66)

                        // if (candidate.LastIndexOf('.', ref sDot))            types.hs:34

0xD476  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD478  0x1A 0x2E       PUSHIB 0x2E
0xD47A  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xD47C  0x34 0x95 0x01  CALLW 0x0195   // String.LastIndexOf
0xD47F  0x2E 0x37       JZB 0xD4B6 (+55)

                        // if (fDot != sDot)                                    types.hs:36

0xD481  0x4F            PUSHLOCALB02
0xD482  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD484  0x06            NE
0xD485  0x2E 0x1B       JZB 0xD4A0 (+27)

                        // typeName = candidate.Substring(0, sDot);             types.hs:39

0xD487  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD489  0x44            PUSHI0
0xD48A  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD48C  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xD48E  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = candidate.Substring(sDot+1);             types.hs:40

0xD490  0x56 0xF8 0x04  PUSHLOCALBB 0x04F8
0xD493  0x45            PUSHI1
0xD494  0x00            ADD
0xD495  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xD497  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = IsEnum(typeName);                          types.hs:41

0xD499  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD49B  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xD49D  0x4C            POPLOCALB00

                        // }                                                    types.hs:42

0xD49E  0x30 0x18       JB 0xD4B6 (+24)

                        // typeName = candidate.Substring(0, fDot);             types.hs:46

0xD4A0  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD4A2  0x44            PUSHI0
0xD4A3  0x4F            PUSHLOCALB02
0xD4A4  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xD4A6  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = candidate.Substring(fDot+1);             types.hs:47

0xD4A8  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD4AA  0x4F            PUSHLOCALB02
0xD4AB  0x45            PUSHI1
0xD4AC  0x00            ADD
0xD4AD  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xD4AF  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = IsEnum(typeName);                          types.hs:48

0xD4B1  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD4B3  0x2C 0xEB       CALLB 0xEB     // Types.IsEnum
0xD4B5  0x4C            POPLOCALB00

                        // if (success)                                         types.hs:56

0xD4B6  0x4E            PUSHLOCALB00
0xD4B7  0x2E 0x21       JZB 0xD4D8 (+33)

                        // typeName = Symbols.QualifyEnum(typeName, currentNamespace);

0xD4B9  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD4BB  0x20 0x98       PUSHGLOBALB 0x98
0xD4BD  0x2C 0xA8       CALLB 0xA8     // Symbols.QualifyEnum
0xD4BF  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = typeName + "." + valueName;              types.hs:59

0xD4C1  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD4C3  0x1A 0x2E       PUSHIB 0x2E
0xD4C5  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD4C7  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD4C9  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xD4CB  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD4CD  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = Symbols.FindEnum(typeName, valueName, ref value);

0xD4CF  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD4D1  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xD4D3  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD4D5  0x2C 0x91       CALLB 0x91     // Symbols.FindEnum
0xD4D7  0x4C            POPLOCALB00

                        // return success;                                      types.hs:62

0xD4D8  0x4E            PUSHLOCALB00
0xD4D9  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/types.hs:66
// ####  Types.FlagsValue(..)  ####                                             0x00D2


                        // bool success = false;                                types.hs:67

0xD4DB  0x5F 0x03       ENTERB 0x03

                        // if (candidate.IndexOf('.', ref fDot))                types.hs:70

0xD4DD  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD4DF  0x1A 0x2E       PUSHIB 0x2E
0xD4E1  0x21 0x02       PUSHSTACKADDRB 0x02 (BP+2)
0xD4E3  0x34 0x8E 0x01  CALLW 0x018E   // String.IndexOf
0xD4E6  0x2E 0x42       JZB 0xD528 (+66)

                        // if (candidate.LastIndexOf('.', ref sDot))            types.hs:72

0xD4E8  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD4EA  0x1A 0x2E       PUSHIB 0x2E
0xD4EC  0x21 0x04       PUSHSTACKADDRB 0x04 (BP+4)
0xD4EE  0x34 0x95 0x01  CALLW 0x0195   // String.LastIndexOf
0xD4F1  0x2E 0x37       JZB 0xD528 (+55)

                        // if (fDot != sDot)                                    types.hs:74

0xD4F3  0x4F            PUSHLOCALB02
0xD4F4  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD4F6  0x06            NE
0xD4F7  0x2E 0x1B       JZB 0xD512 (+27)

                        // typeName = candidate.Substring(0, sDot);             types.hs:77

0xD4F9  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD4FB  0x44            PUSHI0
0xD4FC  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD4FE  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xD500  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = candidate.Substring(sDot+1);             types.hs:78

0xD502  0x56 0xF8 0x04  PUSHLOCALBB 0x04F8
0xD505  0x45            PUSHI1
0xD506  0x00            ADD
0xD507  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xD509  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = IsFlags(typeName);                         types.hs:79

0xD50B  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD50D  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xD50F  0x4C            POPLOCALB00

                        // }                                                    types.hs:80

0xD510  0x30 0x18       JB 0xD528 (+24)

                        // typeName = candidate.Substring(0, fDot);             types.hs:84

0xD512  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD514  0x44            PUSHI0
0xD515  0x4F            PUSHLOCALB02
0xD516  0x25 0x08       SYSCALL1 0x08  // String.Substring
0xD518  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = candidate.Substring(fDot+1);             types.hs:85

0xD51A  0x1C 0xF8       PUSHLOCALB 0xF8 (BP-8)
0xD51C  0x4F            PUSHLOCALB02
0xD51D  0x45            PUSHI1
0xD51E  0x00            ADD
0xD51F  0x24 0x08       SYSCALL0 0x08  // String.Substring
0xD521  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = IsFlags(typeName);                         types.hs:86

0xD523  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD525  0x2C 0xEC       CALLB 0xEC     // Types.IsFlags
0xD527  0x4C            POPLOCALB00

                        // if (success)                                         types.hs:94

0xD528  0x4E            PUSHLOCALB00
0xD529  0x2E 0x21       JZB 0xD54A (+33)

                        // typeName = Symbols.QualifyFlags(typeName, currentNamespace);

0xD52B  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD52D  0x20 0x98       PUSHGLOBALB 0x98
0xD52F  0x2C 0xA9       CALLB 0xA9     // Symbols.QualifyFlags
0xD531  0x58 0xFA       POPCOPYRELB 0xFA (BP-6)

                        // valueName = typeName + "." + valueName;              types.hs:97

0xD533  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD535  0x1A 0x2E       PUSHIB 0x2E
0xD537  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD539  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD53B  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xD53D  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD53F  0x58 0xFC       POPCOPYRELB 0xFC (BP-4)

                        // success = Symbols.FindFlags(typeName, valueName, ref value);

0xD541  0x1E 0xFA       PUSHRELB 0xFA (BP-6)
0xD543  0x1E 0xFC       PUSHRELB 0xFC (BP-4)
0xD545  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD547  0x2C 0x93       CALLB 0x93     // Symbols.FindFlags
0xD549  0x4C            POPLOCALB00

                        // return success;                                      types.hs:100

0xD54A  0x4E            PUSHLOCALB00
0xD54B  0x2B 0x0E       RETRETB 0x0E


// /source/compiler/types.hs:798
// ####  Types.QualifyFlags(..)  ####                                           0x00E7

0xD54D  0x49            ENTER

                        // return Symbols.QualifyFlags(identifier, currentNamespace);

0xD54E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD550  0x20 0x98       PUSHGLOBALB 0x98
0xD552  0x2C 0xA9       CALLB 0xA9     // Symbols.QualifyFlags
0xD554  0x2B 0x02       RETRETB 0x02


// /source/compiler/types.hs:802
// ####  Types.QualifyEnum(..)  ####                                            0x00E8

0xD556  0x49            ENTER

                        // return Symbols.QualifyEnum(identifier, currentNamespace);

0xD557  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD559  0x20 0x98       PUSHGLOBALB 0x98
0xD55B  0x2C 0xA8       CALLB 0xA8     // Symbols.QualifyEnum
0xD55D  0x2B 0x02       RETRETB 0x02


// /source/system/screen.hs:51
// ####  Screen.Print(..)  ####                                                 0x0039

0xD55F  0x49            ENTER

                        // Print(s, Color.MatrixGreen, Color.Black);            screen.hs:52

0xD560  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD562  0x34 0xE5 0x01  CALLW 0x01E5   // Color.MatrixGreen_Get
0xD565  0x34 0xCD 0x01  CALLW 0x01CD   // Color.Black_Get
0xD568  0x25 0x29       SYSCALL1 0x29  // Screen.Print

                        // }                                                    screen.hs:53

0xD56A  0x2A 0x02       RETB 0x02


// /source/system/byte.hs:4
// ####  Byte.ToString(..)  ####                                                0x0168


                        // int value;                                           byte.hs:5

0xD56C  0x5F 0x01       ENTERB 0x01

                        // value = int(this);                                   byte.hs:6

0xD56E  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD570  0x4C            POPLOCALB00

                        // return value.ToString();                             byte.hs:7

0xD571  0x4E            PUSHLOCALB00
0xD572  0x34 0x6A 0x01  CALLW 0x016A   // Int.ToString
0xD575  0x2B 0x04       RETRETB 0x04


// /source/system/byte.hs:10
// ####  Byte.ToHexString(..)  ####                                             0x0169


                        // int digit;                                           byte.hs:11

0xD577  0x5F 0x03       ENTERB 0x03

                        // string result;                                       byte.hs:14

0xD579  0x24 0x02       SYSCALL0 0x02  // String.New

                        // for (i = digits; i > 0; i--)                         byte.hs:15

0xD57B  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD57D  0x1B 0x04       POPLOCALB 0x04 (BP+4)
0xD57F  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD581  0x44            PUSHI0
0xD582  0x16            GTI
0xD583  0x2E 0x1F       JZB 0xD5A2 (+31)

                        // digit = this % 16;                                   byte.hs:17

0xD585  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD587  0x1A 0x10       PUSHIB 0x10
0xD589  0x04            MOD
0xD58A  0x4C            POPLOCALB00

                        // c = Char.ToHex(byte(digit));                         byte.hs:18

0xD58B  0x4E            PUSHLOCALB00
0xD58C  0x51 0x03       CAST 0x03
0xD58E  0x34 0x62 0x01  CALLW 0x0162   // Char.ToHex
0xD591  0x4D            POPLOCALB02

                        // String.BuildFront(ref result, c);                    byte.hs:19

0xD592  0x21 0x06       PUSHSTACKADDRB 0x06 (BP+6)
0xD594  0x4F            PUSHLOCALB02
0xD595  0x24 0xB5       SYSCALL0 0xB5  // String.BuildFront

                        // this = this / 16;                                    byte.hs:20

0xD597  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD599  0x1A 0x10       PUSHIB 0x10
0xD59B  0x02            DIV
0xD59C  0x1B 0xFC       POPLOCALB 0xFC (BP-4)

                        // }                                                    byte.hs:21

0xD59E  0x23 0x04       DECLOCALB 0x04 (BP+4)
0xD5A0  0x30 0xDF       JB 0xD57F (-33)

                        // return result;                                       byte.hs:22

0xD5A2  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD5A4  0x2B 0x0C       RETRETB 0x0C


// /source/system/char.hs:37
// ####  Char.ToDigit(..)  ####                                                 0x015F

0xD5A6  0x49            ENTER

                        // d = d + 48; // +0                                    char.hs:38

0xD5A7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD5A9  0x1A 0x30       PUSHIB 0x30
0xD5AB  0x00            ADD
0xD5AC  0x1B 0xFE       POPLOCALB 0xFE (BP-2)

                        // return char(d);                                      char.hs:39

0xD5AE  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD5B0  0x2B 0x02       RETRETB 0x02


// /source/compiler/tokens/parser.hs:181
// ####  Parser.Consume(..)  ####                                               0x0081

0xD5B2  0x49            ENTER

                        // Consume(consumeType, "", message);                   parser.hs:182

0xD5B3  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD5B5  0x24 0x02       SYSCALL0 0x02  // String.New
0xD5B7  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD5B9  0x2C 0x82       CALLB 0x82     // Parser.Consume

                        // }                                                    parser.hs:183

0xD5BB  0x2A 0x04       RETB 0x04


// /source/compiler/symbols.hs:645
// ####  Symbols.QualifyEnum(..)  ####                                          0x00A8

0xD5BD  0x49            ENTER

                        // if (!name.Contains('.'))                             symbols.hs:646

0xD5BE  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD5C0  0x1A 0x2E       PUSHIB 0x2E
0xD5C2  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xD5C5  0x32 0x6B 0x00  JNZW 0xD630 (+107)

                        // string candidate = currentNamespace + "." + name;

0xD5C8  0x24 0x02       SYSCALL0 0x02  // String.New
0xD5CA  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD5CC  0x1A 0x2E       PUSHIB 0x2E
0xD5CE  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD5D0  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD5D2  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD5D4  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD5D6  0x5D            POPCOPYLOCALB00

                        // if (eIndex.Contains(candidate))                      symbols.hs:651

0xD5D7  0x20 0x7A       PUSHGLOBALB 0x7A
0xD5D9  0x4E            PUSHLOCALB00
0xD5DA  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD5DC  0x2E 0x09       JZB 0xD5E5 (+9)

                        // name = candidate;                                    symbols.hs:653

0xD5DE  0x4E            PUSHLOCALB00
0xD5DF  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:654

0xD5E1  0x28 0x02       DECSP 0x02
0xD5E3  0x30 0x4D       JB 0xD630 (+77)

                        // char f = name[0];                                    symbols.hs:656

0xD5E5  0x44            PUSHI0
0xD5E6  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD5E8  0x44            PUSHI0
0xD5E9  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xD5EB  0x4D            POPLOCALB02

                        // if (f.IsUpper())                                     symbols.hs:657

0xD5EC  0x4F            PUSHLOCALB02
0xD5ED  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xD5F0  0x2E 0x3E       JZB 0xD62E (+62)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:659

0xD5F2  0x20 0x8C       PUSHGLOBALB 0x8C
0xD5F4  0x44            PUSHI0
0xD5F5  0x44            PUSHI0
0xD5F6  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD5F8  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD5FA  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xD5FC  0x05            EQ
0xD5FD  0x2F 0x2F       JNZB 0xD62C (+47)
0xD5FF  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0xD602  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD604  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (nameSpace == currentNamespace)                   symbols.hs:661

0xD606  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0xD609  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD60B  0x2E 0x1D       JZB 0xD628 (+29)

                        // candidate = nameSpace + "." + name;                  symbols.hs:665

0xD60D  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD60F  0x1A 0x2E       PUSHIB 0x2E
0xD611  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD613  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD615  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD617  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD619  0x5D            POPCOPYLOCALB00

                        // if (eIndex.Contains(candidate))                      symbols.hs:666

0xD61A  0x20 0x7A       PUSHGLOBALB 0x7A
0xD61C  0x4E            PUSHLOCALB00
0xD61D  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD61F  0x2E 0x09       JZB 0xD628 (+9)

                        // name = candidate;                                    symbols.hs:668

0xD621  0x4E            PUSHLOCALB00
0xD622  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:669

0xD624  0x28 0x06       DECSP 0x06
0xD626  0x30 0x08       JB 0xD62E (+8)

                        // }                                                    symbols.hs:671

0xD628  0x22 0x08       INCLOCALB 0x08 (BP+8)
0xD62A  0x30 0xCC       JB 0xD5F6 (-52)
0xD62C  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:673

0xD62E  0x28 0x04       DECSP 0x04

                        // return name;                                         symbols.hs:676

0xD630  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD632  0x2B 0x04       RETRETB 0x04


// /source/compiler/symbols.hs:680
// ####  Symbols.QualifyFlags(..)  ####                                         0x00A9

0xD634  0x49            ENTER

                        // if (!name.Contains('.'))                             symbols.hs:681

0xD635  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD637  0x1A 0x2E       PUSHIB 0x2E
0xD639  0x34 0x8A 0x01  CALLW 0x018A   // String.Contains
0xD63C  0x32 0x6B 0x00  JNZW 0xD6A7 (+107)

                        // string candidate = currentNamespace + "." + name;

0xD63F  0x24 0x02       SYSCALL0 0x02  // String.New
0xD641  0x1C 0xFE       PUSHLOCALB 0xFE (BP-2)
0xD643  0x1A 0x2E       PUSHIB 0x2E
0xD645  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD647  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD649  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD64B  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD64D  0x5D            POPCOPYLOCALB00

                        // if (flIndex.Contains(candidate))                     symbols.hs:686

0xD64E  0x20 0x80       PUSHGLOBALB 0x80
0xD650  0x4E            PUSHLOCALB00
0xD651  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD653  0x2E 0x09       JZB 0xD65C (+9)

                        // name = candidate;                                    symbols.hs:688

0xD655  0x4E            PUSHLOCALB00
0xD656  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:689

0xD658  0x28 0x02       DECSP 0x02
0xD65A  0x30 0x4D       JB 0xD6A7 (+77)

                        // char f = name[0];                                    symbols.hs:691

0xD65C  0x44            PUSHI0
0xD65D  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD65F  0x44            PUSHI0
0xD660  0x24 0x0A       SYSCALL0 0x0A  // String.GetChar
0xD662  0x4D            POPLOCALB02

                        // if (f.IsUpper())                                     symbols.hs:692

0xD663  0x4F            PUSHLOCALB02
0xD664  0x34 0x5C 0x01  CALLW 0x015C   // Char.IsUpper
0xD667  0x2E 0x3E       JZB 0xD6A5 (+62)

                        // foreach (var nameSpace in nameSpaces)                symbols.hs:694

0xD669  0x20 0x8C       PUSHGLOBALB 0x8C
0xD66B  0x44            PUSHI0
0xD66C  0x44            PUSHI0
0xD66D  0x1C 0x04       PUSHLOCALB 0x04 (BP+4)
0xD66F  0x24 0x10       SYSCALL0 0x10  // List.Length_Get
0xD671  0x1C 0x08       PUSHLOCALB 0x08 (BP+8)
0xD673  0x05            EQ
0xD674  0x2F 0x2F       JNZB 0xD6A3 (+47)
0xD676  0x56 0x04 0x08  PUSHLOCALBB 0x0804
0xD679  0x24 0x13       SYSCALL0 0x13  // List.GetItem
0xD67B  0x57 0x06       POPCOPYLOCALB 0x06 (BP+6)

                        // if (nameSpace == currentNamespace)                   symbols.hs:696

0xD67D  0x56 0x06 0xFE  PUSHLOCALBB 0xFE06
0xD680  0x24 0x05       SYSCALL0 0x05  // String.Compare
0xD682  0x2E 0x1D       JZB 0xD69F (+29)

                        // candidate = nameSpace + "." + name;                  symbols.hs:700

0xD684  0x1C 0x06       PUSHLOCALB 0x06 (BP+6)
0xD686  0x1A 0x2E       PUSHIB 0x2E
0xD688  0x25 0x00       SYSCALL1 0x00  // String.NewFromConstant
0xD68A  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD68C  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD68E  0x24 0x03       SYSCALL0 0x03  // String.Append
0xD690  0x5D            POPCOPYLOCALB00

                        // if (flIndex.Contains(candidate))                     symbols.hs:701

0xD691  0x20 0x80       PUSHGLOBALB 0x80
0xD693  0x4E            PUSHLOCALB00
0xD694  0x24 0x1C       SYSCALL0 0x1C  // Dictionary.Contains
0xD696  0x2E 0x09       JZB 0xD69F (+9)

                        // name = candidate;                                    symbols.hs:703

0xD698  0x4E            PUSHLOCALB00
0xD699  0x57 0xFC       POPCOPYLOCALB 0xFC (BP-4)

                        // break;                                               symbols.hs:704

0xD69B  0x28 0x06       DECSP 0x06
0xD69D  0x30 0x08       JB 0xD6A5 (+8)

                        // }                                                    symbols.hs:706

0xD69F  0x22 0x08       INCLOCALB 0x08 (BP+8)
0xD6A1  0x30 0xCC       JB 0xD66D (-52)
0xD6A3  0x28 0x06       DECSP 0x06

                        // break;                                               symbols.hs:708

0xD6A5  0x28 0x04       DECSP 0x04

                        // return name;                                         symbols.hs:711

0xD6A7  0x1C 0xFC       PUSHLOCALB 0xFC (BP-4)
0xD6A9  0x2B 0x04       RETRETB 0x04
